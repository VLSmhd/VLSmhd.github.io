<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VLS_Blog</title>
  
  <subtitle>starry sky</subtitle>
  <link href="https://vlsmhd.github.io/atom.xml" rel="self"/>
  
  <link href="https://vlsmhd.github.io/"/>
  <updated>2024-07-14T14:03:00.654Z</updated>
  <id>https://vlsmhd.github.io/</id>
  
  <author>
    <name>Vlong_shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>显卡知识</title>
    <link href="https://vlsmhd.github.io/2024/07/14/%E6%98%BE%E5%8D%A1%E7%9F%A5%E8%AF%86/"/>
    <id>https://vlsmhd.github.io/2024/07/14/%E6%98%BE%E5%8D%A1%E7%9F%A5%E8%AF%86/</id>
    <published>2024-07-14T14:02:59.346Z</published>
    <updated>2024-07-14T14:03:00.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游戏性能相关">游戏性能相关</h1><figure><imgsrc="C:\Users\LEGION\AppData\Roaming\Typora\typora-user-images\image-20240714220234981.png"alt="游戏性能决定因素" /><figcaption aria-hidden="true">游戏性能决定因素</figcaption></figure><ul><li>cuda数</li><li>架构</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;游戏性能相关&quot;&gt;游戏性能相关&lt;/h1&gt;
&lt;figure&gt;
&lt;img
src=&quot;C:\Users\LEGION\AppData\Roaming\Typora\typora-user-images\image-20240714220234981.png&quot;
al</summary>
      
    
    
    
    <category term="硬件" scheme="https://vlsmhd.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="显卡" scheme="https://vlsmhd.github.io/categories/%E7%A1%AC%E4%BB%B6/%E6%98%BE%E5%8D%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>显示屏参数</title>
    <link href="https://vlsmhd.github.io/2024/07/13/%E6%98%BE%E7%A4%BA%E5%B1%8F%E5%8F%82%E6%95%B0/"/>
    <id>https://vlsmhd.github.io/2024/07/13/%E6%98%BE%E7%A4%BA%E5%B1%8F%E5%8F%82%E6%95%B0/</id>
    <published>2024-07-12T16:41:23.059Z</published>
    <updated>2024-07-13T15:42:15.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="宽高比">宽高比</h1><ul><li>16:9：标准</li><li>4:3</li><li>16:10</li><li>带鱼屏：21:9、32:9<ul><li>看电影</li><li>玩单机</li></ul></li></ul><h1 id="分辨率">分辨率</h1><p>定义：横向纵向有多少像素点，16 * 9，横向16像素点，纵向9像素点。</p><p>常见市面分辨率：</p><figure><imgsrc="C:\Users\LEGION\AppData\Roaming\Typora\typora-user-images\image-20240712234939974.png"alt="image-20240712234939974" /><figcaption aria-hidden="true">image-20240712234939974</figcaption></figure><h1 id="面板种类">面板种类</h1><figure><imgsrc="C:\Users\LEGION\AppData\Roaming\Typora\typora-user-images\image-20240712235403347.png"alt="image-20240712235403347" /><figcaption aria-hidden="true">image-20240712235403347</figcaption></figure><h1 id="直曲屏">直曲屏</h1><p>曲率</p><ul><li>1000r</li><li>1500r</li><li>1800r</li></ul><h1 id="刷新率">刷新率</h1><p>帧率（FPS）：1s包含的帧数</p><p>刷新率 ：显示器每秒刷新帧数 单位：赫兹hz</p><p>常规刷新率：60、70hz</p><p>高刷：100、120、144、155、165、200、240、360</p><h1 id="响应时间">响应时间</h1><p>定义：单个像素点色彩转换的时间</p><h1 id="g-sync-and-freesync">G-sync and Freesync</h1><p>显卡的效率比显示屏快，会出现页撕裂现象</p><p>解决：开垂直同步</p><p>显卡帧率比显示器刷新率高：</p><ol type="1"><li>锁帧</li></ol><h1 id="色域">色域</h1><p>专业人士考虑。</p><h1 id="三星g7配置">三星G7配置</h1><p>hdmi2.1</p><p>dp1.4：</p><h2 id="hdr设置">HDR设置</h2><p>笔记本默认不开启，需要设置显示器显示规则（只在大显示器上显示），随后在设置-&gt; 屏幕 -&gt; 使用HDR显示（没有HDR选项，进入window HD color）设置</p><p>快捷键开启 win + alt + b</p><h1 id="k显示屏常见问题">4k显示屏常见问题</h1><h2 id="p视频观看模糊">1080p视频观看模糊</h2><p>解决方案1：显卡设置 -&gt; 显示 -&gt; 调整桌面尺寸和位置 -&gt;更改显示器缩放为整数缩放</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;宽高比&quot;&gt;宽高比&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;16:9：标准&lt;/li&gt;
&lt;li&gt;4:3&lt;/li&gt;
&lt;li&gt;16:10&lt;/li&gt;
&lt;li&gt;带鱼屏：21:9、32:9
&lt;ul&gt;
&lt;li&gt;看电影&lt;/li&gt;
&lt;li&gt;玩单机&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;</summary>
      
    
    
    
    <category term="硬件" scheme="https://vlsmhd.github.io/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="显示器" scheme="https://vlsmhd.github.io/categories/%E7%A1%AC%E4%BB%B6/%E6%98%BE%E7%A4%BA%E5%99%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>OBCA学习</title>
    <link href="https://vlsmhd.github.io/2024/06/20/OBCA%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2024/06/20/OBCA%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-06-20T08:29:14.233Z</published>
    <updated>2024-06-23T11:26:03.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介">简介</h1><h2 id="工具体系">工具体系</h2><figure><img src="OBCA学习/image-20240620165435566.png" alt="OB工具" /><figcaption aria-hidden="true">OB工具</figcaption></figure><h3 id="数据迁移与评估工具">数据迁移与评估工具</h3><figure><img src="OBCA学习/image-20240620165549831.png"alt="数据迁移与评估工具" /><figcaption aria-hidden="true">数据迁移与评估工具</figcaption></figure><h1 id="使用">使用</h1><h1 id="应用开发">应用开发</h1><h1 id="运维管理">运维管理</h1><h1 id="集群架构">集群架构</h1><h2 id="基本概念">基本概念</h2><figure><img src="OBCA学习/image-20240621113723888.png" alt="系统架构" /><figcaption aria-hidden="true">系统架构</figcaption></figure><figure><img src="OBCA学习/image-20240621113856592.png" alt="内部集群放大" /><figcaption aria-hidden="true">内部集群放大</figcaption></figure><p>自顶向下管理员，自底向上应用开发视角观察ob架构</p><figure><img src="OBCA学习/image-20240621114043211.png"alt="image-20240621114043211" /><figcaption aria-hidden="true">image-20240621114043211</figcaption></figure><h3 id="集群和可用区">集群和可用区</h3><p><strong>集群</strong>：包含多租户</p><ul><li>租户：</li><li>OBServer：OB在服务器上运行的单进程实例，使用本地文件存储数据、事务、redo日志等</li></ul><p><strong>可用区（Zone）：</strong>逻辑上概念，每个Zone都有一份数据副本</p><ul><li>部署方式：每个Zone可以部署到一个城市</li><li>数量：单机为1；分布式 &gt;=2；仲裁服务2或者4；大集群一般设置为奇数</li></ul><h3 id="集群扩缩容">集群扩缩容</h3><p>相比单机数据库具有在线扩缩容特性。</p><p><strong>可用区扩缩容</strong></p><figure><img src="OBCA学习/image-20240621162029011.png" alt="可用区扩缩容" /><figcaption aria-hidden="true">可用区扩缩容</figcaption></figure><p><strong>物理机扩缩容</strong></p><figure><img src="OBCA学习/image-20240621162037342.png"alt="可用区物理机扩缩容" /><figcaptionaria-hidden="true"><strong>可用区物理机扩缩容</strong></figcaption></figure><h3 id="多租户架构">多租户架构</h3><p><strong>租户</strong>：逻辑概念，相当于传统数据库的 “实例”，是数据库对象的容器，也是资源的容器</p><ul><li>OB资源分配的单位</li><li>租户独占资源配额，类似操作系统进程</li></ul><p>有如下特性（进行一系列单机数据库内能执行的操作）：</p><ul><li>创建自己的用户</li><li>操作数据库</li><li>拥有自己的information_schema 系统数据库和视图</li><li>拥有独立系统变量</li><li>选择mysql、oracle兼容模式</li></ul><figure><img src="OBCA学习/image-20240621162717001.png"alt="image-20240621162717001" /><figcaption aria-hidden="true">image-20240621162717001</figcaption></figure><h4 id="租户分类">租户分类</h4><figure><img src="OBCA学习/image-20240621182218962.png" alt="租户分类" /><figcaption aria-hidden="true">租户分类</figcaption></figure><p><strong>系统租户</strong></p><p>系统默认创建的租户，与集群的生命周期一致，管理集群和所有租户的生命周期</p><p>数据私有，不支持主备集群物理同步和物理备份恢复</p><p><strong>用户租户</strong></p><p>用户自创租户，提供完整数据库功能。</p><p><strong>Meta租户</strong></p><p>和用户租户一一对应，每创建用户租户就创建Meta租户，生命周期也是一致。</p><p>存储管理用户租户的集群私有数据。</p><figure><img src="OBCA学习/image-20240621183456227.png"alt="不同租户创建规范" /><figcaption aria-hidden="true">不同租户创建规范</figcaption></figure><h4 id="租户资源分配">租户资源分配</h4><p><strong>资源规格</strong></p><p>定义物理资源的大小，包括CPU、内存、磁盘等。创建资源池时需要指定规格。</p><p><strong>资源单元</strong></p><p>租户在observer上的容器，可以看作轻量级虚拟机，是一系列资源的集合，用来描述OBServer上的可用资源</p><p><strong>资源池</strong></p><p>包含多个unit，是资源分配的基本单位。</p><figure><img src="OBCA学习/image-20240621184211959.png" alt="资源分配案例" /><figcaption aria-hidden="true">资源分配案例</figcaption></figure><h4 id="租户扩缩容">租户扩缩容</h4><p><strong>水平扩缩容</strong>：增加资源unit个数</p><figure><img src="OBCA学习/image-20240622145006800.png" alt="租户水平扩缩容" /><figcaption aria-hidden="true">租户水平扩缩容</figcaption></figure><p><strong>垂直扩缩容</strong>：增加每个unit的容量</p><figure><img src="OBCA学习/image-20240622145034130.png" alt="租户垂直扩缩容" /><figcaption aria-hidden="true">租户垂直扩缩容</figcaption></figure><h3 id="副本日志流及paxos协议">副本、日志流及Paxos协议</h3><p><strong>副本与角色</strong>：分布式系统，数据分为主从副本节点，保证数据高可用、安全。</p><ul><li>主副本节点：支持强一致性读写</li><li>从副本节点：支持弱一致性读</li></ul><p><strong>日志流</strong>：各副本之间数据同步是通过同步事务日志来实现的。每个租户在同一台OBServer下的所有leader分区写日志，</p><p><strong>Paxos协议</strong></p><h2 id="路由与负载均衡">路由与负载均衡</h2><h3 id="访问代理odp">访问代理ODP</h3><p>OB数据库代理ODP（OceanBase DataProxy），接收用户发送的SQL请求，并将请求转发至最佳目标OBServer结点。有如下功能：</p><ul><li>反向代理</li><li>状态感知：探活OBServer</li><li>高性能</li><li>高可用</li></ul><p><img src="OBCA学习/image-20240623151958396.png" alt="ODP架构" style="zoom:67%;" /></p><h3 id="节点间路由">节点间路由</h3><p>OB集群中，每个OBServer既是计算节点也是存储节点。用户编写SQL被一台OBServer接收后，会通过分布式优化器解析SQL。</p><p><img src="OBCA学习/image-20240623153908303.png" alt="SQL执行案例-节点间的路由状况" style="zoom:80%;" /></p><p><strong>远程访问</strong>：OBS1接收SQL，发现数据在OBS2</p><ol type="1"><li>SQL执行发到OBS2</li><li>OBS2执行SQL，返回结果给OBS1</li><li>OBS1将结果加工返回给用户（或者ODP）</li></ol><p><strong>分布式访问</strong>：OBS1接收SQL，发现数据在OBS1、OBS2、OBS3上</p><ol type="1"><li>OBS1将相对应的SQL执行发到OBS1、OBS2、OBS3上</li><li>参与执行SQL的节点，返回结果给OBS1</li><li>OBS1将结果加工返回给用户（或者ODP）</li></ol><h3 id="业务路由到特定的zone">业务路由到特定的Zone</h3><p>多中心架构下，由于业务需要，一些数据流量需要聚集在<strong>某些Zone</strong>上，这就需要设置租户的PrimaryZone</p><ul><li>在Primary Zone集合里分配Leader节点：PrimaryZone是一系列Zone的集合，表示方式如下：<ul><li>分号分割：左边优先级 &gt; 右边优先级</li><li>逗号分割：两边优先级相同</li></ul></li></ul><figure><img src="OBCA学习/image-20240623154804566.png"alt="汇聚流量到一个Zone" /><figcaption aria-hidden="true">汇聚流量到一个Zone</figcaption></figure><figure><img src="OBCA学习/image-20240623154844918.png"alt="汇聚流量到两个Zone" /><figcaption aria-hidden="true">汇聚流量到两个Zone</figcaption></figure><figure><img src="OBCA学习/image-20240623155014005.png"alt="汇聚流量到三个Zone" /><figcaption aria-hidden="true">汇聚流量到三个Zone</figcaption></figure><h3 id="表组">表组</h3><p>会出现跨节点访问的情况如下：</p><ul><li>Primary Zone 里的Zone个数多于一个</li><li>只有一个Zone，但有多个OBServer</li></ul><p>为了保证响应能力，尽量单节点访问处理，利用表组功能实现。</p><p><strong>表组</strong>：逻辑概念，表示一组表的集合。通过定义表组，控制一组表在物理存储上的邻近关系。</p><p>新版本根据SHARDING属性，可以灵活的将不同分区的表加入。</p><ul><li>None：<ul><li>汇聚规则：表组内的所有表的所有分区聚集在同一个机器</li><li>分区要求：不限制分区类型和方式</li></ul></li><li>partition：<ul><li>汇聚规则：表组内每一张表的数据按一级分区打散，相同的一级分区号聚集在同一台机器上：如果是二级分区表，则一级分区下的所有二级分区聚集在一起。</li><li>分区要求：表组内的表要么全是分区表，要么全是非分区表。如果都是分区表，只要求一级分区的分区方式相同。</li></ul></li><li>adaptive：<ul><li>汇聚规则：表组内每一张表的数据根据自适应方式打散。如果都是非分区表，则全部聚集在同一台机器上；如果都是一级分区表，则按一级分区打散，相同的一级分区号聚集在同一台机器上；如果都是是二级分区表，则按每个一级分区下的二级分区打散，相同的二级分区号聚集在同一台机器上。</li><li>分区要求：表组内的表要么是分区表，要么是非分区表。如果是分区表，要求分区方式完全相同。</li></ul></li></ul><h3 id="rootservice总控服务">RootService总控服务</h3><p>提供资源管理、容灾、负载均衡、schema管理等功能。该服务也采用多副本高可用架构。</p><figure><img src="OBCA学习/image-20240623191050244.png" alt="RootService架构" /><figcaption aria-hidden="true">RootService架构</figcaption></figure><h4 id="负载均衡">负载均衡</h4><p><strong>水平扩缩容场景</strong></p><ul><li>租户水平扩容</li><li>修改租户Primary Zone</li></ul><p><strong>数据动态变化场景</strong></p><ul><li>租户内创建删除分区</li><li>定期生成均衡计划，平衡每个服务器的数据量服务量</li></ul><figure><img src="OBCA学习/image-20240623192501850.png" alt="RS负载均衡" /><figcaption aria-hidden="true">RS负载均衡</figcaption></figure><h2 id="高可用部署架构">高可用部署架构</h2><h1 id="底层引擎">底层引擎</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;h2 id=&quot;工具体系&quot;&gt;工具体系&lt;/h2&gt;
&lt;figure&gt;
&lt;img src=&quot;OBCA学习/image-20240620165435566.png&quot; alt=&quot;OB工具&quot; /&gt;
&lt;figcaption aria-hidden</summary>
      
    
    
    
    <category term="数据库" scheme="https://vlsmhd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="OceanBase" scheme="https://vlsmhd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/OceanBase/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring深度学习</title>
    <link href="https://vlsmhd.github.io/2024/03/31/Spring%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2024/03/31/Spring%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-03-31T11:41:11.573Z</published>
    <updated>2024-04-02T14:02:05.230Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码解析">源码解析</h1><h2 id="ioc">IOC</h2><p>IOC：控制反转，由spring统一管理对象的方式替代我们之前手动new对象的形式，具体的实现原理，参考多篇文章总结如下。</p><p>核心内容：创建 Bean 容器，一个是初始化 Bean</p><h3 id="启动流程">启动流程</h3><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:application.yaml&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>启动类继承图：</p><p><img src="Spring深度学习/image-20240401142806928.png" alt="启动类继承图" style="zoom: 67%;" /></p><p><strong>1、<code>FileSystemXmlApplicationContext</code></strong>的构造函数需要一个 xml 配置文件在系统中的路径，其他和<code>ClassPathXmlApplicationContext</code> 基本上一样。</p><p><strong>2、<code>AnnotationConfigApplicationContext</code></strong>是基于注解来使用的，它不需要配置文件，采用 java配置类和各种注解来配置，是比较简单的方式，也是大势所趋吧。</p><h3 id="beanfactory简介">BeanFactory简介</h3><p><code>BeanFactory</code>：生产Bean的工厂，前面的<code>ApplicationContext</code>其实是继承自<code>BeanFactory</code>，从继承的角度来说，context也是一个工厂</p><figure><img src="Spring深度学习/2.png" alt="BeanFactory继承图" /><figcaption aria-hidden="true">BeanFactory继承图</figcaption></figure><ol type="1"><li><p><code>ApplicationContext</code> 继承了<code>ListableBeanFactory</code>： <code>Listable</code>的意思就是，通过这个接口，我们可以获取多个Bean，大家看源码会发现，最顶层 BeanFactory 接口的方法都是获取单个 Bean的。</p></li><li><p><code>ApplicationContext</code> 继承了<code>HierarchicalBeanFactory</code>，Hierarchical单词本身已经能说明问题了，也就是说我们可以在应用中起多个BeanFactory，然后可以将各个 BeanFactory 设置为父子关系。</p></li><li><p><code>AutowireCapableBeanFactory</code> ： Autowire是用来自动装配 Bean 用的，但是仔细看上图，ApplicationContext并没有继承它，而是使用<strong>组合</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">EnvironmentCapable</span>, ListableBeanFactory, HierarchicalBeanFactory, MessageSource, ApplicationEventPublisher, ResourcePatternResolver &#123;</span><br><span class="line">    String <span class="title function_">getId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getApplicationName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">getDisplayName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getStartupDate</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ApplicationContext <span class="title function_">getParent</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//组合使用</span></span><br><span class="line">    AutowireCapableBeanFactory <span class="title function_">getAutowireCapableBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ConfigurableListableBeanFactory</code>也是一个特殊的接口：它继承了第二层所有的三个接口，而 ApplicationContext没有。这点之后会用到。</p></li></ol><h3 id="从启动中探索源码">从启动中探索源码</h3><p>根据上面启动spring容器的代码，我们以xml最基础的形式的启动类context开始剖析。</p><p><strong><code>ClassPathXmlApplicationContext</code></strong></p><p><strong>构造方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(ApplicationContext parent)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(parent);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="type">boolean</span> refresh, ApplicationContext parent)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">       <span class="built_in">super</span>(parent);</span><br><span class="line">       <span class="comment">// 根据提供的路径，处理成配置文件数组(以分号、逗号、空格、tab、换行符分割)</span></span><br><span class="line">       <span class="built_in">this</span>.setConfigLocations(configLocations);</span><br><span class="line">       <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">           <span class="comment">//重点</span></span><br><span class="line">           <span class="built_in">this</span>.refresh();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setConfigLocations</span><span class="params">(String... locations)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (locations != <span class="literal">null</span>) &#123;</span><br><span class="line">           Assert.noNullElements(locations, <span class="string">&quot;Config locations must not be null&quot;</span>);</span><br><span class="line">           <span class="built_in">this</span>.configLocations = <span class="keyword">new</span> <span class="title class_">String</span>[locations.length];</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; locations.length; ++i) &#123;</span><br><span class="line">               <span class="built_in">this</span>.configLocations[i] = <span class="built_in">this</span>.resolvePath(locations[i]).trim();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.configLocations = <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><code>ApplicationContext</code> 建立起来以后，可以通过调用 refresh()这个方法重建，refresh() 会将原来的 <code>ApplicationContext</code>销毁，然后再重新执行一次初始化操作。</li></ul><p><strong>Refresh方法</strong></p><p><code>AbstractApplicationContext</code>的Refresh方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">    <span class="comment">//容器只有一个，防止并发创建、销毁</span></span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">//1. 创建bean容器</span></span><br><span class="line">        <span class="comment">//1.1 准备工作，记录启动时间、标记启动状态等</span></span><br><span class="line">        <span class="built_in">this</span>.prepareRefresh();</span><br><span class="line">        <span class="comment">//1.2 这步比较关键，这步完成后，配置文件就会解析成一个个 Bean 定义，注册到 BeanFactory 中，</span></span><br><span class="line">  <span class="comment">// 当然，这里说的 Bean 还没有初始化，只是配置信息都提取出来了，</span></span><br><span class="line">  <span class="comment">// 注册也只是将这些信息都保存到了注册中心(说到底核心是一个 beanName-&gt; beanDefinition 的 map)</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="built_in">this</span>.obtainFreshBeanFactory();</span><br><span class="line">        <span class="comment">//2. 准备bean容器 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean</span></span><br><span class="line">        <span class="built_in">this</span>.prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 【这里需要知道 BeanFactoryPostProcessor 这个知识点，Bean 如果实现了此接口，</span></span><br><span class="line">     <span class="comment">// 那么在容器初始化以后，Spring 会负责调用里面的 postProcessBeanFactory 方法。】</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 这里是提供给子类的扩展点，到这里的时候，所有的 Bean 都加载、注册完成了，但是都还没有初始化</span></span><br><span class="line">     <span class="comment">// 具体的子类可以在这步的时候添加一些特殊的 BeanFactoryPostProcessor 的实现类或做点什么事</span></span><br><span class="line">     postProcessBeanFactory(beanFactory);</span><br><span class="line">     <span class="comment">// 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 方法</span></span><br><span class="line">     invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span></span><br><span class="line">     <span class="comment">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span></span><br><span class="line">     <span class="comment">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span></span><br><span class="line">     registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 初始化当前 ApplicationContext 的 MessageSource，国际化这里就不展开说了，不然没完没了了</span></span><br><span class="line">     initMessageSource();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 初始化当前 ApplicationContext 的事件广播器，这里也不展开了</span></span><br><span class="line">     initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 从方法名就可以知道，典型的模板方法(钩子方法)，</span></span><br><span class="line">     <span class="comment">// 具体的子类可以在这里初始化一些特殊的 Bean（在初始化 singleton beans 之前）</span></span><br><span class="line">     onRefresh();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 注册事件监听器，监听器需要实现 ApplicationListener 接口。这也不是我们的重点，过</span></span><br><span class="line">     registerListeners();</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 重点，重点，重点</span></span><br><span class="line">     <span class="comment">//3.  初始化所有的 singleton beans （lazy-init 的除外）</span></span><br><span class="line">     finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 最后，广播事件，ApplicationContext 初始化完成</span></span><br><span class="line">     finishRefresh();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (BeansException var9) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.warn(<span class="string">&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot;</span> + var9);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.destroyBeans();</span><br><span class="line">            <span class="built_in">this</span>.cancelRefresh(var9);</span><br><span class="line">            <span class="keyword">throw</span> var9;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="创建bean容器">1. 创建Bean容器</h4><h5 id="准备工作">1.1 准备工作</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareRefresh</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">// 记录启动时间，</span></span><br><span class="line">   <span class="comment">// 将 active 属性设置为 true，closed 属性设置为 false，它们都是 AtomicBoolean 类型</span></span><br><span class="line">   <span class="built_in">this</span>.startupDate = System.currentTimeMillis();</span><br><span class="line">   <span class="built_in">this</span>.closed.set(<span class="literal">false</span>);</span><br><span class="line">   <span class="built_in">this</span>.active.set(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Refreshing &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize any placeholder property sources in the context environment</span></span><br><span class="line">   initPropertySources();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 校验 xml 配置文件</span></span><br><span class="line">   getEnvironment().validateRequiredProperties();</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.earlyApplicationEvents = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;ApplicationEvent&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建bean容器-1">1.2 创建Bean容器</h5><p>以下代码按<code>obtainFreshBeanFactory</code>方法内执行顺序推进方法流程。</p><p><code>AbstractApplicationContext.obtainFreshBeanFactory()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title function_">obtainFreshBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">//1. 关闭旧的 BeanFactory (如果有)，创建新的 BeanFactory，加载 Bean 定义、注册 Bean 等等</span></span><br><span class="line">   refreshBeanFactory();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2. 返回刚刚创建的 BeanFactory</span></span><br><span class="line">   <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> getBeanFactory();</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Bean factory for &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + beanFactory);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> beanFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractRefreshableApplicationContext.refreshBeanFactory()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="comment">//1.1 如果 ApplicationContext 中已经加载过 BeanFactory 了，销毁所有 Bean，关闭 BeanFactory</span></span><br><span class="line"><span class="comment">// 注意，应用中 BeanFactory 本来就是可以多个的，因为可以有多个ApplicationContext（多应用），每个</span></span><br><span class="line">    <span class="comment">// ApplicationContext 对应一个 BeanFactory </span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.hasBeanFactory()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.destroyBeans();</span><br><span class="line">        <span class="built_in">this</span>.closeBeanFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1.2 创建DefaultListableBeanFactory、设置序列化</span></span><br><span class="line">        <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="built_in">this</span>.createBeanFactory();</span><br><span class="line">        beanFactory.setSerializationId(<span class="built_in">this</span>.getId());</span><br><span class="line">        <span class="comment">//1.3 设置 BeanFactory 的两个配置属性：是否允许 Bean 覆盖、是否允许循环引用</span></span><br><span class="line">        <span class="built_in">this</span>.customizeBeanFactory(beanFactory);</span><br><span class="line">        <span class="comment">//1.4  加载 Bean 到 BeanFactory 中</span></span><br><span class="line">        <span class="built_in">this</span>.loadBeanDefinitions(beanFactory);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>.beanFactoryMonitor) &#123;</span><br><span class="line">            <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + <span class="built_in">this</span>.getDisplayName(), var5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>从继承的角度来说，<code>ApplicationContext</code> 继承自<code>BeanFactory</code>，不仅仅是实现类，其内部会实现一个实例化的<code>BeanFactory</code></p></li><li><p>为什么选择实例化<strong><code>DefaultListableBeanFactory</code></strong>：继承树已经告诉了我们答案，<code>ConfigurableListableBeanFactory</code>只有一个实现类 <code>DefaultListableBeanFactory</code>，而且实现类<code>DefaultListableBeanFactory</code> 还通过实现继承树右边的<code>AbstractAutowireCapableBeanFactory</code>通吃了右路。继承的全部的特性，那选择这个实例化没问题。</p></li></ul><p><code>AbstractRefreshableApplicationContext.customizeBeanFactory(DefaultListableBeanFactory beanFactory)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">customizeBeanFactory</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.allowBeanDefinitionOverriding != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//1.3.1 是否允许 Bean 定义覆盖</span></span><br><span class="line">      beanFactory.setAllowBeanDefinitionOverriding(<span class="built_in">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.allowCircularReferences != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//1.3.2 是否允许 Bean 间的循环依赖</span></span><br><span class="line">      beanFactory.setAllowCircularReferences(<span class="built_in">this</span>.allowCircularReferences);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="加载beandefinition">加载beanDefinition</h6><p><code>AbstractXmlApplicationContext.loadBeanDefinitions(DefaultListableBeanFactory beanFactory)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">   <span class="comment">//1. 给这个 BeanFactory 实例化一个 XmlBeanDefinitionReader</span></span><br><span class="line">   <span class="type">XmlBeanDefinitionReader</span> <span class="variable">beanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//2. Configure the bean definition reader with this context&#x27;s resource loading environment.</span></span><br><span class="line">   beanDefinitionReader.setEnvironment(<span class="built_in">this</span>.getEnvironment());</span><br><span class="line">   beanDefinitionReader.setResourceLoader(<span class="built_in">this</span>);</span><br><span class="line">   beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> <span class="title class_">ResourceEntityResolver</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3. 初始化 BeanDefinitionReader</span></span><br><span class="line">   initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">   <span class="comment">//4. 重点来了，继续往下</span></span><br><span class="line">   loadBeanDefinitions(beanDefinitionReader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后续调用的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">    Resource[] configResources = <span class="built_in">this</span>.getConfigResources();</span><br><span class="line">    <span class="keyword">if</span> (configResources != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.4.1</span></span><br><span class="line">        reader.loadBeanDefinitions(configResources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] configLocations = <span class="built_in">this</span>.getConfigLocations();</span><br><span class="line">    <span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//1.4.2</span></span><br><span class="line">        reader.loadBeanDefinitions(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面虽然有两个分支，不过第二个分支很快通过解析路径转换为 Resource 以后也会进到这里</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   Assert.notNull(resources, <span class="string">&quot;Resource array must not be null&quot;</span>);</span><br><span class="line">   <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="comment">// 注意这里是个 for 循环，也就是每个文件是一个 resource，这里的文件就是定义bean的xml文件</span></span><br><span class="line">   <span class="keyword">for</span> (Resource resource : resources) &#123;</span><br><span class="line">      <span class="comment">// 继续往下看</span></span><br><span class="line">      counter += loadBeanDefinitions(resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 最后返回 counter，表示总共加载了多少的 BeanDefinition</span></span><br><span class="line">   <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>XmlBeanDefinitionReader. 加载每个beanDefinitions</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> <span class="title class_">EncodedResource</span>(resource));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(EncodedResource encodedResource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   Assert.notNull(encodedResource, <span class="string">&quot;EncodedResource must not be null&quot;</span>);</span><br><span class="line">   <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      logger.info(<span class="string">&quot;Loading XML bean definitions from &quot;</span> + encodedResource.getResource());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 用一个 ThreadLocal 来存放配置文件资源</span></span><br><span class="line">   Set&lt;EncodedResource&gt; currentResources = <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.get();</span><br><span class="line">   <span class="keyword">if</span> (currentResources == <span class="literal">null</span>) &#123;</span><br><span class="line">      currentResources = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;EncodedResource&gt;(<span class="number">4</span>);</span><br><span class="line">      <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.set(currentResources);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (!currentResources.add(encodedResource)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;Detected cyclic loading of &quot;</span> + encodedResource + <span class="string">&quot; - check your import definitions!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> encodedResource.getResource().getInputStream();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">InputSource</span> <span class="variable">inputSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputSource</span>(inputStream);</span><br><span class="line">         <span class="keyword">if</span> (encodedResource.getEncoding() != <span class="literal">null</span>) &#123;</span><br><span class="line">            inputSource.setEncoding(encodedResource.getEncoding());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 核心部分是这里，往下面看</span></span><br><span class="line">         <span class="keyword">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">finally</span> &#123;</span><br><span class="line">         inputStream.close();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(</span><br><span class="line">            <span class="string">&quot;IOException parsing XML document from &quot;</span> + encodedResource.getResource(), ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      currentResources.remove(encodedResource);</span><br><span class="line">      <span class="keyword">if</span> (currentResources.isEmpty()) &#123;</span><br><span class="line">         <span class="built_in">this</span>.resourcesCurrentlyBeingLoaded.remove();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">doLoadBeanDefinitions</span><span class="params">(InputSource inputSource, Resource resource)</span></span><br><span class="line">      <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 将 xml 文件转换为 Document 对象</span></span><br><span class="line">      <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> doLoadDocument(inputSource, resource);</span><br><span class="line">      <span class="comment">// 继续</span></span><br><span class="line">      <span class="keyword">return</span> registerBeanDefinitions(doc, resource);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回值：返回从当前配置文件加载了多少数量的 Bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line">   <span class="type">BeanDefinitionDocumentReader</span> <span class="variable">documentReader</span> <span class="operator">=</span> createBeanDefinitionDocumentReader();</span><br><span class="line">   <span class="type">int</span> <span class="variable">countBefore</span> <span class="operator">=</span> getRegistry().getBeanDefinitionCount();</span><br><span class="line">   <span class="comment">// 这里</span></span><br><span class="line">   documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</span><br><span class="line">   <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultBeanDefinitionDocumentReader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DefaultBeanDefinitionDocumentReader 90</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.readerContext = readerContext;</span><br><span class="line">   logger.debug(<span class="string">&quot;Loading bean definitions&quot;</span>);</span><br><span class="line">   <span class="type">Element</span> <span class="variable">root</span> <span class="operator">=</span> doc.getDocumentElement();</span><br><span class="line">   <span class="comment">// 从 xml 根节点开始解析文件，单个文件转化为DOM树</span></span><br><span class="line">   doRegisterBeanDefinitions(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRegisterBeanDefinitions</span><span class="params">(Element root)</span> &#123;</span><br><span class="line">   <span class="comment">// BeanDefinitionParserDelegate 负责解析 Bean 定义，</span></span><br><span class="line">   <span class="comment">// 这里为什么要定义一个 parent? 看到后面就知道了，是递归问题，</span></span><br><span class="line">   <span class="comment">// 因为 &lt;beans /&gt; 内部是可以定义 &lt;beans /&gt; 的，所以这个方法的 root 其实不一定就是 xml 的根节点，也可以是嵌套在里面的 &lt;beans /&gt; 节点，从源码分析的角度，我们当做根节点就好了</span></span><br><span class="line">   <span class="type">BeanDefinitionParserDelegate</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="built_in">this</span>.delegate;</span><br><span class="line">   <span class="built_in">this</span>.delegate = createDelegate(getReaderContext(), root, parent);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      <span class="comment">// 这块说的是根节点 &lt;beans ... profile=&quot;dev&quot; /&gt; 中的 profile 是否是当前环境需要的，</span></span><br><span class="line">      <span class="comment">// 如果当前环境配置的 profile 不包含此 profile，那就直接 return 了，不对此 &lt;beans /&gt; 解析</span></span><br><span class="line">      <span class="comment">// 不熟悉 profile 为何物，不熟悉怎么配置 profile 读者的请移步附录区</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">profileSpec</span> <span class="operator">=</span> root.getAttribute(PROFILE_ATTRIBUTE);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</span><br><span class="line">         String[] specifiedProfiles = StringUtils.tokenizeToStringArray(</span><br><span class="line">               profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">         <span class="keyword">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">               logger.info(<span class="string">&quot;Skipped XML bean definition file due to specified profiles [&quot;</span> + profileSpec +</span><br><span class="line">                     <span class="string">&quot;] not matching: &quot;</span> + getReaderContext().getResource());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   preProcessXml(root); <span class="comment">// 钩子</span></span><br><span class="line">   <span class="comment">// 关键</span></span><br><span class="line">   parseBeanDefinitions(root, <span class="built_in">this</span>.delegate);</span><br><span class="line">   postProcessXml(root); <span class="comment">// 钩子</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.delegate = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// default namespace 涉及到的就四个标签 &lt;import /&gt;、&lt;alias /&gt;、&lt;bean /&gt; 和 &lt;beans /&gt;，</span></span><br><span class="line"><span class="comment">// 其他的属于 custom 的</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">      <span class="type">NodeList</span> <span class="variable">nl</span> <span class="operator">=</span> root.getChildNodes();</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">         <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> nl.item(i);</span><br><span class="line">         <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">            <span class="type">Element</span> <span class="variable">ele</span> <span class="operator">=</span> (Element) node;</span><br><span class="line">            <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">               <span class="comment">// 解析 default namespace 下面的几个元素</span></span><br><span class="line">               parseDefaultElement(ele, delegate);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 解析其他 namespace 的元素</span></span><br><span class="line">               delegate.parseCustomElement(ele);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      delegate.parseCustomElement(root);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只看关键的default</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseDefaultElement</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;import&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.importBeanDefinitionResource(ele);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;alias&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.processAliasRegistration(ele);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;bean&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.processBeanDefinition(ele, delegate);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (delegate.nodeNameEquals(ele, <span class="string">&quot;beans&quot;</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.doRegisterBeanDefinitions(ele);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只看processBeanDefinition，解析bean标签的</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">   <span class="comment">// 将 &lt;bean /&gt; 节点中的信息提取出来，然后封装到一个 BeanDefinitionHolder 中</span></span><br><span class="line">   <span class="type">BeanDefinitionHolder</span> <span class="variable">bdHolder</span> <span class="operator">=</span> delegate.parseBeanDefinitionElement(ele);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Register the final decorated instance.</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">&quot;Failed to register bean definition with name &#x27;&quot;</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">&quot;&#x27;&quot;</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Send registration event.</span></span><br><span class="line">      getReaderContext().fireComponentRegistered(<span class="keyword">new</span> <span class="title class_">BeanComponentDefinition</span>(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BeanDefinitionParserDelegate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BeanDefinitionHolder <span class="title function_">parseBeanDefinitionElement</span><span class="params">(Element ele)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> parseBeanDefinitionElement(ele, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> BeanDefinitionHolder <span class="title function_">parseBeanDefinitionElement</span><span class="params">(Element ele, BeanDefinition containingBean)</span> &#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> ele.getAttribute(ID_ATTRIBUTE);</span><br><span class="line">   <span class="type">String</span> <span class="variable">nameAttr</span> <span class="operator">=</span> ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class="line"></span><br><span class="line">   List&lt;String&gt; aliases = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 将 name 属性的定义按照 “逗号、分号、空格” 切分，形成一个 别名列表数组，</span></span><br><span class="line">   <span class="comment">// 当然，如果你不定义 name 属性的话，就是空的了</span></span><br><span class="line">   <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</span><br><span class="line">      String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</span><br><span class="line">      aliases.addAll(Arrays.asList(nameArr));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> id;</span><br><span class="line">   <span class="comment">// 如果没有指定id, 那么用别名列表的第一个名字作为beanName</span></span><br><span class="line">   <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</span><br><span class="line">      beanName = aliases.remove(<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;No XML &#x27;id&#x27; specified - using &#x27;&quot;</span> + beanName +</span><br><span class="line">               <span class="string">&quot;&#x27; as bean name and &quot;</span> + aliases + <span class="string">&quot; as aliases&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (containingBean == <span class="literal">null</span>) &#123;</span><br><span class="line">      checkNameUniqueness(beanName, aliases, ele);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 根据 &lt;bean ...&gt;...&lt;/bean&gt; 中的配置创建 BeanDefinition，然后把配置中的信息都设置到实例中,</span></span><br><span class="line">   <span class="comment">// 下面这行结束后，一个 BeanDefinition 实例就出来了。</span></span><br><span class="line">   <span class="type">AbstractBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> parseBeanDefinitionElement(ele, beanName, containingBean);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 到这里，整个 &lt;bean /&gt; 标签就算解析结束了，一个 BeanDefinition 就形成了。</span></span><br><span class="line">   <span class="keyword">if</span> (beanDefinition != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果都没有设置 id 和 name，那么此时的 beanName 就会为 null，进入下面这块代码产生</span></span><br><span class="line">      <span class="comment">// 如果读者不感兴趣的话，我觉得不需要关心这块代码，对本文源码分析来说，这些东西不重要</span></span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (containingBean != <span class="literal">null</span>) &#123;<span class="comment">// 按照我们的思路，这里 containingBean 是 null 的</span></span><br><span class="line">               beanName = BeanDefinitionReaderUtils.generateBeanName(</span><br><span class="line">                     beanDefinition, <span class="built_in">this</span>.readerContext.getRegistry(), <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="comment">// 如果我们不定义 id 和 name，那么我们引言里的那个例子：</span></span><br><span class="line">               <span class="comment">//   1. beanName 为：com.javadoop.example.MessageServiceImpl#0</span></span><br><span class="line">               <span class="comment">//   2. beanClassName 为：com.javadoop.example.MessageServiceImpl</span></span><br><span class="line"></span><br><span class="line">               beanName = <span class="built_in">this</span>.readerContext.generateBeanName(beanDefinition);</span><br><span class="line"></span><br><span class="line">               <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> beanDefinition.getBeanClassName();</span><br><span class="line">               <span class="keyword">if</span> (beanClassName != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                     beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</span><br><span class="line">                     !<span class="built_in">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</span><br><span class="line">                  <span class="comment">// 把 beanClassName 设置为 Bean 的别名</span></span><br><span class="line">                  aliases.add(beanClassName);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">&quot;Neither XML &#x27;id&#x27; nor &#x27;name&#x27; specified - &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;using generated bean name [&quot;</span> + beanName + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            error(ex.getMessage(), ele);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      String[] aliasesArray = StringUtils.toStringArray(aliases);</span><br><span class="line">      <span class="comment">// 返回 BeanDefinitionHolder</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionHolder</span>(beanDefinition, beanName, aliasesArray);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建BeanDefinition实例的方法</span></span><br><span class="line"><span class="keyword">public</span> AbstractBeanDefinition <span class="title function_">parseBeanDefinitionElement</span><span class="params">(Element ele, String beanName, BeanDefinition containingBean)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">this</span>.parseState.push(<span class="keyword">new</span> <span class="title class_">BeanEntry</span>(beanName));</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class="line">      className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class="line">         parent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 创建 BeanDefinition，然后设置类信息而已</span></span><br><span class="line">      <span class="type">AbstractBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> createBeanDefinition(className, parent);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 设置 BeanDefinition 的一堆属性，这些属性定义在 AbstractBeanDefinition 中</span></span><br><span class="line">      parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class="line">      bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 下面的一堆是解析 &lt;bean&gt;......&lt;/bean&gt; 内部的子元素，</span></span><br><span class="line"><span class="comment">       * 解析出来以后的信息都放到 bd 的属性中</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 解析 &lt;meta /&gt;</span></span><br><span class="line">      parseMetaElements(ele, bd);</span><br><span class="line">      <span class="comment">// 解析 &lt;lookup-method /&gt;</span></span><br><span class="line">      parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">      <span class="comment">// 解析 &lt;replaced-method /&gt;</span></span><br><span class="line">      parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class="line">    <span class="comment">// 解析 &lt;constructor-arg /&gt;</span></span><br><span class="line">      parseConstructorArgElements(ele, bd);</span><br><span class="line">      <span class="comment">// 解析 &lt;property /&gt;</span></span><br><span class="line">      parsePropertyElements(ele, bd);</span><br><span class="line">      <span class="comment">// 解析 &lt;qualifier /&gt;</span></span><br><span class="line">      parseQualifierElements(ele, bd);</span><br><span class="line"></span><br><span class="line">      bd.setResource(<span class="built_in">this</span>.readerContext.getResource());</span><br><span class="line">      bd.setSource(extractSource(ele));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> bd;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">      error(<span class="string">&quot;Bean class [&quot;</span> + className + <span class="string">&quot;] not found&quot;</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">      error(<span class="string">&quot;Class that bean class [&quot;</span> + className + <span class="string">&quot;] depends on not found&quot;</span>, ele, err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      error(<span class="string">&quot;Unexpected failure during bean definition parsing&quot;</span>, ele, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.parseState.pop();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，根据 <code>&lt;bean /&gt;</code> 配置创建了一个<code>BeanDefinitionHolder</code> 实例。</p><p>回到：<code>DefaultBeanDefinitionDocumentReader.processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate)</code>，也就是解析<bean />的起点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processBeanDefinition</span><span class="params">(Element ele, BeanDefinitionParserDelegate delegate)</span> &#123;</span><br><span class="line">   <span class="comment">// 将 &lt;bean /&gt; 节点转换为 BeanDefinitionHolder</span></span><br><span class="line">   <span class="type">BeanDefinitionHolder</span> <span class="variable">bdHolder</span> <span class="operator">=</span> delegate.parseBeanDefinitionElement(ele);</span><br><span class="line">   <span class="keyword">if</span> (bdHolder != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果有自定义属性的话，进行相应的解析，先忽略</span></span><br><span class="line">      bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//注册Bean  关键方法</span></span><br><span class="line">         BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class="line">         getReaderContext().error(<span class="string">&quot;Failed to register bean definition with name &#x27;&quot;</span> +</span><br><span class="line">               bdHolder.getBeanName() + <span class="string">&quot;&#x27;&quot;</span>, ele, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注册完成后，发送事件，本文不展开说这个</span></span><br><span class="line">      getReaderContext().fireComponentRegistered(<span class="keyword">new</span> <span class="title class_">BeanComponentDefinition</span>(bdHolder));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注册beandefinition">注册beanDefinition</h6><p><code>BeanDefinitionReaderUtils</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(</span></span><br><span class="line"><span class="params">      BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span><br><span class="line">      <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> definitionHolder.getBeanName();</span><br><span class="line">   <span class="comment">// 注册这个 Bean</span></span><br><span class="line">   registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果还有别名的话，也要根据别名全部注册一遍，不然根据别名就会找不到 Bean 了</span></span><br><span class="line">   String[] aliases = definitionHolder.getAliases();</span><br><span class="line">   <span class="keyword">if</span> (aliases != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (String alias : aliases) &#123;</span><br><span class="line">         <span class="comment">// alias -&gt; beanName 保存它们的别名信息，这个很简单，用一个 map 保存一下就可以了，</span></span><br><span class="line">         <span class="comment">// 获取的时候，会先将 alias 转换为 beanName，然后再查找</span></span><br><span class="line">         registry.registerAlias(beanName, alias);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DefaultListableBeanFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line">      <span class="keyword">throws</span> BeanDefinitionStoreException &#123;</span><br><span class="line"></span><br><span class="line">   Assert.hasText(beanName, <span class="string">&quot;Bean name must not be empty&quot;</span>);</span><br><span class="line">   Assert.notNull(beanDefinition, <span class="string">&quot;BeanDefinition must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         ((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(...);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// old? 还记得 “允许 bean 覆盖” 这个配置吗？allowBeanDefinitionOverriding</span></span><br><span class="line">   BeanDefinition oldBeanDefinition;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 之后会看到，所有的 Bean 注册后会放入这个 beanDefinitionMap 中</span></span><br><span class="line">   oldBeanDefinition = <span class="built_in">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 处理重复名称的 Bean 定义的情况</span></span><br><span class="line">   <span class="keyword">if</span> (oldBeanDefinition != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">         <span class="comment">// 如果不允许覆盖的话，抛异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(beanDefinition.getResourceDescription()...</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">         <span class="comment">// log...用框架定义的 Bean 覆盖用户自定义的 Bean </span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;</span><br><span class="line">         <span class="comment">// log...用新的 Bean 覆盖旧的 Bean</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// log...用同等的 Bean 覆盖旧的 Bean，这里指的是 equals 方法返回 true 的 Bean</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 覆盖</span></span><br><span class="line">      <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断是否已经有其他的 Bean 开始初始化了.</span></span><br><span class="line">      <span class="comment">// 注意，&quot;注册Bean&quot; 这个动作结束，Bean 依然还没有初始化</span></span><br><span class="line">      <span class="comment">// 在 Spring 容器启动的最后，会 预初始化 所有的 singleton beans</span></span><br><span class="line">      <span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">         <span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">         <span class="keyword">synchronized</span> (<span class="built_in">this</span>.beanDefinitionMap) &#123;<span class="comment">//防止并发注册</span></span><br><span class="line">            <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">            List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="built_in">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">            updatedDefinitions.addAll(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line">            updatedDefinitions.add(beanName);</span><br><span class="line">            <span class="built_in">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">               Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;(<span class="built_in">this</span>.manualSingletonNames);</span><br><span class="line">               updatedSingletons.remove(beanName);</span><br><span class="line">               <span class="built_in">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 最正常的应该是进到这个分支。</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">// 将 BeanDefinition 放到这个 map 中，这个 map 保存了所有的 BeanDefinition</span></span><br><span class="line">         <span class="built_in">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">         <span class="comment">// 这是个 ArrayList，所以会按照 bean 配置的顺序保存每一个注册的 Bean 的名字</span></span><br><span class="line">         <span class="built_in">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">         <span class="comment">// 这是个 LinkedHashSet，代表的是手动注册的 singleton bean，</span></span><br><span class="line">         <span class="comment">// 注意这里是 remove 方法，到这里的 Bean 当然不是手动注册的</span></span><br><span class="line">         <span class="comment">// 手动指的是通过调用以下方法注册的 bean ：</span></span><br><span class="line">         <span class="comment">//     registerSingleton(String beanName, Object singletonObject)</span></span><br><span class="line">         <span class="comment">//   Spring 会在后面&quot;手动&quot;注册一些 Bean，</span></span><br><span class="line">         <span class="comment">// 如 &quot;environment&quot;、&quot;systemProperties&quot; 等 bean，我们自己也可以在运行时注册 Bean 到容器中的</span></span><br><span class="line">         <span class="built_in">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 这个不重要，在预初始化的时候会用到，不必管它。</span></span><br><span class="line">      <span class="built_in">this</span>.frozenBeanDefinitionNames = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (oldBeanDefinition != <span class="literal">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">      resetBeanDefinition(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="准备bean容器">2. 准备Bean容器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">prepareBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">   <span class="comment">// 设置 BeanFactory 的类加载器，我们知道 BeanFactory 需要加载类，也就需要类加载器，</span></span><br><span class="line">   <span class="comment">// 这里设置为加载当前 ApplicationContext 类的类加载器</span></span><br><span class="line">   beanFactory.setBeanClassLoader(getClassLoader());</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 设置 BeanExpressionResolver</span></span><br><span class="line">   beanFactory.setBeanExpressionResolver(<span class="keyword">new</span> <span class="title class_">StandardBeanExpressionResolver</span>(beanFactory.getBeanClassLoader()));</span><br><span class="line">   <span class="comment">// </span></span><br><span class="line">   beanFactory.addPropertyEditorRegistrar(<span class="keyword">new</span> <span class="title class_">ResourceEditorRegistrar</span>(<span class="built_in">this</span>, getEnvironment()));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 添加一个 BeanPostProcessor，这个 processor 比较简单：</span></span><br><span class="line">   <span class="comment">// 实现了 Aware 接口的 beans 在初始化的时候，这个 processor 负责回调，</span></span><br><span class="line">   <span class="comment">// 这个我们很常用，如我们会为了获取 ApplicationContext 而 implement ApplicationContextAware</span></span><br><span class="line">   <span class="comment">// 注意：它不仅仅回调 ApplicationContextAware，</span></span><br><span class="line">   <span class="comment">//   还会负责回调 EnvironmentAware、ResourceLoaderAware 等，看下源码就清楚了</span></span><br><span class="line">   beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationContextAwareProcessor</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 下面几行的意思就是，如果某个 bean 依赖于以下几个接口的实现类，在自动装配的时候忽略它们，</span></span><br><span class="line">   <span class="comment">// Spring 会通过其他方式来处理这些依赖。</span></span><br><span class="line">   beanFactory.ignoreDependencyInterface(EnvironmentAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(EmbeddedValueResolverAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(ResourceLoaderAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(ApplicationEventPublisherAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(MessageSourceAware.class);</span><br><span class="line">   beanFactory.ignoreDependencyInterface(ApplicationContextAware.class);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 下面几行就是为特殊的几个 bean 赋值，如果有 bean 依赖了以下几个，会注入这边相应的值，</span></span><br><span class="line"><span class="comment">    * 之前我们说过，&quot;当前 ApplicationContext 持有一个 BeanFactory&quot;，这里解释了第一行。</span></span><br><span class="line"><span class="comment">    * ApplicationContext 还继承了 ResourceLoader、ApplicationEventPublisher、MessageSource</span></span><br><span class="line"><span class="comment">    * 所以对于这几个依赖，可以赋值为 this，注意 this 是一个 ApplicationContext</span></span><br><span class="line"><span class="comment">    * 那这里怎么没看到为 MessageSource 赋值呢？那是因为 MessageSource 被注册成为了一个普通的 bean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</span><br><span class="line">   beanFactory.registerResolvableDependency(ResourceLoader.class, <span class="built_in">this</span>);</span><br><span class="line">   beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, <span class="built_in">this</span>);</span><br><span class="line">   beanFactory.registerResolvableDependency(ApplicationContext.class, <span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这个 BeanPostProcessor 也很简单，在 bean 实例化后，如果是 ApplicationListener 的子类，</span></span><br><span class="line">   <span class="comment">// 那么将其添加到 listener 列表中，可以理解成：注册  事件监听器</span></span><br><span class="line">   beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ApplicationListenerDetector</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这里涉及到特殊的 bean，名为：loadTimeWeaver，这不是我们的重点，忽略它</span></span><br><span class="line">   <span class="comment">// tips: ltw 是 AspectJ 的概念，指的是在运行期进行织入，这个和 Spring AOP 不一样，</span></span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">LoadTimeWeaverAwareProcessor</span>(beanFactory));</span><br><span class="line">      <span class="comment">// Set a temporary ClassLoader for type matching.</span></span><br><span class="line">      beanFactory.setTempClassLoader(<span class="keyword">new</span> <span class="title class_">ContextTypeMatchClassLoader</span>(beanFactory.getBeanClassLoader()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从下面几行代码我们可以知道，Spring 往往很 &quot;智能&quot; 就是因为它会帮我们默认注册一些有用的 bean，</span></span><br><span class="line"><span class="comment">    * 我们也可以选择覆盖</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果没有定义 &quot;environment&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span></span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.registerSingleton(ENVIRONMENT_BEAN_NAME, getEnvironment());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 如果没有定义 &quot;systemProperties&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span></span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_PROPERTIES_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.registerSingleton(SYSTEM_PROPERTIES_BEAN_NAME, getEnvironment().getSystemProperties());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 如果没有定义 &quot;systemEnvironment&quot; 这个 bean，那么 Spring 会 &quot;手动&quot; 注册一个</span></span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.containsLocalBean(SYSTEM_ENVIRONMENT_BEAN_NAME)) &#123;</span><br><span class="line">      beanFactory.registerSingleton(SYSTEM_ENVIRONMENT_BEAN_NAME, getEnvironment().getSystemEnvironment());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化所有单例bean">3.初始化所有单例bean</h4><p><code>AbstractApplicationContext</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化剩余的 singleton beans</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.1  首先，初始化名字为 conversionService 的 Bean。</span></span><br><span class="line">   <span class="comment">// 代码这里没有初始化 Bean ，初始化的动作包装在 beanFactory.getBean(...) 中</span></span><br><span class="line">   <span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">      beanFactory.setConversionService(</span><br><span class="line">            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register a default embedded value resolver if no bean post-processor</span></span><br><span class="line">   <span class="comment">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line">   <span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line">   <span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">      beanFactory.addEmbeddedValueResolver(<span class="keyword">new</span> <span class="title class_">StringValueResolver</span>() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> String <span class="title function_">resolveStringValue</span><span class="params">(String strVal)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getEnvironment().resolvePlaceholders(strVal);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 先初始化 LoadTimeWeaverAware 类型的 Bean</span></span><br><span class="line">   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">   <span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">      getBean(weaverAwareName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">   beanFactory.setTempClassLoader(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 到这一步的时候，Spring 已经开始预初始化 singleton beans 了，肯定不希望这个时候还出现 bean 定义解析、加载、注册。</span></span><br><span class="line">   beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//3.2  开始初始化</span></span><br><span class="line">   beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="初始化conversionservice">3.1 初始化conversionService</h5><p>应用场景：它用来将前端传过来的参数和后端的 controller方法上的参数进行绑定的时候用。</p><p>像前端传过来的字符串、整数要转换为后端的 String、Integer很容易，但是如果 controller 方法需要的是一个枚举值，或者是 Date这些非基础类型（含基础类型包装类）值的时候，我们就可以考虑采用<code>ConversionService</code> 来进行转换。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;conversionService&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.javadoop.learning.utils.StringToEnumConverterFactory&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ConversionService</code> 接口很简单，所以要自定义一个 convert的话也很简单。如下实现日期转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToDateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DateUtils.parseDate(source, <span class="string">&quot;yyyy-MM-dd&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>, <span class="string">&quot;yyyy-MM-dd HH:mm&quot;</span>, <span class="string">&quot;HH:mm:ss&quot;</span>, <span class="string">&quot;HH:mm&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要注册这个 Bean就可以了。这样，前端往后端传的时间描述字符串就很容易绑定成 Date类型了，不需要其他任何操作。</p><h5 id="开始初始化">3.2 开始初始化</h5><p><code>DefaultListableBeanFactory.preInstantiateSingletons()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">      <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// this.beanDefinitionNames 保存了所有的 beanNames</span></span><br><span class="line">   List&lt;String&gt; beanNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 下面这个循环，触发所有的非懒加载的 singleton beans 的初始化操作</span></span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 合并父 Bean 中的配置，注意 &lt;bean id=&quot;&quot; class=&quot;&quot; parent=&quot;&quot; /&gt; 中的 parent </span></span><br><span class="line">      <span class="type">RootBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 非抽象、非懒加载的 singletons。如果配置了 &#x27;abstract = true&#x27;，那是不需要初始化的</span></span><br><span class="line">      <span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line">         <span class="comment">// 处理 FactoryBean</span></span><br><span class="line">         <span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line">            <span class="comment">// FactoryBean 的话，在 beanName 前面加上 ‘&amp;’ 符号。再调用 getBean，getBean 方法别急</span></span><br><span class="line">            <span class="keyword">final</span> FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line">            <span class="comment">// 判断当前 FactoryBean 是否是 SmartFactoryBean 的实现，此处忽略，直接跳过</span></span><br><span class="line">            <span class="type">boolean</span> isEagerInit;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">               isEagerInit = AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> Boolean <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                     <span class="keyword">return</span> ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit();</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;, getAccessControlContext());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">               isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">                     ((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line"></span><br><span class="line">               getBean(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 对于普通的 Bean，只要调用 getBean(beanName) 这个方法就可以进行初始化了</span></span><br><span class="line">            getBean(beanName);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 到这里说明所有的非懒加载的 singleton beans 已经完成了初始化</span></span><br><span class="line">   <span class="comment">// 如果我们定义的 bean 是实现了 SmartInitializingSingleton 接口的，那么在这里得到回调，忽略</span></span><br><span class="line">   <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">singletonInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line">      <span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">SmartInitializingSingleton</span> <span class="variable">smartSingleton</span> <span class="operator">=</span> (SmartInitializingSingleton) singletonInstance;</span><br><span class="line">         <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                  smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;, getAccessControlContext());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="factorybean">FactoryBean</h6><p>处理一些比较难构造的Bean对象，如数据库连接池对象等等。</p><h6 id="getbean方法">getBean方法</h6><p><code>AbstractBeanFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">   <span class="keyword">return</span> doGetBean(name, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含初始化 Bean 的过程，但是平时 getBean 方法我们经常是用来从容器中获取 Bean 用的，</span></span><br><span class="line"><span class="comment">// 已经初始化过了就从容器中直接返回，否则就先初始化再返回</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; T <span class="title function_">doGetBean</span><span class="params">(</span></span><br><span class="line"><span class="params">      <span class="keyword">final</span> String name, <span class="keyword">final</span> Class&lt;T&gt; requiredType, <span class="keyword">final</span> Object[] args, <span class="type">boolean</span> typeCheckOnly)</span></span><br><span class="line">      <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">   <span class="comment">// 获取一个 “正统的” beanName，处理两种情况，一个是前面说的 FactoryBean(前面带 ‘&amp;’)，</span></span><br><span class="line">   <span class="comment">// 一个是别名问题，因为这个方法是 getBean，获取 Bean 用的，你要是传一个别名进来，是完全可以的</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> transformedBeanName(name);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这个是最终的返回值</span></span><br><span class="line">   Object bean; </span><br><span class="line"></span><br><span class="line">   <span class="comment">// 检查下是不是已经创建过了</span></span><br><span class="line">   <span class="type">Object</span> <span class="variable">sharedInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这里说下 args 呗，虽然看上去一点不重要。前面我们一路进来的时候都是 getBean(beanName)，</span></span><br><span class="line">   <span class="comment">// 所以 args 传参其实是 null 的，但是如果 args 不为空的时候，那么意味着调用方不是希望获取 Bean，而是创建 Bean</span></span><br><span class="line">   <span class="keyword">if</span> (sharedInstance != <span class="literal">null</span> &amp;&amp; args == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 下面这个方法：如果是普通 Bean 的话，直接返回 sharedInstance，</span></span><br><span class="line">      <span class="comment">// 如果是 FactoryBean 的话，返回它创建的那个实例对象</span></span><br><span class="line">      bean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class="literal">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">         <span class="comment">// 创建过了此 beanName 的 prototype 类型的 bean，那么抛异常，</span></span><br><span class="line">         <span class="comment">// 往往是因为陷入了循环引用</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 检查一下这个 BeanDefinition 在容器中是否存在</span></span><br><span class="line">      <span class="type">BeanFactory</span> <span class="variable">parentBeanFactory</span> <span class="operator">=</span> getParentBeanFactory();</span><br><span class="line">      <span class="keyword">if</span> (parentBeanFactory != <span class="literal">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class="line">         <span class="comment">// 如果当前容器不存在这个 BeanDefinition，试试父容器中有没有</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">nameToLookup</span> <span class="operator">=</span> originalBeanName(name);</span><br><span class="line">         <span class="keyword">if</span> (args != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回父容器的查询结果</span></span><br><span class="line">            <span class="keyword">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// No args -&gt; delegate to standard getBean method.</span></span><br><span class="line">            <span class="keyword">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!typeCheckOnly) &#123;</span><br><span class="line">         <span class="comment">// typeCheckOnly 为 false，将当前 beanName 放入一个 alreadyCreated 的 Set 集合中。</span></span><br><span class="line">         markBeanAsCreated(beanName);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 到这里的话，要准备创建 Bean 了，对于 singleton 的 Bean 来说，容器中还没创建过此 Bean；</span></span><br><span class="line"><span class="comment">       * 对于 prototype 的 Bean 来说，本来就是要创建一个新的 Bean。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">final</span> <span class="type">RootBeanDefinition</span> <span class="variable">mbd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line">         checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 先初始化 当前 Bean 依赖的所有 Bean，这个很好理解。</span></span><br><span class="line">         <span class="comment">// 注意，这里的依赖指的是 depends-on 中定义的依赖</span></span><br><span class="line">         String[] dependsOn = mbd.getDependsOn();</span><br><span class="line">         <span class="keyword">if</span> (dependsOn != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String dep : dependsOn) &#123;</span><br><span class="line">               <span class="comment">// 检查是不是有循环依赖，这里的循环依赖和我们前面说的循环依赖又不一样，这里肯定是不允许出现的，不然要乱套了，读者想一下就知道了</span></span><br><span class="line">               <span class="keyword">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class="line">                  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                        <span class="string">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 注册一下依赖关系</span></span><br><span class="line">               registerDependentBean(dep, beanName);</span><br><span class="line">               <span class="comment">// 先初始化被依赖项</span></span><br><span class="line">               getBean(dep);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果是 singleton scope 的，创建 singleton 的实例</span></span><br><span class="line">         <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            sharedInstance = getSingleton(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                     <span class="comment">// 执行创建 Bean，关键！</span></span><br><span class="line">                     <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                  &#125;</span><br><span class="line">                  <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                     destroySingleton(beanName);</span><br><span class="line">                     <span class="keyword">throw</span> ex;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果是 prototype scope 的，创建 prototype 的实例</span></span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (mbd.isPrototype()) &#123;</span><br><span class="line">            <span class="comment">// It&#x27;s a prototype -&gt; create a new instance.</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">prototypeInstance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               beforePrototypeCreation(beanName);</span><br><span class="line">               <span class="comment">// 执行创建 Bean</span></span><br><span class="line">               prototypeInstance = createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">               afterPrototypeCreation(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 如果不是 singleton 和 prototype 的话，需要委托给相应的实现类来处理</span></span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">scopeName</span> <span class="operator">=</span> mbd.getScope();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Scope</span> <span class="variable">scope</span> <span class="operator">=</span> <span class="built_in">this</span>.scopes.get(scopeName);</span><br><span class="line">            <span class="keyword">if</span> (scope == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;No Scope registered for scope name &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">Object</span> <span class="variable">scopedInstance</span> <span class="operator">=</span> scope.get(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">                  <span class="meta">@Override</span></span><br><span class="line">                  <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">                     beforePrototypeCreation(beanName);</span><br><span class="line">                     <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 执行创建 Bean</span></span><br><span class="line">                        <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">                     &#125;</span><br><span class="line">                     <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterPrototypeCreation(beanName);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">               bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IllegalStateException ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(beanName,</span><br><span class="line">                     <span class="string">&quot;Scope &#x27;&quot;</span> + scopeName + <span class="string">&quot;&#x27; is not active for the current thread; consider &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;</span>,</span><br><span class="line">                     ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         cleanupAfterBeanCreationFailure(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 最后，检查一下类型对不对，不对的话就抛异常，对的话就返回了</span></span><br><span class="line">   <span class="keyword">if</span> (requiredType != <span class="literal">null</span> &amp;&amp; bean != <span class="literal">null</span> &amp;&amp; !requiredType.isInstance(bean)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (TypeMismatchException ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class="string">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class="line">                  ClassUtils.getQualifiedName(requiredType) + <span class="string">&quot;&#x27;&quot;</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (T) bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="createbean">createBean</h6><p><code>AbstractAutowireCapableBeanFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">RootBeanDefinition</span> <span class="variable">mbdToUse</span> <span class="operator">=</span> mbd;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 确保 BeanDefinition 中的 Class 被加载</span></span><br><span class="line">   Class&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class="line">   <span class="keyword">if</span> (resolvedClass != <span class="literal">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="literal">null</span>) &#123;</span><br><span class="line">      mbdToUse = <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(mbd);</span><br><span class="line">      mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 准备方法覆写，这里又涉及到一个概念：MethodOverrides，它来自于 bean 定义中的 &lt;lookup-method /&gt; </span></span><br><span class="line">   <span class="comment">// 和 &lt;replaced-method /&gt;</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      mbdToUse.prepareMethodOverrides();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(),</span><br><span class="line">            beanName, <span class="string">&quot;Validation of method overrides failed&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理，</span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">      <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> bean; </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// ！！！！！！！重头戏，创建 bean</span></span><br><span class="line">   <span class="type">Object</span> <span class="variable">beanInstance</span> <span class="operator">=</span> doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> beanInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> Object[] args)</span></span><br><span class="line">      <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Instantiate the bean.</span></span><br><span class="line">   <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">      instanceWrapper = <span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 说明不是 FactoryBean，这里实例化 Bean</span></span><br><span class="line">      instanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 这个就是 Bean 里面的 我们定义的类 的实例，很多地方我直接描述成 &quot;bean 实例&quot;</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> (instanceWrapper != <span class="literal">null</span> ? instanceWrapper.getWrappedInstance() : <span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 类型</span></span><br><span class="line">   Class&lt;?&gt; beanType = (instanceWrapper != <span class="literal">null</span> ? instanceWrapper.getWrappedClass() : <span class="literal">null</span>);</span><br><span class="line">   mbd.resolvedTargetType = beanType;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//涉及接口：MergedBeanDefinitionPostProcessor</span></span><br><span class="line">   <span class="keyword">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// MergedBeanDefinitionPostProcessor，这个我真不展开说了，直接跳过吧，很少用的</span></span><br><span class="line">            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">                  <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Eagerly cache singletons to be able to resolve circular references</span></span><br><span class="line">   <span class="comment">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span></span><br><span class="line">   <span class="comment">// 下面这块代码是为了解决循环依赖的问题</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> (mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp;</span><br><span class="line">         isSingletonCurrentlyInCreation(beanName));</span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName +</span><br><span class="line">               <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      addSingletonFactory(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">            <span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Initialize the bean instance.</span></span><br><span class="line">   <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 这一步也是非常关键的，这一步负责属性装配，因为前面的实例只是实例化了，并没有设值，这里就是设值</span></span><br><span class="line">      populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">      <span class="keyword">if</span> (exposedObject != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="comment">// 还记得 init-method 吗？还有 InitializingBean 接口？还有 BeanPostProcessor 接口？</span></span><br><span class="line">         <span class="comment">// 这里就是处理 bean 初始化完成后的各种回调</span></span><br><span class="line">         exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException) ex).getBeanName())) &#123;</span><br><span class="line">         <span class="keyword">throw</span> (BeanCreationException) ex;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">      <span class="comment">// </span></span><br><span class="line">      <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">      <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">            exposedObject = earlySingletonReference;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; hasDependentBean(beanName)) &#123;</span><br><span class="line">            String[] dependentBeans = getDependentBeans(beanName);</span><br><span class="line">            Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;String&gt;(dependentBeans.length);</span><br><span class="line">            <span class="keyword">for</span> (String dependentBean : dependentBeans) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                  actualDependentBeans.add(dependentBean);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName,</span><br><span class="line">                     <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> +</span><br><span class="line">                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +</span><br><span class="line">                     <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;wrapped. This means that said other beans do not use the final version of the &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;bean. This is often the result of over-eager type matching - consider using &quot;</span> +</span><br><span class="line">                     <span class="string">&quot;&#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Register bean as disposable.</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> BeanWrapper <span class="title function_">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, Object[] args)</span> &#123;</span><br><span class="line">   <span class="comment">// 确保已经加载了此 class</span></span><br><span class="line">   Class&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 校验一下这个类的访问权限</span></span><br><span class="line">   <span class="keyword">if</span> (beanClass != <span class="literal">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class="line">            <span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="literal">null</span>)  &#123;</span><br><span class="line">      <span class="comment">// 采用工厂方法实例化</span></span><br><span class="line">      <span class="keyword">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果不是第一次创建，比如第二次创建 prototype bean。</span></span><br><span class="line">   <span class="comment">// 这种情况下，我们可以从第一次创建知道，采用无参构造函数，还是构造函数依赖注入 来完成实例化</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">resolved</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">autowireNecessary</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">if</span> (args == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class="line">         <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">            resolved = <span class="literal">true</span>;</span><br><span class="line">            autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">      <span class="keyword">if</span> (autowireNecessary) &#123;</span><br><span class="line">         <span class="comment">// 构造函数依赖注入</span></span><br><span class="line">         <span class="keyword">return</span> autowireConstructor(beanName, mbd, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 无参构造函数</span></span><br><span class="line">         <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断是否采用有参构造函数</span></span><br><span class="line">   Constructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">   <span class="keyword">if</span> (ctors != <span class="literal">null</span> ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class="line">         mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class="line">      <span class="comment">// 构造函数依赖注入</span></span><br><span class="line">      <span class="keyword">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 调用无参构造函数</span></span><br><span class="line">   <span class="keyword">return</span> instantiateBean(beanName, mbd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察无参构造函数</span></span><br><span class="line"><span class="keyword">protected</span> BeanWrapper <span class="title function_">instantiateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      Object beanInstance;</span><br><span class="line">      <span class="keyword">final</span> <span class="type">BeanFactory</span> <span class="variable">parent</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">      <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">         beanInstance = AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;, getAccessControlContext());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 实例化，关键方法</span></span><br><span class="line">         beanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 包装一下，返回</span></span><br><span class="line">      <span class="type">BeanWrapper</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanWrapperImpl</span>(beanInstance);</span><br><span class="line">      initBeanWrapper(bw);</span><br><span class="line">      <span class="keyword">return</span> bw;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">            mbd.getResourceDescription(), beanName, <span class="string">&quot;Instantiation of bean failed&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="instantiate实例化">instantiate实例化</h6><p><code>SimpleInstantiationStrategy</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, String beanName, BeanFactory owner)</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 如果不存在方法覆写，那就使用 java 反射进行实例化，否则使用 CGLIB,</span></span><br><span class="line">   <span class="keyword">if</span> (bd.getMethodOverrides().isEmpty()) &#123;</span><br><span class="line">      Constructor&lt;?&gt; constructorToUse;</span><br><span class="line">      <span class="keyword">synchronized</span> (bd.constructorArgumentLock) &#123;</span><br><span class="line">         constructorToUse = (Constructor&lt;?&gt;) bd.resolvedConstructorOrFactoryMethod;</span><br><span class="line">         <span class="keyword">if</span> (constructorToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;?&gt; clazz = bd.getBeanClass();</span><br><span class="line">            <span class="keyword">if</span> (clazz.isInterface()) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanInstantiationException</span>(clazz, <span class="string">&quot;Specified class is an interface&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">                  constructorToUse = AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Constructor&lt;?&gt;&gt;() &#123;</span><br><span class="line">                     <span class="meta">@Override</span></span><br><span class="line">                     <span class="keyword">public</span> Constructor&lt;?&gt; run() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz.getDeclaredConstructor((Class[]) <span class="literal">null</span>);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                  constructorToUse = clazz.getDeclaredConstructor((Class[]) <span class="literal">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line">               bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanInstantiationException</span>(clazz, <span class="string">&quot;No default constructor found&quot;</span>, ex);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 利用构造方法进行实例化</span></span><br><span class="line">      <span class="keyword">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 存在方法覆写，利用 CGLIB 来完成实例化，需要依赖于 CGLIB 生成子类。</span></span><br><span class="line">      <span class="comment">// tips: 因为如果不使用 CGLIB 的话，存在 override 的情况 JDK 并没有提供相应的实例化支持</span></span><br><span class="line">      <span class="keyword">return</span> instantiateWithMethodInjection(bd, beanName, owner);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="属性注入">属性注入</h6><p><code>AbstractAutowireCapableBeanFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, BeanWrapper bw)</span> &#123;</span><br><span class="line">   <span class="comment">// bean 实例的所有属性都在这里了</span></span><br><span class="line">   <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> mbd.getPropertyValues();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (bw == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!pvs.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">               mbd.getResourceDescription(), beanName, <span class="string">&quot;Cannot apply property values to null instance&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// Skip property population phase for null instance.</span></span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 到这步的时候，bean 实例化完成（通过工厂方法或构造方法），但是还没开始属性设值，</span></span><br><span class="line">   <span class="comment">// InstantiationAwareBeanPostProcessor 的实现类可以在这里对 bean 进行状态修改，</span></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">continueWithPropertyPopulation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">   <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">      <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">         <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">            <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">            <span class="comment">// 如果返回 false，代表不需要进行后续的属性设值，也不需要再经过其他的 BeanPostProcessor 的处理</span></span><br><span class="line">            <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">               continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class="line">         mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">      <span class="type">MutablePropertyValues</span> <span class="variable">newPvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>(pvs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过名字找到所有属性值，如果是 bean 依赖，先初始化依赖的 bean。记录依赖关系</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class="line">         autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 通过类型装配。复杂一些</span></span><br><span class="line">      <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class="line">         autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pvs = newPvs;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">boolean</span> <span class="variable">hasInstAwareBpps</span> <span class="operator">=</span> hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">   <span class="type">boolean</span> <span class="variable">needsDepCheck</span> <span class="operator">=</span> (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class="line">      PropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">      <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">         <span class="keyword">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">               <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class="line">               <span class="comment">// 这里有个非常有用的 BeanPostProcessor 进到这里: AutowiredAnnotationBeanPostProcessor</span></span><br><span class="line">               <span class="comment">// 对采用 @Autowired、@Value 注解的依赖进行设值</span></span><br><span class="line">               pvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">               <span class="keyword">if</span> (pvs == <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">         checkDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 设置 bean 实例的属性值</span></span><br><span class="line">   applyPropertyValues(beanName, mbd, bw, pvs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="initializebean">initializeBean</h6><p>处理回调</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">      AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            invokeAwareMethods(beanName, bean);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;, getAccessControlContext());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 bean 实现了 BeanNameAware、BeanClassLoaderAware 或 BeanFactoryAware 接口，回调</span></span><br><span class="line">      invokeAwareMethods(beanName, bean);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> bean;</span><br><span class="line">   <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">      <span class="comment">// BeanPostProcessor 的 postProcessBeforeInitialization 回调</span></span><br><span class="line">      wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 处理 bean 中定义的 init-method，</span></span><br><span class="line">      <span class="comment">// 或者如果 bean 实现了 InitializingBean 接口，调用 afterPropertiesSet() 方法</span></span><br><span class="line">      invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(</span><br><span class="line">            (mbd != <span class="literal">null</span> ? mbd.getResourceDescription() : <span class="literal">null</span>),</span><br><span class="line">            beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, ex);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">      <span class="comment">// BeanPostProcessor 的 postProcessAfterInitialization 回调</span></span><br><span class="line">      wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;源码解析&quot;&gt;源码解析&lt;/h1&gt;
&lt;h2 id=&quot;ioc&quot;&gt;IOC&lt;/h2&gt;
&lt;p&gt;IOC：控制反转，由spring统一管理对象的方式替代我们之前手动new
对象的形式，具体的实现原理，参考多篇文章总结如下。&lt;/p&gt;
&lt;p&gt;核心内容：创建 Bean 容器，一</summary>
      
    
    
    
    <category term="Java" scheme="https://vlsmhd.github.io/categories/Java/"/>
    
    <category term="Spring" scheme="https://vlsmhd.github.io/categories/Java/Spring/"/>
    
    
  </entry>
  
  <entry>
    <title>软件测试入门</title>
    <link href="https://vlsmhd.github.io/2024/03/27/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/"/>
    <id>https://vlsmhd.github.io/2024/03/27/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/</id>
    <published>2024-03-27T07:10:53.727Z</published>
    <updated>2024-03-28T05:30:01.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见问题">常见问题</h1><h2 id="软件测试方法">软件测试方法</h2><h2 id="黑盒白盒测试">黑盒白盒测试</h2><h3 id="黑盒测试">黑盒测试</h3><h3 id="白盒测试">白盒测试</h3><p>对于每一个语句都要测到，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见问题&quot;&gt;常见问题&lt;/h1&gt;
&lt;h2 id=&quot;软件测试方法&quot;&gt;软件测试方法&lt;/h2&gt;
&lt;h2 id=&quot;黑盒白盒测试&quot;&gt;黑盒白盒测试&lt;/h2&gt;
&lt;h3 id=&quot;黑盒测试&quot;&gt;黑盒测试&lt;/h3&gt;
&lt;h3 id=&quot;白盒测试&quot;&gt;白盒测试&lt;/h3&gt;
&lt;p&gt;对于每一</summary>
      
    
    
    
    <category term="软件测试" scheme="https://vlsmhd.github.io/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>深入理解分布式系统-阅读笔记</title>
    <link href="https://vlsmhd.github.io/2024/03/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://vlsmhd.github.io/2024/03/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-26T03:26:08.300Z</published>
    <updated>2024-05-29T11:03:07.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识分布式系统">认识分布式系统</h1><h2 id="什么是分布式系统">什么是分布式系统</h2><p>分布式系统是一个其<strong>组件分布</strong>在不同的、联网的计算机上，组件之间通过<strong>传递消息</strong>进行通信和协调，<strong>共同完成</strong>一个任务的系统</p><p>特点：</p><ul><li>多进程</li><li>不共享操作系统</li><li>不共享时钟</li></ul><h2 id="为什么需要分布式系统">为什么需要分布式系统</h2><p>为了解决但不限于单机系统的如下问题：</p><ol type="1"><li>高性能</li><li>可扩展性：多数应用程序都是数据密集（data-intensive）型的应用程序，大部分时间在存储和处理数据。随着业务扩展、用户增长或者历史数据累积，单台计算机只能扩展到有限的程度</li><li>高可用性：保证5个9的可用性：99.999%的时间内正常运行。每年最多允许宕机5min这种。故障切换等等</li><li>必要性：银行系统必须采用分布式，保证安全可靠。</li></ol><h2 id="分布式系统的挑战">分布式系统的挑战</h2><p>分布式计算的谬误：</p><ol type="1"><li><p>网络是可靠的</p></li><li><p>延迟为零</p></li><li><p>带宽是无限的</p></li><li><p>网络是安全的</p></li><li><p>拓扑结构不会改变</p></li><li><p>单一管理员</p></li><li><p>传输成本为零</p></li><li><p>网络是同构的</p></li></ol><h3 id="网络延迟">网络延迟</h3><p>问题描述：分布式系统多个节点进行通讯，网络不能保证每个传输的数据包准确到达、什么时候到达、一定到达等。有时候网络甚至不安全。</p><p>消息传递会出现以下问题：</p><ul><li>消息丢失</li><li>消息延迟送达</li><li>重传消息导致消息重复</li><li>消息的顺序性</li></ul><h3 id="部分结点失效">部分结点失效</h3><p>分布式中，多个节点中某个或者多个节点会失效，亦或者发生了网络分区，将结点分成几部分，这几个部分的结点无法相互通信。</p><ul><li><p>不确定性</p></li><li><p>性能瓶颈</p></li></ul><h3 id="时钟问题">时钟问题</h3><p>单机系统可以使用时间推进的方式来标识事件之间的先后顺序，但分布式系统中的结点之间时钟不一致；并且，消息传递过程中的耗时也难以确定，导致事件的顺序需要特殊处理。</p><h2 id="程序员需要了解的数字">程序员需要了解的数字</h2><p>一些操作的延迟：</p><table><thead><tr class="header"><th>操作</th><th>延时</th></tr></thead><tbody><tr class="odd"><td>执行一个指令</td><td>1 ns</td></tr><tr class="even"><td>L 1缓存查询</td><td>0.5 ns</td></tr><tr class="odd"><td>分支预测错误（BranchMispredict）</td><td>3 ns</td></tr><tr class="even"><td>L2缓存查询</td><td>4 ns</td></tr><tr class="odd"><td>互斥锁／解锁（MutexLock／Unlock）</td><td>17 ns</td></tr><tr class="even"><td>主存访问</td><td>100 ns</td></tr><tr class="odd"><td>使用Zippy算法压缩1 KB的数据</td><td>2000 ns</td></tr><tr class="even"><td>从内存顺序读取 1 MB的数据</td><td>3000 ns</td></tr><tr class="odd"><td>SSD随机读</td><td>39000 ns</td></tr><tr class="even"><td>从SSD顺序读取1MB的数据</td><td>49000 ns</td></tr><tr class="odd"><td>同1个数据中心往返</td><td>500 000 ns</td></tr><tr class="even"><td>从磁盘顺序读取1MB的数据</td><td>718 000 ns</td></tr><tr class="odd"><td>磁盘寻址</td><td>2000000 ns（2 ms）</td></tr><tr class="even"><td>数据包往返美国到欧洲</td><td>150000000 ns（150ms）</td></tr></tbody></table><h1 id="分布式系统模型">分布式系统模型</h1><p>根据实际经验抽象出的一些通用的系统模型。</p><h2 id="两将军问题">两将军问题</h2><blockquote><p>问题描述：指两支由不同的将军领导的军队，正准备进攻一座坚固的城市。军队在城市附近的两个山丘扎营，中间有一个山谷将两个山丘隔开，两个将军交流的唯一方法是派遣信使穿越山谷，然而，山谷被城市的守卫者占领，并且途经该山谷传递信息的信使有可能会被俘虏。</p></blockquote><figure><img src="深入理解分布式系统-阅读笔记/image-20240403154318191.png"alt="两将军问题模型图" /><figcaption aria-hidden="true">两将军问题模型图</figcaption></figure><p>两队的行动和行动结果：</p><table><thead><tr class="header"><th>军队A</th><th>军队B</th><th>结果</th></tr></thead><tbody><tr class="odd"><td>不进攻</td><td>不进攻</td><td>无事发生</td></tr><tr class="even"><td>进攻</td><td>不进攻</td><td>A战败</td></tr><tr class="odd"><td>不进攻</td><td>进攻</td><td>B战败</td></tr><tr class="even"><td>进攻</td><td>进攻</td><td>成功</td></tr></tbody></table><p>双方达成统一进攻的“共识问题”，比较困难：</p><ol type="1"><li><p>A想进攻，通知B，但是A派出的士兵被俘虏</p><p><img src="深入理解分布式系统-阅读笔记/image-20240403154622114.png" alt="A发起进攻，士兵被俘虏" style="zoom:80%;" /></p><p>这时对于A的不确定性：不知道B打不打，怕自己只有一只军队上，又怕B知道消息自己上了，但是A没上</p></li><li><p>为了消除A的不确定性，B需要向A的军队发送ACK确认信息</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240403154825366.png"alt="B向A的军队发送ACK确认信息" /><figcaption aria-hidden="true">B向A的军队发送ACK确认信息</figcaption></figure><p>当B派遣的士兵被俘虏，A对其也不能信服</p></li></ol><p>因此，该问题实际上是无解的，一般在军队上需要总指挥官来协同。</p><p>在计算机分布式系统上，TCP的三次握手可以很好的解决这个问题。</p><h2 id="拜占庭将军问题">拜占庭将军问题</h2><blockquote><p>多个拜占庭将军各率领一支军队，想要占领一座防守坚固的城市，将军们还是只能通过信使进行交流。为了简化问题将各支军队的行动策略限定为进攻或者撤离两种。因为部分军队进攻、部分军队撤离可能会导致灾难性后果，所以各位将军必须通过投票来达成一致的策略，即所有军队一起进攻或者所有军队一起撤离。拜占庭将军问题的挑战在于：将军中可能出现叛徒，他们会试图故意误导和迷惑其他将军来破坏整个军事行动。</p></blockquote><p><img src="深入理解分布式系统-阅读笔记/image-20240404145134646.png" alt="拜占庭将军问题" style="zoom: 67%;" /></p><h2 id="系统模型">系统模型</h2><p>设计一个分布式系统的时候，我们必须清楚系统会发生哪种故障，然后寻找对应的解。不同的系统模型有着不同的算法和架构。我们按网络、节点故障和时间三种类型划分系统模型。</p><h3 id="网络链路模型">网络链路模型</h3><p>网络是一定不可靠，无论什么情况。</p><p>而网络出错常导致的问题称为网络分区（NetworkPartition），网络分区是指由于网络设备故障，导致网络分裂为多个独立的组。也就是节点仍然正常工作，但它们之间的通信连接已经中断。</p><p>假设最简单的单播通信场景：消息通常在两个节点之间相互传递。有一个发送者、一个接收者，它们通过一个双向的链路通信。</p><h4 id="可靠链路完美链路">可靠链路（完美链路）</h4><p>完美链路不会丢失消息也不回凭空捏造消息，但可能对消息重排序，特征如下：</p><ol type="1"><li>可靠传递：</li><li>无重复：每条消息最多传输一次</li><li>不会无中生有</li></ol><h4 id="公平损失链路">公平损失链路</h4><p>消息可能会重复、丢失、重排序，但最终一定送达，特征如下：</p><ol type="1"><li>公平损失：如果<strong>发送方和接收方都是正常运行</strong>的，且发送方不断重复发送消息，则消息最终会被送达。</li><li>有限重复：不会无限重发消息</li><li>不会无中生有</li></ol><h4 id="任意链路">任意链路</h4><p>最弱的网络模型，允许链路执行任何操作。可以截包等，最接近互联网的模型。</p><h4 id="链路的转换">链路的转换</h4><p>公平链路 + 重传 + 重复消息过滤 = 可靠链路</p><p>任意链路 + 加密安全技术 = 公平链路</p><h3 id="节点故障类型">节点故障类型</h3><h4 id="崩溃-停止">崩溃-停止</h4><p>一个节点停止工作后永远不会恢复。这可能是不可恢复的硬件故障，比如一个人不小心将手机掉进马桶里导致手机永久失灵。对于这种模型，有些情况下也许可以通过重启机器来恢复，但这种模型主要意味着算法不能依赖于节点恢复</p><h4 id="崩溃-恢复">崩溃-恢复</h4><p>允许节点重新启动并继续执行剩余的步骤，一般通过<strong>持久化存储</strong>必要的状态信息来容忍这种故障类型。</p><h4 id="拜占庭故障">拜占庭故障</h4><p>故障的节点可能不只会宕机，还可能以任意方式<strong>偏离算法</strong>，甚至<strong>恶意破坏系统</strong>。</p><h3 id="按时间划分模型">按时间划分模型</h3><p>基于时间或者是否同步（Synchronous）来进行划分。</p><h4 id="同步系统模型">同步系统模型</h4><p>消息的响应在一个有限且已知的时间范围内。</p><p>系统是同步的，容易解决问题，很多问题都是可预测的，消息也是可送达的，但这是理想情况。</p><h4 id="异步系统模型">异步系统模型</h4><p>一个消息的响应时间是无限的，无法知道一条消息什么时候会到达。</p><p>最接近现实的系统，我们无法预知哪一个服务结点会发生故障；例如，Java的虚拟机自带的垃圾回收机制，随着服务进程的不断运行，服务器产生的垃圾数目越来越多，总会触发fullGC，造成短暂的停顿现象。</p><h4 id="部分同步模型">部分同步模型</h4><p>最能实现的系统模型，系统在大部分时间都是同步的，但偶尔会因为故障转变为异步系统。</p><h2 id="消息传递语义">消息传递语义</h2><p>幂等性问题描述：分布式系统中的各个节点之间通过互相传递消息来协作。由于网络和节点不可靠，这些消息可能会丢失，为了解决消息丢失问题会让节点重复发送信息，这意味着消息可能会发送多次。如果像http中的put操作，那就会造成很大的损失。</p><p>常见语义：</p><ul><li>最多一次：消息最多传递一次，可能丢失，但绝不会重复。</li><li>至少一次：消息至少传递一次，不会丢失，会重复传送，可能出现重复幂等性问题</li><li>精确一次：消息只会被精确传递一次。</li></ul><h1 id="分布式数据基础">分布式数据基础</h1><p>分布式常见的两个基础技术：分区&amp;复制。</p><h2 id="分区">分区</h2><p>分区是提高分布式系统可扩展性的主要方法之一，具体是指将一个大的数据集，按照某种规则，拆分成多个较小的数据集，分散存储在分布式系统中的不同节点上。可扩展性体现在，当需要更大规模的数据存储时，添加多台机器结点即可。</p><p>分区分为垂直分区和水平分区：</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405150829615.png" alt="垂直分区和水平分区的区别" style="zoom: 67%;" /></p><h3 id="垂直分区">垂直分区</h3><p>定义：对表的列进行拆分，也叫“行拆分”，属于是把表的元数据拆分开来。</p><p>应用场景：可以把不常用的列或者是text、blob的大类型的列垂直拆分，提高查询效率。</p><ul><li>列式数据库</li></ul><blockquote><p>列式数据库也叫列存数据库，是指以列为单位进行数据存储架构的数据库。主妥适用于批量数据处理和即时查询。与之相对应的是行式数据库，一般来说，行式数据库吏适用于联机事务处理（OLTP）这类频繁处理事务的场景，列式数据库更适用于联机分析处理（OLAP）这类在海量数据中进行复杂查询的场景。</p></blockquote><h3 id="水平分区">水平分区</h3><p>定义：对表的行进行拆分，将不同的行通过某种映射关系，存储到不同的数据库结点中，不改变表的元数据结构。水平分区常称为分片。</p><p>常见的算法如下介绍。</p><h4 id="范围分区">范围分区</h4><p>根据指定的关键字将数据集拆分成多个 <strong>连续</strong>的范围每个范围存储到一个单独的节点上。用来分区的关键字也叫分区键。</p><p>案例：</p><p>对于2011年到2020年这十年的订单记录，以年为范围，可以划分为10个分区，然后将2011年的订单记录存储到节点N_1上，将2012年的订单记录存储到节点N2上，以此类推。</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405151635189.png" alt="年龄拆分案例" style="zoom:80%;" /></p><p>优点：</p><ul><li>实现简单</li><li>小范围查询快，容易确定查询范围涉及的结点</li><li>调整分区简单：通过调整范围大小控制结点存储的量级</li></ul><p>缺点：</p><ul><li>关键字限制：只能通过分区的某个关键字进行查询，其它字段查询性能要求较大</li><li>大范围需要跨节点，效率底下</li><li>数据分布不均匀：分区的原则没有规定好，比如，按照地域不同存储不同的用户信息，某一地区的用户信息是其它地区的n倍，存储该地区的结点收到的访问请求会很多。</li></ul><h4 id="哈希分区">哈希分区</h4><p>按照某个列（关键字），计算出hash值，来决定存储在哪个结点。</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405152137152.png" alt="哈希分区示例" style="zoom:80%;" /></p><p>优点：</p><ul><li>hash函数优良：分布均匀</li></ul><p>缺点：</p><ul><li>无法范围查询</li><li>添加节点需要rehash，涉及大量节点的迁移</li></ul><h4 id="一致性hash算法">一致性hash算法</h4><p>特殊的哈希分区算法，在分布式存储系统中用来缓解哈希分区增加或删除节点时引起的大规模数据移动问题。</p><p>一致性hash算法有多种实现形式，如，hash环方法：</p><p>一致性哈希算法将整个哈希值组织成一个抽象的圆环，称为哈希环（HashingRing）。hash函数的输出值范围为[0，Integer.MAX_VALUE]，输出值均匀映射在hash环上。</p><ol type="1"><li>假设hash环[0， 11]，三个结点均匀分布，如图：</li></ol><p><img src="深入理解分布式系统-阅读笔记/image-20240405155817501.png" alt="1. hash环均匀分布" style="zoom:80%;" /></p><ol start="2" type="1"><li>将要存储的数据的关键字计算出hash值，然后映射到hash环上，假设此时要存储三个键值对数据，它们的关键字分别为a、b和c，假设经过哈希函数计算后的哈希值分别为1、5和9，则数据映射到环上后如图：</li></ol><p><img src="深入理解分布式系统-阅读笔记/image-20240405160029032.png" alt="2. 数据映射" style="zoom:80%;" /></p><ol start="3" type="1"><li>数据按照顺时针方向寻找自己应该存入的结点。a存在N2，b存在N3，c存在N1</li><li>向集群添加节点，原本存在N2的a需要迁移到顺时针方向最近的N4结点</li></ol><p><img src="深入理解分布式系统-阅读笔记/image-20240405160634660.png" alt="4. 向集群添加节点" style="zoom:80%;" /></p><p>优点：</p><ul><li>添加节点，迁移方便，迁移环上小部分数据即可</li></ul><p>缺点：</p><ul><li>节点较少会产生数据倾斜问题</li><li>无法范围查询</li></ul><p>解决数据倾斜问题：</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405161719933.png" alt="添加虚拟结点" style="zoom:67%;" /></p><p>控制虚拟节点的数量，可以控制抵达不同节点的流量级别。</p><h3 id="分区的挑战">分区的挑战</h3><ol type="1"><li>垂直分区，left join查询低效，因为要访问多个结点的数据</li><li>水平分区，查询范围过大，涉及到需要访问多个结点的数据，查询效率也不快</li><li>事务的实现</li></ol><h2 id="复制">复制</h2><p>概念：复制是指将同一份数据冗余存储在多个节点，节点间通过网络同步数据。一个存储了复制数据的节点称为<strong>副本（Replica）</strong>。</p><p>复制有什么好处：</p><ol type="1"><li>增强数据的可用性、安全性：通过复制技术，将数据冗余存储，即使系统部分节点发生故障，系统也能继续工作</li><li>减少往返时间：为用户选择距离最近的服务结点查询数据</li><li>增加吞吐量</li></ol><h3 id="单主复制">单主复制</h3><p>单主复制也叫主从复制或主从同步：集群选择一个主节点，客户端的写请求必须经过主结点，从结点只能处理读请求。</p><p>主节点收到写请求，不仅要持久化自己的结点上，还需要向其它结点进行网络同步操作。</p><p>优点：</p><ul><li>易实现</li><li>事务性能高</li><li>读性能高</li></ul><p>缺点：</p><ul><li>写请求处理能力不佳</li><li>主节点宕机会造成短暂停顿，切换结点<ul><li>手动切换</li><li>自动切换</li></ul></li></ul><h4 id="同步复制">同步复制</h4><p>主节点持久化完毕并且向其它结点同步完毕以后再向客户端返回结果。</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405163704841.png" alt="同步复制时序图" style="zoom:80%;" /></p><p>特征：保证了数据的一致性，安全性，牺牲了响应性能。当结点数量增加或者某个结点有IO的瓶颈，就会大大降低响应能力。</p><h4 id="异步复制">异步复制</h4><p>主节点执行完写请求，立即返回客户端结果，随后在后台向其它结点同步消息。</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405163842500.png" alt="异步复制时序图" style="zoom:80%;" /></p><p>特征：不保证数据的一致性，如果用户收到写请求的ack之后立即向其它结点发起读请求，可能读不到自己已经修改的新的值。</p><p>如果此时主节点失效，某个从结点选举为主节点，这时候集群就会丢失这一条啊新添加的数据。</p><p>但是响应能力非常好。</p><h4 id="半同步复制">半同步复制</h4><p>是介于同步复制和异步复制之间的一种复制机制，主节点只需要等待额外一个从节点同步完数据即可向客户端返回。</p><h3 id="多主复制">多主复制</h3><p>多主集群中每个主的工作内容和单主模型一致，流程如下：</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405164746171.png" alt="多主复制时序图" style="zoom:80%;" /></p><p>优势：</p><ul><li>增加主节点的容错性</li><li>可以在多个节点上执行写请求，分担写压力</li></ul><p>缺点：</p><h4 id="数据冲突问题">数据冲突问题</h4><p>假如X = 1到达主节点1之后，主节点1 - &gt;2之间的消息发生延迟，导致主节点1和从节点是最新的数据3，而主节点2是值为1的旧数据。</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405165812031.png" alt="数据冲突" style="zoom:80%;" /></p><p>解决方案：</p><ol type="1"><li>客户端解决：服务端把冲突数据一次性全返回给客户端，由客户端决定真正的值。<ul><li>购物车应用：</li></ul></li><li>最后写入胜利（last writewins）：每个结点给到达自身的写请求添加一个唯一标识（时间戳 or序列号），最后的那个写请求的值是正确的</li><li>因果关系追踪：利用happens-before原则或者业务的逻辑原则，判断请求的顺序。<ul><li>发帖回帖：发帖操作一定先于回帖</li></ul></li></ol><h3 id="无主复制">无主复制</h3><p>客户端不仅向一个结点发送请求，有可能是多个甚至是集群中全部的结点。</p><p><img src="深入理解分布式系统-阅读笔记/image-20240405172034982.png" alt="无主复制时序图" style="zoom:80%;" /></p><p>当客户端收到多个节点的回应，就说明这次写入算做成功。</p><p>更多的数据冲突：客户端给服务端发送的请求可能会丢失，造成部分结点是旧值，部分结点是新值，造成不一致的现象。</p><p>Dynamo修复数据的方式：</p><ol type="1"><li>读修复：客户端主导，客户端发送多个读请求，读取包含新旧数据的全部情况，然后给不一致的结点发送新的请求</li><li>反熵过程：后台进程检测错误数据，保证最终一致性<ul><li>检验数据的正确：采用MerkleTree哈希树，将每个数据范围计算出哈希值，自底向上构造一棵树，有点类似B+树。这样可以根据哪部分数据发生了改动，快速定位到树的结点，也不用全部遍历，只需传入子树的根节点即可。</li></ul></li></ol><h4 id="基于quorum的数据冗余机制">基于Quorum的数据冗余机制</h4><p>Quomm（法定人数）机制，保证分布式系统中数据冗余和最终一致性的一种算法。</p><p>定义：有N个结点的集群，要求至少W个结点写入成功，并且需要同时从R个结点读取数据，只要<code>W + R &gt; N</code> ，就能保证读取的消息中至少有一条是最新的。</p><ul><li>证明：已知N、W，那写入失败的结点是N - W，由于W + R &gt; N，R &gt; N- W，读取的结点个数比写入失败的结点多。</li></ul><p>高一致性设置：W = N， R = N。</p><p>写多读少：W = N， R = 1</p><p>一般设置：W = N / 2 + 1</p><h2 id="cap定理">CAP定理</h2><p>CAP定理是对分布式系统的高级抽象。</p><p>定义：对于一个分布式读写存储系统来说，只能满足以下任意两个特性</p><ul><li>一致性：线性一致性</li><li>可用性：事事有回应</li><li>分区容错性：网络分区导致消息丢失，系统正常运行</li></ul><p>谬误：实际上分区很少发生，发生更多的是网络延迟的情况</p><h3 id="pacelc定理">PACELC定理</h3><p>P：有网络分区的情况下，必须考虑如下特性</p><ul><li>可用性（A）：</li><li>一致性（C）：</li></ul><p>E：无网络分区的情况下，必须考虑如下特性</p><ul><li>延迟（L）：</li><li>一致性（C）：</li></ul><p>常见的分布式系统满足的条件表如下：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406163325789.png"alt="常见分布式数据库的PACELC" /><figcaption aria-hidden="true">常见分布式数据库的PACELC</figcaption></figure><h3 id="base">BASE</h3><p>BASE（Basically Available，SoftState，EventuallyConsistent），基本可用、软状态、最终一致性。</p><p>保证高可用，舍弃强一致性的理论。</p><h2 id="一致性模型">一致性模型</h2><p>纠正：Raft、Paxos并不是分布式一致性算法，而是分布式共识算法。一致性的概念是另一种理论。分布式的一致性，和复制有很大关系，复制的方式保证了一致性的强弱情况。与并发编程的一致性不同，开发者遵守某些规则，是可预测的模型。</p><p>线性一致性是最高级的一致性模型</p><p><img src="深入理解分布式系统-阅读笔记/image-20240326154028290.png" alt="分布式一致性验证框架Jepsen 对一致性模型的分类" style="zoom:67%;" /></p><ul><li><p>白底矩形中的模型的可用性为不可用（Unavailable）：满足这类一致性模型的系统发生网络分区时，为了保证数据一致性和正确性，系统会不可用。用CAP定理来解释，就是典型的CP类系统。这类一致性模型包括线性一致性和顺序一致性。</p></li><li><p>灰底矩形中的模型的可用性为基本可用（StickyAvailable）：满足这类一致性模型的系统可以容忍一部分节点发生故障，还未出现故障的节点仍然可用，但前提是客户端不能将请求发送到不可用的副本节点。这类一致性模型包括因果一致性、PRAM一致性和读你所写一致性。</p></li><li><p>椭圆中的模型的可用性为高可用（TotalAvailable）：满足这类一致性模型的系统可用性是最高的，即使网络发生严重分区在没有发生故障的节点上，仍然保证可用。这类一致性模型包括读后写一致性、单调读一致性和单调写一致性</p></li></ul><h3 id="以数据为中心的模型">以数据为中心的模型</h3><h4 id="线性一致性">线性一致性</h4><p>非严格定义：分布式系统看起来就像只有一个结点，并且全部的操作都是原子性的（针对客户端来说）。</p><ul><li>为什么强调原子性，因为并发写操作不是瞬时完成的，是需要经历一定的时间的，在这个时间内，如果不讲究原子性，那读操作查询到的值会很多种。</li></ul><p>相关术语：</p><ul><li>历史（History H）：并发程序的执行历史，由一系列操作组成<ul><li>操作：包含调用 -&gt; 响应，调用一定在响应之前<ul><li>调用（Invocation）</li><li>响应（Response）</li></ul></li></ul></li></ul><p><img src="深入理解分布式系统-阅读笔记/image-20240406165150516.png" alt="写操作示例" style="zoom:80%;" /></p><p><strong>严格定义：给定一个执行历史，而执行历史可以根据并发操作的可能性扩展为多个顺序历史，如果有一个顺序历史合法，就说明该执行历史就是线性一致性的。</strong></p><p>并发操作的三种关系：</p><ul><li><p>顺序关系：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406170321626.png"alt="顺序关系" /><figcaption aria-hidden="true">顺序关系</figcaption></figure></li><li><p>部分重叠关系（并发）：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406170338211.png"alt="部分重叠关系" /><figcaption aria-hidden="true">部分重叠关系</figcaption></figure></li><li><p>包含关系（并发）：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406170400307.png"alt="包含关系" /><figcaption aria-hidden="true">包含关系</figcaption></figure></li></ul><p>根据严格定义，有如下案例：</p><p><img src="深入理解分布式系统-阅读笔记/image-20240406165750801.png" alt="线性一致性案例" style="zoom:80%;" /></p><p>对这个执行历史进行重排序，得到顺序历史如下：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406170944265.png"alt="线性一致性案例的顺序历史" /><figcaption aria-hidden="true">线性一致性案例的顺序历史</figcaption></figure><p>很显然，S2合法，所以该执行历史是满足线性一致性的。</p><p>总结线性一致性的约束条件：</p><ul><li>顺序记录，任何一次读操作都读到最近一次写入的数据</li><li>保证顺序记录的每个操作时钟有序</li></ul><h5 id="实现">实现</h5><p>加原子锁实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> incr() &#123;</span><br><span class="line"><span class="type">int</span> j = i++;</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并发环境下，j 不一定就是2</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> incr() &#123;</span><br><span class="line">    lock(&amp;lock);</span><br><span class="line"><span class="type">int</span> j = i++;</span><br><span class="line">    unlock(&amp;lock);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常见CPU对其的优化实现都是CAS原子操作保证一致性。</p><h5 id="代价">代价</h5><ol type="1"><li>同步原语、原子变量等会造成额外的开销</li><li>时钟顺序必须一致，也就是必须统一全局时钟</li></ol><h4 id="顺序一致性">顺序一致性</h4><p>定义：以单个客户端为对象，其执行的操作相对有序；以多个客户端为主体对象，不同客户端之间执行的操作顺序可以乱序。</p><p>案例：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406171745565.png"alt="顺序一致性案例" /><figcaption aria-hidden="true">顺序一致性案例</figcaption></figure><p>其顺序历史有如下情况：</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240406171845590.png"alt="S3" /><figcaption aria-hidden="true">S3</figcaption></figure><p>该情况显然不满足线性一致性，但是每个客户端的操作单独来看的话，是局部有序的，虽然并发情况下乱序，但扔满足线性一致性。</p><h4 id="因果一致性">因果一致性</h4><p>定义：必须以相同的顺序，看到因果相关的操作。前提是多个操作之间有因果关系。</p><p>案例：</p><ul><li>发帖操作先于对帖子的评论</li><li>先有评论后有对该评论的回复</li></ul><h4 id="最终一致性">最终一致性</h4><p>系统运行的某个阶段，允许并发操作以任意顺序运行，但是在最终时刻，其系统中保持数据的一致性。</p><h3 id="以客户端为中心的模型">以客户端为中心的模型</h3><p>这类一致性模型从客户端的角度来观察分布式系统，不再从系统的角度考虑每个副本的数据是否一致，而是<strong>考虑客户端的读写请求的结果</strong>，从而推断出系统的一致性</p><h4 id="单调读">单调读</h4><p>要求：客户端某一时刻读取的某一记录的值是v，随着时间单调递增，后面读到的值的新程度&gt;= v ，即不会读到旧值</p><h4 id="单调写">单调写</h4><p>要求：同一个客户端的写操作，在所有副本上都是以同样的顺序运行，保证写操作串行。</p><h4 id="读你所写">读你所写</h4><p>要求：客户端在集群写完数据后，读取任意结点，结点需要返回客户端自己已经写过的值。</p><h4 id="pram一致性">PRAM一致性</h4><p>又称FIFO（流水线随机访问存储器）一致性，由单调读、单调写和读你所写三个一致性模型组成。</p><p>要求：同一个客户端的写操作，在所有副本上的顺序一致。但不同客户端之间的写操作可以乱序。</p><h4 id="读后写">读后写</h4><p>对于同一个客户端，对一个数据项x，先读到了写操作<spanclass="math inline">\(w_1\)</span>的值为v，之后的写操作必须保证值比v新，并且写操作也要在<spanclass="math inline">\(w_1\)</span>之后</p><p>类似因果一致性。</p><h2 id="隔离级别">隔离级别</h2><blockquote><p>tips：箭头表示强弱、包含关系，上层的隔离级别最强</p></blockquote><figure><img src="深入理解分布式系统-阅读笔记/image-20240329114543746.png"alt="隔离级别-级别图" /><figcaption aria-hidden="true">隔离级别-级别图</figcaption></figure><h3 id="常见的事务异常">常见的事务异常</h3><h4 id="脏写脏读">脏写脏读</h4><p><strong>脏写</strong>：一个事务的写覆盖了另一个正在执行还未提交的事务的写。</p><p>案例：事务B覆盖了事务A的写</p><table><thead><tr class="header"><th>事务A</th><th>事务B</th></tr></thead><tbody><tr class="odd"><td>x = 1</td><td></td></tr><tr class="even"><td></td><td>x = 2</td></tr><tr class="odd"><td></td><td>y = 2</td></tr><tr class="even"><td></td><td>commit</td></tr><tr class="odd"><td>y = 1</td><td></td></tr><tr class="even"><td>commit</td><td></td></tr></tbody></table><p>如果两者的事务串行化执行，x一直和y相等。该表的最终结果是x = 2， y =1。</p><p><strong>脏读</strong>：一个事务读到了另一个还未提交的事务写入的值。</p><p>案例：事务B脏读到A的值，初始x为0</p><table><thead><tr class="header"><th>事务A</th><th>事务B</th></tr></thead><tbody><tr class="odd"><td>x = 1</td><td></td></tr><tr class="even"><td></td><td>read(x) = 1</td></tr><tr class="odd"><td>rollback</td><td></td></tr></tbody></table><h4 id="不可重复读模糊读">不可重复读（模糊读）</h4><p>一次事务中，对数据的两次读操作，读出来的值不同。</p><p>案例：初始x = 0，事务B读的值不同</p><table><thead><tr class="header"><th>事务A</th><th>事务B</th></tr></thead><tbody><tr class="odd"><td></td><td>read(x) = 0</td></tr><tr class="even"><td>x = 1</td><td></td></tr><tr class="odd"><td></td><td>read(x) = 1</td></tr><tr class="even"><td>commit</td><td>commit</td></tr></tbody></table><h4 id="幻读">幻读</h4><p>一次事务中，按照某种条件查询，前后多次查询的数据量发生变化。原因是别的事务在此之间插入或者删除了满足相同条件的数据。</p><h4 id="丢失更新">丢失更新</h4><p>两个事务读取到同一个值，都想对这个值修改，由于最后只能展示一个值，一定会丢失一个事务写的值。</p><p>案例：初始x = 0</p><table><thead><tr class="header"><th>事务A</th><th>事务B</th></tr></thead><tbody><tr class="odd"><td>x = 1</td><td></td></tr><tr class="even"><td></td><td>x = 2</td></tr><tr class="odd"><td>commit</td><td>commit</td></tr></tbody></table><h4 id="读写偏斜">读写偏斜</h4><p><strong>读偏斜</strong>：事务读到了数据一致性<strong>约束</strong>被破坏的数据，这里的一致性是业务上的一致性</p><p>案例：给定约束X + Y = 100</p><table><thead><tr class="header"><th>事务A</th><th>X</th><th>Y</th><th>事务B</th></tr></thead><tbody><tr class="odd"><td></td><td>50</td><td>50</td><td>Read(X) = 50</td></tr><tr class="even"><td>Write(X， 30)</td><td>30</td><td>50</td><td></td></tr><tr class="odd"><td>Write(Y， 70)</td><td>30</td><td>70</td><td></td></tr><tr class="even"><td>commit</td><td>30</td><td>70</td><td>Read(Y) = 70</td></tr><tr class="odd"><td></td><td>30</td><td>70</td><td>commit</td></tr></tbody></table><p>可以看到，事务B读到的X + Y = 50 + 70不满足业务规定，导致读偏斜。但是实际上X和Y的结果是符合条件的，只是事务B出现异常。</p><p><strong>写偏斜</strong>：两个事务都读到了相同的数据集，随后各自修改了不相干的数据集，导致最终结果不满足业务上的一致性</p><p>案例：给定约束X + Y &lt; 100</p><table><thead><tr class="header"><th>事务A</th><th>X</th><th>Y</th><th>事务B</th></tr></thead><tbody><tr class="odd"><td>Read(X) = 10</td><td>10</td><td>20</td><td>Read(X) = 10</td></tr><tr class="even"><td>Read(Y) = 20</td><td>10</td><td>20</td><td>Read(Y) = 20</td></tr><tr class="odd"><td>Write(X， 70)</td><td>70</td><td>20</td><td></td></tr><tr class="even"><td></td><td>70</td><td>50</td><td>Write(Y， 50)</td></tr><tr class="odd"><td>commit</td><td>70</td><td>50</td><td>commit</td></tr></tbody></table><p>最终X + Y &gt; 100，不满足业务规定的一致性。</p><h3 id="隔离级别解决的异常">隔离级别解决的异常</h3><table><colgroup><col style="width: 16%" /><col style="width: 8%" /><col style="width: 8%" /><col style="width: 20%" /><col style="width: 8%" /><col style="width: 16%" /><col style="width: 12%" /><col style="width: 12%" /></colgroup><thead><tr class="header"><th></th><th>脏写</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>丢失更新</th><th>读偏斜</th><th>写偏斜</th></tr></thead><tbody><tr class="odd"><td>读未提交</td><td>√</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>读已提交</td><td>√</td><td>√</td><td></td><td></td><td></td><td></td><td></td></tr><tr class="odd"><td>快照隔离</td><td>√</td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td></td></tr><tr class="even"><td>可重复读</td><td>√</td><td>√</td><td>√</td><td></td><td>√</td><td>√</td><td>√</td></tr><tr class="odd"><td>串行化</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><ul><li>解决：√</li></ul><h2 id="一致性-隔离级别">一致性 &amp; 隔离级别</h2><figure><img src="深入理解分布式系统-阅读笔记/image-20240329120044065.png"alt="衡量并发系统的模型" /><figcaption aria-hidden="true">衡量并发系统的模型</figcaption></figure><h1 id="分布式共识">分布式共识</h1><h2 id="简介">简介</h2><h3 id="是什么">是什么</h3><p>共识：传统意义上的协商，指分布式结点之间通过消息传递，达到对某件事的共同认可。</p><p>数学定义：一个分布式系统包含N个进程，记为{0，1，2，3，4...n-1}，每个进程都有一个初始值，进程之间互相通信，设计一种共识算法使得尽管出现故障但进程之间仍能协商出某个不可撤销的最终决定值。<strong>每次执行</strong>满足以下：</p><ul><li>终止性：所有的进程最终都会认同一个值</li><li>协定性：正确的进程都会认同一个共同的值</li><li>完整性（有效性）：如果正确的进程都提议同一个值v，那么任何正确进程的最终决定值一定是γ</li></ul><h3 id="为什么">为什么</h3><p>分布式系统的几个主要难题：网络不可靠问题、时钟不一致问题和节点故障问题。解决以上问题常见的手段：状态机复制（SM R）</p><p>状态机的概念：</p><ul><li>内容：一组状态、输入输出、转换函数、输出函数和独特的“初始状态”</li></ul><p>伪码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">state = init</span><br><span class="line">log = []</span><br><span class="line">while (true) &#123;</span><br><span class="line">on receiving command from a client</span><br><span class="line">log.append(cmd)</span><br><span class="line">//生成新的状态</span><br><span class="line">state， output = apply(cmd， state)</span><br><span class="line">return output to client</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现状态机需要多副本日志系统，而共识算法是其解决方案，并且共识算法使得每个副本对日志的值和顺序达成共识，这样整个集群看起来像是一个结点在工作。</p><h2 id="异步系统的共识">异步系统的共识</h2><h3 id="flp不可能定理">FLP不可能定理</h3><p>定义：在一个完全异步的分布式系统中，即使只有一个结点发生了故障，也不存在一个共识算法使得系统达到共识。</p><blockquote><p>在一个异步系统中，进程可以在任意时间返回响应，我们没有办法分辨一个进程是速度很慢还是己经崩溃。基于此，我们无法在有限时间内达成共识，这不满足终止性</p></blockquote><p>分布式共识算法需要两个属性：</p><ul><li>安全性：正确的进程，要认同同一个值</li><li>活性：系统最终会认同某一个值</li></ul><p>FLP定理实际上是强调：共识算法很难在以下条件下设计出来：</p><ul><li>一个完全异步的系统</li><li>系统发生故障</li><li>不可能有一个同时具备安全性、活性、容错性的共识算法</li></ul><p>绕过FLP定理的方法：将异步系统转化为同步系统，有如下方法</p><h4 id="故障屏蔽">故障屏蔽</h4><p>该方法假设故障的进程一定会复苏，并找到重回分布式系统的方法。如果没有受到该进程的任何信息，就一直等待。</p><p>实现方式：崩溃的进程具备自我恢复，重启等功能；重启前，进程会记录上下文信息，恢复时还能达到之前的状态。</p><h4 id="故障检测器">故障检测器</h4><p>常见的故障检测器如超时故障检测器，会在一定超时时间内，判断没有响应的进程是否崩溃。</p><p>故障检测器必须有的属性：</p><ul><li>完全性：每一个故障的进程都会被每一个正确的进程怀疑</li><li>精确性：正确的进程不会被别的进程怀疑</li></ul><p>完美的故障检测器无法实现，于是有最终弱故障检测器：</p><ul><li>最终弱完全性：每一个故障的进程都会被一些正确的进程怀疑</li><li>最终弱精确性：<strong>一段时间后</strong>，正确的进程不会被别的正确的进程怀疑</li></ul><p><img src="深入理解分布式系统-阅读笔记/image-20240408205900186.png" alt="故障检测器案例" style="zoom:80%;" /></p><h4 id="随机性算法">随机性算法</h4><p>随机算法的输出不仅取决于外部输入，还取决于执行过程中的随机概率，因此，给定两个完全相同的输入，该算法可能输出两个不同的值，随机性算法使得“ 敌人”不能有效地阻碍系统达成共识，即实现拜占庭容错，和传统选出领导节点再协作的模式不同，像区块链这类应用的共识是基于哪个节点最快计算出难题来达成的。</p><p>区块链中的每一个新区块都由本轮最快计算出数学难题的节点添加，整个分布式网络持续不断地建设这条有时间戳的区块链，而承载了最多计算量的区块链正是达成了共识的主链（即累积计算难度最大）。</p><h2 id="同步系统的共识">同步系统的共识</h2><p>实现同步系统共识的理论基础：同步系统中，有不超过f个进程发生故障，f&lt; N，那经过f + 1轮消息最终会达成共识。</p><h3 id="paxos">Paxos</h3><p><strong>基本概念</strong></p><ul><li>提案：推动整个算法进行的消息<ul><li>提案编号</li><li>提案值</li></ul></li></ul><p>系统角色：</p><ul><li>客户端：</li><li>提议者：收到</li><li>接收者 &amp; 投票者：</li><li>学习者：</li></ul><h4 id="算法会遇到的问题">算法会遇到的问题</h4><h4 id="实现流程">实现流程</h4><h5 id="阶段一">阶段一</h5><h5 id="阶段二">阶段二</h5><h4 id="案例">案例</h4><h4 id="活锁">活锁</h4><h4 id="go实现">Go实现</h4><h3 id="multi-paxos">Multi-Paxos</h3><h4 id="确定日志索引">确定日志索引</h4><h4 id="领导者选举">领导者选举</h4><h4 id="减少请求">减少请求</h4><h4 id="副本的完整性">副本的完整性</h4><h4 id="客户端请求">客户端请求</h4><h4 id="配置变更">配置变更</h4><h4 id="整体实现">整体实现</h4><h3 id="其它paxos变体">其它Paxos变体</h3><h3 id="raft">Raft</h3><p>Raft{Reliable｜Replicated｜Redundant|} And Fault-Tolerant</p><p>像Multi-Paxos一样是基于领导者的算法。逻辑简单</p><h4 id="系统模型-1">系统模型</h4><ul><li>服务器可能宕机停止运行，过段时间再恢复，但系统不存在非拜占庭故障，即结点的行为是非恶意的。</li><li>可能存在网络分区</li><li>消息可能丢失、重复、乱序、延迟</li></ul><h4 id="算法基本概念">算法基本概念</h4><p><strong>状态</strong></p><p>任何时间段，Raft集群中每台服务器的状态只能是以下三种：</p><ul><li>领导者（Leader）：负责处理客户端的请求、日志复制；每个Term只有一个Leader</li><li>候选人（candidate）：权限介于领导者和追随者之间，候选者获取投票成功，晋升为领导者</li><li>跟随者（Follower）：完全被动的处理信息，只接受RPC请求，作出响应，不会主动发送任何消息</li></ul><p>状态伪码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">Follower = <span class="literal">iota</span></span><br><span class="line">    Candidate</span><br><span class="line">    Leader</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>任期</strong></p><p>Raft将时间抽象为一个个的任期（Term），代表一种逻辑时间，原来解决时序性问题。用数字代表任期号。</p><p>Raft服务器从Follow -&gt; Candidate的时候，本身的任期+1，当集群选出了Leader，代表这个任期真正开始，开始处理客户端的请求。</p><figure><img src="深入理解分布式系统-阅读笔记/image-20240412210101898.png"alt="任期" /><figcaption aria-hidden="true">任期</figcaption></figure><p>每台服务器需要存储一个变量<code>CandidateId</code>代表当前服务器所处的任期。</p><p><strong>服务器之间的通信</strong></p><p>通过两个RPC：</p><ul><li><code>RequestVote</code>：用于领导者选举</li><li><code>AppendEntry</code>：用于日志复制、心跳检测</li></ul><h4 id="领导者选举-1">领导者选举</h4><p>何时开始选举？</p><p>每个服务器会定义一个<code>electionTimeout</code>（选举超时），当这个定时器定时结束后，当前服务器就会变成Candidate状态，向其它服务器发送请求投票，投票者超过半数，就晋升成Leader，为了保证leader的权威性，Leader会周期性的向其它服务结点发送心跳包。这个周期称为<code>HeartBeatTimeout</code>。</p><p>状态转换流程：</p><p><img src="深入理解分布式系统-阅读笔记/image-20240412210733654.png" alt="状态转换" style="zoom:80%;" /></p><p>如何设置两个超时时间？</p><ul><li><code>electionTimeout</code>：一般在100~500ms的范围</li><li><code>HeartBeatTimeout</code>：一定小于<code>electionTimeout</code>，保证当前Leader的权威，防止心跳失效，导致集群选举多个Leader，一般在50- 100ms</li></ul><p><strong>选举流程</strong></p><p>节点开始竞选时：</p><ol type="1"><li>状态变为Candidate</li><li>增加自己的任期</li><li>先给自己投一票</li><li>向其它结点发送RequestVote，RPC失效会重试</li><li>更新状态<ol type="1"><li>如果获得的票数超过集群总结点数目的半数以上，变为Leader状态，并发送心跳包</li><li>收到当前集群已经存在的Leader的AppendEntries，变为Follower</li><li>选举时间超时，没人获胜，等待下一个结点超时后的选举</li></ol></li></ol><p><img src="深入理解分布式系统-阅读笔记/image-20240412211441311.png" alt="选举流程" style="zoom:80%;" /></p><p><strong>保证一些特性</strong></p><p>选举过程中，需要保证的特性包括：</p><ul><li>活性：</li><li>安全性：一个任期内只有一个Leader选举出来<ul><li>唯一投票：每个结点只允许投票一次。维护额外的变量votedFor，没有投票就为空，如果不为空，就不投给别人</li><li>过半投票胜出：这样保证不可能有两个节点同时胜出</li></ul></li></ul><h5 id="分割选票">分割选票</h5><p>原则上，结点可以无限期的分割选票。</p><p>假如全部结点同一时刻开始选举，瓜分选票，然后同一时间超时，继续瓜分......如此循环，类似Paxos活锁问题。这样集群就会失去活性。</p><p>解决方案：</p><p>采用随机超时时间，每个结点有选举的随机超时时间（150ms ~300ms）。这种情况下出现分裂投票的可能性不大，满足活性。</p><h4 id="日志复制">日志复制</h4><p>每个结点有持久化的日志副本（log[]），日志条目格式如下：</p><ul><li>索引</li><li>任期号</li><li>命令：应用于状态机的命令</li></ul><p><strong>索引 + 任期号是日志的唯一标识。</strong></p><p><strong>提交日志</strong></p><p>如果一个日志条目被存储到大多数结点上，那么就可以把该日志提交。如果记录提交，就不能再改变，状态机可以安全的执行这个日志条目里的命令。</p><p><strong>日志复制的流程</strong></p><ol type="1"><li>客户端向领导者发送命令，希望命令被所有结点执行</li><li>领导者先把命令转化为日志，追加自己的日志中，持久化</li><li>领导者并行向其它服务结点发送<code>AppendEntry</code></li><li>如果收到来自半数以上服务结点的正确响应，领导者认为这个日志应该提交。随后领导者将该命令应用到状态机，返回给客户端，并将应用的消息通知给其它结点。<ul><li>领导者提交以后，会在之后的<code>AppendEntry</code>中加入变量<code>LeaderCommit</code>，表示最新提交的日志最大索引。其他Follower都会把小于<code>LeaderCommit</code>的日志提交，应用命令到自己的状态机。</li></ul></li><li>跟随者宕机，Leader有定时器，超时会重复发送。</li><li>性能优化：领导者异步发送<code>AppendEntry</code>，这样只要超过半数的回应，即可响应客户端。</li></ol><h4 id="领导者更替">领导者更替</h4><h4 id="选举限制">选举限制</h4><h4 id="延迟提交之前任期的日志条目">延迟提交之前任期的日志条目</h4><h4 id="处理不一致的日志">处理不一致的日志</h4><h4 id="处理旧领导者">处理旧领导者</h4><h4 id="客户端协议">客户端协议</h4><h4 id="线性一致性的实现">线性一致性的实现</h4><h4 id="配置变更-1">配置变更</h4><h5 id="存在的bug">存在的bug</h5><h4 id="极端情况下的活性问题">极端情况下的活性问题</h4><h4 id="日志压缩">日志压缩</h4><h4 id="基于内存的状态机的快照">基于内存的状态机的快照</h4><h4 id="基于磁盘的状态机的快照">基于磁盘的状态机的快照</h4><h4 id="性能优化">性能优化</h4><h3 id="paxos-vs-raft">Paxos VS Raft</h3><h3 id="拜占庭容错和pbft">拜占庭容错和PBFT</h3><h1 id="分布式事务">分布式事务</h1><h2 id="是什么-1">是什么</h2><h2 id="原子提交算法-原子性">原子提交算法-原子性</h2><h3 id="两阶段提交">两阶段提交</h3><h3 id="三阶段提交">三阶段提交</h3><h3 id="paxos提交算法">Paxos提交算法</h3><h3 id="基于quorum的提交协议">基于Quorum的提交协议</h3><h3 id="saga事务">Saga事务</h3><h2 id="并发控制-隔离性">并发控制-隔离性</h2><p>除了原子性，分布式事务还需要实现隔离性。并发控制是一种隔离并发事务以保证数据正确性的机制。分为以下三类：</p><ul><li>悲观并发控制</li><li>乐观并发控制</li><li>多版本并发控制</li></ul><h3 id="两阶段锁">两阶段锁</h3><h3 id="乐观并发控制">乐观并发控制</h3><h3 id="多版本并发控制">多版本并发控制</h3><h4 id="多版本两阶段锁">多版本两阶段锁</h4><h4 id="多版本乐观并发控制">多版本乐观并发控制</h4><h4 id="多版本时间戳排序">多版本时间戳排序</h4><h4 id="版本存储垃圾回收">版本存储&amp;垃圾回收</h4><h1 id="时间和事件顺序">时间和事件顺序</h1><blockquote></blockquote><h2 id="物理时钟">物理时钟</h2><h2 id="时钟同步">时钟同步</h2><h2 id="逻辑时钟">逻辑时钟</h2><h2 id="向量时钟">向量时钟</h2><h2 id="分布式快照">分布式快照</h2><h1 id="常见分布式系统案例">常见分布式系统案例</h1><h2 id="分布式文件系统gfs">分布式文件系统GFS</h2><h3 id="gfs目标">GFS目标</h3><h3 id="gfs架构">GFS架构</h3><h3 id="读取文件">读取文件</h3><h3 id="写入文件">写入文件</h3><h3 id="一致性模型-1">一致性模型</h3><h3 id="其它特性">其它特性</h3><h2 id="分布式协调服务zookeeper">分布式协调服务Zookeeper</h2><h3 id="zookeeper架构">Zookeeper架构</h3><h3 id="数据模型">数据模型</h3><h3 id="实现-1">实现</h3><h3 id="客户端api">客户端API</h3><h3 id="其它">其它</h3><h4 id="批处理流水线">批处理、流水线</h4><h4 id="wait-free">wait-free</h4><h2 id="分布式表格存储bigtable">分布式表格存储Bigtable</h2><h3 id="数据模型-1">数据模型</h3><h3 id="架构">架构</h3><h3 id="sstable-和-lsm-tree">SSTable 和 LSM Tree</h3><h3 id="其它优化">其它优化</h3><h2 id="分布式键值存储dynamo">分布式键值存储Dynamo</h2><h3 id="架构-1">架构</h3><h3 id="请求协调">请求协调</h3><h3 id="成员管理和故障检测">成员管理和故障检测</h3><h2 id="分布式nosql数据库cassandra">分布式NoSQL数据库Cassandra</h2><h3 id="数据模型-2">数据模型</h3><h3 id="架构-2">架构</h3><h3 id="协调请求">协调请求</h3><h3 id="一致性级别">一致性级别</h3><h3 id="轻量级事务">轻量级事务</h3><h3 id="二级索引">二级索引</h3><h3 id="批处理">批处理</h3><h2 id="分布式数据库spanner">分布式数据库Spanner</h2><h3 id="数据模型-3">数据模型</h3><h3 id="架构-3">架构</h3><h3 id="truetime">TrueTime</h3><h3 id="读写事务">读写事务</h3><h3 id="只读事务">只读事务</h3><h3 id="快照读和模式变更事务">快照读和模式变更事务</h3><h2 id="分布式批处理">分布式批处理</h2><h3 id="mapreduce">MapReduce</h3><h3 id="spark">Spark</h3><h2 id="分布式流处理flink">分布式流处理Flink</h2><h3 id="计算模型">计算模型</h3><h3 id="架构-4">架构</h3><h3 id="时间处理">时间处理</h3><h3 id="分布式快照-1">分布式快照</h3><h3 id="精确一次语义">精确一次语义</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;认识分布式系统&quot;&gt;认识分布式系统&lt;/h1&gt;
&lt;h2 id=&quot;什么是分布式系统&quot;&gt;什么是分布式系统&lt;/h2&gt;
&lt;p&gt;分布式系统是一个其&lt;strong&gt;组件分布&lt;/strong&gt;在不同的、联网的计算机上，组件之间通过&lt;strong&gt;传递消息&lt;/strong&gt;进行通</summary>
      
    
    
    
    <category term="分布式" scheme="https://vlsmhd.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>高性能IM即时通讯系统设计</title>
    <link href="https://vlsmhd.github.io/2024/03/19/%E9%AB%98%E6%80%A7%E8%83%BDIM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://vlsmhd.github.io/2024/03/19/%E9%AB%98%E6%80%A7%E8%83%BDIM%E5%8D%B3%E6%97%B6%E9%80%9A%E8%AE%AF%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-03-19T13:31:13.565Z</published>
    <updated>2024-04-24T13:05:32.559Z</updated>
    
    <content type="html"><![CDATA[<p>本文学习借鉴硬核课堂。加上看了N+博客</p><h1 id="需求分析">需求分析</h1><h2 id="功能">功能</h2><ol type="1"><li>好友添加、关注</li></ol><p>没什么好说的，就是</p><ol start="2" type="1"><li>聊天会话列表</li></ol><p>展示聊天的会话页面，点击一个好友 / 群组，展示出一个两天窗口</p><ol start="3" type="1"><li><p>单聊</p></li><li><p>群聊</p></li><li><p>多端登录</p></li><li><p>已读回执</p></li></ol><p>已读、未读展示</p><h2 id="用户量数据分析">用户量数据分析</h2><ol type="1"><li>消息量亿级别<ul><li>假设每人平均每天发100条消息，1000Mli*100/86400 = 12Mli QPS</li><li>假设一条消息存储消耗1kb，1000Mli<em>100 </em> 1KB = 1P 每天</li><li>峰值预估12Mli *1.5 = 18Mli QPS</li></ul></li><li>可靠性 5个9</li><li>低延迟</li><li>高性能</li><li>消息顺序性</li><li>万人群聊：老板发红包，一瞬间的消息风暴</li><li>可扩展</li><li>可运维</li></ol><h1 id="初级架构设计">初级架构设计</h1><figure><img src="高性能IM即时通讯系统设计/image-20240320105303504.png"alt="初级架构设计" /><figcaption aria-hidden="true">初级架构设计</figcaption></figure><h2 id="数据库表设计">数据库表设计</h2><p>采用发送消息表存储消息体，而消息接收表只存储消息的id，随后从发送消息表拉取信息即可。</p><p>查询架构：</p><p><img src="高性能IM即时通讯系统设计/image-20240318120700514.png" alt="查询架构" style="zoom:67%;" /></p><h3 id="消息发送表">消息发送表</h3><table><colgroup><col style="width: 4%" /><col style="width: 7%" /><col style="width: 17%" /><col style="width: 38%" /><col style="width: 15%" /><col style="width: 7%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th>msg_id</th><th>msg_from</th><th>msg_to</th><th>msg_seq</th><th>msg_type</th><th>send_time</th><th>msg_content</th></tr></thead><tbody><tr class="odd"><td>消息ID</td><td>消息发送者</td><td>目标可以是用户、群组id</td><td>客户端发送消息的序列号，解决消息重复、用于消息ack</td><td>消息类型：单聊、群聊</td><td>发送时间</td><td>内容</td></tr></tbody></table><h3 id="消息接收表">消息接收表</h3><table><thead><tr class="header"><th>ID</th><th>msg_id</th><th>msg_from</th><th>msg_to</th><th>flag</th></tr></thead><tbody><tr class="odd"><td>本表ID</td><td>消息id</td><td>消息发送者</td><td>目标可以是用户、群组id</td><td>是否已读</td></tr></tbody></table><h1 id="优化设计">优化设计</h1><h2 id="高性能优化">高性能优化</h2><h3 id="接入层">接入层</h3><p>接入层包括：网关服务、服务层</p><h4 id="实时性">实时性</h4><h5 id="长连接机制">长连接机制</h5><p>上面的初级架构，用户读取消息采用轮询拉模式，也就是服务器轮询获取用户的请求，然后查询数据库返回给对应的用户。这种方式性能处理太差，无法及时响应消息，消息延迟过高。</p><p>解决方案：采用TCP长连接push消息给用户。</p><p>如图：</p><figure><img src="高性能IM即时通讯系统设计/image-20240320111228921.png"alt="长连接" /><figcaption aria-hidden="true">长连接</figcaption></figure><p>长连接的优势：</p><ol type="1"><li>连接不会断开，无需频繁发送请求，资源复用</li><li>用户无需拉取消息，服务端可以向用户push数据，减少一次客户端拉取请求，提高响应速率</li></ol><p>劣势：</p><ol type="1"><li>持续占用内存，</li></ol><p>如何实现长连接：</p><ol type="1"><li>TCP建立在IP之上，客户端只能通过公网IP，通过socket通信与服务端建立连接</li><li>引入新的服务，分布式场景下，服务器IP地址众多，需要给客户端选择最近IP地址的机会</li></ol><figure><img src="高性能IM即时通讯系统设计/image-20240320131156750.png"alt="image-20240320131156750" /><figcaption aria-hidden="true">image-20240320131156750</figcaption></figure><p>这个时候，服务端就可以通过redis这样的kv存储，去存储&lt;uid,serverID&gt;这样一个键值，通过用户的id，得到用户所在服务器地址。</p><p>当用户数增长过快时，长连接过度占用内存，这时该怎么办？</p><p>如上图架构图，把IPCONFIG服务单独拆分出来，这样</p><h5 id="数据库io瓶颈">数据库IO瓶颈</h5><p>采用长连接以后，服务端这时候的性能瓶颈就会来到数据库这边</p><figure><img src="高性能IM即时通讯系统设计/image-20240320165121944.png"alt="数据库IO瓶颈" /><figcaption aria-hidden="true">数据库IO瓶颈</figcaption></figure><p>操作库的时间量级是几百ms，而响应客户端的时间要在微秒级别，如果查询数据库采用同步阻塞方式，那就会造成用户的大量请求排队聚集在服务端，造成服务雪崩现象。</p><h5 id="大量重建连接影响消息">大量重建连接影响消息</h5><p>重建连接的场景：</p><ol type="1"><li>用户频繁登入登出。比如多端登录，有一个限制策略，不允许同一系统同时登录。那用户在另一台手机登录，就得把当前这台手机给下线，并且长连接是带有状态的，需要迁移过去。</li><li>服务器有最优选择策略：可以为用户分配最佳网络地址，涉及到切换长连接</li></ol><p>由于长连接是在网关层建立，退出登录肯定要做一些业务处理，如果在网关层去做这个业务代码逻辑，那就要迭代网关层，然后重启。带有状态的服务重启是比较慢的，要恢复状态，加载很多东西。如果百万用户都建立了长连接，重启成本非常大。</p><p>那我肯定要让网关层变成无状态的，不用重启，把有状态的信息迁移到服务端，网关层只负责连接建立与断开。</p><h4 id="消息路由-可靠送达">消息路由 &amp; 可靠送达</h4><p>接入层可以是一个大的服务集群（比如，中国和美国两大服务集群），也可以是简单的单个服务。</p><p>客户端A在北京服务器接入，客户端B在广州，如图：</p><p><img src="高性能IM即时通讯系统设计/image-20240320201342980.png" alt="消息不可靠传输实例" style="zoom:80%;" /></p><p>客户端A、B进行通讯，A发送消息，那么服务器如何知道B的接入层服务器地址在哪，然后推送消息给B呢？</p><h5 id="广播">广播</h5><p>IM server将消息扇出式的发送给所有接入层服务，接入层服务只需维护自己的一个map&lt;uid,socketChannel&gt;，判断IMserver传来的消息是否属于分配到自己这边的用户。</p><p>优点：</p><ol type="1"><li>实现简单</li><li>适合超大聊天室场景</li></ol><p>缺点：</p><ol type="1"><li>消息风暴</li><li>单聊场景过多的无效通信</li></ol><h5 id="一致性hash">一致性hash</h5><p>IMserver和接入层使用的hash算法一致，这样用户通过自身ID计算出hash值，映射到具体的接入服务器上。这就需要客户端维护一个TreeMap，便于一致性hash计算查找。</p><p>IMserver也保证和接入层使用的hash算法一致，这样同一个UID算出的接入层结点一致</p><p>架构图如下：</p><p><img src="高性能IM即时通讯系统设计/image-20240320221144287.png" alt="一致性hash-可靠传输" style="zoom: 80%;" /></p><p>优点：</p><ol type="1"><li>消息不会浪费</li><li>实现简单</li></ol><p>缺点：</p><ol type="1"><li>重度依赖服务发现系统的稳定性：有的服务结点会下线，这时需要有良好的服务发现策略，以便及时提供用户可用结点</li><li>依赖hash算法是否分布均匀、服务倾斜：也可以利用虚拟节点优化。</li><li>选择的服务结点不一定是最优，受到hash限制</li></ol><h5 id="路由服务层">路由服务层</h5><p>再次抽取一个服务，称为路由服务，维护&lt;UID,接入机器&gt;这样映射关系的map。底层可以用redis这样的集群实现。这样接入层仅需维护一个list集合，保存与用户建立的长连接通道即可（FD）</p><ul><li>可以根据不同会话类型组织映射关系，群组、多设备等kv关系：群聊时候仅有GID，那就可以存储&lt;GID,Set<UID>&gt;这样一个集合，这样就能分发到群组中用户</li></ul><figure><img src="高性能IM即时通讯系统设计/image-20240323103540734.png"alt="路由服务层" /><figcaption aria-hidden="true">路由服务层</figcaption></figure><p>优点：</p><ol type="1"><li>集中管理映射关系，方便服务扩展维护</li><li>MQ使server与路由层解耦，提高消息处理效率</li></ol><p>缺点：</p><ol type="1"><li>实现较为复杂</li><li>需要独立维护路由层集群</li><li>服务依赖底层KV和MQ的稳定性</li></ol><h3 id="存储层">存储层</h3><h4 id="万人群聊大分发量">万人群聊——大分发量</h4><p>读写比1:9999,超大群每人发送一条消息要1万分发量，应该如何控制超大群将机器资源耗尽？</p><p>IM接收到客户端的上行消息，随后服务端要转发给剩下的10000人，服务端下行消息需要经过MQ发送到路由层。</p><p>亦或是，群里9999人同时发消息，单个用户要收到10000条消息，整个服务端的消息传输量级就是亿级。</p><p>那我可以在路由层维护一个线程池，10000条消息，五个或者十个线程进行分配，每个线程执行1000条这样。这样避免过多的请求导致路由层线程资源耗尽。</p><h4 id="消息积压">消息积压</h4><p>限制了并发数量，这时候一定会导致消息积压的问题，收发消息延迟会增大。</p><h5 id="组提交">组提交</h5><p>IMserver层设置一个map的cache，聚集大概1000~2000条消息，把这一组发送，而不是发送一万条消息了，这样在路由层的</p><h5 id="推拉结合">推拉结合</h5><p>群聊的消息存到数据库，向用户通知一条消息，你有多少多少条消息，这样用户点击这个按钮，就会像服务端提交读事件。读取数据的时候，再把消息分组一下统一发给某一用户。</p><h4 id="写放大-降低存储成本">写放大-降低存储成本</h4><p>群聊消息中，写的规模是O（n）线性级别，一个用户发送消息，需要同步其它所有的用户的收件箱。读则是O（1），</p><h5 id="服务降级">服务降级</h5><p>超大群聊，采用服务降级策略，采用读放大策略，增大消息延迟来减少存储成本。因为站在用户的视角，他自己也觉得群聊消息人多，拉取消息慢一点，用户角度来看是能接受的。并不影响用户的一个使用的体验。</p><h4 id="回执消息处理">回执消息处理</h4><ol type="1"><li>实时流处理，Kafka，对于接收者已读消息的下发要同步进行，而接收者的消息已读可以异步落库</li></ol><h4 id="db取数效率低">DB取数效率低</h4><p>从DB取数，延时难以控制在10ms以内。</p><h5 id="分级存储">分级存储</h5><p>分级存储的概念：在IM中，存储历史消息是常见的业务，那根据用户的习惯，存储时间越久远，这个消息越不值钱，所以应该放到更底层的数据库中。</p><p>分级存储中，最高层的存储系统，存储数据少，但是效率高，自上往下，下面的数据库存储数据多，效率低。</p><p>那这个系统可以设计为：Redis存储大致200条消息，或者最近三天、七天的消息，包括离线消息的同步，一次性只给同步200条这样，当有新的需要，由用户自己去查询。mysql存储最近一年的消息，随后利用文件系统这样的存储历史全部的消息。</p><p>优点：</p><ol type="1"><li>在线请求流量在MemDB终止</li><li>对请求按读取热度分级处理</li><li>对离线消息同步等range操作支持良好</li><li>可较为简单的支持群聊的推拉结合方案</li></ol><p>缺点：</p><ol type="1"><li>IM Server的本地缓存预热较慢，服务重启期间会有所延迟抖动</li><li>大量使用内存，导致运维难度提升</li><li>消息的已读/未读状态的变更要维护多个缓存之间的一致性</li><li>要关注缓存命中率，<strong>缓存穿透</strong>等问题</li></ol><h5 id="图数据库">图数据库</h5><h5 id="存储层代理服务">存储层代理服务</h5><p>对多级存储或者是多元存储方案聚合，抽象出一个存储代理层。</p><p>代理层基于key做hash分片，底层的kvserver基于一致性协议进行复制，代理层进行分片与合并</p><h2 id="消息时序一致性">消息时序一致性</h2><h3 id="消息丢失">消息丢失</h3><ol type="1"><li>上、下行消息重试</li><li>接收消息方回应ACK</li></ol><h3 id="消息重复">消息重复</h3><h4 id="uuid">UUID</h4><ol type="1"><li>当数据量不大的时候，使用UUID可以，存到redis，消息发过来就对消息产生的UUID和redis比较</li><li>数据量大就不适合</li></ol><h4 id="消息上行处理">消息上行处理</h4><figure><img src="高性能IM即时通讯系统设计/image-20240323164828786.png"alt="消息上行处理" /><figcaption aria-hidden="true">消息上行处理</figcaption></figure><p>客户端服务端都维护一个以uid，作为当前客户端给服务端发送消息的序号</p><p>服务端按照消息的uid，进行排序，这样上行消息的时序性就能保证。</p><h4 id="消息下行处理">消息下行处理</h4><p>这时候要切换一下角色：由服务端为消息生成一个seqID，客户端维护一个maxseq ID，发送的消息不是max_seqID，消息直接丢弃。</p><h3 id="消息有序">消息有序</h3><p>上行消息有序：按照客户端维护的cid进行排序操作</p><p>下行消息有序：按照服务端生成的seqID，进行排序操作</p><h3 id="递增的消息id">递增的消息ID</h3><h4 id="纯拉模式">纯拉模式</h4><p>一开始的IM系统架构，保证上行消息一致性即可。下行用户直接从服务器拉取。</p><h4 id="单调递增id生成器">单调递增ID生成器</h4><p>利用redis的incr命令，生成单调递增ID，但是可能会出现单节点崩溃的场景，如果把redis改造成集群，那也会出现不一致性，并且非单调的问题。</p><p>比如：主节点A，从结点B、C，初始状态都是1，当A接收到请求，ID自增，A =2，这时A结点挂掉，B、C结点选出一个主节点，这时候ID就会从1开始，出现重复性，整体的ID就不会单调了，但还是递增的。解决方案：可以利用lua脚本的原子特性，如果结点挂掉，在lua脚本内进行判断，并且让这个id+10000，这个10000根据具体场景选择，就是让id自增的跨度大一些，防止出现重复的问题。</p><p>缺点：</p><ol type="1"><li>依赖redis集群的稳定性，可靠性一般</li><li>对于群聊来说，性能差</li></ol><h4 id="双id链方法">双ID链方法</h4><p>这个方法借鉴Raft算法中，不同结点之间同步日志的算法。</p><p>上行消息要保证时序一致，客户端向服务端发送消息的时候，维护两个变量：</p><ul><li>preID：上一次发送的消息的ID</li><li>ID：当前发送消息的ID</li></ul><p>服务端只需维护一个preID，表示接收的上一条消息，在消息到达时，服务端比较preID是否相同，不相同说明中间发生了消息丢失或者重复问题，只需返回给客户端preID，然后客户端把ID= preID +1这条消息发给服务端即可。如果preID相同，服务端直接把新接收的ID赋值给preID即可。</p><p>优点：</p><ol type="1"><li>不依赖id生成的单调性，因为是在客户端，服务端也就是消息发送的source源地址。</li></ol><h4 id="推拉结合-1">推拉结合</h4><p>这种方法适用于下行消息，尤其是群聊场景，避免写放大。</p><p>服务端向客户端发送可拉取的消息，客户端收到以后，向服务端发送一个pull命令，也就是拉取的操作。</p><ul><li>这个pull命令也相当于一个ACK去回应服务端的消息</li></ul><p>优点：</p><ol type="1"><li>下行消息不需要ack机制，服务端不需要维护超时重发逻辑</li><li>可通过一次拉取所有会话消息列表，减少网络调用次数</li><li>批量拉取利于对消息进行压缩，提高带宽利用率</li></ol><p>一般采用：上行消息用双ID链，下行消息推拉结合的思路去解决。</p><p><img src="高性能IM即时通讯系统设计/image-20240324112601795.png" alt="消息时序一致性架构" style="zoom:67%;" /></p><h2 id="高可用">高可用</h2><h3 id="长连接的稳定性">长连接的稳定性</h3><p>跨越公网的长连接如果断了怎么办？</p><h4 id="心跳保活">心跳保活</h4><ol type="1"><li>服务端给客户端发送心跳。<ol type="1"><li>适合低用户量场景，一旦用户量增长，10亿用户量，服务端需要发送10亿心跳包，</li><li>IM GateWay接入层 内部设置</li></ol></li><li>客户端给服务端发送心跳<ol type="1"><li>IM GateWay接入层 内部为每一个客户端设置定时器</li></ol></li></ol><p>注意事项：</p><ol type="1"><li>心跳包不用过大</li><li>心跳过长：会出现僵尸客户端，本来准备下线，由于设置时间过长，导致没有断连</li><li>心跳过短：会造成心跳潮汐，给网关造成流量压力(通过随机打撒来解决问题)</li></ol><h5 id="自适应心跳包">自适应心跳包</h5><p>前端在用户使用的时候，可以每5min发送一次心跳包。</p><ul><li>5min：运营商测试过的超时时间</li></ul><p>后台采用自适应心跳包：自适应测算，采用二分法测试，第一次默认5min，如果5min后，发送心跳检测失败，说明链接断开，那下一次心跳时间设置成两分半，依此类推。</p><h4 id="断线重连">断线重连</h4><h5 id="客户端断线">客户端断线</h5><p>客户端由于网络原因断线(频繁切换网络，做地铁)，如何能快速稳定的重新建立长链接？</p><ul><li>延迟删除session：服务端发现连接断开后不会立即删除用户的状态信息，等待一个超时时间，在这段时间内，客户端快速建立新连接，服务端复用原有状态信息实现重连接</li></ul><h5 id="服务端崩溃">服务端崩溃</h5><ol type="1"><li>借助注册中心，ipconfig服务，利用服务发现机制，快速识别故障结点，进行结点的切换。</li><li></li></ol><h5 id="服务端断线">服务端断线</h5><h4 id="消息风暴">消息风暴</h4><h3 id="弱网的消息可靠性">弱网的消息可靠性</h3><h4 id="快链路">快链路</h4><h4 id="调度策略优化">调度策略优化</h4><h4 id="协议优化">协议优化</h4><h3 id="异地多活">异地多活</h3><h2 id="可运维">可运维</h2><h1 id="扩展">扩展</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文学习借鉴硬核课堂。加上看了N+博客&lt;/p&gt;
&lt;h1 id=&quot;需求分析&quot;&gt;需求分析&lt;/h1&gt;
&lt;h2 id=&quot;功能&quot;&gt;功能&lt;/h2&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;好友添加、关注&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;没什么好说的，就是&lt;/p&gt;
&lt;ol star</summary>
      
    
    
    
    <category term="系统设计" scheme="https://vlsmhd.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="IM" scheme="https://vlsmhd.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/IM/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-SQL专项训练</title>
    <link href="https://vlsmhd.github.io/2024/03/15/Leetcode-SQL%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2024/03/15/Leetcode-SQL%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2024-03-15T14:04:55.480Z</published>
    <updated>2024-05-19T06:06:29.359Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mysql常见函数">Mysql常见函数</h1><p><ahref="https://blog.csdn.net/yubin1285570923/article/details/118560285">mysql:常用函数总结以及高级函数用法_mysql values函数-CSDN博客</a></p><p>以下总结我在刷题中遇到的一些函数。</p><h2 id="字符串函数">字符串函数</h2><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>函数</th><th>描述</th><th>实例</th></tr></thead><tbody><tr class="odd"><td>ASCII(s)</td><td>返回字符串 s 的第一个字符的 ASCII 码。</td><td>返回 CustomerName 字段第一个字母的 ASCII码：<code>SELECT ASCII(CustomerName) AS NumCodeOfFirstCharFROM Customers</code></td></tr><tr class="even"><td>LENGTH</td><td>返回字符串 s 的字节数</td><td>LENGTH('¥')，返回两个字节</td></tr><tr class="odd"><td>CHAR_LENGTH(s)</td><td>返回字符串 s 的字符数</td><td>返回字符串 RUNOOB的字符数<code>SELECT CHAR_LENGTH("RUNOOB") AS LengthOfString</code></td></tr><tr class="even"><td>CHARACTER_LENGTH(s)</td><td>返回字符串 s 的字符数</td><td>返回字符串 RUNOOB的字符数<code>SELECT CHARACTER_LENGTH("RUNOOB") AS LengthOfString;</code></td></tr><tr class="odd"><td>CONCAT( s1,s2…sn)</td><td>合并多个字符串，需要注意，返回结果为连接参数产生的字符串。如有任何一个参数为NULL，则返回值为 NULL</td><td>合并多个字符串，，：<code>SELECT CONCAT("SQL", "Tutorial", "is", "fun!")AS ConcatenatedString;</code></td></tr><tr class="even"><td>CONCAT_WS(x, s1,s2…sn)</td><td>同 CONCAT(s1,s2,…) 函数，但是每个字符串之间要加上 x，x可以是分隔符，需要注意的是分隔符不能为null，如果为null，则返回结果为null</td><td>合并多个字符串，并添加分隔符，：<code>SELECT CONCAT_WS("-", "SQL", "Tutorial", "is", "fun!")AS ConcatenatedString;</code></td></tr><tr class="odd"><td>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ][separator ‘分隔符’ ] )</td><td>将groupby产生的同一个分组中的值连接起来，返回一个字符串结果。通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用orderby子句；separator是一个字符串值，缺省为一个逗号。</td><td></td></tr><tr class="even"><td>LOWER(s)</td><td>将字符串 s 的所有字母变成小写字母</td><td>字符串 RUNOOB转换为小写<code>SELECT LOWER('RUNOOB') -- runoob</code></td></tr><tr class="odd"><td>UPPER(s)</td><td>将字符串转换为大写</td><td>将字符串 runoob转换为大写：<code>SELECT UPPER("runoob"); -- RUNOOB</code></td></tr><tr class="even"><td>SUBSTRING(s, start, length)</td><td>从字符串 s 的 start 位置截取长度为 length 的子字符串</td><td>从字符串 RUNOOB 中的第 2 个位置截取 3个字符：<code>SELECT SUBSTRING("RUNOOB", 2, 3) AS ExtractString; -- UNO</code></td></tr></tbody></table><h2 id="数值函数">数值函数</h2><table><colgroup><col style="width: 9%" /><col style="width: 32%" /><col style="width: 58%" /></colgroup><thead><tr class="header"><th>函数名</th><th>描述</th><th>实例</th></tr></thead><tbody><tr class="odd"><td>ABS(x)</td><td>返回 x 的绝对值</td><td>返回 -1 的绝对值：<code>SELECT ABS(-1) -- 返回1</code></td></tr><tr class="even"><td>ACOS(x)</td><td>求 x 的反余弦值(参数是弧度)</td><td><code>SELECT ACOS(0.25);</code></td></tr><tr class="odd"><td>ROUND(x,y)</td><td>返回离 y位数 最近的整数(四舍五入)</td><td>SELECT ROUND(1.23456) --1 ，不填y默认为0，就是四舍五入到整数</td></tr></tbody></table><h2 id="日期函数">日期函数</h2><table><colgroup><col style="width: 14%" /><col style="width: 28%" /><col style="width: 57%" /></colgroup><thead><tr class="header"><th>函数名</th><th>描述</th><th>实例</th></tr></thead><tbody><tr class="odd"><td>ADDDATE(d,n)</td><td>计算起始日期 d 加上 n 天的日期</td><td><code>SELECT ADDDATE("2017-06-15", INTERVAL 10 DAY);-&gt;2017-06-25 SELECT ADDDATE("2017-06-15", 10)</code></td></tr><tr class="even"><td></td><td></td><td></td></tr><tr class="odd"><td>DATEDIFF(d1,d2)</td><td>计算日期 d1-&gt;d2 之间相隔的天数</td><td><code>SELECT DATEDIFF('2001-01-01','2001-02-02')-&gt; -32</code></td></tr><tr class="even"><td></td><td></td><td></td></tr><tr class="odd"><td>SUBDATE(d,n)</td><td>日期 d 减去 n 天后的日期</td><td><code>SELECT SUBDATE('2011-11-11 11:11:11', 1)-&gt;2011-11-10 11:11:11 (默认是天)</code></td></tr></tbody></table><h2 id="高级函数">高级函数</h2><table><colgroup><col style="width: 12%" /><col style="width: 45%" /><col style="width: 42%" /></colgroup><thead><tr class="header"><th>函数名</th><th>描述</th><th>实例</th></tr></thead><tbody><tr class="odd"><td>BIN(x)</td><td>返回 x 的二进制编码</td><td>15 的 2 进制编码:<code>SELECT BIN(15); -- 1111</code></td></tr><tr class="even"><td>IFNULL(v1,v2)</td><td>如果 v1 的值不为 NULL，则返回 v1，否则返回 v2。</td><td>SELECT IFNULL(null,'Hello Word')-&gt;Hello Word</td></tr></tbody></table><h1 id="简单查询">简单查询</h1><h2 id="简单">简单</h2><h3 id="每台机器的进程平均运行时间"><ahref="https://leetcode.cn/problems/average-time-of-process-per-machine/">1661.每台机器的进程平均运行时间</a></h3><p>表: <code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| machine_id     | int     |</span><br><span class="line">| process_id     | int     |</span><br><span class="line">| activity_type  | enum    |</span><br><span class="line">| timestamp      | float   |</span><br><span class="line">+----------------+---------+</span><br><span class="line">该表展示了一家工厂网站的用户活动。</span><br><span class="line">(machine_id, process_id, activity_type) 是当前表的主键（具有唯一值的列的组合）。</span><br><span class="line">machine_id 是一台机器的ID号。</span><br><span class="line">process_id 是运行在各机器上的进程ID号。</span><br><span class="line">activity_type 是枚举类型 (&#x27;start&#x27;, &#x27;end&#x27;)。</span><br><span class="line">timestamp 是浮点类型,代表当前时间(以秒为单位)。</span><br><span class="line">&#x27;start&#x27; 代表该进程在这台机器上的开始运行时间戳 , &#x27;end&#x27; 代表该进程在这台机器上的终止运行时间戳。</span><br><span class="line">同一台机器，同一个进程都有一对开始时间戳和结束时间戳，而且开始时间戳永远在结束时间戳前面。</span><br></pre></td></tr></table></figure><p>现在有一个工厂网站由几台机器运行，每台机器上运行着<strong>相同数量的进程</strong>。编写解决方案，计算每台机器各自完成一个进程任务的平均耗时。</p><p>完成一个进程任务的时间指进程的<code>'end' 时间戳</code> 减去<code>'start' 时间戳</code>。平均耗时通过计算每台机器上所有进程任务的总耗费时间除以机器上的总进程数量获得。</p><p>结果表必须包含<code>machine_id（机器ID）</code> 和对应的<strong>average time（平均耗时）</strong> 别名<code>processing_time</code>，且<strong>四舍五入保留3位小数。</strong></p><p>以 <strong>任意顺序</strong> 返回表。</p><p>具体参考例子如下。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Activity table:</span><br><span class="line">+------------+------------+---------------+-----------+</span><br><span class="line">| machine_id | process_id | activity_type | timestamp |</span><br><span class="line">+------------+------------+---------------+-----------+</span><br><span class="line">| 0          | 0          | start         | 0.712     |</span><br><span class="line">| 0          | 0          | end           | 1.520     |</span><br><span class="line">| 0          | 1          | start         | 3.140     |</span><br><span class="line">| 0          | 1          | end           | 4.120     |</span><br><span class="line">| 1          | 0          | start         | 0.550     |</span><br><span class="line">| 1          | 0          | end           | 1.550     |</span><br><span class="line">| 1          | 1          | start         | 0.430     |</span><br><span class="line">| 1          | 1          | end           | 1.420     |</span><br><span class="line">| 2          | 0          | start         | 4.100     |</span><br><span class="line">| 2          | 0          | end           | 4.512     |</span><br><span class="line">| 2          | 1          | start         | 2.500     |</span><br><span class="line">| 2          | 1          | end           | 5.000     |</span><br><span class="line">+------------+------------+---------------+-----------+</span><br><span class="line">输出：</span><br><span class="line">+------------+-----------------+</span><br><span class="line">| machine_id | processing_time |</span><br><span class="line">+------------+-----------------+</span><br><span class="line">| 0          | 0.894           |</span><br><span class="line">| 1          | 0.995           |</span><br><span class="line">| 2          | 1.456           |</span><br><span class="line">+------------+-----------------+</span><br><span class="line">解释：</span><br><span class="line">一共有3台机器,每台机器运行着两个进程.</span><br><span class="line">机器 0 的平均耗时: ((1.520 - 0.712) + (4.120 - 3.140)) / 2 = 0.894</span><br><span class="line">机器 1 的平均耗时: ((1.550 - 0.550) + (1.420 - 0.430)) / 2 = 0.995</span><br><span class="line">机器 2 的平均耗时: ((4.512 - 4.100) + (5.000 - 2.500)) / 2 = 1.456</span><br></pre></td></tr></table></figure><h4 id="思路">思路</h4><h5 id="拆分表">拆分表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Write your MySQL query statement below</span><br><span class="line"><span class="keyword">select</span> a.machine_id, round(<span class="built_in">avg</span>(b.timestamp  <span class="operator">-</span> a.timestamp ), <span class="number">3</span>) processing_time </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Activity <span class="keyword">where</span> activity_type <span class="operator">=</span> <span class="string">&#x27;start&#x27;</span> ) a,</span><br><span class="line"> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Activity <span class="keyword">where</span> activity_type <span class="operator">=</span> <span class="string">&#x27;end&#x27;</span> ) b </span><br><span class="line"><span class="keyword">where</span> a.machine_id <span class="operator">=</span> b.machine_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.machine_id</span><br></pre></td></tr></table></figure><h3 id="寻找用户推荐人"><ahref="https://leetcode.cn/problems/find-customer-referee/">584.寻找用户推荐人</a></h3><p>表: <code>Customer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">| referee_id  | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">在 SQL 中，id 是该表的主键列。</span><br><span class="line">该表的每一行表示一个客户的 id、姓名以及推荐他们的客户的 id。</span><br></pre></td></tr></table></figure><p>找出那些 <strong>没有被</strong> <code>id = 2</code> 的客户<strong>推荐</strong> 的客户的姓名。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>结果格式如下所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输入： </span><br><span class="line">Customer 表:</span><br><span class="line">+----+------+------------+</span><br><span class="line">| id | name | referee_id |</span><br><span class="line">+----+------+------------+</span><br><span class="line">| 1  | Will | null       |</span><br><span class="line">| 2  | Jane | null       |</span><br><span class="line">| 3  | Alex | 2          |</span><br><span class="line">| 4  | Bill | null       |</span><br><span class="line">| 5  | Zack | 1          |</span><br><span class="line">| 6  | Mark | 2          |</span><br><span class="line">+----+------+------------+</span><br><span class="line">输出：</span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h4 id="思路-1">思路</h4><h5 id="多条件">多条件</h5><p>本题单独的条件 referee_id ！= 2 无法得到referee_id为空的结果，因此要多加一个判断条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name </span><br><span class="line"><span class="keyword">from</span> Customer</span><br><span class="line"><span class="keyword">where</span> referee_id  <span class="operator">!=</span> <span class="number">2</span> <span class="keyword">or</span> referee_id <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h5 id="in子表">in子表</h5><p>效率比思路一快，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name </span><br><span class="line"><span class="keyword">FROM</span> Customer</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> Customer <span class="keyword">WHERE</span> referee_id <span class="operator">=</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h5 id="exists">exists</h5><p>由于外表数据量不多，效率和in相差一点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> C.name </span><br><span class="line"><span class="keyword">FROM</span> Customer C</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> C1.name <span class="keyword">FROM</span> Customer C1 <span class="keyword">WHERE</span> referee_id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> C.id <span class="operator">=</span> C1.id)</span><br></pre></td></tr></table></figure><h3 id="大的国家"><ahref="https://leetcode.cn/problems/big-countries/">595.大的国家</a></h3><p><code>World</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| name        | varchar |</span><br><span class="line">| continent   | varchar |</span><br><span class="line">| area        | int     |</span><br><span class="line">| population  | int     |</span><br><span class="line">| gdp         | bigint  |</span><br><span class="line">+-------------+---------+</span><br><span class="line">name 是该表的主键（具有唯一值的列）。</span><br><span class="line">这张表的每一行提供：国家名称、所属大陆、面积、人口和 GDP 值。</span><br></pre></td></tr></table></figure><p>如果一个国家满足下述两个条件之一，则认为该国是 <strong>大国</strong>：</p><ul><li>面积至少为 300 万平方公里（即，<code>3000000 km2</code>），或者</li><li>人口至少为 2500 万（即 <code>25000000</code>）</li></ul><p>编写解决方案找出 <strong>大国</strong> 的国家名称、人口和面积。</p><p>按 <strong>任意顺序</strong> 返回结果表。</p><p>返回结果格式如下例所示。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">World 表：</span><br><span class="line">+-------------+-----------+---------+------------+--------------+</span><br><span class="line">| name        | continent | area    | population | gdp          |</span><br><span class="line">+-------------+-----------+---------+------------+--------------+</span><br><span class="line">| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |</span><br><span class="line">| Albania     | Europe    | 28748   | 2831741    | 12960000000  |</span><br><span class="line">| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |</span><br><span class="line">| Andorra     | Europe    | 468     | 78115      | 3712000000   |</span><br><span class="line">| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |</span><br><span class="line">+-------------+-----------+---------+------------+--------------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">| name        | population | area    |</span><br><span class="line">+-------------+------------+---------+</span><br><span class="line">| Afghanistan | 25500100   | 652230  |</span><br><span class="line">| Algeria     | 37100000   | 2381741 |</span><br><span class="line">+-------------+------------+---------+</span><br></pre></td></tr></table></figure><h4 id="思路-2">思路</h4><h5 id="or语句">or语句</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, population, area </span><br><span class="line"><span class="keyword">FROM</span>  World </span><br><span class="line"><span class="keyword">WHERE</span> area <span class="operator">&gt;=</span> <span class="number">3000000</span> <span class="keyword">or</span> population  <span class="operator">&gt;=</span> <span class="number">25000000</span></span><br></pre></td></tr></table></figure><p>or并不会走索引，所以采用union优化：</p><h5 id="union优化">union优化</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, population, area </span><br><span class="line"><span class="keyword">FROM</span>  World </span><br><span class="line"><span class="keyword">WHERE</span> area <span class="operator">&gt;=</span> <span class="number">3000000</span> </span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">SELECT</span> name, population, area </span><br><span class="line"><span class="keyword">FROM</span>  World </span><br><span class="line"><span class="keyword">WHERE</span> population  <span class="operator">&gt;=</span> <span class="number">25000000</span></span><br></pre></td></tr></table></figure><h3 id="文章浏览-i"><ahref="https://leetcode.cn/problems/article-views-i/">1148. 文章浏览I</a></h3><p><code>Views</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| article_id    | int     |</span><br><span class="line">| author_id     | int     |</span><br><span class="line">| viewer_id     | int     |</span><br><span class="line">| view_date     | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表可能会存在重复行。（换句话说，在 SQL 中这个表没有主键）</span><br><span class="line">此表的每一行都表示某人在某天浏览了某位作者的某篇文章。</span><br><span class="line">请注意，同一人的 author_id 和 viewer_id 是相同的。</span><br></pre></td></tr></table></figure><p>请查询出所有浏览过自己文章的作者</p><p>结果按照 <code>id</code> 升序排列。</p><p>查询结果的格式如下所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Views 表：</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| article_id | author_id | viewer_id | view_date  |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| 1          | 3         | 5         | 2019-08-01 |</span><br><span class="line">| 1          | 3         | 6         | 2019-08-02 |</span><br><span class="line">| 2          | 7         | 7         | 2019-08-01 |</span><br><span class="line">| 2          | 7         | 6         | 2019-08-02 |</span><br><span class="line">| 4          | 7         | 1         | 2019-07-22 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 4    |</span><br><span class="line">| 7    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h4 id="思路-3">思路</h4><p>去重利用关键字distinct去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> author_id <span class="keyword">as</span> id</span><br><span class="line"><span class="keyword">FROM</span> Views</span><br><span class="line"><span class="keyword">where</span> author_id <span class="operator">=</span> viewer_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h3 id="无效的推文"><ahref="https://leetcode.cn/problems/invalid-tweets/">1683.无效的推文</a></h3><p>表：<code>Tweets</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| tweet_id       | int     |</span><br><span class="line">| content        | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">在 SQL 中，tweet_id 是这个表的主键。</span><br><span class="line">这个表包含某社交媒体 App 中所有的推文。</span><br></pre></td></tr></table></figure><p>查询所有无效推文的编号（ID）。当推文内容中的字符数<strong>严格大于</strong><code>15</code> 时，该推文是无效的。</p><p>以<strong>任意顺序</strong>返回结果表。</p><p>查询结果格式如下所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Tweets 表：</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| tweet_id | content                          |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line">| 1        | Vote for Biden                   |</span><br><span class="line">| 2        | Let us make America great again! |</span><br><span class="line">+----------+----------------------------------+</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">+----------+</span><br><span class="line">| tweet_id |</span><br><span class="line">+----------+</span><br><span class="line">| 2        |</span><br><span class="line">+----------+</span><br><span class="line">解释：</span><br><span class="line">推文 1 的长度 length = 14。该推文是有效的。</span><br><span class="line">推文 2 的长度 length = 32。该推文是无效的。</span><br></pre></td></tr></table></figure><h4 id="思路-4">思路</h4><h5 id="求长度函数">求长度函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> tweet_id </span><br><span class="line"><span class="keyword">from</span>     Tweets </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">CHAR_LENGTH</span>(content) <span class="operator">&gt;</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><h1 id="连接查询">连接查询</h1><h2 id="简单-1">简单</h2><h3 id="使用唯一标识码替换员工id"><ahref="https://leetcode.cn/problems/replace-employee-id-with-the-unique-identifier/">1378.使用唯一标识码替换员工ID</a></h3><p><code>Employees</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">在 SQL 中，id 是这张表的主键。</span><br><span class="line">这张表的每一行分别代表了某公司其中一位员工的名字和 ID 。</span><br></pre></td></tr></table></figure><p><code>EmployeeUNI</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| unique_id     | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">在 SQL 中，(id, unique_id) 是这张表的主键。</span><br><span class="line">这张表的每一行包含了该公司某位员工的 ID 和他的唯一标识码（unique ID）。</span><br></pre></td></tr></table></figure><p>展示每位用户的 <strong>唯一标识码（unique ID）</strong>；如果某位员工没有唯一标识码，使用 null 填充即可。</p><p>你可以以 <strong>任意</strong> 顺序返回结果表。</p><p>返回结果的格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employees 表:</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | Alice    |</span><br><span class="line">| 7  | Bob      |</span><br><span class="line">| 11 | Meir     |</span><br><span class="line">| 90 | Winston  |</span><br><span class="line">| 3  | Jonathan |</span><br><span class="line">+----+----------+</span><br><span class="line">EmployeeUNI 表:</span><br><span class="line">+----+-----------+</span><br><span class="line">| id | unique_id |</span><br><span class="line">+----+-----------+</span><br><span class="line">| 3  | 1         |</span><br><span class="line">| 11 | 2         |</span><br><span class="line">| 90 | 3         |</span><br><span class="line">+----+-----------+</span><br><span class="line">输出：</span><br><span class="line">+-----------+----------+</span><br><span class="line">| unique_id | name     |</span><br><span class="line">+-----------+----------+</span><br><span class="line">| null      | Alice    |</span><br><span class="line">| null      | Bob      |</span><br><span class="line">| 2         | Meir     |</span><br><span class="line">| 3         | Winston  |</span><br><span class="line">| 1         | Jonathan |</span><br><span class="line">+-----------+----------+</span><br><span class="line">解释：</span><br><span class="line">Alice and Bob 没有唯一标识码, 因此我们使用 null 替代。</span><br><span class="line">Meir 的唯一标识码是 2 。</span><br><span class="line">Winston 的唯一标识码是 3 。</span><br><span class="line">Jonathan 唯一标识码是 1 。</span><br></pre></td></tr></table></figure><h4 id="思路-5">思路</h4><p>本题要展示全部的name，那就是要把第一个表的全部数据一个不落的查出来，这时候采用leftjoin 或者 right join比较合适。</p><h5 id="left-join">left join</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b.unique_id, a.name</span><br><span class="line"><span class="keyword">from</span> Employees a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> EmployeeUNI b <span class="keyword">on</span> a.id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure><p>ON 和 WHERE 在 SQL中都用于设置条件，但它们在连接（JOIN）操作中的作用是不同的。</p><ol type="1"><li>ON：在 JOIN 操作中，ON关键字用于设置连接条件。例如，在你的查询中，ONEmployees.id=EmployeeUNI.id 是连接 Employees 表和 EmployeeUNI表的条件，即只有当两个表中的 id相等时，才会将这两个表的行连接在一起。</li><li>WHERE：WHERE关键字用于过滤结果集，即只返回满足特定条件的行。如果你在查询中使用 WHEREEmployees.id=EmployeeUNI.id，那么只有当 Employees 表和 EmployeeUNI表中的 id 相等时，才会在结果集中返回这些行。</li></ol><p>ON 关键字定义了如何连接两个表，而 WHERE关键字定义了如何<strong>过滤</strong>这些连接后的结果。在某些情况下，使用ON 和 WHERE可能会得到相同的结果，但在其他情况下，结果可能会有所不同，特别是在执行外连接（如LEFT JOIN 或 RIGHT JOIN）时。</p><ul><li>内连接（INNER JOIN）只返回两个表中都有匹配的行。</li><li>左连接（LEFT JOIN）返回左表（这里是 Employees表）的所有行，如果右表（这里是 EmployeeUNI表）中没有匹配的行，则结果集中的对应列将为 NULL。</li><li>WHERE 子句返回满足特定条件的行，这里的条件是 Employees.id 等于EmployeeUNI.id。</li></ul><h3 id="产品销售分析-i"><ahref="https://leetcode.cn/problems/product-sales-analysis-i/">1068.产品销售分析 I</a></h3><p>销售表 <code>Sales</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">(sale_id, year) 是销售表 Sales 的主键（具有唯一值的列的组合）。</span><br><span class="line">product_id 是关联到产品表 Product 的外键（reference 列）。</span><br><span class="line">该表的每一行显示 product_id 在某一年的销售情况。</span><br><span class="line">注意: price 表示每单位价格。</span><br></pre></td></tr></table></figure><p>产品表 <code>Product</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是表的主键（具有唯一值的列）。</span><br><span class="line">该表的每一行表示每种产品的产品名称。</span><br></pre></td></tr></table></figure><p>编写解决方案，以获取 <code>Sales</code> 表中所有 <code>sale_id</code>对应的 <code>product_name</code> 以及该产品的所有 <code>year</code> 和<code>price</code> 。</p><p>返回结果表 <strong>无顺序要求</strong> 。</p><p>结果格式示例如下。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Sales 表：</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">Product 表：</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line">输出：</span><br><span class="line">+--------------+-------+-------+</span><br><span class="line">| product_name | year  | price |</span><br><span class="line">+--------------+-------+-------+</span><br><span class="line">| Nokia        | 2008  | 5000  |</span><br><span class="line">| Nokia        | 2009  | 5000  |</span><br><span class="line">| Apple        | 2011  | 9000  |</span><br><span class="line">+--------------+-------+-------+</span><br></pre></td></tr></table></figure><h4 id="思路-6">思路</h4><p>普通连接查询即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b.product_name, a.year, a.price </span><br><span class="line"><span class="keyword">from</span> Sales a </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Product b <span class="keyword">on</span> a.product_id <span class="operator">=</span> b.product_id</span><br></pre></td></tr></table></figure><h3 id="进店却未进行过交易的顾客"><ahref="https://leetcode.cn/problems/customer-who-visited-but-did-not-make-any-transactions/">1581.进店却未进行过交易的顾客</a></h3><p>表：<code>Visits</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| visit_id    | int     |</span><br><span class="line">| customer_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">visit_id 是该表中具有唯一值的列。</span><br><span class="line">该表包含有关光临过购物中心的顾客的信息。</span><br></pre></td></tr></table></figure><p>表：<code>Transactions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| transaction_id | int     |</span><br><span class="line">| visit_id       | int     |</span><br><span class="line">| amount         | int     |</span><br><span class="line">+----------------+---------+</span><br><span class="line">transaction_id 是该表中具有唯一值的列。</span><br><span class="line">此表包含 visit_id 期间进行的交易的信息。</span><br></pre></td></tr></table></figure><p>有一些顾客可能光顾了购物中心但没有进行交易。请你编写一个解决方案，来查找这些顾客的ID ，以及他们只光顾不交易的次数。</p><p>返回以 <strong>任何顺序</strong> 排序的结果表。</p><p>返回结果格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">Visits</span><br><span class="line">+----------+-------------+</span><br><span class="line">| visit_id | customer_id |</span><br><span class="line">+----------+-------------+</span><br><span class="line">| 1        | 23          |</span><br><span class="line">| 2        | 9           |</span><br><span class="line">| 4        | 30          |</span><br><span class="line">| 5        | 54          |</span><br><span class="line">| 6        | 96          |</span><br><span class="line">| 7        | 54          |</span><br><span class="line">| 8        | 54          |</span><br><span class="line">+----------+-------------+</span><br><span class="line">Transactions</span><br><span class="line">+----------------+----------+--------+</span><br><span class="line">| transaction_id | visit_id | amount |</span><br><span class="line">+----------------+----------+--------+</span><br><span class="line">| 2              | 5        | 310    |</span><br><span class="line">| 3              | 5        | 300    |</span><br><span class="line">| 9              | 5        | 200    |</span><br><span class="line">| 12             | 1        | 910    |</span><br><span class="line">| 13             | 2        | 970    |</span><br><span class="line">+----------------+----------+--------+</span><br><span class="line">输出:</span><br><span class="line">+-------------+----------------+</span><br><span class="line">| customer_id | count_no_trans |</span><br><span class="line">+-------------+----------------+</span><br><span class="line">| 54          | 2              |</span><br><span class="line">| 30          | 1              |</span><br><span class="line">| 96          | 1              |</span><br><span class="line">+-------------+----------------+</span><br><span class="line">解释:</span><br><span class="line">ID = 23 的顾客曾经逛过一次购物中心，并在 ID = 12 的访问期间进行了一笔交易。</span><br><span class="line">ID = 9 的顾客曾经逛过一次购物中心，并在 ID = 13 的访问期间进行了一笔交易。</span><br><span class="line">ID = 30 的顾客曾经去过购物中心，并且没有进行任何交易。</span><br><span class="line">ID = 54 的顾客三度造访了购物中心。在 2 次访问中，他们没有进行任何交易，在 1 次访问中，他们进行了 3 次交易。</span><br><span class="line">ID = 96 的顾客曾经去过购物中心，并且没有进行任何交易。</span><br><span class="line">如我们所见，ID 为 30 和 96 的顾客一次没有进行任何交易就去了购物中心。顾客 54 也两次访问了购物中心并且没有进行任何交易。</span><br></pre></td></tr></table></figure><h4 id="思路-7">思路</h4><h5 id="连接表查询">连接表查询</h5><p>进行连表查询的时候，先根据连表的结果，判断后续的一个条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id , <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_no_trans</span><br><span class="line"><span class="keyword">from</span> Visits v</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Transactions t <span class="keyword">on</span> v.visit_id <span class="operator">=</span> t.visit_id</span><br><span class="line"><span class="keyword">where</span> t.transaction_id <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> v.customer_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> count_no_trans <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h3 id="学生们参加各科测试的次数"><ahref="https://leetcode.cn/problems/students-and-examinations/">1280.学生们参加各科测试的次数</a></h3><p>学生表: <code>Students</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| student_id    | int     |</span><br><span class="line">| student_name  | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">在 SQL 中，主键为 student_id（学生ID）。</span><br><span class="line">该表内的每一行都记录有学校一名学生的信息。</span><br></pre></td></tr></table></figure><p>科目表: <code>Subjects</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| subject_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">在 SQL 中，主键为 subject_name（科目名称）。</span><br><span class="line">每一行记录学校的一门科目名称。</span><br></pre></td></tr></table></figure><p>考试表: <code>Examinations</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| student_id   | int     |</span><br><span class="line">| subject_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">这个表可能包含重复数据（换句话说，在 SQL 中，这个表没有主键）。</span><br><span class="line">学生表里的一个学生修读科目表里的每一门科目。</span><br><span class="line">这张考试表的每一行记录就表示学生表里的某个学生参加了一次科目表里某门科目的测试。</span><br></pre></td></tr></table></figure><p>查询出每个学生参加每一门科目测试的次数，结果按<code>student_id</code> 和 <code>subject_name</code> 排序。</p><p>查询结构格式如下所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Students table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| student_id | student_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 1          | Alice        |</span><br><span class="line">| 2          | Bob          |</span><br><span class="line">| 13         | John         |</span><br><span class="line">| 6          | Alex         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">Subjects table:</span><br><span class="line">+--------------+</span><br><span class="line">| subject_name |</span><br><span class="line">+--------------+</span><br><span class="line">| Math         |</span><br><span class="line">| Physics      |</span><br><span class="line">| Programming  |</span><br><span class="line">+--------------+</span><br><span class="line">Examinations table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| student_id | subject_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 1          | Math         |</span><br><span class="line">| 1          | Physics      |</span><br><span class="line">| 1          | Programming  |</span><br><span class="line">| 2          | Programming  |</span><br><span class="line">| 1          | Physics      |</span><br><span class="line">| 1          | Math         |</span><br><span class="line">| 13         | Math         |</span><br><span class="line">| 13         | Programming  |</span><br><span class="line">| 13         | Physics      |</span><br><span class="line">| 2          | Math         |</span><br><span class="line">| 1          | Math         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">输出：</span><br><span class="line">+------------+--------------+--------------+----------------+</span><br><span class="line">| student_id | student_name | subject_name | attended_exams |</span><br><span class="line">+------------+--------------+--------------+----------------+</span><br><span class="line">| 1          | Alice        | Math         | 3              |</span><br><span class="line">| 1          | Alice        | Physics      | 2              |</span><br><span class="line">| 1          | Alice        | Programming  | 1              |</span><br><span class="line">| 2          | Bob          | Math         | 1              |</span><br><span class="line">| 2          | Bob          | Physics      | 0              |</span><br><span class="line">| 2          | Bob          | Programming  | 1              |</span><br><span class="line">| 6          | Alex         | Math         | 0              |</span><br><span class="line">| 6          | Alex         | Physics      | 0              |</span><br><span class="line">| 6          | Alex         | Programming  | 0              |</span><br><span class="line">| 13         | John         | Math         | 1              |</span><br><span class="line">| 13         | John         | Physics      | 1              |</span><br><span class="line">| 13         | John         | Programming  | 1              |</span><br><span class="line">+------------+--------------+--------------+----------------+</span><br><span class="line">解释：</span><br><span class="line">结果表需包含所有学生和所有科目（即便测试次数为0）：</span><br><span class="line">Alice 参加了 3 次数学测试, 2 次物理测试，以及 1 次编程测试；</span><br><span class="line">Bob 参加了 1 次数学测试, 1 次编程测试，没有参加物理测试；</span><br><span class="line">Alex 啥测试都没参加；</span><br><span class="line">John  参加了数学、物理、编程测试各 1 次。</span><br></pre></td></tr></table></figure><h4 id="思路-8">思路</h4><h5 id="多级连接">多级连接</h5><p>先让学生表和课程表笛卡尔积，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    student_id, subject_name, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> attended_exams</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Examinations</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    student_id, subject_name</span><br><span class="line"></span><br><span class="line">student_idsubject_nameattended_exams</span><br><span class="line"><span class="number">1</span>Math<span class="number">3</span></span><br><span class="line"><span class="number">1</span>Physics<span class="number">2</span></span><br><span class="line"><span class="number">1</span>Programming<span class="number">1</span></span><br><span class="line"><span class="number">2</span>Programming<span class="number">1</span></span><br><span class="line"><span class="number">13</span>Math<span class="number">1</span></span><br><span class="line"><span class="number">13</span>Programming<span class="number">1</span></span><br><span class="line"><span class="number">13</span>Physics<span class="number">1</span></span><br><span class="line"><span class="number">2</span>Math<span class="number">1</span></span><br></pre></td></tr></table></figure><p>随后将这个表与考试表查出来含有考试次数的结果集连接在一起</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.student_id, s.student_name, sub.subject_name, IFNULL(g.attended_exams, <span class="number">0</span>) <span class="keyword">AS</span> attended_exams</span><br><span class="line"><span class="keyword">from</span> Students s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Subjects sub</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> e.student_id, e.subject_name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> attended_exams</span><br><span class="line"><span class="keyword">from</span> Examinations e</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.student_id, e.subject_name) g</span><br><span class="line"><span class="keyword">on</span> s.student_id <span class="operator">=</span> g.student_id <span class="keyword">and</span> sub.subject_name <span class="operator">=</span> g.subject_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s.student_id, sub.subject_name <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h3 id="上升的温度"><ahref="https://leetcode.cn/problems/rising-temperature/">197.上升的温度</a></h3><p>表： <code>Weather</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| recordDate    | date    |</span><br><span class="line">| temperature   | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表具有唯一值的列。</span><br><span class="line">没有具有相同 recordDate 的不同行。</span><br><span class="line">该表包含特定日期的温度信息</span><br></pre></td></tr></table></figure><p>编写解决方案，找出与之前（昨天的）日期相比温度更高的所有日期的<code>id</code> 。</p><p>返回结果 <strong>无顺序要求</strong> 。</p><p>结果格式如下例子所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Weather 表：</span><br><span class="line">+----+------------+-------------+</span><br><span class="line">| id | recordDate | Temperature |</span><br><span class="line">+----+------------+-------------+</span><br><span class="line">| 1  | 2015-01-01 | 10          |</span><br><span class="line">| 2  | 2015-01-02 | 25          |</span><br><span class="line">| 3  | 2015-01-03 | 20          |</span><br><span class="line">| 4  | 2015-01-04 | 30          |</span><br><span class="line">+----+------------+-------------+</span><br><span class="line">输出：</span><br><span class="line">+----+</span><br><span class="line">| id |</span><br><span class="line">+----+</span><br><span class="line">| 2  |</span><br><span class="line">| 4  |</span><br><span class="line">+----+</span><br><span class="line">解释：</span><br><span class="line">2015-01-02 的温度比前一天高（10 -&gt; 25）</span><br><span class="line">2015-01-04 的温度比前一天高（20 -&gt; 30）</span><br></pre></td></tr></table></figure><h4 id="思路-9">思路</h4><h5 id="自我连接">自我连接</h5><p>连接的条件：比自身大一天的温度信息与自我连接，语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> Weather w1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Weather w2 <span class="keyword">on</span> SUBDATE(w2.recordDate, <span class="number">1</span>) <span class="operator">=</span> w1.recordDate</span><br></pre></td></tr></table></figure><p>得到结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">|</span> id <span class="operator">|</span> recordDate <span class="operator">|</span> temperature <span class="operator">|</span> id <span class="operator">|</span> recordDate <span class="operator">|</span> temperature <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">-- | ---------- | ----------- | -- | ---------- | ----------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">10</span>          <span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">25</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">25</span>          <span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">20</span>          <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-03</span> <span class="operator">|</span> <span class="number">20</span>          <span class="operator">|</span> <span class="number">4</span>  <span class="operator">|</span> <span class="number">2015</span><span class="number">-01</span><span class="number">-04</span> <span class="operator">|</span> <span class="number">30</span>          <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>随后添加一层判断结果即可，总的sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> w2.id</span><br><span class="line"><span class="keyword">from</span> Weather w1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Weather w2 <span class="keyword">on</span> SUBDATE(w2.recordDate, <span class="number">1</span>) <span class="operator">=</span> w1.recordDate</span><br><span class="line"><span class="keyword">where</span> w1.temperature <span class="operator">&lt;</span> w2.temperature</span><br></pre></td></tr></table></figure><h3 id="员工奖金"><ahref="https://leetcode.cn/problems/employee-bonus/">577.员工奖金</a></h3><p>表：<code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| empId       | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">| supervisor  | int     |</span><br><span class="line">| salary      | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">empId 是该表中具有唯一值的列。</span><br><span class="line">该表的每一行都表示员工的姓名和 id，以及他们的工资和经理的 id。</span><br></pre></td></tr></table></figure><p>表：<code>Bonus</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| empId       | int  |</span><br><span class="line">| bonus       | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">empId 是该表具有唯一值的列。</span><br><span class="line">empId 是 Employee 表中 empId 的外键(reference 列)。</span><br><span class="line">该表的每一行都包含一个员工的 id 和他们各自的奖金。</span><br></pre></td></tr></table></figure><p>编写解决方案，报告每个奖金 <strong>少于</strong> <code>1000</code>的员工的姓名和奖金数额。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>结果格式如下所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee table:</span><br><span class="line">+-------+--------+------------+--------+</span><br><span class="line">| empId | name   | supervisor | salary |</span><br><span class="line">+-------+--------+------------+--------+</span><br><span class="line">| 3     | Brad   | null       | 4000   |</span><br><span class="line">| 1     | John   | 3          | 1000   |</span><br><span class="line">| 2     | Dan    | 3          | 2000   |</span><br><span class="line">| 4     | Thomas | 3          | 4000   |</span><br><span class="line">+-------+--------+------------+--------+</span><br><span class="line">Bonus table:</span><br><span class="line">+-------+-------+</span><br><span class="line">| empId | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| 2     | 500   |</span><br><span class="line">| 4     | 2000  |</span><br><span class="line">+-------+-------+</span><br><span class="line">输出：</span><br><span class="line">+------+-------+</span><br><span class="line">| name | bonus |</span><br><span class="line">+------+-------+</span><br><span class="line">| Brad | null  |</span><br><span class="line">| John | null  |</span><br><span class="line">| Dan  | 500   |</span><br><span class="line">+------+-------+</span><br></pre></td></tr></table></figure><h4 id="思路-10">思路</h4><h5 id="or">or</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name, b.bonus</span><br><span class="line"><span class="keyword">from</span> Employee e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Bonus b <span class="keyword">on</span> e.empId <span class="operator">=</span> b.empId</span><br><span class="line"><span class="keyword">where</span> b.bonus <span class="keyword">is</span> <span class="keyword">null</span>  <span class="keyword">or</span> b.bonus <span class="operator">&lt;</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h5 id="union-all">union all</h5><p>会出现重复的name或者bonus，union会去重，选择union all</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name, b.bonus</span><br><span class="line"><span class="keyword">from</span> Employee e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Bonus b <span class="keyword">on</span> e.empId <span class="operator">=</span> b.empId</span><br><span class="line"><span class="keyword">where</span> b.bonus <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> e.name, b.bonus</span><br><span class="line"><span class="keyword">from</span> Employee e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Bonus b <span class="keyword">on</span> e.empId <span class="operator">=</span> b.empId</span><br><span class="line"><span class="keyword">where</span>  b.bonus <span class="operator">&lt;</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="中等">中等</h2><h3 id="至少有5名直接下属的经理"><ahref="https://leetcode.cn/problems/managers-with-at-least-5-direct-reports/">570.至少有5名直接下属的经理</a></h3><p>表: <code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">| department  | varchar |</span><br><span class="line">| managerId   | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是此表的主键（具有唯一值的列）。</span><br><span class="line">该表的每一行表示雇员的名字、他们的部门和他们的经理的id。</span><br><span class="line">如果managerId为空，则该员工没有经理。</span><br><span class="line">没有员工会成为自己的管理者。</span><br></pre></td></tr></table></figure><p>编写一个解决方案，找出至少有<strong>五个直接下属</strong>的经理。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>查询结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Employee 表:</span><br><span class="line">+-----+-------+------------+-----------+</span><br><span class="line">| id  | name  | department | managerId |</span><br><span class="line">+-----+-------+------------+-----------+</span><br><span class="line">| 101 | John  | A          | Null      |</span><br><span class="line">| 102 | Dan   | A          | 101       |</span><br><span class="line">| 103 | James | A          | 101       |</span><br><span class="line">| 104 | Amy   | A          | 101       |</span><br><span class="line">| 105 | Anne  | A          | 101       |</span><br><span class="line">| 106 | Ron   | B          | 101       |</span><br><span class="line">+-----+-------+------------+-----------+</span><br><span class="line">输出: </span><br><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| John |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><h4 id="思路-11">思路</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Employee <span class="operator">=</span></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> name  <span class="operator">|</span> department <span class="operator">|</span> managerId <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">--- | ----- | ---------- | --------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> John  <span class="operator">|</span> A          <span class="operator">|</span> <span class="keyword">null</span>      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> Dan   <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> James <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> Amy   <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">105</span> <span class="operator">|</span> Anne  <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> Ron   <span class="operator">|</span> B          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>自我连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> Employee e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Employee e1 <span class="keyword">on</span> e.id <span class="operator">=</span> e1.managerId </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> id  <span class="operator">|</span> name <span class="operator">|</span> department <span class="operator">|</span> managerId <span class="operator">|</span> id  <span class="operator">|</span> name  <span class="operator">|</span> department <span class="operator">|</span> managerId <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">--- | ---- | ---------- | --------- | --- | ----- | ---------- | --------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> John <span class="operator">|</span> A          <span class="operator">|</span> <span class="keyword">null</span>      <span class="operator">|</span> <span class="number">102</span> <span class="operator">|</span> Dan   <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> John <span class="operator">|</span> A          <span class="operator">|</span> <span class="keyword">null</span>      <span class="operator">|</span> <span class="number">103</span> <span class="operator">|</span> James <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> John <span class="operator">|</span> A          <span class="operator">|</span> <span class="keyword">null</span>      <span class="operator">|</span> <span class="number">104</span> <span class="operator">|</span> Amy   <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> John <span class="operator">|</span> A          <span class="operator">|</span> <span class="keyword">null</span>      <span class="operator">|</span> <span class="number">105</span> <span class="operator">|</span> Anne  <span class="operator">|</span> A          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">101</span> <span class="operator">|</span> John <span class="operator">|</span> A          <span class="operator">|</span> <span class="keyword">null</span>      <span class="operator">|</span> <span class="number">106</span> <span class="operator">|</span> Ron   <span class="operator">|</span> B          <span class="operator">|</span> <span class="number">101</span>       <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>分组聚合：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name</span><br><span class="line"><span class="keyword">from</span> Employee e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Employee e1 <span class="keyword">on</span> e.id <span class="operator">=</span> e1.managerId </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(e.id) <span class="operator">&gt;=</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="确认率"><ahref="https://leetcode.cn/problems/confirmation-rate/">1934.确认率</a></h3><p>表: <code>Signups</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------------+----------+</span><br><span class="line">| Column Name    | Type     |</span><br><span class="line">+----------------+----------+</span><br><span class="line">| user_id        | int      |</span><br><span class="line">| time_stamp     | datetime |</span><br><span class="line">+----------------+----------+</span><br><span class="line">User_id是该表的主键。</span><br><span class="line">每一行都包含ID为user_id的用户的注册时间信息。</span><br></pre></td></tr></table></figure><p>表: <code>Confirmations</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+----------------+----------+</span><br><span class="line">| Column Name    | Type     |</span><br><span class="line">+----------------+----------+</span><br><span class="line">| user_id        | int      |</span><br><span class="line">| time_stamp     | datetime |</span><br><span class="line">| action         | ENUM     |</span><br><span class="line">+----------------+----------+</span><br><span class="line">(user_id, time_stamp)是该表的主键。</span><br><span class="line">user_id是一个引用到注册表的外键。</span><br><span class="line">action是类型为(&#x27;confirmed&#x27;， &#x27;timeout&#x27;)的ENUM</span><br><span class="line">该表的每一行都表示ID为user_id的用户在time_stamp请求了一条确认消息，该确认消息要么被确认(&#x27;confirmed&#x27;)，要么被过期(&#x27;timeout&#x27;)。</span><br></pre></td></tr></table></figure><p>用户的 <strong>确认率</strong> 是 <code>'confirmed'</code>消息的数量除以请求的确认消息的总数。没有请求任何确认消息的用户的确认率为<code>0</code> 。确认率四舍五入到 <strong>小数点后两位</strong> 。</p><p>编写一个SQL查询来查找每个用户的 确认率 。</p><p>以 任意顺序 返回结果表。</p><p>查询结果格式如下所示。</p><p><strong>示例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Signups 表:</span><br><span class="line">+---------+---------------------+</span><br><span class="line">| user_id | time_stamp          |</span><br><span class="line">+---------+---------------------+</span><br><span class="line">| 3       | 2020-03-21 10:16:13 |</span><br><span class="line">| 7       | 2020-01-04 13:57:59 |</span><br><span class="line">| 2       | 2020-07-29 23:09:44 |</span><br><span class="line">| 6       | 2020-12-09 10:39:37 |</span><br><span class="line">+---------+---------------------+</span><br><span class="line">Confirmations 表:</span><br><span class="line">+---------+---------------------+-----------+</span><br><span class="line">| user_id | time_stamp          | action    |</span><br><span class="line">+---------+---------------------+-----------+</span><br><span class="line">| 3       | 2021-01-06 03:30:46 | timeout   |</span><br><span class="line">| 3       | 2021-07-14 14:00:00 | timeout   |</span><br><span class="line">| 7       | 2021-06-12 11:57:29 | confirmed |</span><br><span class="line">| 7       | 2021-06-13 12:58:28 | confirmed |</span><br><span class="line">| 7       | 2021-06-14 13:59:27 | confirmed |</span><br><span class="line">| 2       | 2021-01-22 00:00:00 | confirmed |</span><br><span class="line">| 2       | 2021-02-28 23:59:59 | timeout   |</span><br><span class="line">+---------+---------------------+-----------+</span><br><span class="line">输出: </span><br><span class="line">+---------+-------------------+</span><br><span class="line">| user_id | confirmation_rate |</span><br><span class="line">+---------+-------------------+</span><br><span class="line">| 6       | 0.00              |</span><br><span class="line">| 3       | 0.00              |</span><br><span class="line">| 7       | 1.00              |</span><br><span class="line">| 2       | 0.50              |</span><br><span class="line">+---------+-------------------+</span><br><span class="line">解释:</span><br><span class="line">用户 6 没有请求任何确认消息。确认率为 0。</span><br><span class="line">用户 3 进行了 2 次请求，都超时了。确认率为 0。</span><br><span class="line">用户 7 提出了 3 个请求，所有请求都得到了确认。确认率为 1。</span><br><span class="line">用户 2 做了 2 个请求，其中一个被确认，另一个超时。确认率为 1 / 2 = 0.5。</span><br></pre></td></tr></table></figure><h4 id="思路-12">思路</h4><h5 id="count-if">count + if</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.user_id, IF(<span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">=</span> <span class="number">0</span>, <span class="number">0.00</span>, ROUND(<span class="built_in">count</span>(if(action <span class="operator">=</span> <span class="string">&#x27;confirmed&#x27;</span>, <span class="number">0</span>, <span class="keyword">NULL</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>), <span class="number">2</span>)) <span class="keyword">as</span> confirmation_rate </span><br><span class="line"><span class="keyword">from</span> Signups s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Confirmations c <span class="keyword">on</span> s.user_id <span class="operator">=</span> c.user_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.user_id</span><br></pre></td></tr></table></figure><h1 id="聚合函数">聚合函数</h1><h2 id="简单-2">简单</h2><h3 id="平均售价"><ahref="https://leetcode.cn/problems/average-selling-price/">1251.平均售价</a></h3><p>表：<code>Prices</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| start_date    | date    |</span><br><span class="line">| end_date      | date    |</span><br><span class="line">| price         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(product_id，start_date，end_date) 是 prices 表的主键（具有唯一值的列的组合）。</span><br><span class="line">prices 表的每一行表示的是某个产品在一段时期内的价格。</span><br><span class="line">每个产品的对应时间段是不会重叠的，这也意味着同一个产品的价格时段不会出现交叉。</span><br></pre></td></tr></table></figure><p>表：<code>UnitsSold</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| purchase_date | date    |</span><br><span class="line">| units         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表可能包含重复数据。</span><br><span class="line">该表的每一行表示的是每种产品的出售日期，单位和产品 id。</span><br></pre></td></tr></table></figure><p>编写解决方案以查找每种产品的平均售价。<code>average_price</code> 应该<strong>四舍五入到小数点后两位</strong>。</p><p>返回结果表 <strong>无顺序要求</strong> 。</p><p>结果格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Prices table:</span><br><span class="line">+------------+------------+------------+--------+</span><br><span class="line">| product_id | start_date | end_date   | price  |</span><br><span class="line">+------------+------------+------------+--------+</span><br><span class="line">| 1          | 2019-02-17 | 2019-02-28 | 5      |</span><br><span class="line">| 1          | 2019-03-01 | 2019-03-22 | 20     |</span><br><span class="line">| 2          | 2019-02-01 | 2019-02-20 | 15     |</span><br><span class="line">| 2          | 2019-02-21 | 2019-03-31 | 30     |</span><br><span class="line">+------------+------------+------------+--------+</span><br><span class="line">UnitsSold table:</span><br><span class="line">+------------+---------------+-------+</span><br><span class="line">| product_id | purchase_date | units |</span><br><span class="line">+------------+---------------+-------+</span><br><span class="line">| 1          | 2019-02-25    | 100   |</span><br><span class="line">| 1          | 2019-03-01    | 15    |</span><br><span class="line">| 2          | 2019-02-10    | 200   |</span><br><span class="line">| 2          | 2019-03-22    | 30    |</span><br><span class="line">+------------+---------------+-------+</span><br><span class="line">输出：</span><br><span class="line">+------------+---------------+</span><br><span class="line">| product_id | average_price |</span><br><span class="line">+------------+---------------+</span><br><span class="line">| 1          | 6.96          |</span><br><span class="line">| 2          | 16.96         |</span><br><span class="line">+------------+---------------+</span><br><span class="line">解释：</span><br><span class="line">平均售价 = 产品总价 / 销售的产品数量。</span><br><span class="line">产品 1 的平均售价 = ((100 * 5)+(15 * 20) )/ 115 = 6.96</span><br><span class="line">产品 2 的平均售价 = ((200 * 15)+(30 * 30) )/ 230 = 16.96</span><br></pre></td></tr></table></figure><h4 id="思路-13">思路</h4><h5 id="子查询-连表">子查询 + 连表</h5><p>连表：</p><p>查出来总的销售额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.product_id, p.price <span class="operator">*</span> u.units <span class="keyword">as</span> sales, u.units</span><br><span class="line"><span class="keyword">from</span> Prices p </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> UnitsSold u <span class="keyword">on</span> p.product_id <span class="operator">=</span> u.product_id</span><br><span class="line"><span class="keyword">and</span> u.purchase_date <span class="keyword">between</span> p.start_date <span class="keyword">and</span> p.end_date</span><br></pre></td></tr></table></figure><p>最终SUM聚合一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sale.product_id, IFNULL(ROUND(<span class="built_in">SUM</span>(sales) <span class="operator">/</span> <span class="built_in">SUM</span>(units), <span class="number">2</span>), <span class="number">0</span>) <span class="keyword">as</span> average_price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> p.product_id, p.price <span class="operator">*</span> u.units <span class="keyword">as</span> sales, u.units</span><br><span class="line"><span class="keyword">from</span> Prices p </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> UnitsSold u <span class="keyword">on</span> p.product_id <span class="operator">=</span> u.product_id</span><br><span class="line"><span class="keyword">and</span> u.purchase_date <span class="keyword">between</span> p.start_date <span class="keyword">and</span> p.end_date) <span class="keyword">as</span> sale</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sale.product_id;</span><br></pre></td></tr></table></figure><h3 id="各赛事的用户注册率"><ahref="https://leetcode.cn/problems/percentage-of-users-attended-a-contest/">1633.各赛事的用户注册率</a></h3><p>用户表： <code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| user_id     | int     |</span><br><span class="line">| user_name   | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">user_id 是该表的主键(具有唯一值的列)。</span><br><span class="line">该表中的每行包括用户 ID 和用户名。</span><br></pre></td></tr></table></figure><p>注册表： <code>Register</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| contest_id  | int     |</span><br><span class="line">| user_id     | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">(contest_id, user_id) 是该表的主键(具有唯一值的列的组合)。</span><br><span class="line">该表中的每行包含用户的 ID 和他们注册的赛事。</span><br></pre></td></tr></table></figure><p>编写解决方案统计出各赛事的用户注册百分率，保留两位小数。</p><p>返回的结果表按 <code>percentage</code> 的 <strong>降序</strong>排序，若相同则按 <code>contest_id</code> 的 <strong>升序</strong>排序。</p><p>返回结果如下示例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Users 表：</span><br><span class="line">+---------+-----------+</span><br><span class="line">| user_id | user_name |</span><br><span class="line">+---------+-----------+</span><br><span class="line">| 6       | Alice     |</span><br><span class="line">| 2       | Bob       |</span><br><span class="line">| 7       | Alex      |</span><br><span class="line">+---------+-----------+</span><br><span class="line"></span><br><span class="line">Register 表：</span><br><span class="line">+------------+---------+</span><br><span class="line">| contest_id | user_id |</span><br><span class="line">+------------+---------+</span><br><span class="line">| 215        | 6       |</span><br><span class="line">| 209        | 2       |</span><br><span class="line">| 208        | 2       |</span><br><span class="line">| 210        | 6       |</span><br><span class="line">| 208        | 6       |</span><br><span class="line">| 209        | 7       |</span><br><span class="line">| 209        | 6       |</span><br><span class="line">| 215        | 7       |</span><br><span class="line">| 208        | 7       |</span><br><span class="line">| 210        | 2       |</span><br><span class="line">| 207        | 2       |</span><br><span class="line">| 210        | 7       |</span><br><span class="line">+------------+---------+</span><br><span class="line">输出：</span><br><span class="line">+------------+------------+</span><br><span class="line">| contest_id | percentage |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 208        | 100.0      |</span><br><span class="line">| 209        | 100.0      |</span><br><span class="line">| 210        | 100.0      |</span><br><span class="line">| 215        | 66.67      |</span><br><span class="line">| 207        | 33.33      |</span><br><span class="line">+------------+------------+</span><br><span class="line">解释：</span><br><span class="line">所有用户都注册了 208、209 和 210 赛事，因此这些赛事的注册率为 100% ，我们按 contest_id 的降序排序加入结果表中。</span><br><span class="line">Alice 和 Alex 注册了 215 赛事，注册率为 ((2/3) * 100) = 66.67%</span><br><span class="line">Bob 注册了 207 赛事，注册率为 ((1/3) * 100) = 33.33%</span><br></pre></td></tr></table></figure><h4 id="思路-14">思路</h4><h5 id="连接-聚合">连接 + 聚合</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> r.contest_id, round(<span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">/</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> Users)<span class="operator">*</span><span class="number">100</span>,<span class="number">2</span>)  <span class="keyword">as</span> percentage </span><br><span class="line"><span class="keyword">from</span>  Register r</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> r.contest_id </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> percentage <span class="keyword">DESC</span>, r.contest_id <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h3 id="查询结果的质量和占比"><ahref="https://leetcode.cn/problems/queries-quality-and-percentage/">1211.查询结果的质量和占比</a></h3><p><code>Queries</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| query_name  | varchar |</span><br><span class="line">| result      | varchar |</span><br><span class="line">| position    | int     |</span><br><span class="line">| rating      | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">此表可能有重复的行。</span><br><span class="line">此表包含了一些从数据库中收集的查询信息。</span><br><span class="line">“位置”（position）列的值为 1 到 500 。</span><br><span class="line">“评分”（rating）列的值为 1 到 5 。评分小于 3 的查询被定义为质量很差的查询。</span><br></pre></td></tr></table></figure><p>将查询结果的质量 <code>quality</code> 定义为：</p><blockquote><p>各查询结果的评分与其位置之间比率的平均值。</p></blockquote><p>将劣质查询百分比 <code>poor_query_percentage</code> 为：</p><blockquote><p>评分小于 3 的查询结果占全部查询结果的百分比。</p></blockquote><p>编写解决方案，找出每次的 <code>query_name</code> 、<code>quality</code> 和 <code>poor_query_percentage</code>。</p><p><code>quality</code> 和 <code>poor_query_percentage</code> 都应<strong>四舍五入到小数点后两位</strong> 。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>结果格式如下所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Queries table:</span><br><span class="line">+------------+-------------------+----------+--------+</span><br><span class="line">| query_name | result            | position | rating |</span><br><span class="line">+------------+-------------------+----------+--------+</span><br><span class="line">| Dog        | Golden Retriever  | 1        | 5      |</span><br><span class="line">| Dog        | German Shepherd   | 2        | 5      |</span><br><span class="line">| Dog        | Mule              | 200      | 1      |</span><br><span class="line">| Cat        | Shirazi           | 5        | 2      |</span><br><span class="line">| Cat        | Siamese           | 3        | 3      |</span><br><span class="line">| Cat        | Sphynx            | 7        | 4      |</span><br><span class="line">+------------+-------------------+----------+--------+</span><br><span class="line">输出：</span><br><span class="line">+------------+---------+-----------------------+</span><br><span class="line">| query_name | quality | poor_query_percentage |</span><br><span class="line">+------------+---------+-----------------------+</span><br><span class="line">| Dog        | 2.50    | 33.33                 |</span><br><span class="line">| Cat        | 0.66    | 33.33                 |</span><br><span class="line">+------------+---------+-----------------------+</span><br><span class="line">解释：</span><br><span class="line">Dog 查询结果的质量为 ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50</span><br><span class="line">Dog 查询结果的劣质查询百分比为 (1 / 3) * 100 = 33.33</span><br><span class="line"></span><br><span class="line">Cat 查询结果的质量为 ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66</span><br><span class="line">Cat 查询结果的劣质查询百分比为 (1 / 3) * 100 = 33.33</span><br></pre></td></tr></table></figure><h4 id="思路-15">思路</h4><h5 id="count-if-1">count + if</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query_name, Round(<span class="built_in">avg</span>(rating <span class="operator">/</span> position), <span class="number">2</span>) <span class="keyword">as</span> quality, ROUND(<span class="number">100</span> <span class="operator">*</span> <span class="built_in">count</span>(IF(rating <span class="operator">&lt;</span> <span class="number">3</span>, <span class="number">1</span>, <span class="keyword">null</span>)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>), <span class="number">2</span>) <span class="keyword">AS</span> poor_query_percentage</span><br><span class="line"><span class="keyword">from</span> Queries</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> query_name </span><br><span class="line"><span class="keyword">having</span> query_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h2 id="中等-1">中等</h2><h3 id="每月交易-i"><ahref="https://leetcode.cn/problems/monthly-transactions-i/">1193.每月交易 I</a></h3><p>表：<code>Transactions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| country       | varchar |</span><br><span class="line">| state         | enum    |</span><br><span class="line">| amount        | int     |</span><br><span class="line">| trans_date    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是这个表的主键。</span><br><span class="line">该表包含有关传入事务的信息。</span><br><span class="line">state 列类型为 [&quot;approved&quot;, &quot;declined&quot;] 之一。</span><br></pre></td></tr></table></figure><p>编写一个 sql查询来查找每个月和每个国家/地区的事务数及其总金额、已批准的事务数及其总金额。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>查询结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Transactions table:</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| id   | country | state    | amount | trans_date |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| 121  | US      | approved | 1000   | 2018-12-18 |</span><br><span class="line">| 122  | US      | declined | 2000   | 2018-12-19 |</span><br><span class="line">| 123  | US      | approved | 2000   | 2019-01-01 |</span><br><span class="line">| 124  | DE      | approved | 2000   | 2019-01-07 |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">输出：</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br><span class="line">| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br><span class="line">| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |</span><br><span class="line">| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |</span><br><span class="line">| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br></pre></td></tr></table></figure><h4 id="思路-16">思路</h4><h5 id="多聚合函数">多聚合函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> DATE_FORMAT(trans_date, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">as</span> <span class="keyword">month</span>, country</span><br><span class="line">, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> trans_count</span><br><span class="line">, <span class="built_in">count</span>(IF(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, <span class="number">1</span>, <span class="keyword">null</span>)) <span class="keyword">as</span> approved_count </span><br><span class="line">, <span class="built_in">sum</span>(amount) <span class="keyword">AS</span> trans_total_amount </span><br><span class="line">, <span class="built_in">sum</span>(IF(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, amount, <span class="number">0</span>)) <span class="keyword">as</span> approved_total_amount </span><br><span class="line"><span class="keyword">from</span> Transactions</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">month</span>, country</span><br></pre></td></tr></table></figure><ul><li>注意日期格式</li><li>聚合函数配合IF条件进行筛选</li></ul><h3 id="即时食物配送-ii"><ahref="https://leetcode.cn/problems/immediate-food-delivery-ii/">1174.即时食物配送 II</a></h3><p>配送表: <code>Delivery</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------+---------+</span><br><span class="line">| Column Name                 | Type    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| delivery_id                 | int     |</span><br><span class="line">| customer_id                 | int     |</span><br><span class="line">| order_date                  | date    |</span><br><span class="line">| customer_pref_delivery_date | date    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">delivery_id 是该表中具有唯一值的列。</span><br><span class="line">该表保存着顾客的食物配送信息，顾客在某个日期下了订单，并指定了一个期望的配送日期（和下单日期相同或者在那之后）。</span><br></pre></td></tr></table></figure><p>如果顾客期望的配送日期和下单日期相同，则该订单称为「<strong>即时订单</strong>」，否则称为「<strong>计划订单</strong>」。</p><p>「<strong>首次订单</strong>」是顾客最早创建的订单。我们保证一个顾客只会有一个「首次订单」。</p><p>编写解决方案以获取即时订单在所有用户的首次订单中的比例。<strong>保留两位小数。</strong></p><p>结果示例如下所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Delivery 表：</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| delivery_id | customer_id | order_date | customer_pref_delivery_date |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| 1           | 1           | 2019-08-01 | 2019-08-02                  |</span><br><span class="line">| 2           | 2           | 2019-08-02 | 2019-08-02                  |</span><br><span class="line">| 3           | 1           | 2019-08-11 | 2019-08-12                  |</span><br><span class="line">| 4           | 3           | 2019-08-24 | 2019-08-24                  |</span><br><span class="line">| 5           | 3           | 2019-08-21 | 2019-08-22                  |</span><br><span class="line">| 6           | 2           | 2019-08-11 | 2019-08-13                  |</span><br><span class="line">| 7           | 4           | 2019-08-09 | 2019-08-09                  |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">输出：</span><br><span class="line">+----------------------+</span><br><span class="line">| immediate_percentage |</span><br><span class="line">+----------------------+</span><br><span class="line">| 50.00                |</span><br><span class="line">+----------------------+</span><br><span class="line">解释：</span><br><span class="line">1 号顾客的 1 号订单是首次订单，并且是计划订单。</span><br><span class="line">2 号顾客的 2 号订单是首次订单，并且是即时订单。</span><br><span class="line">3 号顾客的 5 号订单是首次订单，并且是计划订单。</span><br><span class="line">4 号顾客的 7 号订单是首次订单，并且是即时订单。</span><br><span class="line">因此，一半顾客的首次订单是即时的。</span><br></pre></td></tr></table></figure><h4 id="思路-17">思路</h4><h5 id="where子查询-聚合函数">where子查询 + 聚合函数</h5><p>先查出子表：所有的首次订单</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(order_date), customer_id </span><br><span class="line"><span class="keyword">from</span> Delivery </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_id </span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> <span class="built_in">min</span>(order_date) <span class="operator">|</span> customer_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">--------------- | ----------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-01</span>      <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-02</span>      <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-21</span>      <span class="operator">|</span> <span class="number">3</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-08</span><span class="number">-09</span>      <span class="operator">|</span> <span class="number">4</span>           <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>聚合函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Round(<span class="built_in">sum</span>(order_date <span class="operator">=</span> customer_pref_delivery_date)<span class="operator">*</span><span class="number">100</span> <span class="operator">/</span> <span class="built_in">count</span>(<span class="operator">*</span>), <span class="number">2</span>) <span class="keyword">as</span> immediate_percentage </span><br><span class="line"><span class="keyword">from</span> Delivery</span><br><span class="line"><span class="keyword">where</span> (order_date,customer_id) <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(order_date), customer_id </span><br><span class="line"><span class="keyword">from</span> Delivery </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_id )</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="游戏玩法分析-iv"><ahref="https://leetcode.cn/problems/game-play-analysis-iv/">550.游戏玩法分析 IV</a></h3><p>Table: <code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">（player_id，event_date）是此表的主键（具有唯一值的列的组合）。</span><br><span class="line">这张表显示了某些游戏的玩家的活动情况。</span><br><span class="line">每一行是一个玩家的记录，他在某一天使用某个设备注销之前登录并玩了很多游戏（可能是 0）。</span><br></pre></td></tr></table></figure><p>编写解决方案，报告在首次登录的第二天再次登录的玩家的<strong>比率</strong>，<strong>四舍五入到小数点后两位</strong>。换句话说，你需要计算从首次登录日期开始至少连续两天登录的玩家的数量，然后除以玩家总数。</p><p>结果格式如下所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-03-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">输出：</span><br><span class="line">+-----------+</span><br><span class="line">| fraction  |</span><br><span class="line">+-----------+</span><br><span class="line">| 0.33      |</span><br><span class="line">+-----------+</span><br><span class="line">解释：</span><br><span class="line">只有 ID 为 1 的玩家在第一天登录后才重新登录，所以答案是 1/3 = 0.33</span><br></pre></td></tr></table></figure><h4 id="思路-18">思路</h4><h5 id="连接子查询-聚合">连接子查询 + 聚合</h5><p>先查出来用户的第一次登录记录：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(event_date) <span class="keyword">as</span> minDay, player_id</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> player_id</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> minDay     <span class="operator">|</span> player_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">---------- | --------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2016</span><span class="number">-03</span><span class="number">-01</span> <span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2017</span><span class="number">-06</span><span class="number">-25</span> <span class="operator">|</span> <span class="number">2</span>         <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2016</span><span class="number">-03</span><span class="number">-02</span> <span class="operator">|</span> <span class="number">3</span>         <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>然后与Activity本表连接：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.player_id</span><br><span class="line"><span class="keyword">from</span> Activity a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(event_date) <span class="keyword">as</span> minDay, player_id</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> player_id) <span class="keyword">as</span> t1 <span class="keyword">on</span> a.player_id <span class="operator">=</span> t1.player_id</span><br><span class="line"><span class="keyword">where</span> a.event_date <span class="operator">=</span> ADDDATE(minDay, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> player_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">--------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>         <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>最终sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> IFNULL(Round(<span class="built_in">count</span>(<span class="keyword">distinct</span>(result.player_id)) <span class="operator">/</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> Activity.player_id), <span class="number">2</span>), <span class="number">0</span>) <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> a.player_id</span><br><span class="line"><span class="keyword">from</span> Activity a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(event_date) <span class="keyword">as</span> minDay, player_id</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> player_id) <span class="keyword">as</span> t1 <span class="keyword">on</span> a.player_id <span class="operator">=</span> t1.player_id</span><br><span class="line"><span class="keyword">where</span> a.event_date <span class="operator">=</span> ADDDATE(minDay, <span class="number">1</span>) ) </span><br><span class="line"><span class="keyword">as</span> <span class="keyword">result</span> , Activity</span><br></pre></td></tr></table></figure><h1 id="排序和分组">排序和分组</h1><h2 id="简单-3">简单</h2><h3 id="每位教师所教授的科目种类的数量"><ahref="https://leetcode.cn/problems/number-of-unique-subjects-taught-by-each-teacher/">2356.每位教师所教授的科目种类的数量</a></h3><p>表: <code>Teacher</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| teacher_id  | int  |</span><br><span class="line">| subject_id  | int  |</span><br><span class="line">| dept_id     | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">在 SQL 中，(subject_id, dept_id) 是该表的主键。</span><br><span class="line">该表中的每一行都表示带有 teacher_id 的教师在系 dept_id 中教授科目 subject_id。</span><br></pre></td></tr></table></figure><p>查询每位老师在大学里教授的科目种类的数量。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>查询结果格式示例如下。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Teacher 表:</span><br><span class="line">+------------+------------+---------+</span><br><span class="line">| teacher_id | subject_id | dept_id |</span><br><span class="line">+------------+------------+---------+</span><br><span class="line">| 1          | 2          | 3       |</span><br><span class="line">| 1          | 2          | 4       |</span><br><span class="line">| 1          | 3          | 3       |</span><br><span class="line">| 2          | 1          | 1       |</span><br><span class="line">| 2          | 2          | 1       |</span><br><span class="line">| 2          | 3          | 1       |</span><br><span class="line">| 2          | 4          | 1       |</span><br><span class="line">+------------+------------+---------+</span><br><span class="line">输出:  </span><br><span class="line">+------------+-----+</span><br><span class="line">| teacher_id | cnt |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 1          | 2   |</span><br><span class="line">| 2          | 4   |</span><br><span class="line">+------------+-----+</span><br><span class="line">解释: </span><br><span class="line">教师 1:</span><br><span class="line">  - 他在 3、4 系教科目 2。</span><br><span class="line">  - 他在 3 系教科目 3。</span><br><span class="line">教师 2:</span><br><span class="line">  - 他在 1 系教科目 1。</span><br><span class="line">  - 他在 1 系教科目 2。</span><br><span class="line">  - 他在 1 系教科目 3。</span><br><span class="line">  - 他在 1 系教科目 4。</span><br></pre></td></tr></table></figure><h4 id="思路-19">思路</h4><h5 id="count-distinct">count + distinct</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> teacher_id, <span class="built_in">count</span>(<span class="keyword">DISTINCT</span> subject_id) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> Teacher </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> teacher_id</span><br></pre></td></tr></table></figure><h3 id="销售分析iii"><ahref="https://leetcode.cn/problems/sales-analysis-iii/">1084.销售分析III</a></h3><p>表： <code>Product</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是该表的主键（具有唯一值的列）。</span><br><span class="line">该表的每一行显示每个产品的名称和价格。</span><br></pre></td></tr></table></figure><p>表：<code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">这个表可能有重复的行。</span><br><span class="line">product_id 是 Product 表的外键（reference 列）。</span><br><span class="line">该表的每一行包含关于一个销售的一些信息。</span><br></pre></td></tr></table></figure><p>编写解决方案，报告<code>2019年春季</code>才售出的产品。即<strong>仅</strong>在<code>2019-01-01</code>至<code>2019-03-31</code>（含）之间出售的商品。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">Sales table:</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| product_id  | product_name |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | S8           |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">解释:</span><br><span class="line">id 为 1 的产品仅在 2019 年春季销售。</span><br><span class="line">id 为 2 的产品在 2019 年春季销售，但也在 2019 年春季之后销售。</span><br><span class="line">id 为 3 的产品在 2019 年春季之后销售。</span><br><span class="line">我们只返回 id 为 1 的产品，因为它是 2019 年春季才销售的产品。</span><br></pre></td></tr></table></figure><h4 id="思路-20">思路</h4><h5 id="连接-not-in子查询">连接 + not in子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  p. product_id, p.product_name </span><br><span class="line"><span class="keyword">from</span> Product p </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Sales s <span class="keyword">on</span> p.product_id <span class="operator">=</span> s.product_id</span><br><span class="line"><span class="keyword">where</span> sale_date <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-03-31&#x27;</span></span><br><span class="line"><span class="keyword">and</span> p.product_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> s.product_id <span class="keyword">from</span> Sales s <span class="keyword">where</span> sale_date <span class="operator">&gt;</span> <span class="string">&#x27;2019-03-31&#x27;</span> <span class="keyword">or</span> sale_date <span class="operator">&lt;</span> <span class="string">&#x27;2019-01-01&#x27;</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p. product_id</span><br></pre></td></tr></table></figure><h5 id="聚合函数-1">聚合函数</h5><p>独特的思路：既然要求<strong>仅</strong>在<code>2019-01-01</code>至<code>2019-03-31</code>之间出售的商品，等价为，在这个区间内，商品出售的数量和总共出售的数量相同。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p. product_id, p.product_name </span><br><span class="line"><span class="keyword">from</span> Product p </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Sales s <span class="keyword">on</span> p.product_id <span class="operator">=</span> s.product_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> p. product_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(sale_date <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-03-31&#x27;</span> <span class="keyword">or</span> <span class="keyword">null</span>) <span class="operator">=</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br></pre></td></tr></table></figure><h3 id="只出现一次的最大数字"><ahref="https://leetcode.cn/problems/biggest-single-number/">619.只出现一次的最大数字</a></h3><p><code>MyNumbers</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| num         | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">该表可能包含重复项（换句话说，在SQL中，该表没有主键）。</span><br><span class="line">这张表的每一行都含有一个整数。</span><br></pre></td></tr></table></figure><p><strong>单一数字</strong> 是在 <code>MyNumbers</code>表中只出现一次的数字。</p><p>找出最大的 <strong>单一数字</strong> 。如果不存在<strong>单一数字</strong> ，则返回 <code>null</code> 。</p><p>查询结果如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">MyNumbers 表：</span><br><span class="line">+-----+</span><br><span class="line">| num |</span><br><span class="line">+-----+</span><br><span class="line">| 8   |</span><br><span class="line">| 8   |</span><br><span class="line">| 3   |</span><br><span class="line">| 3   |</span><br><span class="line">| 1   |</span><br><span class="line">| 4   |</span><br><span class="line">| 5   |</span><br><span class="line">| 6   |</span><br><span class="line">+-----+</span><br><span class="line">输出：</span><br><span class="line">+-----+</span><br><span class="line">| num |</span><br><span class="line">+-----+</span><br><span class="line">| 6   |</span><br><span class="line">+-----+</span><br><span class="line">解释：单一数字有 1、4、5 和 6 。</span><br><span class="line">6 是最大的单一数字，返回 6 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">MyNumbers table:</span><br><span class="line">+-----+</span><br><span class="line">| num |</span><br><span class="line">+-----+</span><br><span class="line">| 8   |</span><br><span class="line">| 8   |</span><br><span class="line">| 7   |</span><br><span class="line">| 7   |</span><br><span class="line">| 3   |</span><br><span class="line">| 3   |</span><br><span class="line">| 3   |</span><br><span class="line">+-----+</span><br><span class="line">输出：</span><br><span class="line">+------+</span><br><span class="line">| num  |</span><br><span class="line">+------+</span><br><span class="line">| null |</span><br><span class="line">+------+</span><br><span class="line">解释：输入的表中不存在单一数字，所以返回 null 。</span><br></pre></td></tr></table></figure><h4 id="思路-21">思路</h4><h5 id="子查询">子查询</h5><p>先查单一数字，再从子表查出最大的那个。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(ch.num) <span class="keyword">as</span> num  <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> MyNumbers </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> num</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">=</span> <span class="number">1</span>) <span class="keyword">as</span> ch</span><br></pre></td></tr></table></figure><h2 id="中等-2">中等</h2><h3 id="买下所有产品的客户"><ahref="https://leetcode.cn/problems/customers-who-bought-all-products/">1045.买下所有产品的客户</a></h3><p><code>Customer</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| customer_id | int     |</span><br><span class="line">| product_key | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">该表可能包含重复的行。</span><br><span class="line">customer_id 不为 NULL。</span><br><span class="line">product_key 是 Product 表的外键(reference 列)。</span><br></pre></td></tr></table></figure><p><code>Product</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| product_key | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_key 是这张表的主键（具有唯一值的列）。</span><br></pre></td></tr></table></figure><p>编写解决方案，报告 <code>Customer</code> 表中购买了<code>Product</code> 表中所有产品的客户的 id。</p><p>返回结果表 <strong>无顺序要求</strong> 。</p><p>返回结果格式如下所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Customer 表：</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| customer_id | product_key |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 5           |</span><br><span class="line">| 2           | 6           |</span><br><span class="line">| 3           | 5           |</span><br><span class="line">| 3           | 6           |</span><br><span class="line">| 1           | 6           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">Product 表：</span><br><span class="line">+-------------+</span><br><span class="line">| product_key |</span><br><span class="line">+-------------+</span><br><span class="line">| 5           |</span><br><span class="line">| 6           |</span><br><span class="line">+-------------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+</span><br><span class="line">| customer_id |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">解释：</span><br><span class="line">购买了所有产品（5 和 6）的客户的 id 是 1 和 3 。</span><br></pre></td></tr></table></figure><h4 id="思路-22">思路</h4><p>cuntom表会有客户买重复的商品，所以用count判断数量的时候需要去重。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id</span><br><span class="line"><span class="keyword">from</span> Customer c</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_id</span><br><span class="line"> <span class="keyword">having</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> product_key) <span class="operator">&gt;=</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> Product)</span><br></pre></td></tr></table></figure><h1 id="高级查询和连接">高级查询和连接</h1><h2 id="简单-4">简单</h2><h3 id="每位经理的下属员工数量"><ahref="https://leetcode.cn/problems/the-number-of-employees-which-report-to-each-employee/">1731.每位经理的下属员工数量</a></h3><p>Table: <code>Employees</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------------+----------+</span><br><span class="line">| Column Name | Type     |</span><br><span class="line">+-------------+----------+</span><br><span class="line">| employee_id | int      |</span><br><span class="line">| name        | varchar  |</span><br><span class="line">| reports_to  | int      |</span><br><span class="line">| age         | int      |</span><br><span class="line">+-------------+----------+</span><br><span class="line">employee_id 是这个表的主键.</span><br><span class="line">该表包含员工以及需要听取他们汇报的上级经理的ID的信息。 有些员工不需要向任何人汇报（reports_to 为空）。</span><br></pre></td></tr></table></figure><p>对于此问题，我们将至少有一个其他员工需要向他汇报的员工，视为一个经理。</p><p>编写SQL查询需要听取汇报的所有经理的ID、名称、直接向该经理汇报的员工人数，以及这些员工的平均年龄，其中该平均年龄需要四舍五入到最接近的整数。</p><p>返回的结果集需要按照 <code>employee_id</code>进行排序。</p><p>查询结果的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Employees table:</span><br><span class="line">+-------------+---------+------------+-----+</span><br><span class="line">| employee_id | name    | reports_to | age |</span><br><span class="line">+-------------+---------+------------+-----+</span><br><span class="line">| 9           | Hercy   | null       | 43  |</span><br><span class="line">| 6           | Alice   | 9          | 41  |</span><br><span class="line">| 4           | Bob     | 9          | 36  |</span><br><span class="line">| 2           | Winston | null       | 37  |</span><br><span class="line">+-------------+---------+------------+-----+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+-------+---------------+-------------+</span><br><span class="line">| employee_id | name  | reports_count | average_age |</span><br><span class="line">+-------------+-------+---------------+-------------+</span><br><span class="line">| 9           | Hercy | 2             | 39          |</span><br><span class="line">+-------------+-------+---------------+-------------+</span><br><span class="line">Hercy 有两个需要向他汇报的员工, 他们是 Alice and Bob. 他们的平均年龄是 (41+36)/2 = 38.5, 四舍五入的结果是 39.</span><br></pre></td></tr></table></figure><h4 id="算法分析">算法分析</h4><h5 id="自身连接">自身连接</h5><p>以自己跟自己连接，a表查经理，b表查员工，连接结果如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> Employees a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Employees b <span class="keyword">on</span> a.employee_id <span class="operator">=</span> b.reports_to</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> name  <span class="operator">|</span> reports_to <span class="operator">|</span> age <span class="operator">|</span> employee_id <span class="operator">|</span> name  <span class="operator">|</span> reports_to <span class="operator">|</span> age <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">----------- | ----- | ---------- | --- | ----------- | ----- | ---------- | --- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span>           <span class="operator">|</span> Hercy <span class="operator">|</span> <span class="keyword">null</span>       <span class="operator">|</span> <span class="number">43</span>  <span class="operator">|</span> <span class="number">6</span>           <span class="operator">|</span> Alice <span class="operator">|</span> <span class="number">9</span>          <span class="operator">|</span> <span class="number">41</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">9</span>           <span class="operator">|</span> Hercy <span class="operator">|</span> <span class="keyword">null</span>       <span class="operator">|</span> <span class="number">43</span>  <span class="operator">|</span> <span class="number">4</span>           <span class="operator">|</span> Bob   <span class="operator">|</span> <span class="number">9</span>          <span class="operator">|</span> <span class="number">36</span>  <span class="operator">|</span></span><br></pre></td></tr></table></figure><ul><li>采用内连接避免空值</li></ul><p>这时候左半部分只需查<code>employee_id</code>、<code>name</code>即可，右边计算一下count，把age平均计算一下即可</p><p>总体sql语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.employee_id, a.name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> reports_count, ROUND(<span class="built_in">avg</span>(b.age)) <span class="keyword">as</span> average_age</span><br><span class="line"><span class="keyword">from</span> Employees a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> Employees b <span class="keyword">on</span> a.employee_id <span class="operator">=</span> b.reports_to</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.employee_id, a.name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.employee_id</span><br></pre></td></tr></table></figure><h3 id="员工的直属部门"><ahref="https://leetcode.cn/problems/primary-department-for-each-employee/">1789.员工的直属部门</a></h3><p>表：<code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   |  Type   |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| employee_id   | int     |</span><br><span class="line">| department_id | int     |</span><br><span class="line">| primary_flag  | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">这张表的主键为 employee_id, department_id (具有唯一值的列的组合)</span><br><span class="line">employee_id 是员工的ID</span><br><span class="line">department_id 是部门的ID，表示员工与该部门有关系</span><br><span class="line">primary_flag 是一个枚举类型，值分别为(&#x27;Y&#x27;, &#x27;N&#x27;). 如果值为&#x27;Y&#x27;,表示该部门是员工的直属部门。 如果值是&#x27;N&#x27;,则否</span><br></pre></td></tr></table></figure><p>一个员工可以属于多个部门。当一个员工加入<strong>超过一个部门</strong>的时候，他需要决定哪个部门是他的直属部门。请注意，当员工只加入一个部门的时候，那这个部门将默认为他的直属部门，虽然表记录的值为<code>'N'</code>.</p><p>请编写解决方案，查出员工所属的直属部门。</p><p>返回结果 <strong>没有顺序要求</strong> 。</p><p>返回结果格式如下例子所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee table:</span><br><span class="line">+-------------+---------------+--------------+</span><br><span class="line">| employee_id | department_id | primary_flag |</span><br><span class="line">+-------------+---------------+--------------+</span><br><span class="line">| 1           | 1             | N            |</span><br><span class="line">| 2           | 1             | Y            |</span><br><span class="line">| 2           | 2             | N            |</span><br><span class="line">| 3           | 3             | N            |</span><br><span class="line">| 4           | 2             | N            |</span><br><span class="line">| 4           | 3             | Y            |</span><br><span class="line">| 4           | 4             | N            |</span><br><span class="line">+-------------+---------------+--------------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| employee_id | department_id |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | 1             |</span><br><span class="line">| 2           | 1             |</span><br><span class="line">| 3           | 3             |</span><br><span class="line">| 4           | 3             |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">解释：</span><br><span class="line">- 员工 1 的直属部门是 1</span><br><span class="line">- 员工 2 的直属部门是 1</span><br><span class="line">- 员工 3 的直属部门是 3</span><br><span class="line">- 员工 4 的直属部门是 3</span><br></pre></td></tr></table></figure><h4 id="思路-23">思路</h4><p>本题的条件有两个</p><p>primary_flag='Y'的情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.employee_id, a.department_id</span><br><span class="line"><span class="keyword">from</span> Employee a</span><br><span class="line"><span class="keyword">where</span> a.primary_flag <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> employee_id <span class="operator">|</span> department_id <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">----------- | ------------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">1</span>             <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">4</span>           <span class="operator">|</span> <span class="number">3</span>             <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>只有一个部门的情况：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.employee_id, a.department_id</span><br><span class="line"><span class="keyword">from</span> Employee a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.employee_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(department_id) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>这里count聚合函数，要放到having里执行，而不能用在where里了，因为select的字段不能包含count函数了，而分组后再进行聚合操作是可以的</li></ul><p>整体代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.employee_id, a.department_id</span><br><span class="line"><span class="keyword">from</span> Employee a</span><br><span class="line"><span class="keyword">where</span> a.primary_flag <span class="operator">=</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> a.employee_id, a.department_id</span><br><span class="line"><span class="keyword">from</span> Employee a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.employee_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(department_id) <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>union也能去重</li></ul><h2 id="中等-3">中等</h2><h3 id="连续出现的数字"><ahref="https://leetcode.cn/problems/consecutive-numbers/">180.连续出现的数字</a></h3><p>表：<code>Logs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| num         | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">在 SQL 中，id 是该表的主键。</span><br><span class="line">id 是一个自增列。</span><br></pre></td></tr></table></figure><p>找出所有至少连续出现三次的数字。</p><p>返回的结果表中的数据可以按 <strong>任意顺序</strong> 排列。</p><p>结果格式如下面的例子所示：</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Logs 表：</span><br><span class="line">+----+-----+</span><br><span class="line">| id | num |</span><br><span class="line">+----+-----+</span><br><span class="line">| 1  | 1   |</span><br><span class="line">| 2  | 1   |</span><br><span class="line">| 3  | 1   |</span><br><span class="line">| 4  | 2   |</span><br><span class="line">| 5  | 1   |</span><br><span class="line">| 6  | 2   |</span><br><span class="line">| 7  | 2   |</span><br><span class="line">+----+-----+</span><br><span class="line">输出：</span><br><span class="line">Result 表：</span><br><span class="line">+-----------------+</span><br><span class="line">| ConsecutiveNums |</span><br><span class="line">+-----------------+</span><br><span class="line">| 1               |</span><br><span class="line">+-----------------+</span><br><span class="line">解释：1 是唯一连续出现至少三次的数字。</span><br></pre></td></tr></table></figure><h4 id="思路-24">思路</h4><h5 id="自我链接">自我链接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    l1.Num <span class="keyword">AS</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Logs l1,</span><br><span class="line">    Logs l2,</span><br><span class="line">    Logs l3</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    l1.Id <span class="operator">=</span> l2.Id <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">AND</span> l2.Id <span class="operator">=</span> l3.Id <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">AND</span> l1.Num <span class="operator">=</span> l2.Num</span><br><span class="line">    <span class="keyword">AND</span> l2.Num <span class="operator">=</span> l3.Num</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="指定日期的产品价格"><ahref="https://leetcode.cn/problems/product-price-at-a-given-date/">1164.指定日期的产品价格</a></h3><p>产品数据表: <code>Products</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| new_price     | int     |</span><br><span class="line">| change_date   | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(product_id, change_date) 是此表的主键（具有唯一值的列组合）。</span><br><span class="line">这张表的每一行分别记录了 某产品 在某个日期 更改后 的新价格。</span><br></pre></td></tr></table></figure><p>编写一个解决方案，找出在 <code>2019-08-16</code>时全部产品的价格，假设所有产品在修改前的价格都是 <code>10</code><strong>。</strong></p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>结果格式如下例所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Products 表:</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">| product_id | new_price | change_date |</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">| 1          | 20        | 2019-08-14  |</span><br><span class="line">| 2          | 50        | 2019-08-14  |</span><br><span class="line">| 1          | 30        | 2019-08-15  |</span><br><span class="line">| 1          | 35        | 2019-08-16  |</span><br><span class="line">| 2          | 65        | 2019-08-17  |</span><br><span class="line">| 3          | 20        | 2019-08-18  |</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">输出：</span><br><span class="line">+------------+-------+</span><br><span class="line">| product_id | price |</span><br><span class="line">+------------+-------+</span><br><span class="line">| 2          | 50    |</span><br><span class="line">| 1          | 35    |</span><br><span class="line">| 3          | 10    |</span><br><span class="line">+------------+-------+</span><br></pre></td></tr></table></figure><h4 id="思路-25">思路</h4><p>先查出来，在 <code>2019-08-16</code>之前，<strong>最近</strong>修改过的产品id和价格</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_id, new_price </span><br><span class="line"><span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> (product_id, change_date ) <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> product_id, <span class="built_in">max</span>(change_date) <span class="comment">-- 最近的日期</span></span><br><span class="line"><span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> change_date <span class="operator">&lt;=</span> <span class="string">&#x27;2019-08-16&#x27;</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_id)</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> product_id <span class="operator">|</span> new_price <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">---------- | --------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">50</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">35</span>        <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>随后，跟自身表连接，可以只用自身表的产品id列。 查出来结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p1.product_id, p2.new_price <span class="keyword">as</span> price</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> product_id </span><br><span class="line"><span class="keyword">from</span> Products ) <span class="keyword">as</span> p1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> product_id, new_price </span><br><span class="line"><span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> (product_id, change_date ) <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> product_id, <span class="built_in">max</span>(change_date)</span><br><span class="line"><span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> change_date <span class="operator">&lt;=</span> <span class="string">&#x27;2019-08-16&#x27;</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_id) ) <span class="keyword">as</span> p2</span><br><span class="line"><span class="keyword">on</span> p1.product_id <span class="operator">=</span> p2.product_id</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> product_id <span class="operator">|</span> price <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">---------- | ----- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>          <span class="operator">|</span> <span class="number">35</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2</span>          <span class="operator">|</span> <span class="number">50</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3</span>          <span class="operator">|</span> <span class="keyword">null</span>  <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>可以看到有空值的出现，根据题意，空值表示 <code>2019-08-16</code>之前没有修改，所以利用<code>IFNULL()</code>函数设置为10即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p1.product_id, IFNULL(p2.new_price, <span class="number">10</span>) <span class="keyword">as</span> price</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> product_id </span><br><span class="line"><span class="keyword">from</span> Products ) <span class="keyword">as</span> p1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> product_id, new_price </span><br><span class="line"><span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> (product_id, change_date ) <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> product_id, <span class="built_in">max</span>(change_date)</span><br><span class="line"><span class="keyword">from</span> Products </span><br><span class="line"><span class="keyword">where</span> change_date <span class="operator">&lt;=</span> <span class="string">&#x27;2019-08-16&#x27;</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_id) ) <span class="keyword">as</span> p2</span><br><span class="line"><span class="keyword">on</span> p1.product_id <span class="operator">=</span> p2.product_id</span><br></pre></td></tr></table></figure><h3 id="最后一个能进入巴士的人"><ahref="https://leetcode.cn/problems/last-person-to-fit-in-the-bus/">1204.最后一个能进入巴士的人</a></h3><p>表: <code>Queue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| person_id   | int     |</span><br><span class="line">| person_name | varchar |</span><br><span class="line">| weight      | int     |</span><br><span class="line">| turn        | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">person_id 是这个表具有唯一值的列。</span><br><span class="line">该表展示了所有候车乘客的信息。</span><br><span class="line">表中 person_id 和 turn 列将包含从 1 到 n 的所有数字，其中 n 是表中的行数。</span><br><span class="line">turn 决定了候车乘客上巴士的顺序，其中 turn=1 表示第一个上巴士，turn=n 表示最后一个上巴士。</span><br><span class="line">weight 表示候车乘客的体重，以千克为单位。</span><br></pre></td></tr></table></figure><p>有一队乘客在等着上巴士。然而，巴士有<code>1000</code><strong>千克</strong> 的重量限制，所以其中一部分乘客可能无法上巴士。</p><p>编写解决方案找出 <strong>最后一个</strong>上巴士且不超过重量限制的乘客，并报告 <code>person_name</code>。题目测试用例确保顺位第一的人可以上巴士且不会超重。</p><p>返回结果格式如下所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Queue 表</span><br><span class="line">+-----------+-------------+--------+------+</span><br><span class="line">| person_id | person_name | weight | turn |</span><br><span class="line">+-----------+-------------+--------+------+</span><br><span class="line">| 5         | Alice       | 250    | 1    |</span><br><span class="line">| 4         | Bob         | 175    | 5    |</span><br><span class="line">| 3         | Alex        | 350    | 2    |</span><br><span class="line">| 6         | John Cena   | 400    | 3    |</span><br><span class="line">| 1         | Winston     | 500    | 6    |</span><br><span class="line">| 2         | Marie       | 200    | 4    |</span><br><span class="line">+-----------+-------------+--------+------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+</span><br><span class="line">| person_name |</span><br><span class="line">+-------------+</span><br><span class="line">| John Cena   |</span><br><span class="line">+-------------+</span><br><span class="line">解释：</span><br><span class="line">为了简化，Queue 表按 turn 列由小到大排序。</span><br><span class="line">+------+----+-----------+--------+--------------+</span><br><span class="line">| Turn | ID | Name      | Weight | Total Weight |</span><br><span class="line">+------+----+-----------+--------+--------------+</span><br><span class="line">| 1    | 5  | Alice     | 250    | 250          |</span><br><span class="line">| 2    | 3  | Alex      | 350    | 600          |</span><br><span class="line">| 3    | 6  | John Cena | 400    | 1000         | (最后一个上巴士)</span><br><span class="line">| 4    | 2  | Marie     | 200    | 1200         | (无法上巴士)</span><br><span class="line">| 5    | 4  | Bob       | 175    | ___          |</span><br><span class="line">| 6    | 1  | Winston   | 500    | ___          |</span><br><span class="line">+------+----+-----------+--------+--------------+</span><br></pre></td></tr></table></figure><h4 id="思路-26">思路</h4><h5 id="自我连接-limit排序">自我连接 + limit排序</h5><p>先查出来每个顾客上车后，当前总重量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> q1.person_name, <span class="built_in">sum</span>(q2.weight) <span class="keyword">as</span> curWeight</span><br><span class="line"><span class="keyword">from</span> Queue q1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Queue q2 <span class="keyword">on</span> q2.turn <span class="operator">&lt;=</span> q1.turn</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> q1.person_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> q1.turn </span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> person_name <span class="operator">|</span> <span class="built_in">sum</span>(q2.weight) <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">----------- | -------------- |</span></span><br><span class="line"><span class="operator">|</span> Alice       <span class="operator">|</span> <span class="number">250</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Alex        <span class="operator">|</span> <span class="number">600</span>            <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> John Cena   <span class="operator">|</span> <span class="number">1000</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Marie       <span class="operator">|</span> <span class="number">1200</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Bob         <span class="operator">|</span> <span class="number">1375</span>           <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Winston     <span class="operator">|</span> <span class="number">1875</span>           <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>找到重量1000的阈值，查出最后一个上车的人：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> person_name </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> q1.person_name, <span class="built_in">sum</span>(q2.weight) <span class="keyword">as</span> curWeight</span><br><span class="line"><span class="keyword">from</span> Queue q1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Queue q2 <span class="keyword">on</span> q2.turn <span class="operator">&lt;=</span> q1.turn</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> q1.person_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> q1.turn) <span class="keyword">as</span> sumWeight</span><br><span class="line"><span class="keyword">where</span> curWeight <span class="operator">&lt;=</span> <span class="number">1000</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> person_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> curWeight <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="按分类统计薪水"><ahref="https://leetcode.cn/problems/count-salary-categories/">1907.按分类统计薪水</a></h3><p>表: <code>Accounts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| 列名        | 类型  |</span><br><span class="line">+-------------+------+</span><br><span class="line">| account_id  | int  |</span><br><span class="line">| income      | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">在 SQL 中，account_id 是这个表的主键。</span><br><span class="line">每一行都包含一个银行帐户的月收入的信息。</span><br></pre></td></tr></table></figure><p>查询每个工资类别的银行账户数量。 工资类别如下：</p><ul><li><code>"Low Salary"</code>：所有工资 <strong>严格低于</strong><code>20000</code> 美元。</li><li><code>"Average Salary"</code>： <strong>包含</strong>范围内的所有工资 <code>[$20000, $50000]</code> 。</li><li><code>"High Salary"</code>：所有工资 <strong>严格大于</strong><code>50000</code> 美元。</li></ul><p>结果表 <strong>必须</strong> 包含所有三个类别。如果某个类别中没有帐户，则报告 <code>0</code> 。</p><p>按 <strong>任意顺序</strong> 返回结果表。</p><p>查询结果格式如下示例。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Accounts 表:</span><br><span class="line">+------------+--------+</span><br><span class="line">| account_id | income |</span><br><span class="line">+------------+--------+</span><br><span class="line">| 3          | 108939 |</span><br><span class="line">| 2          | 12747  |</span><br><span class="line">| 8          | 87709  |</span><br><span class="line">| 6          | 91796  |</span><br><span class="line">+------------+--------+</span><br><span class="line">输出：</span><br><span class="line">+----------------+----------------+</span><br><span class="line">| category       | accounts_count |</span><br><span class="line">+----------------+----------------+</span><br><span class="line">| Low Salary     | 1              |</span><br><span class="line">| Average Salary | 0              |</span><br><span class="line">| High Salary    | 3              |</span><br><span class="line">+----------------+----------------+</span><br><span class="line">解释：</span><br><span class="line">低薪: 有一个账户 2.</span><br><span class="line">中等薪水: 没有.</span><br><span class="line">高薪: 有三个账户，他们是 3, 6和 8.</span><br></pre></td></tr></table></figure><h4 id="思路-27">思路</h4><h5 id="union">union</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &quot;Low Salary&quot; <span class="keyword">as</span> category, <span class="built_in">SUM</span>(<span class="keyword">case</span> <span class="keyword">when</span> income <span class="operator">&lt;</span> <span class="number">20000</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> accounts_count </span><br><span class="line"><span class="keyword">from</span> Accounts </span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    <span class="string">&#x27;Average Salary&#x27;</span> category,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> income <span class="operator">&gt;=</span> <span class="number">20000</span> <span class="keyword">AND</span> income <span class="operator">&lt;=</span> <span class="number">50000</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) </span><br><span class="line">    <span class="keyword">AS</span> accounts_count</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Accounts</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="string">&#x27;High Salary&#x27;</span> category,</span><br><span class="line">    <span class="built_in">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> income <span class="operator">&gt;</span> <span class="number">50000</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> accounts_count</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Accounts</span><br></pre></td></tr></table></figure><h1 id="子查询-1">子查询</h1><h2 id="中等-4">中等</h2><h3 id="换座位"><ahref="https://leetcode.cn/problems/exchange-seats/">626. 换座位</a></h3><p>表: <code>Seat</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| student     | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是该表的主键（唯一值）列。</span><br><span class="line">该表的每一行都表示学生的姓名和 ID。</span><br><span class="line">id 是一个连续的增量。</span><br></pre></td></tr></table></figure><p>编写解决方案来交换每两个连续的学生的座位号。如果学生的数量是奇数，则最后一个学生的id不交换。</p><p>按 <code>id</code> <strong>升序</strong> 返回结果表。</p><p>查询结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Seat 表:</span><br><span class="line">+----+---------+</span><br><span class="line">| id | student |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | Abbot   |</span><br><span class="line">| 2  | Doris   |</span><br><span class="line">| 3  | Emerson |</span><br><span class="line">| 4  | Green   |</span><br><span class="line">| 5  | Jeames  |</span><br><span class="line">+----+---------+</span><br><span class="line">输出: </span><br><span class="line">+----+---------+</span><br><span class="line">| id | student |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | Doris   |</span><br><span class="line">| 2  | Abbot   |</span><br><span class="line">| 3  | Green   |</span><br><span class="line">| 4  | Emerson |</span><br><span class="line">| 5  | Jeames  |</span><br><span class="line">+----+---------+</span><br><span class="line">解释:</span><br><span class="line">请注意，如果学生人数为奇数，则不需要更换最后一名学生的座位。</span><br></pre></td></tr></table></figure><h4 id="思路-28">思路</h4><h5 id="case-子查询">case + 子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    (<span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> <span class="built_in">MOD</span>(id, <span class="number">2</span>) <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">and</span> countSeat <span class="operator">!=</span> id <span class="keyword">then</span> id <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">when</span> <span class="built_in">MOD</span>(id, <span class="number">2</span>) <span class="operator">!=</span> <span class="number">0</span> <span class="keyword">and</span> countSeat <span class="operator">=</span> id <span class="keyword">then</span> id</span><br><span class="line">        <span class="keyword">else</span> id <span class="operator">-</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span> ) <span class="keyword">as</span> id, student</span><br><span class="line"><span class="keyword">from</span> seat, (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> countSeat <span class="keyword">from</span> seat) <span class="keyword">as</span> cs</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id</span><br></pre></td></tr></table></figure><h3 id="电影评分"><ahref="https://leetcode.cn/problems/movie-rating/">1341.电影评分</a></h3><p>表：<code>Movies</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| movie_id      | int     |</span><br><span class="line">| title         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">movie_id 是这个表的主键(具有唯一值的列)。</span><br><span class="line">title 是电影的名字。</span><br></pre></td></tr></table></figure><p>表：<code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">user_id 是表的主键(具有唯一值的列)。</span><br></pre></td></tr></table></figure><p>表：<code>MovieRating</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| movie_id      | int     |</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| rating        | int     |</span><br><span class="line">| created_at    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(movie_id, user_id) 是这个表的主键(具有唯一值的列的组合)。</span><br><span class="line">这个表包含用户在其评论中对电影的评分 rating 。</span><br><span class="line">created_at 是用户的点评日期。 </span><br></pre></td></tr></table></figure><p>请你编写一个解决方案：</p><ul><li>查找评论电影数量最多的用户名。如果出现平局，返回字典序较小的用户名。</li><li>查找在 <code>February 2020</code> <strong>平均评分最高</strong>的电影名称。如果出现平局，返回字典序较小的电影名称。</li></ul><p><strong>字典序</strong>，即按字母在字典中出现顺序对字符串排序，字典序较小则意味着排序靠前。</p><p>返回结果格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Movies 表：</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| movie_id    |  title       |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | Avengers     |</span><br><span class="line">| 2           | Frozen 2     |</span><br><span class="line">| 3           | Joker        |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">Users 表：</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| user_id     |  name        |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | Daniel       |</span><br><span class="line">| 2           | Monica       |</span><br><span class="line">| 3           | Maria        |</span><br><span class="line">| 4           | James        |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">MovieRating 表：</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| movie_id    | user_id      | rating       | created_at  |</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| 1           | 1            | 3            | 2020-01-12  |</span><br><span class="line">| 1           | 2            | 4            | 2020-02-11  |</span><br><span class="line">| 1           | 3            | 2            | 2020-02-12  |</span><br><span class="line">| 1           | 4            | 1            | 2020-01-01  |</span><br><span class="line">| 2           | 1            | 5            | 2020-02-17  | </span><br><span class="line">| 2           | 2            | 2            | 2020-02-01  | </span><br><span class="line">| 2           | 3            | 2            | 2020-03-01  |</span><br><span class="line">| 3           | 1            | 3            | 2020-02-22  | </span><br><span class="line">| 3           | 2            | 4            | 2020-02-25  | </span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">输出：</span><br><span class="line">Result 表：</span><br><span class="line">+--------------+</span><br><span class="line">| results      |</span><br><span class="line">+--------------+</span><br><span class="line">| Daniel       |</span><br><span class="line">| Frozen 2     |</span><br><span class="line">+--------------+</span><br><span class="line">解释：</span><br><span class="line">Daniel 和 Monica 都点评了 3 部电影（&quot;Avengers&quot;, &quot;Frozen 2&quot; 和 &quot;Joker&quot;） 但是 Daniel 字典序比较小。</span><br><span class="line">Frozen 2 和 Joker 在 2 月的评分都是 3.5，但是 Frozen 2 的字典序比较小。</span><br></pre></td></tr></table></figure><h4 id="思路-29">思路</h4><h5 id="子查询-union-all">子查询 + union all</h5><p>先对两个子问题分别查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> u.name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> mostcomment </span><br><span class="line"><span class="keyword">from</span> Users u <span class="keyword">left</span> <span class="keyword">join</span> MovieRating mr <span class="keyword">on</span> u.user_id <span class="operator">=</span> mr.user_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> u.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> mostcomment <span class="keyword">DESC</span>, u.name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> title <span class="keyword">as</span> results <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> m.title, <span class="built_in">avg</span>(rating) <span class="keyword">as</span> avgR</span><br><span class="line"><span class="keyword">from</span> Movies m <span class="keyword">left</span> <span class="keyword">join</span> MovieRating mr <span class="keyword">on</span> m.movie_id <span class="operator">=</span> mr.movie_id </span><br><span class="line"><span class="keyword">where</span> mr.created_at <span class="operator">&gt;=</span> <span class="string">&#x27;2020-02-01&#x27;</span> <span class="keyword">and</span> mr.created_at <span class="operator">&lt;=</span> <span class="string">&#x27;2020-02-29&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> m.title</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avgR <span class="keyword">DESC</span>, m.title</span><br></pre></td></tr></table></figure><p>随后外层查询进行limit限制选取一条数据，然后合并即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">select</span> r1.name <span class="keyword">as</span> results <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> u.name, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> mostcomment </span><br><span class="line"><span class="keyword">from</span> Users u <span class="keyword">left</span> <span class="keyword">join</span> MovieRating mr <span class="keyword">on</span> u.user_id <span class="operator">=</span> mr.user_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> u.name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> mostcomment <span class="keyword">DESC</span>, u.name) <span class="keyword">as</span> r1 </span><br><span class="line">limit <span class="number">1</span>)</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">(<span class="keyword">select</span> title <span class="keyword">as</span> results <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> m.title, <span class="built_in">avg</span>(rating) <span class="keyword">as</span> avgR</span><br><span class="line"><span class="keyword">from</span> Movies m <span class="keyword">left</span> <span class="keyword">join</span> MovieRating mr <span class="keyword">on</span> m.movie_id <span class="operator">=</span> mr.movie_id </span><br><span class="line"><span class="keyword">where</span> mr.created_at <span class="operator">&gt;=</span> <span class="string">&#x27;2020-02-01&#x27;</span> <span class="keyword">and</span> mr.created_at <span class="operator">&lt;=</span> <span class="string">&#x27;2020-02-29&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> m.title</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> avgR <span class="keyword">DESC</span>, m.title) <span class="keyword">as</span> mostRate</span><br><span class="line">limit <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="餐馆营业额变化增长"><ahref="https://leetcode.cn/problems/restaurant-growth/">1321.餐馆营业额变化增长</a></h3><p>表: <code>Customer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| visited_on    | date    |</span><br><span class="line">| amount        | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">在 SQL 中，(customer_id, visited_on) 是该表的主键。</span><br><span class="line">该表包含一家餐馆的顾客交易数据。</span><br><span class="line">visited_on 表示 (customer_id) 的顾客在 visited_on 那天访问了餐馆。</span><br><span class="line">amount 是一个顾客某一天的消费总额。</span><br></pre></td></tr></table></figure><p>你是餐馆的老板，现在你想分析一下可能的营业额变化增长（每天至少有一位顾客）。</p><p>计算以 7 天（某日期 + 该日期前的 6天）为一个时间段的顾客消费平均值。<code>average_amount</code> 要<strong>保留两位小数。</strong></p><p>结果按 <code>visited_on</code> <strong>升序排序</strong>。</p><p>返回结果格式的例子如下。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Customer 表:</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| customer_id | name         | visited_on   | amount      |</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| 1           | Jhon         | 2019-01-01   | 100         |</span><br><span class="line">| 2           | Daniel       | 2019-01-02   | 110         |</span><br><span class="line">| 3           | Jade         | 2019-01-03   | 120         |</span><br><span class="line">| 4           | Khaled       | 2019-01-04   | 130         |</span><br><span class="line">| 5           | Winston      | 2019-01-05   | 110         | </span><br><span class="line">| 6           | Elvis        | 2019-01-06   | 140         | </span><br><span class="line">| 7           | Anna         | 2019-01-07   | 150         |</span><br><span class="line">| 8           | Maria        | 2019-01-08   | 80          |</span><br><span class="line">| 9           | Jaze         | 2019-01-09   | 110         | </span><br><span class="line">| 1           | Jhon         | 2019-01-10   | 130         | </span><br><span class="line">| 3           | Jade         | 2019-01-10   | 150         | </span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">输出：</span><br><span class="line">+--------------+--------------+----------------+</span><br><span class="line">| visited_on   | amount       | average_amount |</span><br><span class="line">+--------------+--------------+----------------+</span><br><span class="line">| 2019-01-07   | 860          | 122.86         |</span><br><span class="line">| 2019-01-08   | 840          | 120            |</span><br><span class="line">| 2019-01-09   | 840          | 120            |</span><br><span class="line">| 2019-01-10   | 1000         | 142.86         |</span><br><span class="line">+--------------+--------------+----------------+</span><br><span class="line">解释：</span><br><span class="line">第一个七天消费平均值从 2019-01-01 到 2019-01-07 是restaurant-growth/restaurant-growth/ (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86</span><br><span class="line">第二个七天消费平均值从 2019-01-02 到 2019-01-08 是 (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120</span><br><span class="line">第三个七天消费平均值从 2019-01-03 到 2019-01-09 是 (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120</span><br><span class="line">第四个七天消费平均值从 2019-01-04 到 2019-01-10 是 (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86</span><br></pre></td></tr></table></figure><h4 id="思路-30">思路</h4><h5 id="自我链接-1">自我链接</h5><p>先查出符合条件的日期：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> visited_on <span class="keyword">from</span> Customer) a</span><br><span class="line"><span class="keyword">where</span> a.visited_on <span class="operator">&gt;=</span> (<span class="keyword">select</span> <span class="built_in">min</span>(visited_on) <span class="keyword">from</span> Customer ) <span class="operator">+</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> visited_on <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">---------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-07</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-08</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-09</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-10</span> <span class="operator">|</span></span><br></pre></td></tr></table></figure><p>自我连接后，查询相关信息即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.visited_on, <span class="built_in">sum</span>(b.amount ) <span class="keyword">as</span> amount, round(<span class="built_in">sum</span>(b.amount )<span class="operator">/</span><span class="number">7</span>, <span class="number">2</span>) <span class="keyword">as</span> average_amount </span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> visited_on <span class="keyword">from</span> Customer) a <span class="keyword">join</span> Customer b </span><br><span class="line"><span class="keyword">on</span> datediff(a.visited_on, b.visited_on ) <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">where</span> a.visited_on <span class="operator">&gt;=</span> (<span class="keyword">select</span> <span class="built_in">min</span>(visited_on) <span class="keyword">from</span> Customer ) <span class="operator">+</span> <span class="number">6</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.visited_on </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.visited_on</span><br></pre></td></tr></table></figure><p>细节技巧：本题利用datediff、min（日期） +6等方式巧妙计算七天前的日期。</p><h3 id="好友申请-ii-谁有最多的好友"><ahref="https://leetcode.cn/problems/friend-requests-ii-who-has-the-most-friends/">602.好友申请 II ：谁有最多的好友</a></h3><p><code>RequestAccepted</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| requester_id   | int     |</span><br><span class="line">| accepter_id    | int     |</span><br><span class="line">| accept_date    | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">(requester_id, accepter_id) 是这张表的主键(具有唯一值的列的组合)。</span><br><span class="line">这张表包含发送好友请求的人的 ID ，接收好友请求的人的 ID ，以及好友请求通过的日期。</span><br></pre></td></tr></table></figure><p>编写解决方案，找出拥有最多的好友的人和他拥有的好友数目。</p><p>生成的测试用例保证拥有最多好友数目的只有 1 个人。</p><p>查询结果格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">RequestAccepted 表：</span><br><span class="line">+--------------+-------------+-------------+</span><br><span class="line">| requester_id | accepter_id | accept_date |</span><br><span class="line">+--------------+-------------+-------------+</span><br><span class="line">| 1            | 2           | 2016/06/03  |</span><br><span class="line">| 1            | 3           | 2016/06/08  |</span><br><span class="line">| 2            | 3           | 2016/06/08  |</span><br><span class="line">| 3            | 4           | 2016/06/09  |</span><br><span class="line">+--------------+-------------+-------------+</span><br><span class="line">输出：</span><br><span class="line">+----+-----+</span><br><span class="line">| id | num |</span><br><span class="line">+----+-----+</span><br><span class="line">| 3  | 3   |</span><br><span class="line">+----+-----+</span><br><span class="line">解释：</span><br><span class="line">编号为 3 的人是编号为 1 ，2 和 4 的人的好友，所以他总共有 3 个好友，比其他人都多。</span><br></pre></td></tr></table></figure><p><strong>进阶：</strong>在真实世界里，可能会有多个人拥有好友数相同且最多，你能找到所有这些人吗？</p><h4 id="思路-31">思路</h4><h5 id="union-子查询">union + 子查询</h5><p>先把全部用户聚合起来，注意用union all不需要去重</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> requester_id <span class="keyword">as</span> id <span class="keyword">from</span> RequestAccepted </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> accepter_id <span class="keyword">as</span> id <span class="keyword">from</span> RequestAccepted </span><br></pre></td></tr></table></figure><p>随后分组统计个数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> requester_id <span class="keyword">as</span> id <span class="keyword">from</span> RequestAccepted </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> accepter_id <span class="keyword">as</span> id <span class="keyword">from</span> RequestAccepted ) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> id</span><br></pre></td></tr></table></figure><p>随后查找好友数最大的那个id即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, num <span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> requester_id <span class="keyword">as</span> id <span class="keyword">from</span> RequestAccepted </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">select</span> accepter_id <span class="keyword">as</span> id <span class="keyword">from</span> RequestAccepted ) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> id) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="年的投资"><ahref="https://leetcode.cn/problems/investments-in-2016/">585.2016年的投资</a></h3><p><code>Insurance</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| pid         | int   |</span><br><span class="line">| tiv_2015    | float |</span><br><span class="line">| tiv_2016    | float |</span><br><span class="line">| lat         | float |</span><br><span class="line">| lon         | float |</span><br><span class="line">+-------------+-------+</span><br><span class="line">pid 是这张表的主键(具有唯一值的列)。</span><br><span class="line">表中的每一行都包含一条保险信息，其中：</span><br><span class="line">pid 是投保人的投保编号。</span><br><span class="line">tiv_2015 是该投保人在 2015 年的总投保金额，tiv_2016 是该投保人在 2016 年的总投保金额。</span><br><span class="line">lat 是投保人所在城市的纬度。题目数据确保 lat 不为空。</span><br><span class="line">lon 是投保人所在城市的经度。题目数据确保 lon 不为空。</span><br></pre></td></tr></table></figure><p>编写解决方案报告 2016 年 (<code>tiv_2016</code>)所有满足下述条件的投保人的投保金额之和：</p><ul><li>他在 2015 年的投保额 (<code>tiv_2015</code>) 至少跟一个其他投保人在2015 年的投保额相同。</li><li>他所在的城市必须与其他投保人都不同（也就是说 (<code>lat, lon</code>)不能跟其他任何一个投保人完全相同）。</li></ul><p><code>tiv_2016</code> 四舍五入的 <strong>两位小数</strong> 。</p><p>查询结果格式如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Insurance 表：</span><br><span class="line">+-----+----------+----------+-----+-----+</span><br><span class="line">| pid | tiv_2015 | tiv_2016 | lat | lon |</span><br><span class="line">+-----+----------+----------+-----+-----+</span><br><span class="line">| 1   | 10       | 5        | 10  | 10  |</span><br><span class="line">| 2   | 20       | 20       | 20  | 20  |</span><br><span class="line">| 3   | 10       | 30       | 20  | 20  |</span><br><span class="line">| 4   | 10       | 40       | 40  | 40  |</span><br><span class="line">+-----+----------+----------+-----+-----+</span><br><span class="line">输出：</span><br><span class="line">+----------+</span><br><span class="line">| tiv_2016 |</span><br><span class="line">+----------+</span><br><span class="line">| 45.00    |</span><br><span class="line">+----------+</span><br><span class="line">解释：</span><br><span class="line">表中的第一条记录和最后一条记录都满足两个条件。</span><br><span class="line">tiv_2015 值为 10 与第三条和第四条记录相同，且其位置是唯一的。</span><br><span class="line"></span><br><span class="line">第二条记录不符合任何一个条件。其 tiv_2015 与其他投保人不同，并且位置与第三条记录相同，这也导致了第三条记录不符合题目要求。</span><br><span class="line">因此，结果是第一条记录和最后一条记录的 tiv_2016 之和，即 45 。</span><br></pre></td></tr></table></figure><h4 id="思路-32">思路</h4><h5 id="子查询-聚合函数">子查询 + 聚合函数</h5><p>分别查询两个子集即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="built_in">sum</span>(tiv_2016), <span class="number">2</span>)  <span class="keyword">as</span> tiv_2016</span><br><span class="line"><span class="keyword">from</span> Insurance </span><br><span class="line"><span class="keyword">where</span> tiv_2015 <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> tiv_2015 <span class="keyword">from</span> insurance</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> tiv_2015 </span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>)</span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">concat(lat, lon) <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> concat(lat, lon) <span class="keyword">from</span> insurance</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> lat, lon</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">=</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="困难">困难</h2><h3 id="部门工资前三高的所有员工"><ahref="https://leetcode.cn/problems/department-top-three-salaries/">185.部门工资前三高的所有员工</a></h3><p>表: <code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| id           | int     |</span><br><span class="line">| name         | varchar |</span><br><span class="line">| salary       | int     |</span><br><span class="line">| departmentId | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">id 是该表的主键列(具有唯一值的列)。</span><br><span class="line">departmentId 是 Department 表中 ID 的外键（reference 列）。</span><br><span class="line">该表的每一行都表示员工的ID、姓名和工资。它还包含了他们部门的ID。</span><br></pre></td></tr></table></figure><p>表: <code>Department</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| name        | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是该表的主键列(具有唯一值的列)。</span><br><span class="line">该表的每一行表示部门ID和部门名。</span><br></pre></td></tr></table></figure><p>公司的主管们感兴趣的是公司每个部门中谁赚的钱最多。一个部门的<strong>高收入者</strong> 是指一个员工的工资在该部门的<strong>不同</strong> 工资中 <strong>排名前三</strong> 。</p><p>编写解决方案，找出每个部门中 <strong>收入高的员工</strong> 。</p><p>以 <strong>任意顺序</strong> 返回结果表。</p><p>返回结果格式如下所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Employee 表:</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| id | name  | salary | departmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 85000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">| 7  | Will  | 70000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">Department  表:</span><br><span class="line">+----+-------+</span><br><span class="line">| id | name  |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | IT    |</span><br><span class="line">| 2  | Sales |</span><br><span class="line">+----+-------+</span><br><span class="line">输出: </span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Joe      | 85000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Will     | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">解释:</span><br><span class="line">在IT部门:</span><br><span class="line">- Max的工资最高</span><br><span class="line">- 兰迪和乔都赚取第二高的独特的薪水</span><br><span class="line">- 威尔的薪水是第三高的</span><br><span class="line"></span><br><span class="line">在销售部:</span><br><span class="line">- 亨利的工资最高</span><br><span class="line">- 山姆的薪水第二高</span><br><span class="line">- 没有第三高的工资，因为只有两名员工</span><br></pre></td></tr></table></figure><h4 id="思路-33">思路</h4><p>部门前三的金额，相当于整个部门比自己钱还多的人不超过3个，因此根据这个条件查出来部门前三工资的人：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> e2.salary)</span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">AS</span> e2 </span><br><span class="line"><span class="keyword">where</span> e1.salary <span class="operator">&lt;</span> e2.salary <span class="keyword">and</span> e1.departmentId <span class="operator">=</span> e2.departmentId) <span class="operator">&lt;</span> <span class="number">3</span> </span><br></pre></td></tr></table></figure><p>最后连接一下表即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> d.name <span class="keyword">as</span> Department , e1.name <span class="keyword">as</span> Employee, e1.salary <span class="keyword">as</span> Salary </span><br><span class="line"><span class="keyword">from</span> Employee e1, Department d</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">e1.departmentId <span class="operator">=</span> d.id <span class="keyword">and</span></span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> e2.salary)</span><br><span class="line"><span class="keyword">from</span> Employee <span class="keyword">AS</span> e2 </span><br><span class="line"><span class="keyword">where</span> e1.salary <span class="operator">&lt;</span> e2.salary <span class="keyword">and</span> e1.departmentId <span class="operator">=</span> e2.departmentId) <span class="operator">&lt;</span> <span class="number">3</span> </span><br></pre></td></tr></table></figure><h1id="高级字符串函数正则表达式子句">高级字符串函数、正则表达式、子句</h1><h2 id="简单-5">简单</h2><h3 id="患某种疾病的患者"><ahref="https://leetcode.cn/problems/patients-with-a-condition/">1527.患某种疾病的患者</a></h3><p>患者信息表： <code>Patients</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| patient_id   | int     |</span><br><span class="line">| patient_name | varchar |</span><br><span class="line">| conditions   | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">在 SQL 中，patient_id （患者 ID）是该表的主键。</span><br><span class="line">&#x27;conditions&#x27; （疾病）包含 0 个或以上的疾病代码，以空格分隔。</span><br><span class="line">这个表包含医院中患者的信息。</span><br></pre></td></tr></table></figure><p>查询患有 I 类糖尿病的患者 ID（patient_id）、患者姓名（patient_name）以及其患有的所有疾病代码（conditions）。I类糖尿病的代码总是包含前缀 <code>DIAB1</code> 。</p><p>按 <strong>任意顺序</strong> 返回结果表。</p><p>查询结果格式如下示例所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Patients表：</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| patient_id | patient_name | conditions   |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| 1          | Daniel       | YFEV COUGH   |</span><br><span class="line">| 2          | Alice        |              |</span><br><span class="line">| 3          | Bob          | DIAB100 MYOP |</span><br><span class="line">| 4          | George       | ACNE DIAB100 |</span><br><span class="line">| 5          | Alain        | DIAB201      |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">输出：</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| patient_id | patient_name | conditions   |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| 3          | Bob          | DIAB100 MYOP |</span><br><span class="line">| 4          | George       | ACNE DIAB100 | </span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">解释：Bob 和 George 都患有代码以 DIAB1 开头的疾病。</span><br></pre></td></tr></table></figure><h4 id="思路-34">思路</h4><h5 id="正则表达式">正则表达式</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> patient_id, patient_name, conditions</span><br><span class="line"><span class="keyword">FROM</span> Patients</span><br><span class="line"><span class="keyword">WHERE</span> conditions REGEXP <span class="string">&#x27;\\bDIAB1.*&#x27;</span>;</span><br></pre></td></tr></table></figure><h5 id="模糊查询">模糊查询</h5><p>结果集包含可能的两种结果：</p><ul><li>条件代码以 <code>"DIAB1"</code> 开头。</li><li>条件代码包含 <code>" DIAB1"</code>，即有一个空格在前。</li></ul><p>可以用like判断：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> patient_id, patient_name, conditions</span><br><span class="line"><span class="keyword">FROM</span> Patients</span><br><span class="line"><span class="keyword">WHERE</span> conditions <span class="keyword">LIKE</span> <span class="string">&#x27;DIAB1%&#x27;</span> <span class="keyword">OR</span> conditions <span class="keyword">LIKE</span> <span class="string">&#x27;% DIAB1%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除重复的电子邮箱"><ahref="https://leetcode.cn/problems/delete-duplicate-emails/">196.删除重复的电子邮箱</a></h3><p>表: <code>Person</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| id          | int     |</span><br><span class="line">| email       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">id 是该表的主键列(具有唯一值的列)。</span><br><span class="line">该表的每一行包含一封电子邮件。电子邮件将不包含大写字母。</span><br></pre></td></tr></table></figure><p>编写解决方案 <strong>删除</strong>所有重复的电子邮件，只保留一个具有最小 <code>id</code>的唯一电子邮件。</p><p>（对于 SQL 用户，请注意你应该编写一个 <code>DELETE</code> 语句而不是<code>SELECT</code> 语句。）</p><p>（对于 Pandas 用户，请注意你应该直接修改 <code>Person</code>表。）</p><p>运行脚本后，显示的答案是 <code>Person</code>表。驱动程序将首先编译并运行您的代码片段，然后再显示 <code>Person</code>表。<code>Person</code> 表的最终顺序 <strong>无关紧要</strong> 。</p><p>返回结果格式如下示例所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Person 表:</span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">输出: </span><br><span class="line">+----+------------------+</span><br><span class="line">| id | email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br><span class="line">解释: john@example.com重复两次。我们保留最小的Id = 1。</span><br></pre></td></tr></table></figure><h4 id="思路-35">思路</h4><h5 id="自连接">自连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> p1 <span class="keyword">from</span> Person p1, Person p2</span><br><span class="line"><span class="keyword">where</span> p1.email <span class="operator">=</span> p2.email <span class="keyword">and</span> p1.id <span class="operator">&gt;</span> p2.id</span><br></pre></td></tr></table></figure><h5 id="分组子查询">分组子查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> </span><br><span class="line"><span class="keyword">from</span> Person p</span><br><span class="line"><span class="keyword">where</span> p.id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> e.id <span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">min</span>(id) <span class="keyword">as</span> id <span class="keyword">from</span> Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> email) <span class="keyword">as</span> e)</span><br></pre></td></tr></table></figure><h3 id="按日期分组销售产品"><ahref="https://leetcode.cn/problems/group-sold-products-by-the-date/">1484.按日期分组销售产品</a></h3><p>表 <code>Activities</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| sell_date   | date    |</span><br><span class="line">| product     | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">该表没有主键(具有唯一值的列)。它可能包含重复项。</span><br><span class="line">此表的每一行都包含产品名称和在市场上销售的日期。</span><br></pre></td></tr></table></figure><p>编写解决方案找出每个日期、销售的不同产品的数量及其名称。每个日期的销售产品名称应按词典序排列。 返回按 <code>sell_date</code>排序的结果表。 结果表结果格式如下例所示。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Activities 表：</span><br><span class="line">+------------+-------------+</span><br><span class="line">| sell_date  | product     |</span><br><span class="line">+------------+-------------+</span><br><span class="line">| 2020-05-30 | Headphone   |</span><br><span class="line">| 2020-06-01 | Pencil      |</span><br><span class="line">| 2020-06-02 | Mask        |</span><br><span class="line">| 2020-05-30 | Basketball  |</span><br><span class="line">| 2020-06-01 | Bible       |</span><br><span class="line">| 2020-06-02 | Mask        |</span><br><span class="line">| 2020-05-30 | T-Shirt     |</span><br><span class="line">+------------+-------------+</span><br><span class="line">输出：</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">| sell_date  | num_sold | products                     |</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |</span><br><span class="line">| 2020-06-01 | 2        | Bible,Pencil                 |</span><br><span class="line">| 2020-06-02 | 1        | Mask                         |</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">解释：</span><br><span class="line">对于2020-05-30，出售的物品是 (Headphone, Basketball, T-shirt)，按词典序排列，并用逗号 &#x27;,&#x27; 分隔。</span><br><span class="line">对于2020-06-01，出售的物品是 (Pencil, Bible)，按词典序排列，并用逗号分隔。</span><br><span class="line">对于2020-06-02，出售的物品是 (Mask)，只需返回该物品名。</span><br></pre></td></tr></table></figure><h4 id="思路-36">思路</h4><h5 id="group-concat函数">group-concat函数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sell_date, </span><br><span class="line"><span class="built_in">count</span>(<span class="keyword">distinct</span> product) <span class="keyword">as</span> num_sold, </span><br><span class="line">GROUP_CONCAT(<span class="keyword">DISTINCT</span> product <span class="keyword">order</span> <span class="keyword">by</span> product SEPARATOR <span class="string">&#x27;,&#x27;</span>) <span class="keyword">as</span> products</span><br><span class="line"><span class="keyword">from</span> Activities</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sell_date </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sell_date </span><br></pre></td></tr></table></figure><h3 id="列出指定时间段内所有的下单产品"><ahref="https://leetcode.cn/problems/list-the-products-ordered-in-a-period/">1327.列出指定时间段内所有的下单产品</a></h3><p>表: <code>Products</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| product_id       | int     |</span><br><span class="line">| product_name     | varchar |</span><br><span class="line">| product_category | varchar |</span><br><span class="line">+------------------+---------+</span><br><span class="line">product_id 是该表主键(具有唯一值的列)。</span><br><span class="line">该表包含该公司产品的数据。</span><br></pre></td></tr></table></figure><p>表: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| unit          | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表可能包含重复行。</span><br><span class="line">product_id 是表单 Products 的外键（reference 列）。</span><br><span class="line">unit 是在日期 order_date 内下单产品的数目。</span><br></pre></td></tr></table></figure><p>写一个解决方案，要求获取在 2020 年 2 月份下单的数量不少于 100的产品的名字和数目。</p><p>返回结果表单的 <strong>顺序无要求</strong> 。</p><p>查询结果的格式如下。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Products 表:</span><br><span class="line">+-------------+-----------------------+------------------+</span><br><span class="line">| product_id  | product_name          | product_category |</span><br><span class="line">+-------------+-----------------------+------------------+</span><br><span class="line">| 1           | Leetcode Solutions    | Book             |</span><br><span class="line">| 2           | Jewels of Stringology | Book             |</span><br><span class="line">| 3           | HP                    | Laptop           |</span><br><span class="line">| 4           | Lenovo                | Laptop           |</span><br><span class="line">| 5           | Leetcode Kit          | T-shirt          |</span><br><span class="line">+-------------+-----------------------+------------------+</span><br><span class="line">Orders 表:</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">| product_id   | order_date   | unit     |</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">| 1            | 2020-02-05   | 60       |</span><br><span class="line">| 1            | 2020-02-10   | 70       |</span><br><span class="line">| 2            | 2020-01-18   | 30       |</span><br><span class="line">| 2            | 2020-02-11   | 80       |</span><br><span class="line">| 3            | 2020-02-17   | 2        |</span><br><span class="line">| 3            | 2020-02-24   | 3        |</span><br><span class="line">| 4            | 2020-03-01   | 20       |</span><br><span class="line">| 4            | 2020-03-04   | 30       |</span><br><span class="line">| 4            | 2020-03-04   | 60       |</span><br><span class="line">| 5            | 2020-02-25   | 50       |</span><br><span class="line">| 5            | 2020-02-27   | 50       |</span><br><span class="line">| 5            | 2020-03-01   | 50       |</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">输出：</span><br><span class="line">+--------------------+---------+</span><br><span class="line">| product_name       | unit    |</span><br><span class="line">+--------------------+---------+</span><br><span class="line">| Leetcode Solutions | 130     |</span><br><span class="line">| Leetcode Kit       | 100     |</span><br><span class="line">+--------------------+---------+</span><br><span class="line">解释：</span><br><span class="line">2020 年 2 月份下单 product_id = 1 的产品的数目总和为 (60 + 70) = 130 。</span><br><span class="line">2020 年 2 月份下单 product_id = 2 的产品的数目总和为 80 。</span><br><span class="line">2020 年 2 月份下单 product_id = 3 的产品的数目总和为 (2 + 3) = 5 。</span><br><span class="line">2020 年 2 月份 product_id = 4 的产品并没有下单。</span><br><span class="line">2020 年 2 月份下单 product_id = 5 的产品的数目总和为 (50 + 50) = 100 。</span><br></pre></td></tr></table></figure><h5 id="常规连接">常规连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_name , <span class="built_in">sum</span>(o.unit) <span class="keyword">as</span> unit</span><br><span class="line"><span class="keyword">from</span> Products p</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Orders o <span class="keyword">on</span> p.product_id <span class="operator">=</span> o.product_id  </span><br><span class="line"><span class="keyword">where</span> order_date <span class="operator">&gt;=</span> <span class="string">&#x27;2020-02-01&#x27;</span> <span class="keyword">and</span> order_date <span class="operator">&lt;</span> <span class="string">&#x27;2020-03-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_name </span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(o.unit) <span class="operator">&gt;=</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h5 id="like子句">like子句</h5><p>效率较高</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_name       , <span class="built_in">sum</span>(o.unit) <span class="keyword">as</span> unit</span><br><span class="line"><span class="keyword">from</span> Products p</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Orders o <span class="keyword">on</span> p.product_id <span class="operator">=</span> o.product_id  </span><br><span class="line"><span class="keyword">where</span> order_date <span class="keyword">like</span> <span class="string">&#x27;2020-02%&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_name </span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(o.unit) <span class="operator">&gt;=</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="查找拥有有效邮箱的用户"><ahref="https://leetcode.cn/problems/find-users-with-valid-e-mails/">1517.查找拥有有效邮箱的用户</a></h3><p>表: <code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| mail          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">user_id 是该表的主键（具有唯一值的列）。</span><br><span class="line">该表包含了网站已注册用户的信息。有一些电子邮件是无效的。</span><br></pre></td></tr></table></figure><p>编写一个解决方案，以查找具有有效电子邮件的用户。</p><p>一个有效的电子邮件具有前缀名称和域，其中：</p><ol type="1"><li><strong>前缀</strong>名称是一个字符串，可以包含字母（大写或小写），数字，下划线<code>'_'</code> ，点 <code>'.'</code> 和/或破折号 <code>'-'</code>。前缀名称 <strong>必须</strong> 以字母开头。</li><li><strong>域</strong> 为 <code>'@leetcode.com'</code> 。</li></ol><p>以任何顺序返回结果表。</p><p>结果的格式如以下示例所示：</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Users 表:</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| user_id | name      | mail                    |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| 1       | Winston   | winston@leetcode.com    |</span><br><span class="line">| 2       | Jonathan  | jonathanisgreat         |</span><br><span class="line">| 3       | Annabelle | bella-@leetcode.com     |</span><br><span class="line">| 4       | Sally     | sally.come@leetcode.com |</span><br><span class="line">| 5       | Marwan    | quarz#2020@leetcode.com |</span><br><span class="line">| 6       | David     | david69@gmail.com       |</span><br><span class="line">| 7       | Shapiro   | .shapo@leetcode.com     |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">输出：</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| user_id | name      | mail                    |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| 1       | Winston   | winston@leetcode.com    |</span><br><span class="line">| 3       | Annabelle | bella-@leetcode.com     |</span><br><span class="line">| 4       | Sally     | sally.come@leetcode.com |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">解释：</span><br><span class="line">用户 2 的电子邮件没有域。 </span><br><span class="line">用户 5 的电子邮件带有不允许的 &#x27;#&#x27; 符号。</span><br><span class="line">用户 6 的电子邮件没有 leetcode 域。 </span><br><span class="line">用户 7 的电子邮件以点开头。</span><br></pre></td></tr></table></figure><h4 id="思路-37">思路</h4><h5 id="正则表达式-1">正则表达式</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id, name, mail</span><br><span class="line"><span class="keyword">FROM</span> Users</span><br><span class="line"><span class="comment">-- 转义了`@`字符，因为它在某些正则表达式中具有特殊意义</span></span><br><span class="line"><span class="keyword">WHERE</span> mail REGEXP <span class="string">&#x27;^[a-zA-Z][a-zA-Z0-9_.-]*\\@leetcode\\.com$&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>^：这个符号表示字符串的开始。</li><li>[a-zA-Z]：这个部分匹配任何单个字母，无论大小写。</li><li>[a-zA-Z0-9_.-]*：这个部分匹配任何数量（包括零个）的字母，数字，下划线，点或破折号。星号表示前面的字符可以出现任意次数。</li><li>@leetcode.com：这个部分匹配"<span class="citation"data-cites="leetcode.com">@leetcode.com</span>"字符串。在这里，.，使它们被视为普通字符而不是正则表达式的特殊符号。</li><li>$：这个符号表示字符串的结束。</li></ul><h2 id="中等-5">中等</h2><h3 id="第二高的薪水"><ahref="https://leetcode.cn/problems/second-highest-salary/">176.第二高的薪水</a></h3><p><code>Employee</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| id          | int  |</span><br><span class="line">| salary      | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">在 SQL 中，id 是这个表的主键。</span><br><span class="line">表的每一行包含员工的工资信息。</span><br></pre></td></tr></table></figure><p>查询并返回 <code>Employee</code> 表中第二高的薪水。如果不存在第二高的薪水，查询应该返回<code>null(Pandas 则返回 None)</code> 。</p><p>查询结果如下例所示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表：</span><br><span class="line">+----+--------+</span><br><span class="line">| id | salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br><span class="line">输出：</span><br><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">Employee 表：</span><br><span class="line">+----+--------+</span><br><span class="line">| id | salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">+----+--------+</span><br><span class="line">输出：</span><br><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| null                |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h4 id="思路-38">思路</h4><h5 id="if-子查询-逆转思路">IF + 子查询 + 逆转思路</h5><p>第二高的工资说明只有1个人比他工资高，因此有：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> Employee e2 <span class="keyword">where</span> e1.salary <span class="operator">&lt;</span> e2.salary</span><br></pre></td></tr></table></figure><ul><li>注意distinct，保证去除工资一样的情况</li></ul><p>注意空值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> IF(<span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">!=</span> <span class="number">0</span> ,e1.salary, <span class="keyword">null</span>) <span class="keyword">as</span> SecondHighestSalary </span><br><span class="line"><span class="keyword">from</span> Employee e1</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> salary) <span class="keyword">from</span> Employee e2 <span class="keyword">where</span> e1.salary <span class="operator">&lt;</span> e2.salary)</span><br></pre></td></tr></table></figure><ul><li>e1是核心表，里面的工资都高于e2表。</li></ul><h5 id="ifnull-limit">IFNULL + limit</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    IFNULL(</span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">       <span class="keyword">FROM</span> Employee</span><br><span class="line">       <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">        LIMIT <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mysql常见函数&quot;&gt;Mysql常见函数&lt;/h1&gt;
&lt;p&gt;&lt;a
href=&quot;https://blog.csdn.net/yubin1285570923/article/details/118560285&quot;&gt;mysql:
常用函数总结以及高级函数用法_mysq</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="SQL" scheme="https://vlsmhd.github.io/categories/leetcode/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>WebSocket</title>
    <link href="https://vlsmhd.github.io/2024/03/13/WebSocket/"/>
    <id>https://vlsmhd.github.io/2024/03/13/WebSocket/</id>
    <published>2024-03-13T09:07:51.702Z</published>
    <updated>2024-03-13T09:45:25.729Z</updated>
    
    <content type="html"><![CDATA[<h1 id="websocket">WebSocket</h1><h2 id="概念">概念</h2><p>socket定义：socket是对TCP/IP层协议的一层封装，屏蔽底层协议的细节，是TCP层面向应用层暴露的标准接口。</p><p>WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器<strong>全双工通信</strong>(full-duplex)。一开始的握手需要借助HTTP请求完成。</p><h2 id="应用场景优缺点">应用场景&amp;优缺点</h2><p>场景：即时通讯、替代轮询；网站上的即时通讯是很常见的，比如网页的QQ，聊天系统等。按照以往的技术能力通常是采用轮询、Comet技术解决。</p><p>相比于http的优点：</p><p>HTTP协议是<strong>非持久化</strong>的，<strong>单向</strong>的网络协议，在建立连接后只允许浏览器向服务器发出请求后，服务器才能返回相应的数据。当需要即时通讯时，通过轮询在特定的时间间隔（如1秒），由浏览器向服务器发送Request请求，然后将最新的数据返回给浏览器。这样的方法最明显的缺点就是需要不断的发送请求，而且通常HTTPrequest的Header是非常长的，为了传输一个很小的数据需要付出巨大的代价，是很不合算的，占用了很多的宽带。</p><ul><li>缺点：会导致过多不必要的请求，浪费流量和服务器资源，每一次请求、应答，都浪费了一定流量在相同的头部信息上,</li></ul><h2 id="原理">原理</h2><p>WebSocket同HTTP一样也是应用层的协议，但是它是一种双向通信协议，是建立在TCP之上的。</p><p>连接过程 —— 握手过程</p><ol type="1"><li>TCP连接：浏览器、服务器建立TCP连接，三次握手。这是通信的基础，传输控制层，若失败后续都不执行。</li><li>HTTP握手：TCP连接成功后，浏览器通过HTTP协议向服务器传送WebSocket支持的版本号等信息。（开始前的HTTP握手）</li><li>请求确认：服务器收到客户端的握手请求后，同样采用HTTP协议回馈数据。</li><li>通道传输：当收到了连接成功的消息后，通过TCP通道进行传输通信。</li></ol><p>连接建立以后，就可以一直通信，长连接</p><figure><img src="WebSocket/2dcb9c6aab3c0a9af1afd3d6952e904c.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;websocket&quot;&gt;WebSocket&lt;/h1&gt;
&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;
&lt;p&gt;socket定义：socket是对TCP/IP层协议的一层封装，屏蔽底层协议的细节，是TCP层面向应用层暴露的标准接口。&lt;/p&gt;
&lt;p&gt;WebSocket pr</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://vlsmhd.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="应用层" scheme="https://vlsmhd.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    
    
  </entry>
  
  <entry>
    <title>V聊项目</title>
    <link href="https://vlsmhd.github.io/2024/03/12/V%E8%81%8A%E9%A1%B9%E7%9B%AE/"/>
    <id>https://vlsmhd.github.io/2024/03/12/V%E8%81%8A%E9%A1%B9%E7%9B%AE/</id>
    <published>2024-03-12T06:37:32.019Z</published>
    <updated>2024-03-23T14:09:40.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目介绍">项目介绍</h1><p>基于 Netty 实现的高性能分布式 IM即时通讯系统，它支持对接用户自定义多端登录方式，它实现了消息的四大特性（实时、有序、可靠、幂等），架构层面吸收业界大牛的技术文章以及成熟产品实现。</p><h2 id="技术栈">技术栈</h2><p>使用<code>Netty</code>、<code>Redis</code>、<code>Redisson</code>、<code>RabbitMQ</code>、<code>Zookeeper</code>、<code>RPC</code>、<code>Feign</code>等主流技术栈</p><ul><li>Netty实现高性能消息收发，应用层握手(用户登录登出)，心跳检测(挂后台)</li><li><code>Redis</code> 和 <code>Redisson</code> 客户端实现用户 Session信息的存储、发布订阅模式实现路由层信息缓存</li><li>RabbitMQ 解耦对接 TCP网关服务和逻辑层交互、保证分布式下消息顺序性</li><li>Zookeeper 注册中心及时感知服务节点上线下线情况</li><li>Feign RPC 方式解耦消息发送方合法性校验</li></ul><h2 id="项目模块">项目模块</h2><p>采用 DDD架构思想搭建各个模块层级，并使用大量设计模式优化架构，使项目易阅读、可扩展</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">im-system-vchat</span><br><span class="line">├─ im-codec           接入层：负责网关服务配置文件集成、私有协议包结构定义、消息编解码以及需要发送给 TCP 服务的数据包定义</span><br><span class="line">├─ im-common          基础层：负责定义整个 IM 架构所有常量、状态码、错误码、基础数据模型</span><br><span class="line">├─ im-domain          领域层：负责定义用户、好友、群组等多个领域的逻辑，以及消息的发送服务</span><br><span class="line">├─ im-message-store   消息存储层：通过 MQ 将消息异步持久化落库, 很薄的一层</span><br><span class="line">├─ im-infrastructure  基础层：负责定义底层组件如 redis、zk、mq 的配置逻辑，回调机制和基类消息发送</span><br><span class="line">└─ im-tcp             网关层：负责定义心跳机制、监控用户消息读取以及上线下线、Netty 消息通道以及 WebSocket 全双工通道</span><br></pre></td></tr></table></figure><h3 id="ddd架构简述">DDD架构简述</h3><p><strong>DDD（领域驱动设计）</strong>是一种软件开发方法，旨在帮助我们设计高质量的软件模型</p><ul><li><strong>领域驱动设计</strong>（Domain DrivenDesign，简称DDD）是一种软件开发方法，专注于设计和实现高质量的领域模型。</li><li><strong>通用语言</strong>（UbiquitousLanguage，简称UL）是DDD中最具威力的特性之一。不管你在团队中的角色如何，只要你是团队的一员，你都将使用UL。</li><li><strong>限界上下文</strong>（BoundedContext，简称BC）是DDD中的另一个关键概念。一个业务领域划分成若干个BC，它们之间通过ContextMap进行集成。领域模型存在于BC内。</li><li><strong>领域模型</strong>是关于某个特定业务领域的软件模型，通常通过对象模型来实现。领域模型同时包含了数据和行为，并且表达了准确的业务含义。</li></ul><p><strong>分层架构</strong></p><ul><li>分层架构是一种设计方法，有助于提高软件质量和性能。</li><li>分层架构的一个重要原则是每层只能与位于其下方的层发生耦合。</li><li>严格分层架构和松散分层架构是两种常见的分层方式。</li><li>分层架构的优点包括结构清晰、易于维护和升级，以及降低层与层之间的依赖。</li></ul><p><strong>DDD三种模式</strong></p><ul><li>经典四层架构<ul><li><strong>用户界面层</strong>（UserInterface）：负责向用户显示信息和解释用户命令。</li><li><strong>应用层</strong>（Application）：定义软件要完成的任务，并操作领域对象解决实际问题。</li><li><strong>领域层</strong>（Domain）：表达业务概念、状态信息和规则，是业务软件的核心。</li><li><strong>基础设施层</strong>（Infrastructure）：提供通用的技术能力，如消息传递、持久化机制等。服务于上面三层</li></ul></li><li>DCI架构<ul><li><strong>DCI架构</strong>（Data, Context,Interaction）旨在反映最终用户的认知模型中的角色和交互。</li></ul></li></ul><h2 id="项目亮点">项目亮点</h2><ul><li>设计模式重构<ul><li>使用策略模式重构用户操作指令逻辑</li><li>使用状态模式重构用户自定义多端登录方式</li><li>使用模板模式重构消息接收器(群聊、单聊的消息接收器逻辑十分相似)</li></ul></li><li>使用 Redis 缓存用户信息的方式模拟路由层，实现跨服务之间的多 Channel通讯</li><li>使用 Redisson发布订阅模式，监听用户登录行为，发送用户下线通知。存储用户多端设备的Session 信息</li><li>使用 Rabbitmq 处理分布式消息顺序性,异步执行历史消息落库持久化等问题, 并且解决线上 MQ消息积压和消息不一致等问题</li><li>使用拦截器机制, 通过 HMAC-SHA256 加密算法实现接口加密防刷,提升系统安全性</li><li>单聊、群聊服务优化改造(实时性、有序性、可靠性、幂等性)<ul><li>实时性: 使用线程池、MQ 异步持久化、RPC解耦合法性校验大幅提升消息实时性, 接口响应从 400ms 提升至 15ms</li><li>可靠性: 通过应用层两次握手, 即发送方接收上、下行 ACK 确保消息可靠性,解决消息丢失问题。消息丢包率从 6.32% 下降到 1.64%</li><li>有序性: 使用 Redis 原子递增 incr 保证消息有序性,解决消息乱序问题</li><li>幂等性: 通过防重 ID,服务端、客户端缓存消息等幂等性手段遏制消息重复现象,并限制消息的无限制重试, 接口异常情况从 8.13% 下降到 1.47%</li></ul></li><li>实现单聊、群聊消息已读和已读回执功能</li><li>采用读扩散实现单聊、群聊离线消息拉取</li></ul><h1 id="架构设计">架构设计</h1><p>一般使用WebSocket的架构图：</p><p><img src="V聊项目/image-20240314150345646.png" alt="WebSocket的架构图" style="zoom:67%;" /></p><h2 id="数据库表设计">数据库表设计</h2><p>采用发送消息表存储消息体，而消息接收表只存储消息的id，随后从发送消息表拉取信息即可。</p><p>查询架构：</p><p><img src="V聊项目/image-20240318120700514.png" alt="查询架构" style="zoom:67%;" /></p><h3 id="消息发送表">消息发送表</h3><table><colgroup><col style="width: 4%" /><col style="width: 7%" /><col style="width: 17%" /><col style="width: 38%" /><col style="width: 15%" /><col style="width: 7%" /><col style="width: 8%" /></colgroup><thead><tr class="header"><th>msg_id</th><th>msg_from</th><th>msg_to</th><th>msg_seq</th><th>msg_type</th><th>send_time</th><th>msg_content</th></tr></thead><tbody><tr class="odd"><td>消息ID</td><td>消息发送者</td><td>目标可以是用户、群组id</td><td>客户端发送消息的序列号，解决消息重复、用于消息ack</td><td>消息类型：单聊、群聊</td><td>发送时间</td><td>内容</td></tr></tbody></table><h3 id="消息接收表">消息接收表</h3><table><thead><tr class="header"><th>ID</th><th>msg_id</th><th>msg_from</th><th>msg_to</th><th>flag</th></tr></thead><tbody><tr class="odd"><td>本表ID</td><td>消息id</td><td>消息发送者</td><td>目标可以是用户、群组id</td><td>是否已读</td></tr></tbody></table><h2 id="私有协议">私有协议</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------------------+</span><br><span class="line">| 指令 4byte     | 协议版本号 4byte  | 消息解析类型 4byte  |</span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| 设备类型 4byte  | 设备号长度 4byte  | 平台ID 4byte      | </span><br><span class="line">+------------------------------------------------------+</span><br><span class="line">| 数据长度 4byte  | 数据内容(设备号 imei 4byte + 请求体)   |</span><br><span class="line">+------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>头部包含28字节。</p><h2 id="消息的存储">消息的存储</h2><h3 id="数据结构">数据结构</h3><p>唯一标识：msgID，特征如下：</p><ul><li>唯一性：分布式情况下必须全局唯一</li><li>趋势递增：在 MySQL InnoDB 引擎中使用的是聚集索引，由于多数 RDBMS使用 B-tree的数据结构来存储索引数据，在主键的选择上面我们应该尽量使用有序的主键保证写入性能。</li><li>单调递增：保证下一个 ID 一定大于上一个 ID，例如事务版本号，IM增量消息、排序等等</li><li>非连续，无规则：防止安全泄密</li></ul><p>二、三点的特性，保证消息的可排序性，这样就能根据消息的ID排序，可以解决后续的消息顺序性的问题</p><h2 id="消息的投递过程">消息的投递过程</h2><p><img src="V聊项目/消息流转.png" alt="一条消息的流转" style="zoom: 67%;" /></p><p>流程：</p><ol type="1"><li>客户端A发送消息，消息通过自定义私有协议序列化为二进制，经过操作系统内核处理，与服务端建立TCP连接（三次握手），保证传输层的稳定性（上下行ACK）</li><li>服务端将消息发送到消息队列，投递到MQ的生产者<ol type="1"><li>生产者将这条消息推送到 MQ 的指定队列 (queue =pipeline2MessageService) 进行处理</li><li>消费者通过订阅消息传输队列接收这条消息</li></ol></li><li>服务端通过将消息投递到 MQ 指定队列 (queue = MessageService2pipeline)进行处理</li><li>客户端 userB 成功接收服务端投递过来的消息,完成整个消息的发送接收</li></ol><h2 id="路由层设计">路由层设计</h2><figure><img src="V聊项目/分布式路由层.png" alt="分布式路由层" /><figcaption aria-hidden="true">分布式路由层</figcaption></figure><p>由于使用了分布式,用户的信息会因为负载均衡分布在不同的服务器上，怎么保证多 Channel的跨节点通讯就显得额外的重要。</p><p>在这里我们使用了 Redis 来模拟路由层, MQ 进行消息解耦, k-v 分别为toUserId 和目标用户所在的服务器节点。当然, 可能会出现同一个 toUserId对应多个路由层节点，对于此我们只取第一个成功获取即可</p><p>消息请求通过 Netty传递到路由层，在路由层上有高速缓存表，可以快速的获取到消息传递的目的地，并且由于路由层是无状态的，可以很方便进行水平扩容，搭建集群</p><p>流程如下：</p><ol type="1"><li>发送方将消息发送到自己所在的节点。</li><li>发送方所在的节点进行消息路由，根据接收方所在的节点，将消息路由到对应的节点。<ol type="1"><li>由于我们在用户的 Session 中设计了 brokerId 和 ip 地址,因此我们可以获取到对方的节点</li><li>之后的通讯通过 MQ 解耦消息的接收,</li></ol></li><li>接收方在自己所在的节点上接收到消息并处理。</li></ol><p>在这里我选择使用 MQ 进行服务端和客户端的解耦，理由有二:如果使用传统方式(点对点、广播)，都需要涉及到消息数据的发送,怎么保证消息能够发送到对应节点是一个非常难以把控的事情。 因此我使用 MQ +Redis 的方式, redis 作为集中路由, value 里包含了 brokerId 和 port每一个机器都绑定自己对应的 MQ 队列</p><blockquote><p>但其实本质上是集中式路由，所有的消息都通过中央服务器进行路由，中央路由器中央服务器根据消息的接收方信息来决定将消息路由到哪个节点。相比分布式路由，集中式路由实现简单，但是中央服务器成为了系统的瓶颈(单点故障)，可能会限制系统的性能和可扩展性。</p></blockquote><blockquote><p>分布式路由：将消息路由的权力分散到各个节点中，每个节点都可以进行消息的路由请求处理。这种方式可以提高系统的可扩展性和容灾性，但实现会比较复杂。(后续真正实现路由层的时候会考虑分布式路由的架构设计)</p></blockquote><h2 id="读写扩散群聊单聊">读写扩散——群聊、单聊</h2><h4 id="写扩散">写扩散</h4><figure><img src="V聊项目/写扩散.png" alt="写扩散" /><figcaption aria-hidden="true">写扩散</figcaption></figure><ul><li>在架构中, 单聊会话消息采用写扩散</li></ul><p>写扩散优缺：</p><p>优点：</p><ul><li>控制逻辑与数据读取逻辑简单；</li><li>用户数据独立，满足更多的业务场景，比如：回执消息、云端删除等等；</li><li>一个数据点丢失，不影响其他用户的数据点。</li></ul><p>缺点：</p><ul><li>存储空间的增加；</li><li>写扩散需要专门的扩散队列；</li><li>先写扩散后读，实时性差。</li></ul><h4 id="读扩散">读扩散</h4><figure><img src="V聊项目/读扩散.png" alt="读扩散" /><figcaption aria-hidden="true">读扩散</figcaption></figure><ul><li>在架构中, 群聊会话消息采用读扩散</li></ul><p>读扩散优缺：</p><p>优点：</p><ul><li>数据实时性高；</li><li>写入逻辑简单；</li><li>节约存储空间。</li></ul><p>缺点：</p><ul><li>数据读取会存在热点问题；</li><li>需要维护离线群成员与未读消息的关系。</li></ul><h2 id="消息同步模型">消息同步模型</h2><h3 id="多端消息同步">多端消息同步</h3><p>由于 WhaleShark实现了用户多端同步，因此需要保证一条消息既同步给发送方的其他端，又得保证消息能发送给目标对象的所有端。正常情况一条消息的处理流程如下：</p><p><img src="V聊项目/多端消息同步的弊端.png" alt="多端消息同步的弊端-消息裂变" style="zoom:67%;" /></p><p>客户端A在IOS端向安卓端的客户端B发送消息，这时候消息需要同步到这两个用户的两个端（可能还会有其它端口）</p><h2 id="消息可靠性">消息可靠性</h2><h2 id="消息幂等性">消息幂等性</h2><p>由于采用ack机制，保证了消息的可靠传输，但是与之而来的是消息的重复性。当ack丢失的时候，客户端会进行计时重发策略，导致另一个客户端接收到相同的消息。</p><p>策略：</p><ul><li>防重 id 来防止同一份数据处理多次加载到数据库</li><li>消息到达时做一个缓存，缓存时间尽量短，缓存时间内的消息重试直接让接收方接收消息，不进行二次持久化。</li></ul><h2 id="单聊的逻辑">单聊的逻辑</h2><h1 id="代码实现">代码实现</h1><h2 id="codec模块">CodeC模块</h2><h3 id="协议proto定义">协议proto定义</h3><p><strong>Message</strong></p><p>消息由消息头 + 消息体组成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MessageHeader messageHeader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object messagePack;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MessageHeader</strong></p><p>消息头规定、定义了传输协议需要携带的字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageHeader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息操作指令(4字节) 十六进制 一个消息的开始通常以0x开头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer command;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4字节 版本号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4字节 端类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer clientType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用ID(4字节)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer appId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据解析类型(4字节) 和具体业务无关</span></span><br><span class="line"><span class="comment">     * 后续根据解析类型解析data数据 0x0:Json,0x1:ProtoBuf,0x2:Xml,默认:0x0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">messageType</span> <span class="operator">=</span> MessageType.DATA_TYPE_JSON.getCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4字节 imei长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer imeiLength;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4字节 包体长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * imei号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MessagePack</strong></p><p>消息服务发送给 TCP的包体信息，TCP 再根据包体协议解析成 Message发送给客户端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessagePack</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer appId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收方</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String toId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> clientType;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String messageId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端设备唯一标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String imei;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer command;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 业务数据对象，如果是聊天消息则不需要解析直接透传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编解码器">编解码器</h3><h4 id="socket">Socket</h4><p>消息 -&gt; 字节流 字节流 -&gt; 消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageEncoderHandler</span> <span class="keyword">extends</span> <span class="title class_">MessageToByteEncoder</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext ctx, Object msg, ByteBuf out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> MessagePack) &#123;</span><br><span class="line">            <span class="type">MessagePack</span> <span class="variable">msgBody</span> <span class="operator">=</span> (MessagePack) msg;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSONObject.toJSONString(msgBody.getData());</span><br><span class="line">            <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">            out.writeInt(msgBody.getCommand());</span><br><span class="line">            out.writeInt(bytes.length);</span><br><span class="line">            out.writeBytes(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageDecoderHandler</span> <span class="keyword">extends</span> <span class="title class_">ByteToMessageDecoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx,</span></span><br><span class="line"><span class="params">                          ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 解析私有协议</span></span><br><span class="line">        <span class="keyword">if</span> (in.readableBytes() &lt; PACKET_CODEC_LENGTH) &#123;</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> ByteBufToMessageUtils.transition(in);</span><br><span class="line">        out.add(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="websocket">WebSocket</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketMessageDecoderHandler</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageDecoder</span>&lt;BinaryWebSocketFrame&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext ctx, BinaryWebSocketFrame msg, List&lt;Object&gt; out)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">content</span> <span class="operator">=</span> msg.content();</span><br><span class="line">        <span class="keyword">if</span> (content.readableBytes() &lt; PACKET_CODEC_LENGTH) &#123;</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            message = ByteBufToMessageUtils.transition(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (message == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        out.add(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketMessageEncoderHandler</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageEncoder</span>&lt;MessagePack&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext ctx, MessagePack msg, List&lt;Object&gt; out)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSONObject.toJSONString(msg);</span><br><span class="line">            <span class="type">ByteBuf</span> <span class="variable">byteBuf</span> <span class="operator">=</span> Unpooled.directBuffer(<span class="number">8</span> + s.length());</span><br><span class="line">            <span class="type">byte</span>[] bytes = s.getBytes();</span><br><span class="line">            byteBuf.writeInt(msg.getCommand());</span><br><span class="line">            byteBuf.writeInt(bytes.length);</span><br><span class="line">            byteBuf.writeBytes(bytes);</span><br><span class="line">            out.add(<span class="keyword">new</span> <span class="title class_">BinaryWebSocketFrame</span>(byteBuf));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="pack">pack</h3><p>需要发送给 TCP服务的数据包定义，基本上都是类中定义的属性，用于指定发送消息的种类</p><h2 id="tcp模块">TCP模块</h2><h3 id="心跳机制">心跳机制</h3><p>Netty部分实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 判断 evt 是否是 IdleStateEvent (用于触发用户事件，包含 读空闲/写空闲/读写空闲）</span></span><br><span class="line">    <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">        <span class="comment">// 强制类型转换</span></span><br><span class="line">        <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">        <span class="keyword">if</span> (event.state() == IdleState.READER_IDLE) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;进入读空闲...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.state() == IdleState.WRITER_IDLE) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;进入写空闲...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.state() == IdleState.ALL_IDLE) &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">lastReadTime</span> <span class="operator">=</span> (Long) ctx.channel().attr(AttributeKey.valueOf(</span><br><span class="line">                    Constants.ChannelConstants.ReadTime)).get();</span><br><span class="line">            <span class="type">long</span> <span class="variable">nowReadTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (lastReadTime != <span class="literal">null</span> &amp;&amp; nowReadTime - lastReadTime &gt; heartBeatTime) &#123;</span><br><span class="line">                <span class="comment">// 用户退后台</span></span><br><span class="line">                UserChannelRepository.forceOffLine(ctx.channel());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="im-server">IM Server</h3><h3 id="websocket-1">WebSocket</h3><h2 id="infrastructure-基础层模块">infrastructure 基础层模块</h2><h3 id="redissionredis">Redission&amp;Redis</h3><h4 id="监听登录">监听登录</h4><p>监听器定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginMessageListener</span> &#123;</span><br><span class="line">    <span class="comment">//登录模式：单端、双端等</span></span><br><span class="line">    <span class="keyword">private</span> Integer loginModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserLoginMessageListener</span><span class="params">(Integer loginModel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loginModel = loginModel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenerUserLogin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 监听者监听 UserLoginChannel 队列</span></span><br><span class="line">        <span class="type">RTopic</span> <span class="variable">topic</span> <span class="operator">=</span> RedissonManager.getRedissonClient().getTopic(Constants.RedisConstants.UserLoginChannel);</span><br><span class="line">        topic.addListener(String.class, (CharSequence charSequence, String msg) -&gt; &#123;</span><br><span class="line">            log.info(<span class="string">&quot;收到用户上线通知 &#123;&#125;&quot;</span>, msg);</span><br><span class="line">            <span class="type">UserClientDto</span> <span class="variable">dto</span> <span class="operator">=</span> JSONObject.parseObject(msg, UserClientDto.class);</span><br><span class="line">            <span class="type">LoginStatusFactory</span> <span class="variable">loginStatusFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginStatusFactory</span>();</span><br><span class="line">            loginStatusFactory.chooseLoginStatus(loginModel);</span><br><span class="line">            loginStatusFactory.handleUserLogin(dto);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户登录逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">systemStrategy</span><span class="params">(CommandExecution commandExecution)</span> &#123;</span><br><span class="line">    <span class="type">ChannelHandlerContext</span> <span class="variable">ctx</span> <span class="operator">=</span> commandExecution.getCtx();</span><br><span class="line">    <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> commandExecution.getMsg();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">brokeId</span> <span class="operator">=</span> commandExecution.getBrokeId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析 msg</span></span><br><span class="line">    <span class="type">LoginPack</span> <span class="variable">loginPack</span> <span class="operator">=</span> JSON.parseObject(JSONObject.toJSONString(msg.getMessagePack()),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;LoginPack&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            &#125;.getType());</span><br><span class="line">    <span class="type">UserClientDto</span> <span class="variable">userClientDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserClientDto</span>();</span><br><span class="line">    userClientDto.setUserId(loginPack.getUserId());</span><br><span class="line">    userClientDto.setAppId(msg.getMessageHeader().getAppId());</span><br><span class="line">    userClientDto.setClientType(msg.getMessageHeader().getClientType());</span><br><span class="line">    userClientDto.setImei(msg.getMessageHeader().getImei());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 双向绑定</span></span><br><span class="line">    UserChannelRepository.bind(userClientDto, ctx.channel());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Redisson 高速存储用户 Session</span></span><br><span class="line">    <span class="type">UserSession</span> <span class="variable">userSession</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserSession</span>();</span><br><span class="line">    userSession.setUserId(loginPack.getUserId());</span><br><span class="line">    userSession.setAppId(msg.getMessageHeader().getAppId());</span><br><span class="line">    userSession.setClientType(msg.getMessageHeader().getClientType());</span><br><span class="line">    userSession.setConnectState(ConnectState.CONNECT_STATE_ONLINE.getCode());</span><br><span class="line">    userSession.setImei(userClientDto.getImei());</span><br><span class="line">    userSession.setBrokerId(brokeId);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">InetAddress</span> <span class="variable">localHost</span> <span class="operator">=</span> InetAddress.getLocalHost();</span><br><span class="line">        userSession.setBrokerHost(localHost.getHostAddress());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储到 Redis</span></span><br><span class="line">    <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> RedissonManager.getRedissonClient();</span><br><span class="line">    RMap&lt;String, String&gt; map = redissonClient.getMap(</span><br><span class="line">            msg.getMessageHeader().getAppId() +</span><br><span class="line">                    Constants.RedisConstants.UserSessionConstants +</span><br><span class="line">                    loginPack.getUserId());</span><br><span class="line">    map.put(msg.getMessageHeader().getClientType() + <span class="string">&quot;:&quot;</span></span><br><span class="line">                    + msg.getMessageHeader().getImei(),</span><br><span class="line">            JSONObject.toJSONString(userSession));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 redisson 发布订阅模式实现用户上线通知的消息广播</span></span><br><span class="line">    <span class="type">RTopic</span> <span class="variable">topic</span> <span class="operator">=</span> redissonClient.getTopic(Constants.RedisConstants.UserLoginChannel);</span><br><span class="line">    topic.publish(JSONObject.toJSONString(userClientDto));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用户下线通知广播">用户下线通知广播</h4><p>用户下线，把消息发送到网关层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送用户下线消息</span></span><br><span class="line"><span class="comment"> * 并不是真正粗暴清除 channel 里的旧信息，因为需要等待数据包停止传输</span></span><br><span class="line"><span class="comment"> * 在服务器行为中，能清除 channel 里旧信息的方式只有 用户登出 Logout 和 心跳超时 Ping-out</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userChannel</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMutualLoginMsg</span><span class="params">(Channel userChannel, Integer channelClientType, String channelImei, UserClientDto dto)</span> &#123;</span><br><span class="line">    <span class="comment">// 踢掉 channel 所绑定的旧的同端登录状态</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">channelDevice</span> <span class="operator">=</span> parseClientType(channelClientType) + <span class="string">&quot;:&quot;</span> + channelImei;</span><br><span class="line">    <span class="type">String</span> <span class="variable">newChannelDevice</span> <span class="operator">=</span> parseClientType(dto.getClientType()) + <span class="string">&quot;:&quot;</span> + dto.getImei();</span><br><span class="line">    <span class="keyword">if</span> (!(channelDevice).equals(newChannelDevice)) &#123;</span><br><span class="line">        <span class="comment">// 行为埋点</span></span><br><span class="line">        log.info(<span class="string">&quot;第三方平台(appId) [&#123;&#125;] 用户(userId) [&#123;&#125;] 从新端 [&#123;&#125;] 登录(login) , 旧端 [&#123;&#125;] 下线(line) &quot;</span>,</span><br><span class="line">                dto.getAppId(), dto.getUserId(), newChannelDevice, channelDevice);</span><br><span class="line">        MessagePack&lt;Object&gt; pack = <span class="keyword">new</span> <span class="title class_">MessagePack</span>&lt;&gt;();</span><br><span class="line">        pack.setToId((String) userChannel.attr(AttributeKey.valueOf(Constants.ChannelConstants.UserId)).get());</span><br><span class="line">        pack.setUserId((String) userChannel.attr(AttributeKey.valueOf(Constants.ChannelConstants.UserId)).get());</span><br><span class="line">        pack.setCommand(SystemCommand.MUTALOGIN.getCommand());</span><br><span class="line">        userChannel.writeAndFlush(pack);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rabbitmq">RabbitMQ</h3><h4 id="producer">Producer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqMessageProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Message message, Integer command)</span> &#123;</span><br><span class="line">        <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> command.toString();</span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> num.substring(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">CommandType</span> <span class="variable">commandType</span> <span class="operator">=</span> CommandType.getCommandType(substring);</span><br><span class="line">        <span class="type">String</span> <span class="variable">channelName</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> commandType != <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (commandType.equals(CommandType.MESSAGE)) &#123;</span><br><span class="line">            channelName = Constants.RabbitmqConstants.Im2MessageService;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (commandType.equals(CommandType.GROUP)) &#123;</span><br><span class="line">            channelName = Constants.RabbitmqConstants.Im2GroupService;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel = MqFactory.getChannel(channelName);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解析私有协议的内容</span></span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">o</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(message.getMessagePack());</span><br><span class="line">            o.put(<span class="string">&quot;command&quot;</span>, command);</span><br><span class="line">            o.put(<span class="string">&quot;clientType&quot;</span>, message.getMessageHeader().getClientType());</span><br><span class="line">            o.put(<span class="string">&quot;imei&quot;</span>, message.getMessageHeader().getImei());</span><br><span class="line">            o.put(<span class="string">&quot;appId&quot;</span>, message.getMessageHeader().getAppId());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//发送消息  并开启镜像队列防止 MQ 丢失数据</span></span><br><span class="line">            channel.basicPublish(channelName, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                    <span class="literal">null</span>, o.toJSONString().getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送消息出现异常：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="listener">listener</h4><p>服务端监听器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> MqFactory.getChannel(Constants.RabbitmqConstants.MessageService2Im + brokerId);</span><br><span class="line">            channel.queueDeclare(Constants.RabbitmqConstants.MessageService2Im + brokerId,</span><br><span class="line">                    <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">            channel.queueBind(Constants.RabbitmqConstants.MessageService2Im + brokerId,</span><br><span class="line">                    Constants.RabbitmqConstants.MessageService2Im, brokerId);</span><br><span class="line">            channel.basicConsume(Constants.RabbitmqConstants.MessageService2Im + brokerId, <span class="literal">false</span>,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">DefaultConsumer</span>(channel) &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDelivery</span><span class="params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="type">byte</span>[] body)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="type">String</span> <span class="variable">msgStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(body);</span><br><span class="line">                                log.info(<span class="string">&quot;服务端监听消息信息为 &#123;&#125; &quot;</span>, msgStr);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 消息写入数据通道</span></span><br><span class="line">                                <span class="type">MessagePack</span> <span class="variable">messagePack</span> <span class="operator">=</span> JSONObject.parseObject(msgStr, MessagePack.class);</span><br><span class="line">                                <span class="type">BaseProcess</span> <span class="variable">messageProcess</span> <span class="operator">=</span> ProcessFactory.getMessageProcess(messagePack.getCommand());</span><br><span class="line">                                messageProcess.process(messagePack);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 消息成功写入通道后发送应答 Ack</span></span><br><span class="line">                                channel.basicAck(envelope.getDeliveryTag(), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                e.printStackTrace();</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 消息不能正常写入通道，发送失败应答 NAck</span></span><br><span class="line">                                channel.basicNack(envelope.getDeliveryTag(), <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="command">Command</h3><h4 id="message">message</h4><h2 id="路由层">路由层</h2><h3 id="结点路由算法">结点路由算法</h3><p>基于策略模式搭建</p><h4 id="hash">hash</h4><p>实现逻辑：</p><ol type="1"><li><p>将地址列表中每一个地址进行hash计算，存到TreeMap中，TreeMap会根据key进行排序，（key为hash，value为地址）</p></li><li><p>根据客户端传来的key信息，进行hash计算，在TreeMap中找到与这个hash值最相近的结点，获取它的value，这个value就是请求要发送的地址</p></li><li><p>当我们要扩容一个机器，那么TreeMap中就会多存一个数据，这个数据就是新扩容的机器地址，我们所说的一致性，并不是说新增之后所有的数据都能够正常访问，只是相对来说，节点越多，失效的数据越少，因为我们找节点（服务器ip地址）是按照范围来找的</p></li></ol><h4 id="轮询随机">轮询&amp;随机</h4><h3 id="用户登录的路由选择">用户登录的路由选择</h3><p>用户登录以后，由于系统是分布式的，所以要给用户分配一个服务地址。每个服务器都在zk中注册了服务地址，就可以将服务器列表和用户登录的客户端id唯一标识，传给路由的函数，路由函数就会根据这个列表创建一颗TreeMap，执行一致性hash算法，得到具体的服务地址，返回给客户端，这样客户端就会一直用这个请求。</p><p>与此同时，redis就会存储一个字符串类型的k -v键值对，以用户id作为Key，服务器结点地址作为value。这样跨结点通讯就能通过访问redis的key获取目标用户的服务地址。</p><h2 id="domain">Domain</h2><h3 id="conversation会话管理">conversation会话管理</h3><h3 id="message-1">*message</h3><h4 id="controller">controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    P2PMessageService p2PMessageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    GroupMessageService groupMessageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    MessageSyncService messageSyncServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后台消息发送接口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">send</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> SendMessageReq req)</span> &#123;</span><br><span class="line"><span class="comment">//        req.setAppId(appId);</span></span><br><span class="line">        <span class="keyword">return</span> ResponseVO.successResponse(p2PMessageService.send(req));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Feign RPC 调用 [P2P] 内部接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/p2pCheckSend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">checkP2PSend</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> CheckSendMessageReq req)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p2PMessageService.serverPermissionCheck(</span><br><span class="line">                req.getFromId(), req.getToId(), req.getAppId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Feign RPC 调用 [GROUP] 内部接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/groupCheckSend&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">checkGroupSend</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> CheckSendMessageReq req)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> groupMessageService.serverPermissionCheck(</span><br><span class="line">                req.getFromId(), req.getToId(), req.getAppId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 同步消息离线列表</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/syncOfflineMessageList&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">syncP2POfflineMessageList</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> SyncReq req,</span></span><br><span class="line"><span class="params">                                             Integer appId)</span> &#123;</span><br><span class="line">        req.setAppId(appId);</span><br><span class="line">        <span class="keyword">return</span> messageSyncServiceImpl.syncOfflineMessage(req);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="service">service</h4><p>单聊服务，P2PMessageService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">P2PMessageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODULE_NAME</span> <span class="operator">=</span> <span class="string">&quot;P2P&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisSequence redisSequence;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageProducer messageProducer;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CheckSendMessage checkSendMessageServiceImpl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MessageStoreService messageStoreServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池优化单聊消息处理逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor THREAD_POOL_EXECUTOR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        THREAD_POOL_EXECUTOR = ThreadPoolUtil.getIoTargetThreadPool(MODULE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//处理消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processor</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">        <span class="comment">// 日志打印</span></span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;] 消息 ID [&#123;&#125;] 开始处理&quot;</span>,</span><br><span class="line">                MODULE_NAME, messageContent.getMessageId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. （防重处理）先获取缓存 </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">messageCacheByMessageId</span> <span class="operator">=</span> messageStoreServiceImpl</span><br><span class="line">                .getMessageCacheByMessageId(messageContent.getAppId(), messageContent.getMessageId());</span><br><span class="line">        <span class="keyword">if</span> (messageCacheByMessageId != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                messageCacheByMessageId.equals(MessageErrorCode.MESSAGE_CACHE_EXPIRE.getError())) &#123;</span><br><span class="line">            <span class="comment">// 1.1 :说明缓存过期</span></span><br><span class="line">            <span class="comment">// 服务端不做处理。直到客户端计时器超时, 重投次数 超过了 最大重投次数</span></span><br><span class="line">          <span class="comment">// 客户端 本地，重新生成 messageId</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//1.2 : 缓存为空，则说明该消息是第一次发送，并没有重复接收</span></span><br><span class="line">        <span class="type">MessageContent</span> <span class="variable">messageCache</span> <span class="operator">=</span></span><br><span class="line">                JSON.parseObject(messageCacheByMessageId, MessageContent.class);</span><br><span class="line">        <span class="keyword">if</span> (messageCache != <span class="literal">null</span>)&#123;</span><br><span class="line">            THREAD_POOL_EXECUTOR.execute(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 线程池执行消息同步，发送，回应等任务流程</span></span><br><span class="line">                doThreadPoolTask(messageCache);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 外提 Seq 存储逻辑</span></span><br><span class="line"><span class="comment">         * 因为 seq 生成策略可以是 redis，也可以是一个新的服务专门处理。</span></span><br><span class="line"><span class="comment">         * 为了保证安全性需要对第三方接口进行异常捕获，</span></span><br><span class="line"><span class="comment">         * 因此不要将这段逻辑脏污线程池的逻辑，保证线程池的流式纯粹</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 定义单聊消息的 Sequence, 客户端根据 seq 进行排序</span></span><br><span class="line">        <span class="comment">// key: appId + Seq + (from + toId) / groupId</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">seq</span> <span class="operator">=</span> redisSequence.doGetSeq(messageContent.getAppId()</span><br><span class="line">                + Constants.SeqConstants.MessageSeq</span><br><span class="line">                + ConversationIdGenerate.generateP2PId(</span><br><span class="line">                messageContent.getFromId(), messageContent.getToId()));</span><br><span class="line">        messageContent.setMessageSequence(seq);</span><br><span class="line"></span><br><span class="line">        THREAD_POOL_EXECUTOR.execute(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 1. 消息持久化落库(MQ 异步) id 防重处理，通过唯一键，做一个防重处理</span></span><br><span class="line">            messageStoreServiceImpl.storeP2PMessage(messageContent);</span><br><span class="line">            <span class="comment">// 2. 在异步持久化之后执行离线消息存储</span></span><br><span class="line">            <span class="type">OfflineMessageContent</span> <span class="variable">offlineMessage</span> <span class="operator">=</span> getOfflineMessage(messageContent);</span><br><span class="line">            messageStoreServiceImpl.storeOfflineMessage(offlineMessage);</span><br><span class="line">            <span class="comment">// 线程池执行消息同步，发送，回应等任务流程</span></span><br><span class="line">            doThreadPoolTask(messageContent);</span><br><span class="line">            <span class="comment">// 缓存消息</span></span><br><span class="line">            messageStoreServiceImpl.setMessageCacheByMessageId(</span><br><span class="line">                    messageContent.getAppId(), messageContent.getMessageId(), messageContent);</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;[&#123;&#125;] 消息 ID [&#123;&#125;] 处理完成&quot;</span>,</span><br><span class="line">                    MODULE_NAME, messageContent.getMessageId());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OfflineMessageContent <span class="title function_">getOfflineMessage</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">        <span class="type">OfflineMessageContent</span> <span class="variable">offlineMessageContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OfflineMessageContent</span>();</span><br><span class="line">        offlineMessageContent.setAppId(messageContent.getAppId());</span><br><span class="line">        offlineMessageContent.setMessageKey(messageContent.getMessageKey());</span><br><span class="line">        offlineMessageContent.setMessageBody(messageContent.getMessageBody());</span><br><span class="line">        offlineMessageContent.setMessageTime(messageContent.getMessageTime());</span><br><span class="line">        offlineMessageContent.setExtra(messageContent.getExtra());</span><br><span class="line">        offlineMessageContent.setFromId(messageContent.getFromId());</span><br><span class="line">        offlineMessageContent.setToId(messageContent.getToId());</span><br><span class="line">        offlineMessageContent.setMessageSequence(messageContent.getMessageSequence());</span><br><span class="line">        <span class="keyword">return</span> offlineMessageContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池执行消息同步，发送，回应等任务流程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageContent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doThreadPoolTask</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">        <span class="comment">// 2. 返回应答报文 ACK 给自己</span></span><br><span class="line">        ack(messageContent, ResponseVO.successResponse());</span><br><span class="line">        <span class="comment">// 3. 发送消息，同步发送方多端设备</span></span><br><span class="line">        syncToSender(messageContent);</span><br><span class="line">        <span class="comment">// 4. 发送消息给对方所有在线端</span></span><br><span class="line">        List&lt;ClientInfo&gt; clientInfos = dispatchMessage(messageContent);</span><br><span class="line">        <span class="comment">// 决策前移，因为离线用户无法走消息接收逻辑，也就无法识别命令</span></span><br><span class="line">        <span class="comment">// 这里将服务端接收确认迁移于此，保证离线用户也能实现消息可靠性</span></span><br><span class="line">        <span class="keyword">if</span> (clientInfos.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 如果接收方为空，代表目标用户离线，服务端代发响应 ACK 数据包</span></span><br><span class="line">            receiveAckByServer(messageContent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SendMessageResp <span class="title function_">send</span><span class="params">(SendMessageReq req)</span> &#123;</span><br><span class="line">        <span class="type">SendMessageResp</span> <span class="variable">sendMessageResp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendMessageResp</span>();</span><br><span class="line">        <span class="type">MessageContent</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageContent</span>();</span><br><span class="line">        message.setAppId(req.getAppId());</span><br><span class="line">        message.setClientType(req.getClientType());</span><br><span class="line">        message.setImei(req.getImei());</span><br><span class="line">        message.setMessageId(req.getMessageId());</span><br><span class="line">        message.setFromId(req.getFromId());</span><br><span class="line">        message.setToId(req.getToId());</span><br><span class="line">        message.setMessageBody(req.getMessageBody());</span><br><span class="line">        message.setMessageTime(req.getMessageTime());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        messageStoreServiceImpl.storeP2PMessage(message);</span><br><span class="line">        sendMessageResp.setMessageId(message.getMessageId());</span><br><span class="line">        sendMessageResp.setMessageTime(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.发消息给同步在线端</span></span><br><span class="line">        syncToSender(message);</span><br><span class="line">        <span class="comment">//3.发消息给对方在线端</span></span><br><span class="line">        dispatchMessage(message);</span><br><span class="line">        <span class="keyword">return</span> sendMessageResp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置校验</span></span><br><span class="line"><span class="comment">     * 1. 这个用户是否被禁言 是否被禁用</span></span><br><span class="line"><span class="comment">     * 2. 发送方和接收方是否是好友</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">serverPermissionCheck</span><span class="params">(String fromId, String toId, Integer appId)</span> &#123;</span><br><span class="line">        <span class="type">ResponseVO</span> <span class="variable">responseVO</span> <span class="operator">=</span> checkSendMessageServiceImpl.checkSenderForbidAndMute(fromId, appId);</span><br><span class="line">        <span class="keyword">if</span> (!responseVO.isOk()) &#123;</span><br><span class="line">            <span class="keyword">return</span> responseVO;</span><br><span class="line">        &#125;</span><br><span class="line">        responseVO = checkSendMessageServiceImpl.checkFriendShip(fromId, toId, appId);</span><br><span class="line">        <span class="keyword">return</span> responseVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ACK 应答报文包装和发送</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> responseVO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ack</span><span class="params">(MessageContent messageContent, ResponseVO responseVO)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[&#123;&#125;&#125;] msg ack, msgId = &#123;&#125;, checkResult = &#123;&#125;&quot;</span>,</span><br><span class="line">                MODULE_NAME, messageContent.getMessageId(), responseVO.getCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ack 包塞入消息 id，告知客户端端 该条消息已被成功接收</span></span><br><span class="line">        <span class="type">ChatMessageAck</span> <span class="variable">chatMessageAck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatMessageAck</span>(</span><br><span class="line">                messageContent.getMessageId(), messageContent.getMessageSequence());</span><br><span class="line">        responseVO.setData(chatMessageAck);</span><br><span class="line">        <span class="comment">// 发送消息，回传给发送方端</span></span><br><span class="line">        messageProducer.sendToUserOneClient(messageContent.getFromId(),</span><br><span class="line">                MessageCommand.MSG_ACK, responseVO, messageContent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端代替离线目标用户发送接受确认 ACK</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageContent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveAckByServer</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">        <span class="type">MessageReceiveServerAckPack</span> <span class="variable">pack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageReceiveServerAckPack</span>();</span><br><span class="line">        pack.setMessageKey(messageContent.getMessageKey());</span><br><span class="line">        pack.setFromId(messageContent.getFromId());</span><br><span class="line">        pack.setToId(messageContent.getToId());</span><br><span class="line">        pack.setMessageSequence(messageContent.getMessageSequence());</span><br><span class="line">        <span class="comment">// 服务端发送接收确认 ACK 数据包</span></span><br><span class="line">        pack.setServerSend(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 确认接收 ACK 发送给发送方指定端</span></span><br><span class="line">        messageProducer.sendToUserOneClient(messageContent.getFromId(),</span><br><span class="line">                MessageCommand.MSG_RECEIVE_ACK, pack,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClientInfo</span>(messageContent.getAppId(),</span><br><span class="line">                        messageContent.getClientType(), messageContent.getImei())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息同步【发送方除本端所有端消息同步】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageContent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">syncToSender</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;[&#123;&#125;] 发送方消息同步&quot;</span>, MODULE_NAME);</span><br><span class="line">        messageProducer.sendToUserExceptClient(</span><br><span class="line">                messageContent.getFromId(),</span><br><span class="line">                MessageCommand.MSG_P2P,</span><br><span class="line">                messageContent, messageContent</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * [单聊] 消息发送【接收端所有[在线]端都需要接收消息】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> messageContent</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ClientInfo&gt; <span class="title function_">dispatchMessage</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">        List&lt;ClientInfo&gt; clientInfos = messageProducer.sendToUserAllClient(</span><br><span class="line">                messageContent.getToId(),</span><br><span class="line">                MessageCommand.MSG_P2P,</span><br><span class="line">                messageContent,</span><br><span class="line">                messageContent.getAppId()</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> clientInfos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="check">check</h5><p>主要做一些校验，用户聊天时，进行权限检测，判断聊天双方是否存在、是否关注、是否是好友、是否是群成员。</p><h5 id="store">store</h5><p>负责单、群聊消息的存储，加密存储，配合消息队列来使用</p><p><strong>单聊消息存储</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">storeP2PMessage</span><span class="params">(MessageContent messageContent)</span> &#123;</span><br><span class="line">    <span class="comment">// 将 MessageContent 转换成 MessageBody</span></span><br><span class="line">    <span class="type">MessageBody</span> <span class="variable">messageBody</span> <span class="operator">=</span> extractMessageBody(messageContent);</span><br><span class="line">    <span class="type">DoStoreP2PMessageDto</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoStoreP2PMessageDto</span>();</span><br><span class="line">    messageContent.setMessageKey(messageBody.getMessageKey());</span><br><span class="line">    dto.setMessageContent(messageContent);</span><br><span class="line">    dto.setMessageBody(messageBody);</span><br><span class="line">    <span class="comment">// MQ 异步持久化, 将实体消息传递给 MQ</span></span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            Constants.RabbitmqConstants.StoreP2PMessage, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            JSONObject.toJSONString(dto));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>群聊消息存储</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">storeGroupMessage</span><span class="params">(GroupChatMessageContent messageContent)</span> &#123;</span><br><span class="line">    <span class="type">MessageBody</span> <span class="variable">messageBody</span> <span class="operator">=</span> extractMessageBody(messageContent);</span><br><span class="line">    <span class="type">DoStoreGroupMessageDto</span> <span class="variable">doStoreGroupMessageDto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DoStoreGroupMessageDto</span>();</span><br><span class="line">    doStoreGroupMessageDto.setMessageBody(messageBody);</span><br><span class="line">    doStoreGroupMessageDto.setGroupChatMessageContent(messageContent);</span><br><span class="line">    </span><br><span class="line">    rabbitTemplate.convertAndSend(</span><br><span class="line">            Constants.RabbitmqConstants.StoreGroupMessage, <span class="string">&quot;&quot;</span>,</span><br><span class="line">            JSONObject.toJSONString(doStoreGroupMessageDto));</span><br><span class="line">    messageContent.setMessageKey(messageBody.getMessageKey());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓存机制预防二次持久化</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessageCacheByMessageId</span><span class="params">(Integer appId, String messageId, Object messageContent)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> appId + Constants.RedisConstants.CacheMessage + messageId;</span><br><span class="line">       <span class="comment">// 过期时间设置成 5 分钟</span></span><br><span class="line">       stringRedisTemplate.opsForValue().set(key, JSONObject.toJSONString(messageContent), <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getMessageCacheByMessageId</span><span class="params">(Integer appId, String messageId)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> appId + Constants.RedisConstants.CacheMessage + messageId;</span><br><span class="line">       <span class="comment">// 先判断是否有这个键值，由于 redis 两种删除策略：惰性删除、定期删除</span></span><br><span class="line">       <span class="comment">// 惰性删除，键值过期依然会有 key，当有线程获取 value 才会删除 key</span></span><br><span class="line">       <span class="comment">// 两种情况：redis 获取不到 value</span></span><br><span class="line">       <span class="comment">// 1. 首次进入，没有设置缓存，not set， getMessageCacheByMessageId == null</span></span><br><span class="line">       <span class="comment">// 2. 重复进入，但是缓存过期，value = null</span></span><br><span class="line">       <span class="type">Boolean</span> <span class="variable">hasKey</span> <span class="operator">=</span> stringRedisTemplate.hasKey(key);</span><br><span class="line">       <span class="keyword">if</span> (hasKey == <span class="literal">null</span> || !hasKey) &#123;</span><br><span class="line">           <span class="comment">// 没有 key，说明根本没有缓存，或者是定期删除恰好删除了，直接返回 null</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">expireTime</span> <span class="operator">=</span> stringRedisTemplate.getExpire(key);</span><br><span class="line">       <span class="comment">// 键值已过期</span></span><br><span class="line">       <span class="keyword">if</span> (expireTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           stringRedisTemplate.delete(key);</span><br><span class="line">           <span class="keyword">return</span> MessageErrorCode.MESSAGE_CACHE_EXPIRE.getError();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">msgCache</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">       <span class="keyword">return</span> msgCache;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="sync">sync</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageSyncServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MessageSyncService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    MessageProducer messageProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    ConversationService conversationServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">receiveMark</span><span class="params">(MessageReceiveAckContent pack)</span> &#123;</span><br><span class="line">        <span class="comment">// 确认接收 ACK包  发送给在线目标用户全端</span></span><br><span class="line">        messageProducer.sendToUserAllClient(pack.getToId(),</span><br><span class="line">                MessageCommand.MSG_RECEIVE_ACK, pack, pack.getAppId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readMark</span><span class="params">(MessageReadContent messageContent, Command notify, Command receipt)</span> &#123;</span><br><span class="line">        conversationServiceImpl.messageMarkRead(messageContent);</span><br><span class="line">        <span class="type">MessageReadPack</span> <span class="variable">messageReadPack</span> <span class="operator">=</span> Content2Pack(messageContent);</span><br><span class="line">        syncToSender(messageReadPack, messageContent, notify);</span><br><span class="line">        <span class="comment">// 防止自己给自己发送消息</span></span><br><span class="line">        <span class="keyword">if</span> (!messageContent.getFromId().equals(messageContent.getToId())) &#123;</span><br><span class="line">            <span class="comment">// 发送给对方</span></span><br><span class="line">            messageProducer.sendToUserAllClient(</span><br><span class="line">                    messageContent.getToId(),</span><br><span class="line">                    receipt, messageReadPack,</span><br><span class="line">                    messageContent.getAppId()</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">syncOfflineMessage</span><span class="params">(SyncReq req)</span> &#123;</span><br><span class="line"></span><br><span class="line">        SyncResp&lt;OfflineMessageContent&gt; resp = <span class="keyword">new</span> <span class="title class_">SyncResp</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> req.getAppId() + <span class="string">&quot;:&quot;</span> + Constants.RedisConstants.OfflineMessage + <span class="string">&quot;:&quot;</span> + req.getOperater();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">maxSeq</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">ZSetOperations</span> <span class="variable">zSetOperations</span> <span class="operator">=</span> redisTemplate.opsForZSet();</span><br><span class="line">        <span class="comment">// 获取最大的 seq</span></span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> zSetOperations.reverseRangeWithScores(key, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(set))&#123;</span><br><span class="line">            <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(set);</span><br><span class="line">            <span class="type">DefaultTypedTuple</span> <span class="variable">o</span> <span class="operator">=</span> (DefaultTypedTuple) list.get(<span class="number">0</span>);</span><br><span class="line">            maxSeq = Objects.requireNonNull(o.getScore()).longValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;OfflineMessageContent&gt; respList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        resp.setMaxSequence(maxSeq);</span><br><span class="line"></span><br><span class="line">        Set&lt;ZSetOperations.TypedTuple&gt; querySet = zSetOperations.rangeByScoreWithScores(</span><br><span class="line">                key, req.getLastSequence(), maxSeq, <span class="number">0</span>, req.getMaxLimit());</span><br><span class="line">        <span class="keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; typedTuple : querySet) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> typedTuple.getValue();</span><br><span class="line">            <span class="type">OfflineMessageContent</span> <span class="variable">offlineMessageContent</span> <span class="operator">=</span> JSONObject.parseObject(value, OfflineMessageContent.class);</span><br><span class="line">            respList.add(offlineMessageContent);</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setDataList(respList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(respList))&#123;</span><br><span class="line">            <span class="type">OfflineMessageContent</span> <span class="variable">offlineMessageContent</span> <span class="operator">=</span> respList.get(respList.size() - <span class="number">1</span>);</span><br><span class="line">            resp.setCompleted(maxSeq &lt;= offlineMessageContent.getMessageKey());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResponseVO.successResponse(resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">syncToSender</span><span class="params">(MessageReadPack pack, MessageReadContent content, Command command)</span> &#123;</span><br><span class="line">        messageProducer.sendToUserExceptClient(content.getFromId(), command, pack, content);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> MessageReadPack <span class="title function_">Content2Pack</span><span class="params">(MessageReadContent messageContent)</span> &#123;</span><br><span class="line">        <span class="type">MessageReadPack</span> <span class="variable">messageReadPack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageReadPack</span>();</span><br><span class="line">        messageReadPack.setMessageSequence(messageContent.getMessageSequence());</span><br><span class="line">        messageReadPack.setFromId(messageContent.getFromId());</span><br><span class="line">        messageReadPack.setToId(messageContent.getToId());</span><br><span class="line">        messageReadPack.setGroupId(messageContent.getGroupId());</span><br><span class="line">        messageReadPack.setConversationType(messageContent.getConversationType());</span><br><span class="line">        <span class="keyword">return</span> messageReadPack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目介绍&quot;&gt;项目介绍&lt;/h1&gt;
&lt;p&gt;基于 Netty 实现的高性能分布式 IM
即时通讯系统，它支持对接用户自定义多端登录方式，它实现了消息的四大特性（实时、有序、可靠、幂等），架构层面吸收业界大牛的技术文章以及成熟产品实现。&lt;/p&gt;
&lt;h2 id=&quot;技术</summary>
      
    
    
    
    <category term="项目" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="IM系统" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/IM%E7%B3%BB%E7%BB%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>Github使用指南</title>
    <link href="https://vlsmhd.github.io/2024/03/12/Github%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://vlsmhd.github.io/2024/03/12/Github%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2024-03-12T05:13:50.541Z</published>
    <updated>2024-03-12T05:26:33.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高效查找">高效查找</h1><h2 id="页面组成">页面组成</h2><p>进入一个github开源页面，会发现，页面有如下部分：</p><p>name、description、star数、fork数、更新日期、readme、language（编程语言）等</p><p>这些都可以当做查询域</p><h2 id="查询语句">查询语句</h2><p>案例1：查找标题包含spring boot的项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in:name spring boot</span><br></pre></td></tr></table></figure><p>案例2：查找stars数目 &gt; 200的项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in:name spring boot stars:&gt;200</span><br></pre></td></tr></table></figure><p>案例3：项目详情内包含spring</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in:readme spring</span><br></pre></td></tr></table></figure><p>案例4：搜索关于微服务的项目，并且有Java语言的使用，并且在近期更新过，在描述里搜</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in:description 微服务 language:Java pushed:&gt;2023-09-01</span><br></pre></td></tr></table></figure><ul><li>pushed：最后一次更新的时间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高效查找&quot;&gt;高效查找&lt;/h1&gt;
&lt;h2 id=&quot;页面组成&quot;&gt;页面组成&lt;/h2&gt;
&lt;p&gt;进入一个github开源页面，会发现，页面有如下部分：&lt;/p&gt;
&lt;p&gt;name、description、star数、fork数、更新日期、readme、language（编</summary>
      
    
    
    
    <category term="Github" scheme="https://vlsmhd.github.io/categories/Github/"/>
    
    
  </entry>
  
  <entry>
    <title>用友实习经历</title>
    <link href="https://vlsmhd.github.io/2024/03/01/%E7%94%A8%E5%8F%8B%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    <id>https://vlsmhd.github.io/2024/03/01/%E7%94%A8%E5%8F%8B%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86/</id>
    <published>2024-03-01T05:15:29.005Z</published>
    <updated>2024-04-16T02:34:22.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式优化crud接口">设计模式优化CRUD接口</h1><p>ERP系统要服务于制造业比如国企央企的一些制造业，他们的人员要一次性或者分批多次的导入到我们系统，所以我们要写接口暴露给他们，让他们调用，传数据过来。</p><h2 id="单例模式">单例模式</h2><p>系统封装了许多实体对象，包括SpringMVC架构中的Service层对象，一般导入数据需要找到对应的实体类（比如用户对应User），系统中会用到UserService，编写的接口也是Service类型，所以这个场景就是Service之间的调用，利用单例注入，减少对象的开销。</p><p>DAO层，操作数据库有一个专属的类baseDao，编写的sql语句可以传入解析，每一个baseDao会对应一个Connection连接，为了保证连接的复用，会使获取这个Connection也就是这个baseDao的方式改写为双检锁单例模式。</p><h1 id="系统之间数据交互">系统之间数据交互</h1><p>ERP系统、MES系统是有一些联动处理的；比如ERP进行人员物料审核、下放之类的操作，会下达生产计划，MES系统会收到通知，然后开始进行生产追溯、质量信息管理、生产报工、设备数据采集等功能</p><p>ERP和MES是直接集成的模式，通过调用API实现功能</p><p>对于大文件处理，直接采用中间件的形式，比如文件服务器ftp、MongoDB</p><h2 id="socket方式">socket方式</h2><p>服务器提供服务，通过ip地址和端口进行服务访问。而客户机通过连接服务器指定的端口进行消息交互。其中传输协议可以是tcp/UDP协议。</p><figure><img src="用友实习经历/format,png.png" alt="socket形式数据交互" /><figcaption aria-hidden="true">socket形式数据交互</figcaption></figure><p>也就是所谓常见的：</p><ul><li>http调用</li><li>java远程调用</li><li>webserivces</li></ul><p>优点：</p><ol type="1"><li><p>易于编程：目前java提供了多种框架，屏蔽了底层通信细节以及数据传输转换细节。</p></li><li><p>容易控制权限：通过传输层协议https，加密传输的数据，使得安全性提高</p></li><li><p>通用性比较强：无论客户端是.net架构，java，python都是可以的。尤其是webservice规范，使得服务变得通用</p></li></ol><h2 id="ftp文件服务器共享模式">ftp/文件服务器共享模式</h2><p>MES系统集成的时间点可能比较后期，这时候可能上线比较赶，无法渐进式同步这个生产资料，那就有一个场景就是一次性导入大规模的数据文件。文件服务器采用的是MongoDB。</p><figure><img src="用友实习经历/format,png-17092800119213.jpeg"alt="共享文件服务器形式" /><figcaption aria-hidden="true">共享文件服务器形式</figcaption></figure><p>系统之间约定好共享服务器的地址，然后注册各自的账户，获取各自的token方便安全；</p><p>系统A上传文件，上传成功之后，会通过http请求，发送给系统B消息，系统B接收到消息，直接从文件服务器拉取，拉取处理无误后，返回给系统A消息，这时候为了节省空间，可以把共享文件服务器的副本给删除。</p><h3 id="数据导入导出">数据导入导出</h3><p>上传的文件一般是excel表格形式或者是数据库文件（另一个系统B需要的数据可能是A中某几个表的联查数据）。</p><p>导出数据有一个多线程优化过程：</p><ol type="1"><li><p>计算出数据总量：total</p></li><li><p>分批导入多个excel中，每个excel限制1000个数据</p></li><li><p>计算excel的文件个数，每个线程对应一个excel，<code>count = dataTotalCount/ LIMIT + (dataTotalCount % LIMIT &gt; 0 ? 1 : 0)。</code></p></li><li><p>分页、生成文件路径信息，初始化到一个队列里面，队列的大小是线程的数量，对每个文件开启一个线程，异步执行导出，文件全部导出结束，此时异步转成同步，将最终生成的excel文件生成zip压缩包。</p></li></ol><h4 id="导出excel工具类">导出excel工具类</h4><p>利用CountDownLatch做同步器，等子线程将文件全部导出后，再在主线程进行数据整合的操作，即导出压缩包。此处提升了导出的效率，比如子线程的执行时间大约20秒，假设子线程的数量是5个，此处并行处理大约需要20秒处理完成。如果采用原来串行执行的方式的话，处理这五个任务需要100秒的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wm.file.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wm.file.service.IAsynExportExcelService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.wm.file.service.impl.IAsynExportExcelServiceImpl.DATA_TOTAL_COUNT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsynExcelExportUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义导出的excel文件保存的路径</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="string">&quot;**&quot;</span>;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IAsynExportExcelService asynExportExcelService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每批次处理的数据量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LIMIT</span> <span class="operator">=</span> <span class="number">40000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保证线程安全：每个线程设置本地变量值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Queue&lt;Map&lt;String, Object&gt;&gt;&gt; queueThreadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 多线程批量导出 excel</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 用于浏览器下载</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">threadExcel</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        initQueue();</span><br><span class="line">        <span class="comment">//异步转同步，等待所有线程都执行完毕返回 主线程才会结束</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Queue&lt;Map&lt;String, Object&gt;&gt; queue = queueThreadLocal.get();</span><br><span class="line">            <span class="type">CountDownLatch</span> <span class="variable">cdl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(queue.size());</span><br><span class="line">            <span class="keyword">while</span> (queue.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                asynExportExcelService.excuteAsyncTask(queue.poll(), cdl);</span><br><span class="line">            &#125;</span><br><span class="line">            cdl.await();</span><br><span class="line">            log.info(<span class="string">&quot;excel导出完成·······················&quot;</span>);</span><br><span class="line">            <span class="comment">//压缩文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">zipFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath.substring(<span class="number">0</span>, filePath.length() - <span class="number">1</span>) + <span class="string">&quot;.zip&quot;</span>);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(zipFile);</span><br><span class="line">            <span class="comment">//压缩文件目录</span></span><br><span class="line">            ZipUtils.toZip(filePath, fos1, <span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//发送zip包</span></span><br><span class="line">            ZipUtils.sendZip(response, zipFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;excel导出异常&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 使用完ThreadLocal对象之后清除数据，防止内存泄露</span></span><br><span class="line">            queueThreadLocal.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        log.info(<span class="string">&quot;任务执行完毕共消耗：  &quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ConcurrentLinkedQueue是java自己的队列，是同步安全的</span></span><br><span class="line">        <span class="comment">// 一个基于链接节点的无界线程安全的队列</span></span><br><span class="line">        Queue&lt;Map&lt;String, Object&gt;&gt; queue = <span class="keyword">new</span> <span class="title class_">ConcurrentLinkedQueue</span>&lt;&gt;();</span><br><span class="line">        <span class="type">long</span> <span class="variable">dataTotalCount</span> <span class="operator">=</span> DATA_TOTAL_COUNT;<span class="comment">// 数据的总数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">listCount</span> <span class="operator">=</span> (<span class="type">int</span>) dataTotalCount;</span><br><span class="line">        <span class="comment">// 计算出多少页，即循环次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> listCount / LIMIT + (listCount % LIMIT &gt; <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;page&quot;</span>, i);</span><br><span class="line">            map.put(<span class="string">&quot;limit&quot;</span>, LIMIT);</span><br><span class="line">            map.put(<span class="string">&quot;path&quot;</span>, filePath);</span><br><span class="line">            <span class="comment">//添加元素</span></span><br><span class="line">            queue.offer(map);</span><br><span class="line">        &#125;</span><br><span class="line">        queueThreadLocal.set(queue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要注意线程安全问题：<code>AsynExcelExportUtil</code>是单例注入到Spring容器中，这导致存在多线程同时操作一个资源数据queue（存取分页信息的队列）。保证线程安全的两个方法：</p><ol type="1"><li>将<code>AsynExcelExportUtil</code>注入容器的方式改为多例模式（scope=“prototype”），这样每次获取实例的时候，都会新建一个实例。</li><li>使用<code>ThreadLocal</code>，每个线程访问queue时都会在自己的线程中生成一个副本，多线程各自操作自己的副本，保证线程安全。本案例中使用的是<code>ThreadLocal</code>实现。</li></ol><h4 id="定义异步导出数据的接口">定义异步导出数据的接口</h4><p>service接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IAsynExportExcelService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分批次异步导出数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> countDownLatch</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">excuteAsyncTask</span><span class="params">(Map&lt;String, Object&gt; map, CountDownLatch countDownLatch)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IAsynExportExcelServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAsynExportExcelService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假定数据量是40万</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">DATA_TOTAL_COUNT</span> <span class="operator">=</span> <span class="number">400000</span>;</span><br><span class="line">    <span class="comment">// 要导出的批次数据</span></span><br><span class="line">    <span class="keyword">static</span> List&lt;Object&gt; list = <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initList</span><span class="params">()</span>&#123;</span><br><span class="line">        list = otherService();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyExcelExportUtil myExcelExportUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//每调用一次方法开启线程一次</span></span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">excuteAsyncTask</span><span class="params">(Map&lt;String, Object&gt; map, CountDownLatch cdl)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">         </span><br><span class="line">        <span class="type">int</span> <span class="variable">currentPage</span> <span class="operator">=</span> (<span class="type">int</span>) map.get(<span class="string">&quot;page&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> (<span class="type">int</span>) map.get(<span class="string">&quot;limit&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">subList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(page(list, pageSize, currentPage));</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> subList.size();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; , 读取数据，耗时 ：&quot;</span> + (System.currentTimeMillis() - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">filePath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(map.get(<span class="string">&quot;path&quot;</span>).toString());</span><br><span class="line">        filePath.append(<span class="string">&quot;线程&quot;</span>).append(Thread.currentThread().getName()).append(<span class="string">&quot;-&quot;</span>)</span><br><span class="line">                .append(<span class="string">&quot;页码&quot;</span>).append(map.get(<span class="string">&quot;page&quot;</span>)).append(<span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">        <span class="comment">// 调用导出的文件方法</span></span><br><span class="line">        <span class="type">Workbook</span> <span class="variable">workbook</span> <span class="operator">=</span> myExcelExportUtil.getWorkbook(<span class="string">&quot;计算机一班学生&quot;</span>, <span class="string">&quot;学生&quot;</span>, MsgClient.class, subList, ExcelType.XSSF);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath.toString());</span><br><span class="line">        MyExcelExportUtil.exportExcel2(workbook, file);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; , 导出excel&quot;</span> + map.get(<span class="string">&quot;page&quot;</span>) + <span class="string">&quot;.xlsx成功 , 导出数据：&quot;</span> + count + <span class="string">&quot; ,耗时 ：&quot;</span> + (end - start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        <span class="comment">// 执行完线程数减1</span></span><br><span class="line">        cdl.countDown();</span><br><span class="line">        System.out.println(<span class="string">&quot;剩余任务数  ===========================&gt; &quot;</span> + cdl.getCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动分页方法</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">page</span><span class="params">(List list, <span class="type">int</span> pageSize, <span class="type">int</span> page)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalcount</span> <span class="operator">=</span> list.size();</span><br><span class="line">        <span class="type">int</span> <span class="variable">pagecount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> totalcount % pageSize;</span><br><span class="line">        <span class="keyword">if</span> (m &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            pagecount = totalcount / pageSize + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pagecount = totalcount / pageSize;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; subList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (pagecount &lt; page) &#123;</span><br><span class="line">            <span class="keyword">return</span> subList;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//调用sublist方法分页</span></span><br><span class="line">        <span class="keyword">if</span> (m == <span class="number">0</span>) &#123;</span><br><span class="line">            subList = list.subList((page - <span class="number">1</span>) * pageSize, pageSize * (page));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (page == pagecount) &#123;</span><br><span class="line">                subList = list.subList((page - <span class="number">1</span>) * pageSize, totalcount);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                subList = list.subList((page - <span class="number">1</span>) * pageSize, pageSize * (page));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> subList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="报表sql语句编写-sql优化">报表sql语句编写 + sql优化</h1><p>参考文章：<ahref="https://vlsmhd.github.io/2023/10/17/SQL学习/#sql优化">SQL学习 |VLS_Blog (vlsmhd.github.io)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;设计模式优化crud接口&quot;&gt;设计模式优化CRUD接口&lt;/h1&gt;
&lt;p&gt;ERP系统要服务于制造业比如国企央企的一些制造业，他们的人员要一次性或者分批多次的导入到我们系统，所以我们要写接口暴露给他们，让他们调用，传数据过来。&lt;/p&gt;
&lt;h2 id=&quot;单例模式&quot;&gt;单</summary>
      
    
    
    
    <category term="实习经历" scheme="https://vlsmhd.github.io/categories/%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    
    <category term="用友" scheme="https://vlsmhd.github.io/categories/%E5%AE%9E%E4%B9%A0%E7%BB%8F%E5%8E%86/%E7%94%A8%E5%8F%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Feed流系统设计</title>
    <link href="https://vlsmhd.github.io/2024/02/27/Feed%E6%B5%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://vlsmhd.github.io/2024/02/27/Feed%E6%B5%81%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</id>
    <published>2024-02-27T06:57:38.771Z</published>
    <updated>2024-03-19T13:31:03.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统简介">系统简介</h1><blockquote><p>差不多十年前，随着功能机的淘汰和智能机的普及，互联网开始进入移动互联网时代，最具代表性的产品就是微博、微信，以及后来的今日头条、快手等。这些移动化联网时代的新产品在过去几年间借着智能手机的风高速成长。</p><p>这些产品都是Feed流类型产品，由于Feed流一般是按照时间“从上往下流动”，非常适合在移动设备端浏览，最终这一类应用就脱颖而出，迅速抢占了上一代产品的市场空间。</p><p>Feed流是Feed +流，Feed的本意是饲料，Feed流的本意就是有人一直在往一个地方投递新鲜的饲料，如果需要饲料，只需要盯着投递点就可以了，这样就能源源不断获取到新鲜的饲料。在信息学里面，Feed其实是一个信息单元，比如一条朋友圈状态、一条微博、一条咨询或一条短视频等，所以Feed流就是不停更新的信息单元，只要关注某些发布者就能获取到源源不断的新鲜信息，我们的用户也就可以在移动设备上逐条去浏览这些信息单元。</p><p>当前最流行的Feed流产品有微博、微信朋友圈、头条的资讯推荐、快手抖音的视频推荐等，还有一些变种，比如私信、通知等，这些系统都是Feed流系统，接下来我们会介绍如何设计一个Feed流系统架构。</p></blockquote><h2 id="feed流概念">Feed流概念</h2><ul><li>Feed：Feed流中的每一条状态或者消息都是Feed，比如朋友圈中的一个状态就是一个Feed，微博中的一条微博就是一个Feed。</li><li>Feed流：持续更新并呈现给用户内容的<strong>信息流</strong>。每个人的朋友圈，微博关注页等等都是一个Feed流。</li><li>Timeline：Timeline其实是一种Feed流的类型，微博，朋友圈都是Timeline类型的Feed流，但是由于Timeline类型出现最早，使用最广泛，最为人熟知，有时候也用Timeline来表示Feed流。</li><li>关注页Timeline：展示其他人Feed消息的页面，比如朋友圈，微博的首页等。</li><li>个人页Timeline：展示自己发送过的Feed消息的页面，比如微信中的相册，微博的个人页等。</li></ul><h2 id="特征">特征</h2><p>N个发布者的信息单元，通过 “关注关系” 传送给 “M个接收者”。</p><ul><li>多账号内容流：Feed流系统中肯定会存在成千上万的账号，账号之间可以关注，取关，加好友和拉黑等操作。</li><li>非稳定的账号关系：由于存在关注，取关等操作，所以系统中的用户之间的关系就会一直在变化，是一种非稳定的状态。</li><li>读写比例100:1：读写严重不平衡，读多写少，一般读写比例在10：1，甚至100：1以上。</li><li>消息必达性要求高：比如发送了一条朋友圈后，结果部分朋友看到了，部分朋友没看到，如果偏偏女朋友没看到，那么可能会产生很严重的感情矛盾，后果很严重。</li></ul><h2 id="分类">分类</h2><h3 id="timeline">TimeLine</h3><p>按发布的时间顺序排序，先发布的先看到，后发布的排列在最顶端，类似于微信朋友圈，微博等。这也是一种最常见的形式。产品如果选择Timeline类型，那么就是认为<code>Feed流中的Feed不多，但是每个Feed都很重要，都需要用户看到</code>。</p><h3 id="rank">Rank</h3><p>按某个非时间的因子排序，一般是按照用户的喜好度排序，用户最喜欢的排在最前面，次喜欢的排在后面。这种一般假定用户可能看到的Feed非常多，而用户花费在这里的时间有限，那么就为用户选择出用户最想看的TopN结果，场景的应用场景有图片分享、新闻推荐类、商品推荐等。</p><h1 id="系统设计实现">系统设计实现</h1><h2 id="产品定义">产品定义</h2><figure><img src="Feed流系统设计/v2-6c3935d64e4a8e3b099418bd0d4b6250_720w.webp"alt="产品定义" /><figcaption aria-hidden="true">产品定义</figcaption></figure><p>关注关系：</p><ul><li>单向：大V效应，同时时效性可以低一些，比如到分钟级别；</li><li>双向：好友、朋友圈，不会有大V，因为每个人的精力有限，他不可能主动加几千万的好友，这时候因为关系更精密，时效性要求会更高，需要都<strong>秒级别</strong>。</li></ul><p>排序：</p><ul><li>时间倒序</li><li>rank喜好</li></ul><h2 id="存储">存储</h2><p>存储的要求：</p><ol type="1"><li>海量存储：TB、PB级数量<ol type="1"><li>存储系统的持久性和水平扩展</li></ol></li><li>持久性：账号关系和Feed消息不丢失</li></ol><p>一般的选择：</p><table><thead><tr class="header"><th>特征</th><th>分布式NoSQL</th><th>关系型数据库 + 分库分表</th></tr></thead><tbody><tr class="odd"><td>可靠性</td><td>极高</td><td>高</td></tr><tr class="even"><td>水平拓展能力</td><td>线性（加服务器）</td><td>结构调整级</td></tr><tr class="odd"><td>水平拓展速度</td><td>毫秒级</td><td>无</td></tr><tr class="even"><td>常见系统</td><td>Tablestore、Bigtable</td><td>MySQL</td></tr></tbody></table><h3 id="账号关系">账号关系</h3><p><strong>特征</strong></p><ul><li>数据量大：用户之间的关注、用户数量的增长都会导致</li><li><strong>关系简单</strong>：存储的时候只需存<code>用户ID &lt;-&gt; 公众号ID/其它用户ID</code></li><li>有序性：能按照主键排序，数据有序增长</li></ul><p>根据关系简单的特征，最适合的存储方式是分布式NoSQL。每条数据的数据量也不是很大。</p><p>有序性就是分布式ID生成策略，亦或是使用有此功能的数据库</p><h4 id="分布式nosql存储系统选择">分布式NoSQL存储系统选择</h4><h5 id="tablestore">TableStore</h5><p>属于有序性的分布式NoSQL数据库，优势如下：</p><ul><li>单表支持<code>10万亿行+，10PB+</code>的数据量，再快的数据增长速度都不用担心。</li><li>数据按<code>主键列排序</code>，保证有序性和可预期性。</li><li>单key读写延迟在<code>毫秒</code>级别，保证关注，取关的响应时间。</li><li>是<code>全托管</code>的分布式NoSQL数据库服务，<code>无需任何运维</code>。</li><li>全部<code>采用C++</code>实现，彻底<code>无GC问题</code>，也就不会由于GC而导致较大的毛刺。</li></ul><p>存储库表的设计：</p><table><thead><tr class="header"><th></th><th>主键列</th><th>用户主键列</th><th>关注目标主键列</th><th>其它属性</th></tr></thead><tbody><tr class="odd"><td>列名</td><td>ID</td><td>user_id</td><td>target_id</td><td>...</td></tr><tr class="even"><td>解释</td><td></td><td>用户</td><td>朋友圈、其它用户等</td><td></td></tr></tbody></table><h3 id="feed消息">Feed消息</h3><p><strong>特征</strong></p><ul><li>数据量大：在Feed流系统里面很多时候都会选择<strong>写扩散</strong>（推模式）模式，这时候数据量会再膨胀几个数量级，所以这里的数据量很容易达到100TB，甚至PB级别。</li><li>数据格式简单</li><li>自增主键功能</li><li>可靠性，不丢失</li><li>低成本</li></ul><h4 id="开源方案">开源方案</h4><ul><li>关系型数据库 + 分库分表</li><li>关系型数据库 + 分布式NoSQL数据库：其中关系型数据库提供主键自增功能。</li></ul><h4 id="tablestore-1">tablestore</h4><p>表格存储是一个具有自增主键功能的分布式NoSQL数据库，这样就只需要使用一种系统，除此之外还有以下的考虑：</p><ul><li>单表可达10PB，10万亿行。</li><li><code>10个9的SLA保障</code>Feed内容不丢失。</li><li>天然分布式数据库，<code>无需分库分表</code></li><li>两种实例类型：高性能实例采用全SSD存储媒介，提供极佳的读写性能。混合存储实例采用SSD+SATA存储媒介，提供极低的存储成本。</li><li>主键自增功能性能极佳，其他所有系统在做自增功能的时候都需要加锁，但是表格存储的主键自增功能在写入自增列行的时候，完全不需要锁，既不需要表锁，也不需要行锁。</li></ul><h2 id="推送模式">推送模式</h2><p>推送系统的必备特征：</p><ul><li><p>具备千万TPS/QPS的能力。</p></li><li><p>读写链路延迟敏感：对于feed流系统来说，读写链路延迟的敏感性是一个重要的特点。这意味着用户的读取操作（例如查看新内容）和写入操作（例如发布新内容）会直接影响到feed 流的刷新延迟。如果读写链路延迟很高，用户发布的内容可能会在 feed流中出现延迟，或者用户刷新 feed 流时也会感觉到延迟。</p><p>特别是在刷新 feed流时，延迟会更加敏感，因为用户期望看到最新的内容。如果延迟很高，用户可能会感到不满，并且可能错过了一些重要的更新或信息。因此，对于这种类型的系统，减少读写链路延迟是非常重要的，以确保用户获得最及时、最准确的内容。</p></li><li><p>Feed消息的必达性要求很高。</p></li><li><p>主键自增功能，仍然是保证用户收件箱中的FeedID是严格递增的，保证可以通过Scan(上次读取的最大ID---&gt;MAX)读取到最新未读消息。</p></li><li><p>最好能为用户存储Timeline中所有的Feed。</p></li></ul><p>三种模式对比图表：</p><table><thead><tr class="header"><th></th><th>推模式</th><th>拉模式</th><th>推拉结合</th></tr></thead><tbody><tr class="odd"><td>写放大</td><td>高</td><td>低</td><td>中</td></tr><tr class="even"><td>读放大</td><td>低</td><td>高</td><td>中</td></tr><tr class="odd"><td>用户读取延迟</td><td>毫秒</td><td>秒</td><td>秒</td></tr><tr class="even"><td>读写比例</td><td>1:99</td><td>99:1</td><td>1:1</td></tr><tr class="odd"><td>系统要求</td><td>写能力强</td><td>读能力强</td><td>读写适中</td></tr><tr class="even"><td>常见系统</td><td>Tablestore</td><td>Redis缓存系统</td><td>结合</td></tr><tr class="odd"><td>架构复杂度</td><td>低</td><td>复杂</td><td>非常复杂</td></tr></tbody></table><h3 id="推模式写扩散">推模式（写扩散）</h3><p>发送者发送消息的时候，顺便发送给关注自己的全部用户；尽管这些用户可能不在线，所以需要给每个用户建立一个存储空间，用来存储自己关注的人的最新消息。</p><p>要求：读少写多，要求系统的写入能力</p><h3 id="拉模式读扩散">拉模式（读扩散）</h3><p>发送者发送了一条消息后，这条消息不会立即推送给粉丝，而是写入自己的发件箱，当粉丝上线后再去自己关注者的发件箱里面去读取，一条消息的写入只有一次，但是读取最多会和粉丝数一样，读会放大，所以也叫读扩散。</p><p>要求：</p><ul><li>读多写少</li><li>额外存储：每个粉丝需要记录自己上次读到了关注者的哪条消息，如果有1000个关注者，那么这个人需要记录1000个位置信息，这个量和关注量成正比的</li></ul><h3 id="推拉结合">推拉结合</h3><p>推模式在单向关系中，因为存在大V，那么一条消息可能会扩散几百万次，但是这些用户中可能有一半多是僵尸，永远不会上线，那么就存在资源浪费</p><h3 id="场景适配">场景适配</h3><ul><li>如果产品中是双向关系，那么就采用推模式。</li><li>如果产品中是单向关系，且用户数少于1000万，那么也采用推模式，足够了。</li><li>如果产品是单向关系，单用户数大于1000万，那么采用推拉结合模式，这时候可以从推模式演进过来，不需要额外重新推翻重做。</li><li>永远不要只用拉模式。</li><li>如果是一个初创企业，先用推模式，快速把系统设计出来，然后让产品去验证、迭代，等客户数大幅上涨到1000万后，再考虑升级为推拉集合模式。</li><li>如果是按推荐排序，那么是另外的考虑了，架构会完全不一样，这个后面专门文章介绍。</li></ul><h2 id="元数据">元数据</h2><p>Feed流系统中的元数据主要包括：</p><ul><li>用户详情和列表。</li><li>关注或好友关系。</li><li>推送session池。</li></ul><h3 id="用户详情">用户详情</h3><p>表设计：</p><table><thead><tr class="header"><th>字段名</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>ID</td><td></td></tr><tr class="even"><td>name</td><td></td></tr><tr class="odd"><td>...</td><td></td></tr></tbody></table><h3 id="关注好友关系">关注、好友关系</h3><ul><li><p>如果已经有了关系型数据库了，且数据量较少，则选择关系型数据库，比如MySQL等。</p></li><li><p>如果数据量比较大，这个时候就有两种选择：</p></li><li><ul><li>需要分布式事务，可以采用支持分布式事务的系统，比如分布式关系型数据库。</li><li>使用具有索引的系统，比如云上的Tablestore，更简单，吞吐更高，扩容能力也一并解决了。</li></ul></li></ul><table><thead><tr class="header"><th>字段名</th><th>备注</th><th>是否索引</th></tr></thead><tbody><tr class="odd"><td>ID</td><td></td><td></td></tr><tr class="even"><td>user_id</td><td>粉丝id</td><td>是</td></tr><tr class="odd"><td>follow_id</td><td>关注的id</td><td>是</td></tr><tr class="even"><td>timestamp</td><td>关注的时间</td><td>是</td></tr></tbody></table><h3 id="推送session池">推送session池</h3><p>发送消息，如何让粉丝知道消息来了？</p><ol type="1"><li><p>客户端周期性刷新：系统的读请求压力会随着客户端增长而增长；会有一个风险，比如平时的设备在线率是20%~30%，突然某天平台爆发了一个热点消息，大量休眠设备登陆，这个时候就会出现“查询风暴”，一下子就把系统打垮了，所有的用户都不能用了。</p></li><li><p>服务端维护session池，记录哪些用户在线：当用户A发送了一条消息给用户B后，服务端在写入存储库和同步库后，再通知一下session池中的用户B的session，告诉B：你有新消息了。然后session-B再去读消息，然后有消息后将消息推送给客户端，或者客户端拉取</p></li></ol><p>本质是元数据，放到内存即可。</p><p>session表的设计：</p><table><thead><tr class="header"><th>字段名</th><th>备注</th></tr></thead><tbody><tr class="odd"><td>ID</td><td></td></tr><tr class="even"><td>user_id</td><td>粉丝id、接收消息的一方</td></tr><tr class="odd"><td>device_id</td><td>用户的设备id，适用于跨平台系统应用，</td></tr><tr class="even"><td>last_sequence_id</td><td>该接收者已经推送给客户端的最新的消息id</td></tr></tbody></table><h3 id="评论">评论</h3><h3 id="点赞">点赞</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;系统简介&quot;&gt;系统简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;差不多十年前，随着功能机的淘汰和智能机的普及，互联网开始进入移动互联网时代，最具代表性的产品就是微博、微信，以及后来的今日头条、快手等。这些移动化联网时代的新产品在过去几年间借着智能手机的风高速成</summary>
      
    
    
    
    <category term="系统设计" scheme="https://vlsmhd.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="Feed流" scheme="https://vlsmhd.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/Feed%E6%B5%81/"/>
    
    
  </entry>
  
  <entry>
    <title>系统设计基础</title>
    <link href="https://vlsmhd.github.io/2024/02/27/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/"/>
    <id>https://vlsmhd.github.io/2024/02/27/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80/</id>
    <published>2024-02-27T03:35:23.450Z</published>
    <updated>2024-02-27T09:41:33.305Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题步骤">解题步骤</h1><h2 id="剖析使用场景">剖析使用场景</h2><p>剖析的点：</p><ul><li>系统的功能是什么</li><li>系统的目标群体是什么</li><li>系统的用户量有多大</li><li>希望每秒钟处理多少请求？</li><li>希望处理多少数据？</li><li>希望的读写比率？</li></ul><h2 id="高层级的设计">高层级的设计</h2><ol type="1"><li><p>画出主要的组件和连接，也就是架构图</p><p>网络爬虫示意图：</p><p><img src="C1129C683F5C8596F28BCEFB3E208334.png" alt="网络爬虫系统架构图" style="zoom: 80%;" /></p></li><li><p>设计核心组件</p><p>对每一个核心组件进行具体地分析。比如架构中涉及：mysql数据库、加密安全、中间件、消息队列、应用系统等，那就要细分问题，如：</p><ul><li><p>数据库查找、数据库模型、分库分表产生的Hash 碰撞</p></li><li><p>MD5和 Base62加密算法</p></li><li><p>SQL 还是 NoSQL</p></li><li><p>消息队列堆积问题、并发量等</p></li><li><p>API 和面向对象设计</p></li></ul></li><li><p>优化系统</p><p>分析系统瓶颈，常见的方法：</p><ul><li>水平拓展：增加服务器集群等</li><li>数据库分片</li></ul><p>常见的优化指标：</p><ul><li><p>响应时间：发出请求 -&gt;接收响应经过的时间；反应系统的快慢</p></li><li><p>并发量：系统能够同时处理请求的数目，反应系统的负载</p></li><li><p>吞吐量：单位时间内系统处理的请求数量，体现系统的整体处理能力。</p><ul><li>QPS：服务器每秒可以执行的查询次数</li><li>TPS：服务器每秒处理的事务数</li><li>并发数：QPS * 平均响应时间</li></ul></li><li><p>系统活跃度</p><ul><li>PV：页面点击量或者浏览量，用户每次对网站中的每个页面访问均被记录一个PV，多次访问则会累计。</li><li>UV：独立访客，统计一天内访问网站的用户数，一个用户多次访问网站算一个用户</li><li>IP：一天内访问某站点的IP总数，以用户的IP地址作为统计的指标，相同IP多次访问某站点算一次</li><li>DAU：日活跃用户数量。</li><li>MAU：月活跃用户人数。</li></ul></li><li><p>常用软件的QPS</p><ul><li>Nginx：一般Nginx的QPS是比较大的，单机的可达到30万</li><li>MySQL：对于读操作可达几百k，对于写操作更低，大概只有100k</li><li>Redis：大概在几万左右，像set命令甚至可达10万</li><li>Tomcat：单机 Tomcat 的QPS 在 2万左右。</li><li>Memcached：大概在几十万左右</li></ul></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解题步骤&quot;&gt;解题步骤&lt;/h1&gt;
&lt;h2 id=&quot;剖析使用场景&quot;&gt;剖析使用场景&lt;/h2&gt;
&lt;p&gt;剖析的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统的功能是什么&lt;/li&gt;
&lt;li&gt;系统的目标群体是什么&lt;/li&gt;
&lt;li&gt;系统的用户量有多大&lt;/li&gt;
&lt;li&gt;希望</summary>
      
    
    
    
    <category term="系统设计" scheme="https://vlsmhd.github.io/categories/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>Golang Learn</title>
    <link href="https://vlsmhd.github.io/2024/02/23/Golang-Learn/"/>
    <id>https://vlsmhd.github.io/2024/02/23/Golang-Learn/</id>
    <published>2024-02-23T07:53:53.680Z</published>
    <updated>2024-02-23T07:55:05.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法">语法</h1><h2 id="函数">函数</h2><h3 id="函数声明">函数声明</h3><h4 id="对外提供方法">对外提供方法</h4><p><strong>任何需要对外暴露的名字必须以大写字母开头</strong></p><h4 id="类型绑定">类型绑定</h4><p><strong>Func方法名前面的括号</strong>是Go语言中一种特殊的函数声明方式，它将普通的函数转化为方法，使得该函数与某个类型进行绑定。</p><h3 id="函数传参">函数传参</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语法&quot;&gt;语法&lt;/h1&gt;
&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;
&lt;h3 id=&quot;函数声明&quot;&gt;函数声明&lt;/h3&gt;
&lt;h4 id=&quot;对外提供方法&quot;&gt;对外提供方法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;任何需要对外暴露的名字必须以大写字母开头&lt;/strong&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="Golang" scheme="https://vlsmhd.github.io/categories/Golang/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-Hot100题目汇总</title>
    <link href="https://vlsmhd.github.io/2024/02/05/leetcode-Hot100%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB/"/>
    <id>https://vlsmhd.github.io/2024/02/05/leetcode-Hot100%E9%A2%98%E7%9B%AE%E6%B1%87%E6%80%BB/</id>
    <published>2024-02-05T01:49:33.095Z</published>
    <updated>2024-05-02T07:33:30.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本合集按照hot100的题目类型分类进行分类，但是不仅局限于一种方法，尽量追求一题多解</p></blockquote><h1 id="哈希">哈希</h1><h2 id="简单">简单</h2><h3 id="两数之和"><a href="https://leetcode.cn/problems/two-sum/">1.两数之和</a></h3><p>给定一个整数数组 <code>nums</code> 和一个整数目标值<code>target</code>，请你在该数组中找出 <strong>和为目标值</strong><em><code>target</code></em> 的那 <strong>两个</strong>整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,7,11,15], target = 9</span><br><span class="line">输出：[0,1]</span><br><span class="line">解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,4], target = 6</span><br><span class="line">输出：[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3], target = 6</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><h4 id="算法分析">算法分析</h4><p>本题的暴力解法就是双循环，遍历每两个值的组合，找到目标解。</p><p>哈希表，以空间换时间的概念，</p><h5 id="哈希表">哈希表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123; map.get(target - nums[i]), i &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.putIfAbsent(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等">中等</h2><h3 id="字母异位词分组"><ahref="https://leetcode.cn/problems/group-anagrams/">49.字母异位词分组</a></h3><p>给你一个字符串数组，请你将 <strong>字母异位词</strong>组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong>是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 10^4</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅包含小写字母</li></ul><h4 id="算法分析-1">算法分析</h4><p>拿到题目，上来就是贪心想法，先排序。</p><p>注意：java中，对于字符串的排序是优先高位排序，就是先按照字符串的第一个字符在字符集的顺序排序，因此不能直接排序strs数组，可以排序每个字符串，是字母异位词的字符串排序后字符串相同。</p><h5 id="排序">排序</h5><h6 id="超时版本">超时版本</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> strs.length;</span><br><span class="line">        <span class="type">boolean</span>[] v = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//已经添加进集合的字符串，标记为已访问</span></span><br><span class="line">            v[i] = <span class="literal">true</span>;</span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(strs[i]);</span><br><span class="line">            <span class="type">char</span>[] array = strs[i].toCharArray();</span><br><span class="line">            Arrays.sort(array);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sstr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; strs.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v[j]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">char</span>[] chars = strs[j].toCharArray();</span><br><span class="line">                Arrays.sort(chars);</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">                <span class="keyword">if</span> (s.equals(sstr)) &#123;</span><br><span class="line">                    <span class="comment">//已经添加进集合的字符串，标记为已访问</span></span><br><span class="line">                    v[j] = <span class="literal">true</span>;</span><br><span class="line">                    list.add(strs[j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能：</p><figure><img src="leetcode-Hot100题目汇总/image-20240206155019695.png"alt="image-20240206155019695" /><figcaption aria-hidden="true">image-20240206155019695</figcaption></figure><h6 id="哈希表优化">哈希表优化</h6><p>可以用哈希表，存储排序后的字符串，组成key，对应的value就是list集合，存储的是经过排序以后和这个key值相同字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> strs.length;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strs.length; i++) &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = strs[i].toCharArray();</span><br><span class="line">            Arrays.sort(chars);</span><br><span class="line">            <span class="type">String</span> <span class="variable">newS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(newS)) &#123;</span><br><span class="line">                map.put(newS, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(List.of(strs[i])));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.get(newS).add(strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            ans.add(entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="计数">计数</h5><p>大map里存储的key不再是排序后的字符串，而是以<spanclass="math inline">\(a2b3c4\)</span>这种形式（a出现2次，b出现3次，c出现4次）存储为key，值的存储形式和排序法相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> strs.length;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span>[] counter = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> str.length();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                counter[str.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; counter.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (counter[i] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sb.append(i + <span class="string">&#x27;a&#x27;</span>).append(counter[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;String&gt; list = map.getOrDefault(sb.toString(), <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            list.add(str);</span><br><span class="line">            map.put(sb.toString(), list);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长连续序列"><ahref="https://leetcode.cn/problems/longest-consecutive-sequence/">128.最长连续序列</a></h3><p><a id = "128"></a></p><p>给定一个未排序的整数数组 <code>nums</code>，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [100,4,200,1,3,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><h4 id="算法分析-2">算法分析</h4><p>要求时间复杂度O(n)，只能用哈希表进行优化。</p><h5 id="哈希集">哈希集</h5><p>用哈希集存储数组中全部元素，顺便去重（序列中不包含重复元素），随后遍历数组中每一个元素，如果有这个元素+1存在，计数器加一，每一轮循环更新结果集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 记录数组中最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            max = Math.max(nums[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">if</span> (set.contains(num - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            num++;</span><br><span class="line">            <span class="keyword">for</span> (; num &lt;= max; num++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (set.contains(num)) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率：</p><figure><img src="leetcode-Hot100题目汇总/image-20240207101323605.png"alt="image-20240207101323605" /><figcaption aria-hidden="true">image-20240207101323605</figcaption></figure><h6 id="优化">优化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//记录数组中最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer num : set) &#123;</span><br><span class="line">            <span class="comment">//剪枝操作，以序列的最小起始为单位</span></span><br><span class="line">            <span class="keyword">if</span> (!set.contains(num - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (set.contains(num++)) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                ans = Math.max(ans, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率：</p><figure><img src="leetcode-Hot100题目汇总/image-20240207101641780.png"alt="image-20240207101641780" /><figcaption aria-hidden="true">image-20240207101641780</figcaption></figure><h2 id="困难">困难</h2><h3 id="缺失的第一个正数">*<ahref="https://leetcode.cn/problems/first-missing-positive/">41.缺失的第一个正数</a></h3><p>给你一个未排序的整数数组 <code>nums</code>，请你找出其中没有出现的最小的正整数。</p><p>请你实现时间复杂度为 <code>O(n)</code>并且只使用常数级别额外空间的解决方案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,0]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,4,-1,1]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,8,9,11,12]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 10^5</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li></ul><h4 id="算法分析-3">算法分析</h4><h5 id="原地hash">原地hash</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstMissingPositive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[nums[i] - <span class="number">1</span>] != nums[i]) &#123;</span><br><span class="line">                <span class="comment">//因为可能交换过来的数值也不位于他该在的位置</span></span><br><span class="line">                swap(nums, nums[i] - <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[x];</span><br><span class="line">        nums[x] = nums[y];</span><br><span class="line">        nums[y] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双指针">双指针</h1><h2 id="简单-1">简单</h2><h3 id="移动零"><a href="https://leetcode.cn/problems/move-zeroes/">283.移动零</a></h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code>移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong>，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0]</span><br><span class="line">输出: [0]</span><br></pre></td></tr></table></figure><p><strong>提示</strong>:</p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong>你能尽量减少完成的操作次数吗？</p><h4 id="算法分析-4">算法分析</h4><h5 id="双指针-1">双指针（</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; n &amp;&amp; nums[left] != <span class="number">0</span>) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right = left + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (right &lt; n &amp;&amp; nums[right] == <span class="number">0</span>) &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left &lt; n &amp;&amp; right &lt; n) &#123;</span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率：</p><figure><img src="leetcode-Hot100题目汇总/image-20240208093217284.png"alt="image-20240208093217284" /><figcaption aria-hidden="true">image-20240208093217284</figcaption></figure><h6 id="优化-1">优化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">// 已处理序列的右端点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 未处理序列的左端点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[right] != <span class="number">0</span>) &#123;</span><br><span class="line">                swap(nums, left, right);</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-1">中等</h2><h3 id="盛最多水的容器"><ahref="https://leetcode.cn/problems/container-with-most-water/">11.盛最多水的容器</a><a id="11"></a></h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有<code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是<code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code>轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/question_11.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class="line">输出：49 </span><br><span class="line">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [1,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>2 &lt;= n &lt;= 10^5</code></li><li><code>0 &lt;= height[i] &lt;= 10^4</code></li></ul><h4 id="算法分析-5">算法分析</h4><h5 id="双指针-贪心">双指针 + 贪心</h5><p>每次循环以更高的那个柱子为基准，移动对向指针找到更高的柱子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            ans = Math.max(ans, (right - left) * Math.min(height[left], height[right]));</span><br><span class="line">            <span class="comment">//贪心</span></span><br><span class="line">            <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三数之和"><a href="https://leetcode.cn/problems/3sum/">15.三数之和</a></h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组<code>[nums[i], nums[j], nums[k]]</code> 满足<code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>3 &lt;= nums.length &lt;= 3000</code></li><li><code>-10^5 &lt;= nums[i] &lt;= 10^5</code></li></ul><h4 id="算法分析-6">算法分析</h4><p>大致思路：先定一个基准点，随后用双指针搜索另外的两个元素和是否为目标和，一定注意去重</p><p>排序的作用：</p><ol type="1"><li>提高双指针效率（类二分搜索）</li><li>去重，基准点去重</li></ol><p>后续为什么还要去重？</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nums = [-2,0,0,2,2]</span><br></pre></td></tr></table></figure><p>很容易定了第一个数为基准点以后，得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[-2,0,2]，[-2,0,2]]</span><br></pre></td></tr></table></figure><p>所以内层双指针的搜索也需要遵循去重</p><h5 id="排序-双指针">排序 + 双指针</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> -nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[left] + nums[right] &gt; target) &#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[left] + nums[right] &lt; target) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> nums[left++];</span><br><span class="line">                    <span class="keyword">if</span> (pre == nums[left])</span><br><span class="line">                        left++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    right--;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; left &gt; i + <span class="number">1</span> &amp;&amp; nums[left] == nums[left - <span class="number">1</span>])</span><br><span class="line">                    left++;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; right &lt; n - <span class="number">1</span> &amp;&amp; nums[right] == nums[right + <span class="number">1</span>])</span><br><span class="line">                    right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能：</p><figure><img src="leetcode-Hot100题目汇总/image-20240210121201923.png"alt="image-20240210121201923" /><figcaption aria-hidden="true">image-20240210121201923</figcaption></figure><h6 id="优化-2">优化</h6><p>可以在外层循环添加一层逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剪枝</span></span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为数组既然已经排序，如果基准都 &gt; 0 那后续之和都是 &gt; 0不可能存在结果为0 的集合。</p><p>性能：</p><figure><img src="leetcode-Hot100题目汇总/image-20240210121144486.png"alt="image-20240210121144486" /><figcaption aria-hidden="true">image-20240210121144486</figcaption></figure><h2 id="困难-1">困难</h2><h3 id="接雨水">*<ahref="https://leetcode.cn/problems/trapping-rain-water/">42.接雨水</a></h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code>的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/rainwatertrap.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">输出：6</span><br><span class="line">解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：height = [4,2,0,3,2,5]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == height.length</code></li><li><code>1 &lt;= n &lt;= 2 * 10^4</code></li><li><code>0 &lt;= height[i] &lt;= 10^5</code></li></ul><h4 id="算法分析-7">算法分析</h4><p>本题如果用双指针的思路，和<a href = "#11">盛最多水的容器</a>类似。</p><h5 id="空气墙动归">空气墙动归</h5><p><img src="leetcode-Hot100题目汇总/1.png" alt="官方题解图" style="zoom: 33%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//以右边为大空气墙接水</span></span><br><span class="line">        <span class="type">int</span>[] leftMax = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        leftMax[<span class="number">0</span>] = height[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            leftMax[i] = Math.max(leftMax[i - <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//以左边为大空气墙接水</span></span><br><span class="line">        <span class="type">int</span>[] rightMax = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        rightMax[n - <span class="number">1</span>] = height[n - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            rightMax[i] = Math.max(rightMax[i + <span class="number">1</span>], height[i]);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//这样每个点桶的左右宽度都计算完毕，以每个点为桶容器，得出结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ans += Math.min(leftMax[i], rightMax[i]) - height[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双指针-贪心-1">双指针 +贪心</h5><p>把每一个方格处，想象成一个桶，随后计算桶的容量（桶盛多少取决去最短边）</p><p>left指针的桶，右边最大高度由right指针决定；同理，right指针的桶，左边的高度由left指针决定</p><p><img src="leetcode-Hot100题目汇总/image-20240211124004974.png" alt="灵茶山-讲解截图" style="zoom:80%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>,right = n - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//左指针走过的路中，最高的墙 and 右指针...</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> <span class="number">0</span>, rightMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        leftMax = Math.max(height[left], leftMax);</span><br><span class="line">        rightMax = Math.max(height[right], rightMax);</span><br><span class="line">        <span class="comment">//贪心，找更大的高墙碾压对面</span></span><br><span class="line">        <span class="keyword">if</span> (height[left] &lt; height[right]) &#123;</span><br><span class="line">            ans += leftMax - height[left++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans += rightMax - height[right--];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="滑动窗口">滑动窗口</h1><h2 id="中等-2">中等</h2><h3 id="无重复字符的最长子串"><ahref="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a></h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10^4</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h4 id="算法分析-8">算法分析</h4><h5 id="滑动窗口-哈希表">滑动窗口 + 哈希表</h5><p>哈希表作用：存储在某一个窗口内，各字符出现的下标，这样遇到相同的字符，能快速获得与当前字符相同的前一个字符的位置，方便<strong>缩小窗口。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//单个字符结果为1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span> (hash.containsKey(c)) &#123;</span><br><span class="line">                ans = Math.max(ans, right - left);</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">pre</span> <span class="operator">=</span> hash.get(c);</span><br><span class="line">                <span class="comment">//left不能回退到left之前的位置</span></span><br><span class="line">                left = Math.max(left, pre + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            hash.put(c, right);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = Math.max(ans, right - left);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找到字符串中所有字母异位词"><ahref="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438.找到字符串中所有字母异位词</a></h3><p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code>中所有 <code>p</code> 的 <strong>异位词</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p><p><strong>异位词</strong>指由相同字母重排列形成的字符串（包括相同的字符串）。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class="line">输出: [0,6]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的异位词。</span><br><span class="line">起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的异位词。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class="line">输出: [0,1,2]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class="line">起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class="line">起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, p.length &lt;= 3 * 10^4</code></li><li><code>s</code> 和 <code>p</code> 仅包含小写字母</li></ul><h4 id="算法分析-9">算法分析</h4><h5 id="固定滑动窗口-排序">固定滑动窗口 + 排序</h5><p>排序：对滑动窗口每一种情况进行排序，判断是否与排序后的P相同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> p.length();</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; width) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span>[] array = p.toCharArray();</span><br><span class="line">        Arrays.sort(array);</span><br><span class="line">        p = <span class="keyword">new</span> <span class="title class_">String</span>(array);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = width - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> s.substring(left, right + <span class="number">1</span>);</span><br><span class="line">            <span class="type">char</span>[] chars = substring.toCharArray();</span><br><span class="line">            Arrays.sort(chars);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">String</span>(chars).equals(p)) &#123;</span><br><span class="line">                ans.add(left);</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效率：</p><figure><img src="leetcode-Hot100题目汇总/image-20240214105618358.png"alt="image-20240214105618358" /><figcaption aria-hidden="true">image-20240214105618358</figcaption></figure><h5 id="固定滑动窗口-哈希表">固定滑动窗口 + 哈希表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> p.length();</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; width) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            hash[p.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = width - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span>[] hash1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hash[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                hash1[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比较哈希数组是否相同</span></span><br><span class="line">            <span class="keyword">if</span> (Arrays.equals(hash, hash1)) &#123;</span><br><span class="line">                ans.add(left);</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="滑动窗口-1">滑动窗口</h5><p>窗口动态缩小增大，其实就是根据哈希表的情况来判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> p.length();</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (n &lt; width) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span>[] sCnt = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            hash[p.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">rightIdx</span> <span class="operator">=</span> s.charAt(right) - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            sCnt[rightIdx]++;</span><br><span class="line">            <span class="comment">//s中字符串出现P中没有的字符，又或者出现的字符个数过多</span></span><br><span class="line">            <span class="keyword">while</span> (sCnt[rightIdx] &gt; hash[rightIdx]) &#123;</span><br><span class="line">                sCnt[s.charAt(left++) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (right - left + <span class="number">1</span> == width) &#123;</span><br><span class="line">                ans.add(left);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-2">困难</h2><h3 id="滑动窗口最大值"><ahref="https://leetcode.cn/problems/sliding-window-maximum/">239.滑动窗口最大值</a></h3><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code>的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的<code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,-1,-3,5,3,6,7], k = 3</span><br><span class="line">输出：[3,3,5,5,6,7]</span><br><span class="line">解释：</span><br><span class="line">滑动窗口的位置                最大值</span><br><span class="line">---------------               -----</span><br><span class="line">[1  3  -1] -3  5  3  6  7       3</span><br><span class="line"> 1 [3  -1  -3] 5  3  6  7       3</span><br><span class="line"> 1  3 [-1  -3  5] 3  6  7       5</span><br><span class="line"> 1  3  -1 [-3  5  3] 6  7       5</span><br><span class="line"> 1  3  -1  -3 [5  3  6] 7       6</span><br><span class="line"> 1  3  -1  -3  5 [3  6  7]      7</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1], k = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>1 &lt;= k &lt;= nums.length</code></li></ul><h4 id="算法分析-10">算法分析</h4><h5 id="堆-优先队列">堆-优先队列</h5><p>创建一个大小为k的堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;<span class="type">int</span>[]&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] p1, <span class="type">int</span>[] p2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> p1[<span class="number">0</span>] != p2[<span class="number">0</span>] ? p2[<span class="number">0</span>] - p1[<span class="number">0</span>] : p2[<span class="number">1</span>] - p1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[i], i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        ans[<span class="number">0</span>] = pq.peek()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; n; i++) &#123;</span><br><span class="line">            pq.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;nums[i], i&#125;);</span><br><span class="line">            <span class="comment">//后面添加的元素都是小元素，但是不得不删掉窗口外的元素</span></span><br><span class="line">            <span class="keyword">while</span> (pq.peek()[<span class="number">1</span>] &lt;= i - k) &#123;</span><br><span class="line">                pq.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            ans[i - k + <span class="number">1</span>] = pq.peek()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小覆盖子串"><ahref="https://leetcode.cn/problems/minimum-window-substring/">76.最小覆盖子串</a></h3><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回<code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果<code>s</code> 中不存在涵盖 <code>t</code>所有字符的子串，则返回空字符串 <code>""</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code>中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code>中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == s.length</code></li><li><code>n == t.length</code></li><li><code>1 &lt;= m, n &lt;= 105</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><h4 id="算法分析-11">算法分析</h4><h5 id="滑动窗口-hash表">滑动窗口 + hash表</h5><ul><li><p>哈希表的存取：我们定义一个“需求表”，表示对于t这个字符串中的每一个字符，在s中还需要的字符的个数。</p><ul><li>初始化： 假设t = {A,B,C} 则哈希表hashNeed = { {A,1},{B,1},{C,1}}</li><li>含义：例如：{A,1} {B, -1} {C, 0} A缺一个，B多余一个， C正好</li></ul></li><li><p>滑动窗口： i，j指向滑动窗口两端。<span class="math inline">\(i\leq j \leq s.length\)</span></p><ul><li><p>移动逻辑：j先移动，我们定义常量needCnt =t.length表示还需要的字符总数（属于优化策略，如果每次判断滑动窗口是否包含了T的所有元素，都去遍历need看是否所有元素数量都小于等于0，这个会耗费O(k)的时间复杂度，k代表字典长度，最坏情况下，k可能等于len(S)。）。当j移动时，如果第一次遇到需要的字符，哈希表里设置这个值为"letter,value--"，同时needCnt--，如果遇到不需要的字符，或者重复遇到需要的字符，则对应哈希表的值--</p><p>当needCnt =0的时候，我们停止移动j，开始移动i，缩小我们的范围。</p><ul><li><p>当 i遇到的字符在哈希表里对应的值全是负数的时候，直接越过，并且对应哈希表的值+1。遇到需要的字符，且在哈希表中的值为0的时候需要停下来。</p></li><li><p>然后让 i 移动一位，触发下一次j的移动。</p></li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> t.length();</span><br><span class="line">        <span class="keyword">if</span> (m &lt; n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            hash[t.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">// 总共需要的字符个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">need</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="comment">// 双指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (right &lt; m) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span> (hash[c] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                need--;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[c]--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (need == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 去掉这段字符串中无所谓的前缀,削减左窗口</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; hash[s.charAt(left)] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    hash[s.charAt(left++)]++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> <span class="variable">curLen</span> <span class="operator">=</span> right - left + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (curLen &lt; maxLen) &#123;</span><br><span class="line">                    maxLen = curLen;</span><br><span class="line">                    start = left;</span><br><span class="line">                &#125;</span><br><span class="line">                hash[s.charAt(left++)]++;</span><br><span class="line">                need++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen == Integer.MAX_VALUE ? <span class="string">&quot;&quot;</span> : s.substring(start, start + maxLen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前缀和">前缀和</h1><h2 id="中等-3">中等</h2><h3 id="和为-k-的子数组"><ahref="https://leetcode.cn/problems/subarray-sum-equals-k/">560. 和为 K的子数组</a></h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>，请你统计并返回 <em>该数组中和为 <code>k</code> 的子数组的个数</em>。</p><p>子数组是数组中元素的连续非空序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1], k = 2</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3], k = 3</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2 * 10^4</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li><li><code>-10^7 &lt;= k &lt;= 10^7</code></li></ul><h4 id="算法分析-12">算法分析</h4><h5 id="暴力枚举">暴力枚举</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//每一轮的和</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span> (j &lt; n) &#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">                <span class="keyword">if</span> (sum == k) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀和-哈希表">前缀和 + 哈希表</h5><p>带有负数，所以前缀和数组未必就是单调递增的，因此双指针不能使用。</p><p>有了前缀和数组，我们转化一下要查找的目标等式：<spanclass="math inline">\(s[j] - s[i] = k\)</span>，假设我们遍历到s[j]，我们想找到一个s[i]，那就遍历的过程中可以利用哈希表，把每一个s[i]存入哈希表中，遍历的时候检测<code>s[j] - k</code>是否存在，其实问题就来到了类似于两数之和的解法。</p><p>tips：哈希表的值表示s[i]出现的次数，因为有[0,0,0,0,0] k =0这样的排列组合的案例，所以要存储次数，方便累加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        s[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            s[i] = s[i - <span class="number">1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 以出现次数为值，解决[0,0,0] k = 0 等测试用例</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == k) &#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 转化成两数之和</span></span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s[i] - k)) &#123;</span><br><span class="line">                ans += map.get(s[i] - k);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(s[i], map.getOrDefault(s[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="区间集合">区间集合</h1><h2 id="中等-4">中等</h2><h3 id="合并区间"><ahref="https://leetcode.cn/problems/merge-intervals/">56.合并区间</a></h3><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为<code>intervals[i] = [starti, endi]</code>。请你合并所有重叠的区间，并返回<em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = [[1,3],[2,6],[8,10],[15,18]]</span><br><span class="line">输出：[[1,6],[8,10],[15,18]]</span><br><span class="line">解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intervals = [[1,4],[4,5]]</span><br><span class="line">输出：[[1,5]]</span><br><span class="line">解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= intervals.length &lt;= 10^4</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 10^4</code></li></ul><h4 id="算法分析-13">算法分析</h4><h5 id="排序-1">排序</h5><p>按照区间左端点排序，随后依次合并区间即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> intervals.length;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> intervals;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(intervals , (a, b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ans.add(intervals[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span>[] pre = ans.get(ans.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span>[] cur = intervals[i];</span><br><span class="line">            <span class="keyword">if</span> (pre[<span class="number">1</span>] &gt;= cur[<span class="number">0</span>]) &#123;</span><br><span class="line">                ans.remove(ans.size() - <span class="number">1</span>);</span><br><span class="line">                ans.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;pre[<span class="number">0</span>], Math.max(pre[<span class="number">1</span>],cur[<span class="number">1</span>])&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans.add(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[][] &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么不按照右端点排序？</p><p>有这样一个测试案例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[2,3],[4,5],[6,7],[8,9],[1,10]]</span><br></pre></td></tr></table></figure><p>如果按照右端点排序，按照算法逻辑，遍历到最后一个数组的时候，前面的数组都添加进结果集了，不好处理，因此按左端点排序，处理这样的测试用例比较方便。</p><h1 id="数组">数组</h1><h2 id="中等-5">中等</h2><h3 id="轮转数组"><ahref="https://leetcode.cn/problems/rotate-array/">189. 轮转数组</a></h3><p>给定一个整数数组 <code>nums</code>，将数组中的元素向右轮转<code>k</code> 个位置，其中 <code>k</code> 是非负数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,4,5,6,7], k = 3</span><br><span class="line">输出: [5,6,7,1,2,3,4]</span><br><span class="line">解释:</span><br><span class="line">向右轮转 1 步: [7,1,2,3,4,5,6]</span><br><span class="line">向右轮转 2 步: [6,7,1,2,3,4,5]</span><br><span class="line">向右轮转 3 步: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,-100,3,99], k = 2</span><br><span class="line">输出：[3,99,-1,-100]</span><br><span class="line">解释: </span><br><span class="line">向右轮转 1 步: [99,-1,-100,3]</span><br><span class="line">向右轮转 2 步: [3,99,-1,-100]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-2^31 &lt;= nums[i] &lt;= 2^31 - 1</code></li><li><code>0 &lt;= k &lt;= 10^5</code></li></ul><h4 id="算法分析-14">算法分析</h4><h5 id="多次reverse">多次reverse</h5><p>先翻转整个数组，再翻转前K个，后n - k个，就得到结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//剪枝操作，k == n就是轮转整个数组等于原地不动</span></span><br><span class="line">        k = k % n;</span><br><span class="line">        reverse(nums, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">        reverse(nums, k, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[left];</span><br><span class="line">            nums[left++] = nums[right];</span><br><span class="line">            nums[right--] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除自身以外数组的乘积"><ahref="https://leetcode.cn/problems/product-of-array-except-self/">238.除自身以外数组的乘积</a></h3><p>给你一个整数数组 <code>nums</code>，返回 <em>数组 <code>answer</code>，其中 <code>answer[i]</code> 等于 <code>nums</code> 中除<code>nums[i]</code> 之外其余各元素的乘积</em> 。</p><p>题目数据 <strong>保证</strong> 数组<code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32位</strong> 整数范围内。</p><p>请 <strong>不要使用除法，</strong>且在 <code>O(*n*)</code>时间复杂度内完成此题。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3,4]</span><br><span class="line">输出: [24,12,8,6]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-1,1,0,-3,3]</span><br><span class="line">输出: [0,0,9,0,0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 10^5</code></li><li><code>-30 &lt;= nums[i] &lt;= 30</code></li><li><strong>保证</strong> 数组<code>nums</code>之中任意元素的全部前缀元素和后缀的乘积都在 <strong>32位</strong> 整数范围内</li></ul><p><strong>进阶：</strong>你可以在 <code>O(1)</code>的额外空间复杂度内完成这个题目吗？（出于对空间复杂度分析的目的，输出数组 <strong>不被视为</strong>额外空间。）</p><h4 id="算法分析-15">算法分析</h4><p>定义结果数组res，假设当前nums = [2,2,3,4]</p><table><thead><tr class="header"><th style="text-align: center;">res</th><th style="text-align: center;"></th><th style="text-align: center;"></th><th style="text-align: center;"></th><th style="text-align: center;"></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">0</td><td style="text-align: center;">1</td><td style="text-align: center;">nums[1]</td><td style="text-align: center;">nums[2]</td><td style="text-align: center;">nums[3]</td></tr><tr class="even"><td style="text-align: center;">1</td><td style="text-align: center;">nums[0]</td><td style="text-align: center;">1</td><td style="text-align: center;">nums[2]</td><td style="text-align: center;">nums[3]</td></tr><tr class="odd"><td style="text-align: center;">2</td><td style="text-align: center;">nums[0]</td><td style="text-align: center;">nums[1]</td><td style="text-align: center;">1</td><td style="text-align: center;">nums[3]</td></tr><tr class="even"><td style="text-align: center;">3</td><td style="text-align: center;">nums[0]</td><td style="text-align: center;">nums[1]</td><td style="text-align: center;">nums[2]</td><td style="text-align: center;">1</td></tr></tbody></table><p>通过表格我们可以分析出，每个元素的res，其实就是左右两边子数组的乘积的乘积。</p><p>我们把矩阵分为上下三角，先计算下三角，再计算上三角。定义p =1为下三角乘积的初值 q = 1为上三角乘积的初值。</p><h5 id="分治">分治</h5><p>当前乘积 = 左边乘积 * 右边乘积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] productExceptSelf(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            res[i] = res[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            tmp *= nums[i + <span class="number">1</span>];</span><br><span class="line">            res[i] *= tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="矩阵">矩阵</h1><h2 id="中等-6">中等</h2><h3 id="矩阵置零"><ahref="https://leetcode.cn/problems/set-matrix-zeroes/">73.矩阵置零</a></h3><p>给定一个 <code>*m* x *n*</code> 的矩阵，如果一个元素为<strong>0</strong> ，则将其所在行和列的所有元素都设为 <strong>0</strong>。请使用 <strong><ahref="http://baike.baidu.com/item/原地算法">原地</a></strong>算法<strong>。</strong></p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/mat1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,1,1],[1,0,1],[1,1,1]]</span><br><span class="line">输出：[[1,0,1],[0,0,0],[1,0,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/mat2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]</span><br><span class="line">输出：[[0,0,0,0],[0,4,5,0],[0,3,1,0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[0].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>-231 &lt;= matrix[i][j] &lt;= 231 - 1</code></li></ul><p><strong>进阶：</strong></p><ul><li>一个直观的解决方案是使用 <code>O(mn)</code>的额外空间，但这并不是一个好的解决方案。</li><li>一个简单的改进方案是使用 <code>O(m + n)</code>的额外空间，但这仍然不是最好的解决方案。</li><li>你能想出一个仅使用常量空间的解决方案吗？</li></ul><h4 id="算法分析-16">算法分析</h4><h5 id="额外空间omn">额外空间O(mn)</h5><p>采用布尔数组标记初始数组为0的部分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> cols;</span><br><span class="line">    <span class="type">int</span> rows;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        rows = matrix.length;</span><br><span class="line">        cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] flag = <span class="keyword">new</span> <span class="title class_">boolean</span>[rows][cols];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    flag[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (flag[i][j]) &#123;</span><br><span class="line">                    setZero(matrix, i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZero</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            matrix[i][y] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cols; i++) &#123;</span><br><span class="line">            matrix[x][i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="优化空间om-n">优化空间O(m + n)</h6><p>把原数组的第一行用来标记每一列是否需要变成0，第一列用来标记每一行是否需要变成0.</p><p>需要两个额外变量标记第一行第一列是否需要换成0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> cols;</span><br><span class="line">    <span class="type">int</span> rows;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZeroes</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        rows = matrix.length;</span><br><span class="line">        cols = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="literal">false</span>, fc = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                fc = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cols; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[<span class="number">0</span>][i] == <span class="number">0</span>) &#123;</span><br><span class="line">                fr = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">                    matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][<span class="number">0</span>] == <span class="number">0</span> || matrix[<span class="number">0</span>][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    matrix[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fr) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cols; i++) &#123;</span><br><span class="line">                matrix[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fc) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">                matrix[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="螺旋矩阵"><ahref="https://leetcode.cn/problems/spiral-matrix/">54. 螺旋矩阵</a></h3><p>给你一个 <code>m</code> 行 <code>n</code> 列的矩阵<code>matrix</code> ，请按照 <strong>顺时针螺旋顺序</strong>，返回矩阵中的所有元素。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/spiral1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[1,2,3,6,9,8,7,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/spiral.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]</span><br><span class="line">输出：[1,2,3,4,8,12,11,10,9,5,6,7]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10</code></li><li><code>-100 &lt;= matrix[i][j] &lt;= 100</code></li></ul><h4 id="算法分析-17">算法分析</h4><h5 id="空气墙模拟">空气墙模拟</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">spiralOrder</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(matrix == <span class="literal">null</span> || matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//初始边界设定：上、下、左、右</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">top</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">bottom</span> <span class="operator">=</span> m-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt;= right; i++)&#123;</span><br><span class="line">                res.add(matrix[top][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新上边界</span></span><br><span class="line">            <span class="keyword">if</span>(++top &gt; bottom) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> top; i &lt;= bottom; i++)&#123;</span><br><span class="line">                res.add(matrix[i][right]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新右边界</span></span><br><span class="line">            <span class="keyword">if</span>(--right &lt; left) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> right; i &gt;=left; i--)&#123;</span><br><span class="line">                res.add(matrix[bottom][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新下边界</span></span><br><span class="line">            <span class="keyword">if</span>(--bottom &lt; top) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bottom; i &gt;= top; i--)&#123;</span><br><span class="line">                res.add(matrix[i][left]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(++left &gt; right ) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转图像"><ahref="https://leetcode.cn/problems/rotate-image/">48. 旋转图像</a></h3><p>给定一个 <em>n</em> × <em>n</em> 的二维矩阵 <code>matrix</code>表示一个图像。请你将图像顺时针旋转 90 度。</p><p>你必须在<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a></strong>旋转图像，这意味着你需要直接修改输入的二维矩阵。<strong>请不要</strong>使用另一个矩阵来旋转图像。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/mat1-17099509882181.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]</span><br><span class="line">输出：[[7,4,1],[8,5,2],[9,6,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/mat2-17099509882183.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]</span><br><span class="line">输出：[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == matrix.length == matrix[i].length</code></li><li><code>1 &lt;= n &lt;= 20</code></li><li><code>-1000 &lt;= matrix[i][j] &lt;= 1000</code></li></ul><h4 id="算法分析-18">算法分析</h4><h5 id="模拟翻转">模拟翻转</h5><p>水平翻转 + 斜向下对角线翻转即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rotate</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">// 先水平翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[m - i - <span class="number">1</span>][j];</span><br><span class="line">                matrix[m - i - <span class="number">1</span>][j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 斜向下对角线翻转</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> matrix[i][j];</span><br><span class="line">                matrix[i][j] = matrix[j][i];</span><br><span class="line">                matrix[j][i] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索二维矩阵-ii"><ahref="https://leetcode.cn/problems/search-a-2d-matrix-ii/">240.搜索二维矩阵 II</a></h3><p>编写一个高效的算法来搜索 <code>*m* x *n*</code> 矩阵<code>matrix</code> 中的一个目标值 <code>target</code>。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/searchgrid2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/searchgrid.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= n, m &lt;= 300</code></li><li><code>-10^9 &lt;= matrix[i][j] &lt;= 10^9</code></li><li>每行的所有元素从左到右升序排列</li><li>每列的所有元素从上到下升序排列</li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><h4 id="算法分析-19">算法分析</h4><h5 id="每行二分">每行二分</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] row : matrix) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> binarySearch(row, target);</span><br><span class="line">            <span class="keyword">if</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (target &gt; nums[mid]) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; nums[mid]) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 返回下标，如果返回的是值，也可能出现-1</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分树">二分树</h5><p>从右上角开始，可以把矩阵想象成一颗二分树，往左就是递减，往右就是递增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> n - <span class="number">1</span>, right = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; m) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[right][left] &gt; target) &#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[right][left] &lt; target) &#123;</span><br><span class="line">                right++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="链表">链表</h1><h2 id="简单-2">简单</h2><h3 id="相交链表"><ahref="https://leetcode.cn/problems/intersection-of-two-linked-lists/">160.相交链表</a></h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code>，请你找出并返回两个单链表相交的起始节点。如果两个链表不存在相交节点，返回<code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p><ahref="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><imgsrc="leetcode-Hot100题目汇总/160_statement.png" alt="img" /></a></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须<strong>保持其原始结构</strong> 。</p><p><strong>自定义评测：</strong></p><p><strong>评测系统</strong> 的输入如下（你设计的程序<strong>不适用</strong> 此输入）：</p><ul><li><code>intersectVal</code> -相交的起始节点的值。如果不存在相交节点，这一值为 <code>0</code></li><li><code>listA</code> - 第一个链表</li><li><code>listB</code> - 第二个链表</li><li><code>skipA</code> - 在 <code>listA</code>中（从头节点开始）跳到交叉节点的节点数</li><li><code>skipB</code> - 在 <code>listB</code>中（从头节点开始）跳到交叉节点的节点数</li></ul><p>评测系统将根据这些输入创建链式数据结构，并将两个头节点<code>headA</code> 和 <code>headB</code>传递给你的程序。如果程序能够正确返回相交节点，那么你的解决方案将被<strong>视作正确答案</strong> 。</p><p><strong>示例 1：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><imgsrc="leetcode-Hot100题目汇总/160_example_1_1.png" alt="img" /></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,6,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br><span class="line">— 请注意相交节点的值不为 1，因为在链表 A 和链表 B 之中值为 1 的节点 (A 中第二个节点和 B 中第三个节点) 是不同的节点。换句话说，它们在内存中指向两个不同的位置，而链表 A 和链表 B 中值为 8 的节点 (A 中第三个节点，B 中第四个节点) 在内存中指向相同的位置。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><imgsrc="leetcode-Hot100题目汇总/160_example_2.png" alt="img" /></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [1,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><imgsrc="leetcode-Hot100题目汇总/160_example_3.png" alt="img" /></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>1 &lt;= m, n &lt;= 3 * 10^4</code></li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code>没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code>有交点，<code>intersectVal == listA[skipA] == listB[skipB]</code></li></ul><h4 id="算法分析-20">算法分析</h4><h5 id="技巧">技巧</h5><p>如果链表相交，链表可分为如下长度A链表不相交部分a，B链表不相交部分b，公共部分c，相遇之时，走的路径必须相同，也就是两个指针都走a+ b + c长度，如何实现？</p><p>让指针走完自己的链表就切换到另一个链表处，这样两者就会在相交处相遇。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode(int x) &#123;</span></span><br><span class="line"><span class="comment"> * val = x;</span></span><br><span class="line"><span class="comment"> * next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> headB;</span><br><span class="line">        <span class="comment">// 切换次数，当切换次数 &gt; 2 说明两个链表不相交</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p == q) &#123;</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">2</span> &amp;&amp; p == <span class="literal">null</span>) &#123;</span><br><span class="line">                p = headB;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count &lt; <span class="number">2</span> &amp;&amp; q == <span class="literal">null</span>) &#123;</span><br><span class="line">                q = headA;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转链表"><ahref="https://leetcode.cn/problems/reverse-linked-list/">206.反转链表</a></h3><p>给你单链表的头节点 <code>head</code>，请你反转链表，并返回反转后的链表。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/rev1ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/rev1ex2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><h4 id="算法分析-21">算法分析</h4><h5 id="迭代">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> p.next;</span><br><span class="line"></span><br><span class="line">            p.next = pre;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">nextH</span> <span class="operator">=</span> reverseList(head.next);</span><br><span class="line">        head.next.next = head;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> nextH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回文链表"><ahref="https://leetcode.cn/problems/palindrome-linked-list/">234.回文链表</a></h3><p>给你一个单链表的头节点 <code>head</code>，请你判断该链表是否为回文链表。如果是，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/pal1linked-list.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,2,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/pal2linked-list.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点数目在范围<code>[1, 105]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li></ul><p><strong>进阶：</strong>你能否用 <code>O(n)</code> 时间复杂度和<code>O(1)</code> 空间复杂度解决此题？</p><h4 id="算法分析-22">算法分析</h4><h5 id="递归-1">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 顺序遍历的指针</span></span><br><span class="line">    ListNode p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="keyword">return</span> check(head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先check到最深处</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> check(head.next) &amp;&amp; p.val == head.val;</span><br><span class="line">        p = p.next;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(n)；递归栈的存在</p><h5 id="反转链表-快慢指针">反转链表 + 快慢指针</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">mid</span> <span class="operator">=</span> middle(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newHead</span> <span class="operator">=</span> reverse(mid);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; newHead != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != newHead.val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">            newHead = newHead.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">            head.next = n1;</span><br><span class="line">            n1 = head;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">middle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> head; <span class="comment">// 慢</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p2</span> <span class="operator">=</span> head; <span class="comment">// 快</span></span><br><span class="line">        <span class="keyword">while</span> (p2 != <span class="literal">null</span> &amp;&amp; p2.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            p1 = p1.next;</span><br><span class="line">            p2 = p2.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环形链表"><ahref="https://leetcode.cn/problems/linked-list-cycle/">141.环形链表</a></h3><p>给你一个链表的头节点 <code>head</code> ，判断链表中是否有环。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code>指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code>来表示链表尾连接到链表中的位置（索引从 0开始）。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>。仅仅是为了标识链表的实际情况。</p><p><em>如果链表中存在环</em> ，则返回 <code>true</code> 。 否则，返回<code>false</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/circularlinkedlist.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/circularlinkedlist_test2.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：true</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure><img src="leetcode-Hot100题目汇总/circularlinkedlist_test3.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：false</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 10^4]</code></li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> 为 <code>-1</code> 或者链表中的一个<strong>有效索引</strong> 。</li></ul><p><strong>进阶：</strong>你能用<code>O(1)</code>（即，常量）内存解决此问题吗？</p><h4 id="算法分析-23">算法分析</h4><h5 id="快慢指针">快慢指针</h5><p>存在环，快慢指针终会相遇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O（N）</p><p>空间复杂度：O（1）</p><h3 id="合并两个有序链表"><ahref="https://leetcode.cn/problems/merge-two-sorted-lists/">21.合并两个有序链表</a></h3><p>将两个升序链表合并为一个新的 <strong>升序</strong>链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/merge_ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [1,2,4], l2 = [1,3,4]</span><br><span class="line">输出：[1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>两个链表的节点数目范围是 <code>[0, 50]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li><li><code>l1</code> 和 <code>l2</code> 均按 <strong>非递减顺序</strong>排列</li></ul><h4 id="算法分析-24">算法分析</h4><h5 id="迭代-1">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (list1 != <span class="literal">null</span> &amp;&amp; list2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">                p.next = list1;</span><br><span class="line">                list1 = list1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.next = list2;</span><br><span class="line">                list2 = list2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = list1 == <span class="literal">null</span> ? list2 : list1;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归-2">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeTwoLists</span><span class="params">(ListNode list1, ListNode list2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (list1 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (list2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (list1.val &lt; list2.val) &#123;</span><br><span class="line">            list1.next = mergeTwoLists(list1.next, list2);</span><br><span class="line">            <span class="keyword">return</span> list1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list2.next = mergeTwoLists(list1, list2.next);</span><br><span class="line">            <span class="keyword">return</span> list2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-7">中等</h2><h3 id="环形链表-ii"><ahref="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表II</a></h3><p>给定一个链表的头节点 <code>head</code>，返回链表开始入环的第一个节点。 <em>如果链表无环，则返回<code>null</code>。</em></p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code>指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code>来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。如果<code>pos</code> 是<code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code>不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/circularlinkedlist-17087581954997.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><imgsrc="leetcode-Hot100题目汇总/circularlinkedlist_test2-17087581955099.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure><imgsrc="leetcode-Hot100题目汇总/circularlinkedlist_test3-170875819550911.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10^4]</code> 内</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> 的值为 <code>-1</code>或者链表中的一个有效索引</li></ul><p><strong>进阶：</strong>你是否可以使用 <code>O(1)</code>空间解决此题？</p><h4 id="算法分析-25">算法分析</h4><h5 id="快慢指针-数学">快慢指针 + 数学</h5><p>快慢指针，如果存在环，总会相遇，并且会在第一圈相遇。</p><p>相遇时，假设快指针已经走了n圈，起点到环入口长度为a，环入口到相遇点长度为b，相遇点到环入口长度为c：</p><p><span class="math inline">\(fast = a + n(b + c) + b = 2slow = 2(a +b) =&gt; a = c + (n - 1)(b + c) n = 1 得出 a = c\)</span></p><p>所以后续选择一个指针在head处和slow保持相同的速度前进，会在入口相遇</p><blockquote><p>评论区的某大神的解释</p><ol type="1"><li>为何慢指针第一圈走不完一定会和快指针相遇?可以认为快指针和慢指针是相对运动的，假设慢指针的速度是1节点/秒，快指针的速度是2节点/秒，当以慢指针为参考系的话（即慢指针静止），快指针的移动速度就是1节点/秒，所以肯定会相遇。</li><li>为什么在第一圈就会相遇呢？ 设环的长度为L，当慢指针刚进入环时，慢指针需要走 L 步(即 L秒)才能走完一圈，此时快指针距离慢指针的最大距离为L-1，我们再次以慢指针为参考系，如上所说，快指针在按照1节点/秒的速度在追赶慢指针，所以肯定能在L 秒内追赶到慢指针。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head, fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (p != slow) &#123;</span><br><span class="line">            p = p.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数相加"><ahref="https://leetcode.cn/problems/add-two-numbers/">2.两数相加</a></h3><p>给你两个 <strong>非空</strong>的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong>的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/addtwonumber1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,0,8]</span><br><span class="line">解释：342 + 465 = 807.</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]</span><br><span class="line">输出：[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><h4 id="算法分析-26">算法分析</h4><h5 id="迭代模拟">迭代模拟</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="comment">//注意进位的保存</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> || l2 != <span class="literal">null</span> || carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> l1 == <span class="literal">null</span> ? <span class="number">0</span> : l1.val;</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> l2 == <span class="literal">null</span> ? <span class="number">0</span> : l2.val;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> (x + y + carry);</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            sum %= <span class="number">10</span>;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(sum);</span><br><span class="line">            p = p.next;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表的倒数第-n-个结点"><ahref="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">19.删除链表的倒数第 N 个结点</a></h3><p>给你一个链表，删除链表的倒数第 <code>n</code>个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/remove_ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p><strong>进阶：</strong>你能尝试使用一趟扫描实现吗？</p><h4 id="算法分析-27">算法分析</h4><h5 id="模拟-数学推导">模拟 +数学推导</h5><p>要找到被删除的结点，且在一趟遍历内删除，那我们需要定义两个指针p、q，p指针位于head，q指针位于离head距离<code>n - 1</code>个结点处，q遍历到<code>q.next == null</code>，p所处的位置就是要删除的结点，注意dummy结点和pre结点和p同步前进。</p><blockquote><p>结论证明：倒数第K个结点前面有N -K个结点，根据起始的站位，p结点走到终点仅需N-K步，那q跟随p的速度走，就能达到倒数第K个结点也就是第N-K个结点处。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            n--;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            pre = pre.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = p.next;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两两交换链表中的节点"><ahref="https://leetcode.cn/problems/swap-nodes-in-pairs/">24.两两交换链表中的节点</a></h3><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/swap_ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4]</span><br><span class="line">输出：[2,1,4,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 100</code></li></ul><h4 id="算法分析-28">算法分析</h4><h5 id="递归-3">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        head.next = swapPairs(next.next);</span><br><span class="line">        next.next = head;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="迭代-2">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line"><span class="comment">//遇到奇数个结点的情况，直接不用翻转</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span> &amp;&amp; p.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> p.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> q.next;</span><br><span class="line">            q.next = p;</span><br><span class="line">            p.next = next;</span><br><span class="line">            pre.next = q;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机链表的复制"><ahref="https://leetcode.cn/problems/copy-list-with-random-pointer/">138.随机链表的复制</a></h3><p>给你一个长度为 <code>n</code>的链表，每个节点包含一个额外增加的随机指针 <code>random</code>，该指针可以指向链表中的任何节点或空节点。</p><p>构造这个链表的 <strong><ahref="https://baike.baidu.com/item/深拷贝/22785317?fr=aladdin">深拷贝</a></strong>。深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong>节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的<code>next</code> 指针和 <code>random</code>指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点</strong>。</p><p>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中<code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点<code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code>。</p><p>返回复制链表的头节点。</p><p>用一个由 <code>n</code>个节点组成的链表来表示输入/输出中的链表。每个节点用一个<code>[val, random_index]</code> 表示：</p><ul><li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li><li><code>random_index</code>：随机指针指向的节点索引（范围从<code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为<code>null</code> 。</li></ul><p>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code>作为传入参数。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/e1.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/e2.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[1,1],[2,1]]</span><br><span class="line">输出：[[1,1],[2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><strong><img src="leetcode-Hot100题目汇总/e3.png"alt="img" /></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[3,null],[3,0],[3,null]]</span><br><span class="line">输出：[[3,null],[3,0],[3,null]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>-104 &lt;= Node.val &lt;= 104</code></li><li><code>Node.random</code> 为 <code>null</code>或指向链表中的节点。</li></ul><h4 id="算法分析-29">算法分析</h4><p>我们假想一种结构：类似这种：</p><figure><img src="leetcode-Hot100题目汇总/image-20230516093252134.png"alt="image-20230516093252134" /><figcaption aria-hidden="true">image-20230516093252134</figcaption></figure><p>一趟遍历，复制全部链表结点，接在原有结点的后面。</p><p>第二趟遍历，给每个新结点更新random值。新结点的random的值其实就是原链表的random值的next（因为第一步）。</p><p>最后一躺遍历：把新旧链表拆分。</p><h5 id="原地复制-模拟">原地复制 + 模拟</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">copyRandomList</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">// 第一趟遍历，在原本的每个结点都复制一个新结点放在原本的每个结点后面</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> p.next;</span><br><span class="line">            p.next = <span class="keyword">new</span> <span class="title class_">Node</span>(p.val);</span><br><span class="line">            p.next.next = next;</span><br><span class="line">            p = next;</span><br><span class="line">        &#125;</span><br><span class="line">        p = head;</span><br><span class="line">        <span class="comment">// 第二趟遍历，填充新结点的random结点</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.random != <span class="literal">null</span>) &#123;</span><br><span class="line">                p.next.random = p.random.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出新结点</span></span><br><span class="line">        p = head;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">newHead</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">// 不能动原链表，那也要断开原链表的指针</span></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> p.next;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">nextOldNode</span> <span class="operator">=</span> p.next.next;</span><br><span class="line">            p.next = newNode.next;</span><br><span class="line">            newNode.next = nextOldNode == <span class="literal">null</span> ? <span class="literal">null</span> : nextOldNode.next;</span><br><span class="line">            p = nextOldNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newHead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(2*N)</p><p>空间复杂度：O(N)</p><h3 id="排序链表"><a href="https://leetcode.cn/problems/sort-list/">148.排序链表</a></h3><p>给你链表的头结点 <code>head</code> ，请将其按 <strong>升序</strong>排列并返回 <strong>排序后的链表</strong> 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/sort_list_1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [4,2,1,3]</span><br><span class="line">输出：[1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/sort_list_2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [-1,5,3,4,0]</span><br><span class="line">输出：[-1,0,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目在范围 <code>[0, 5 * 104]</code> 内</li><li><code>-105 &lt;= Node.val &lt;= 105</code></li></ul><p><strong>进阶：</strong>你可以在 <code>O(n log n)</code>时间复杂度和常数级空间复杂度下，对链表进行排序吗？</p><h4 id="算法分析-30">算法分析</h4><p>对于链表的排序，使得空间复杂度为O(1)的排序只有归并排序能实现，那就可以把链表从中间拆开成两个，然后递归排序这两个链表，最后再合并在一起。</p><h5 id="快慢指针-合并链表">快慢指针 + 合并链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">sortList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//均分链表</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">head2</span> <span class="operator">=</span> slow.next;</span><br><span class="line">        slow.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//递归有序合并</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">left</span> <span class="operator">=</span> sortList(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">right</span> <span class="operator">=</span> sortList(head2);</span><br><span class="line">        <span class="comment">//合并</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">100000</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (left.val &lt; right.val) &#123;</span><br><span class="line">                p.next = left;</span><br><span class="line">                left = left.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.next = right;</span><br><span class="line">                right = right.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = left == <span class="literal">null</span> ? right : left;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-3">困难</h2><h3 id="k-个一组翻转链表"><ahref="https://leetcode.cn/problems/reverse-nodes-in-k-group/">25. K个一组翻转链表</a></h3><p>给你链表的头节点 <code>head</code> ，每 <code>k</code>个节点一组进行翻转，请你返回修改后的链表。</p><p><code>k</code>是一个正整数，它的值小于或等于链表的长度。如果节点总数不是<code>k</code> 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>你不能只是单纯的改变节点内部的值，而是需要实际进行节点交换。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/reverse_ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 2</span><br><span class="line">输出：[2,1,4,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/reverse_ex2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], k = 3</span><br><span class="line">输出：[3,2,1,4,5]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中的节点数目为 <code>n</code></li><li><code>1 &lt;= k &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= Node.val &lt;= 1000</code></li></ul><p><strong>进阶：</strong>你可以设计一个只用 <code>O(1)</code>额外内存空间的算法解决此问题吗？</p><h4 id="算法分析-31">算法分析</h4><p>每一轮的操作可视图：（借鉴题解大佬图解）</p><figure><img src="leetcode-Hot100题目汇总/image-20230515095415015.png"alt="25-操作可视图" /><figcaption aria-hidden="true">25-操作可视图</figcaption></figure><h5 id="模拟-翻转链表">模拟 + 翻转链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseKGroup</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 用于接壤当前组翻转后的结果</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 辅助指针，帮助翻转链表（把K个链表的最后一个与下一组断开）</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> p;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 辅助指针走到下一组的前一个结点，断开，方便翻转</span></span><br><span class="line">            <span class="keyword">while</span> (q != <span class="literal">null</span> &amp;&amp; count != k - <span class="number">1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (q == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 即使最后一组不足K个，别忘记接上</span></span><br><span class="line">                pre.next = p;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 下一轮的起点</span></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> q.next;</span><br><span class="line">            q.next = <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 翻转当前组，并且接壤</span></span><br><span class="line">            pre.next = reverseList(p);</span><br><span class="line">            <span class="comment">// p作为函数传值进去，其本质指向的还是未翻转前的第一个结点，然后反转后就是最后一个结点</span></span><br><span class="line">            pre = p;</span><br><span class="line">            p = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> p.next;</span><br><span class="line">            p.next = pre;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并-k-个升序链表"><ahref="https://leetcode.cn/problems/merge-k-sorted-lists/">23. 合并 K个升序链表</a></h3><p>给你一个链表数组，每个链表都已经按升序排列。</p><p>请你将所有链表合并到一个升序链表中，返回合并后的链表。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：lists = [[1,4,5],[1,3,4],[2,6]]</span><br><span class="line">输出：[1,1,2,3,4,4,5,6]</span><br><span class="line">解释：链表数组如下：</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">将它们合并到一个有序链表中得到。</span><br><span class="line">1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lists = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：lists = [[]]</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>k == lists.length</code></li><li><code>0 &lt;= k &lt;= 10^4</code></li><li><code>0 &lt;= lists[i].length &lt;= 500</code></li><li><code>-10^4 &lt;= lists[i][j] &lt;= 10^4</code></li><li><code>lists[i]</code> 按 <strong>升序</strong> 排列</li><li><code>lists[i].length</code> 的总和不超过 <code>10^4</code></li></ul><h4 id="算法分析-32">算法分析</h4><h5 id="分治-归并">分治 + 归并</h5><p>我们能实现的操作：两两合并；剩下的就递归处理，递归到最深层，类似归并排序，拆分到不可拆，随后向上合并。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKLists</span><span class="params">(ListNode[] lists)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeKListsHelper(lists, <span class="number">0</span>, lists.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归拆分链表数组，两两合并</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">mergeKListsHelper</span><span class="params">(ListNode[] lists, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">            <span class="keyword">return</span> lists[left];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">leftList</span> <span class="operator">=</span> mergeKListsHelper(lists, left, mid);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">rightList</span> <span class="operator">=</span> mergeKListsHelper(lists, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> merge2Lists(leftList, rightList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最基础的操作：合并两个链表</span></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">merge2Lists</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="literal">null</span> &amp;&amp; l2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class="line">                p.next = l1;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p.next = l2;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next = l1 == <span class="literal">null</span> ? l2 : l1;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lru-缓存"><a href="https://leetcode.cn/problems/lru-cache/">146.LRU 缓存</a></h3><p>请你设计并实现一个满足 <a href="https://baike.baidu.com/item/LRU">LRU(最近最少使用) 缓存</a> 约束的数据结构。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以 <strong>正整数</strong>作为容量 <code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code>存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字<code>key</code> 已经存在，则变更其数据值 <code>value</code>；如果不存在，则向缓存中插入该组 <code>key-value</code>。如果插入操作导致关键字数量超过 <code>capacity</code> ，则应该<strong>逐出</strong> 最久未使用的关键字。</li></ul><p>函数 <code>get</code> 和 <code>put</code> 必须以 <code>O(1)</code>的平均时间复杂度运行。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // 缓存是 &#123;1=1&#125;</span><br><span class="line">lRUCache.put(2, 2); // 缓存是 &#123;1=1, 2=2&#125;</span><br><span class="line">lRUCache.get(1);    // 返回 1</span><br><span class="line">lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span><br><span class="line">lRUCache.get(2);    // 返回 -1 (未找到)</span><br><span class="line">lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span><br><span class="line">lRUCache.get(1);    // 返回 -1 (未找到)</span><br><span class="line">lRUCache.get(3);    // 返回 3</span><br><span class="line">lRUCache.get(4);    // 返回 4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= capacity &lt;= 3000</code></li><li><code>0 &lt;= key &lt;= 10000</code></li><li><code>0 &lt;= value &lt;= 105</code></li><li>最多调用 <code>2 * 10^5</code> 次 <code>get</code> 和<code>put</code></li></ul><h4 id="算法分析-33">算法分析</h4><h5 id="哈希表-双向链表">哈希表 + 双向链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    Node head;</span><br><span class="line">    Node tail;</span><br><span class="line">    Map&lt;Integer, Node&gt; map;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(capacity);</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">Node</span>();</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.pre = head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新结点</span></span><br><span class="line">        moveToHead(node);</span><br><span class="line">        <span class="keyword">return</span> node.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> map.get(key);</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            node.value = value;</span><br><span class="line">            moveToHead(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断是否超出容量</span></span><br><span class="line">        <span class="keyword">if</span> (size == capacity) &#123;</span><br><span class="line">            map.remove(tail.pre.key);</span><br><span class="line">            delete(tail.pre);</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line">        node = <span class="keyword">new</span> <span class="title class_">Node</span>(key, value);</span><br><span class="line">        map.put(key, node);</span><br><span class="line">        addHead(node);</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 头插</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        node.pre = head;</span><br><span class="line"></span><br><span class="line">        head.next.pre = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 将结点从当前位置删除</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        node.pre.next = node.next;</span><br><span class="line">        node.next.pre = node.pre;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">        delete(node);</span><br><span class="line">        addHead(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> key;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    Node pre;</span><br><span class="line">    Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树">二叉树</h1><h2 id="简单-3">简单</h2><h3 id="二叉树的中序遍历"><ahref="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94.二叉树的中序遍历</a></h3><p>给定一个二叉树的根节点 <code>root</code> ，返回 <em>它的<strong>中序</strong> 遍历</em> 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/inorder_1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,null,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[0, 100]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><h4 id="算法分析-34">算法分析</h4><h5 id="递归-4">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        inorderTraversal(root.left);</span><br><span class="line">        ans.add(root.val);</span><br><span class="line">        inorderTraversal(root.right);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="迭代-3">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">curr</span> <span class="operator">=</span> root;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(curr);</span><br><span class="line">                curr = curr.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                ans.add(pop.val);</span><br><span class="line">                <span class="comment">//当前pop的结点，左子树已经遍历完毕，右子树不确定</span></span><br><span class="line">                <span class="keyword">if</span> (pop.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    curr = pop.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="morris遍历">morris遍历</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">rightmost</span> <span class="operator">=</span> cur.left;</span><br><span class="line">            <span class="keyword">if</span> (rightmost != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 第二个条件：防止环</span></span><br><span class="line">                <span class="keyword">while</span> (rightmost.right != <span class="literal">null</span> &amp;&amp; rightmost.right != cur) &#123;</span><br><span class="line">                    rightmost = rightmost.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 第一次访问</span></span><br><span class="line">                <span class="keyword">if</span> (rightmost.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                    rightmost.right = cur;</span><br><span class="line">                    <span class="comment">// cur直接去往左子树，因为左子树遍历完，遍历到右子树也就是rightmost的时候，直接走搭的线索就能回到原处cur</span></span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 第二次访问</span></span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 断开线索</span></span><br><span class="line">                    rightmost.right = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(cur.val);</span><br><span class="line">            cur = cur.right;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最大深度"><ahref="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.二叉树的最大深度</a></h3><p>给定一个二叉树 <code>root</code> ，返回其最大深度。</p><p>二叉树的 <strong>最大深度</strong>是指从根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/tmp-tree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,null,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点的数量在 <code>[0, 10^4]</code> 区间内。</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h4 id="算法分析-35">算法分析</h4><h5 id="递归-5">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> root==<span class="literal">null</span>? <span class="number">0</span> : Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="迭代-4">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxDepth</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                 <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>)&#123;</span><br><span class="line">                    queue.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="翻转二叉树"><ahref="https://leetcode.cn/problems/invert-binary-tree/">226.翻转二叉树</a></h3><p>给你一棵二叉树的根节点 <code>root</code>，翻转这棵二叉树，并返回其根节点。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/invert1-tree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [4,2,7,1,3,6,9]</span><br><span class="line">输出：[4,7,2,9,6,3,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/invert2-tree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：[2,3,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目范围在 <code>[0, 100]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h4 id="算法分析-36">算法分析</h4><h5 id="递归-6">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> invertTree(root.left);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> invertTree(root.right);</span><br><span class="line">        root.right = right;</span><br><span class="line">        root.left = left;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="迭代-5">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">invertTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="comment">// 终止条件</span></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> poll.right;</span><br><span class="line">            poll.right = poll.left;</span><br><span class="line">            poll.left = right;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(poll.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                queue.offer(poll.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对称二叉树"><ahref="https://leetcode.cn/problems/symmetric-tree/">101.对称二叉树</a></h3><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/1698026966-JDYPDU-image.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,2,3,4,4,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/1698027008-nPFLbM-image.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,2,null,3,null,3]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[1, 1000]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶：</strong>你可以运用递归和迭代两种方法解决这个问题吗？</p><h4 id="算法分析-37">算法分析</h4><h5 id="递归-7">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hot39</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> equal(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equal</span><span class="params">(TreeNode l1, TreeNode l2)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span> &amp;&amp; l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1 == <span class="literal">null</span> || l2 == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l1.val != l2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> equal(l1.left, l2.right) &amp;&amp; equal(l1.right, l2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="迭代-6">迭代</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSymmetric</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.offer(root.left);</span><br><span class="line">        queue.offer(root.right);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (left == <span class="literal">null</span> &amp;&amp; right == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (left.val != right.val) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                queue.offer(left.left);</span><br><span class="line">                queue.offer(right.right);</span><br><span class="line"></span><br><span class="line">                queue.offer(left.right);</span><br><span class="line">                queue.offer(right.left);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的直径"><ahref="https://leetcode.cn/problems/diameter-of-binary-tree/">543.二叉树的直径</a></h3><p>给你一棵二叉树的根节点，返回该树的 <strong>直径</strong> 。</p><p>二叉树的 <strong>直径</strong> 是指树中任意两个节点之间最长路径的<strong>长度</strong> 。这条路径可能经过也可能不经过根节点<code>root</code> 。</p><p>两节点之间路径的 <strong>长度</strong> 由它们之间边数表示。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/diamtree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3,4,5]</span><br><span class="line">输出：3</span><br><span class="line">解释：3 ，取路径 [4,2,1,3] 或 [5,2,1,3] 的长度。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[1, 10^4]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h4 id="算法分析-38">算法分析</h4><h5 id="递归-8">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//左右两个方向的最大长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> dfs(root.left) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> dfs(root.right) + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 记录每次路径的最大 结果</span></span><br><span class="line"></span><br><span class="line">        ans = Math.max(ans, left + right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="section"></h5><h2 id="中等-8">中等</h2><h3 id="二叉树的层序遍历"><ahref="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102.二叉树的层序遍历</a></h3><p>给你二叉树的根节点 <code>root</code> ，返回其节点值的<strong>层序遍历</strong> 。 （即逐层地，从左到右访问所有节点）。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/tree1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,9,20,null,null,15,7]</span><br><span class="line">输出：[[3],[9,20],[15,7]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[0, 2000]</code> 内</li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h4 id="算法分析-39">算法分析</h4><h5 id="bfs">BFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">levelOrder</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;TreeNode&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(size);</span><br><span class="line">            <span class="keyword">while</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                list.add(poll.val);</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.offer(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line">            ans.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将有序数组转换为二叉搜索树"><ahref="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/">108.将有序数组转换为二叉搜索树</a></h3><p>给你一个整数数组 <code>nums</code> ，其中元素已经按<strong>升序</strong> 排列，请你将其转换为一棵</p><p>平衡</p><p>二叉搜索树。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/btree1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-10,-3,0,5,9]</span><br><span class="line">输出：[0,-3,9,-10,null,5]</span><br><span class="line">解释：[0,-10,5,null,-3,null,9] 也将被视为正确答案：</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/btree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3]</span><br><span class="line">输出：[3,1]</span><br><span class="line">解释：[1,null,3] 和 [3,1] 都是高度平衡二叉搜索树。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li>^<code>-10^4 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 按 <strong>严格递增</strong> 顺序排列</li></ul><h4 id="算法分析-40">算法分析</h4><h5 id="递归-9">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">sortedArrayToBST</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> helper(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(nums[mid]);</span><br><span class="line">        root.left = helper(nums, left, mid - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(nums, mid + <span class="number">1</span>, right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证二叉搜索树"><ahref="https://leetcode.cn/problems/validate-binary-search-tree/">98.验证二叉搜索树</a></h3><p>给你一个二叉树的根节点 <code>root</code>，判断其是否是一个有效的二叉搜索树。</p><p><strong>有效</strong> 二叉搜索树定义如下：</p><ul><li><p>节点的左</p><p>子树</p><p>只包含</p><p>小于</p><p>当前节点的数。</p></li><li><p>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</p></li><li><p>所有左子树和右子树自身必须也是二叉搜索树。</p></li></ul><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/tree1-17101252332671.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [2,1,3]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/tree2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [5,1,4,null,null,3,6]</span><br><span class="line">输出：false</span><br><span class="line">解释：根节点的值是 5 ，但是右子节点的值是 4 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目范围在<code>[1, 10^4]</code> 内</li><li><code>-2^31 &lt;= Node.val &lt;= 2^31 - 1</code></li></ul><h4 id="算法分析-41">算法分析</h4><h5 id="递归-10">递归</h5><p>采用long类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValidBST</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doisValid(root, Long.MAX_VALUE, Long.MIN_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">doisValid</span><span class="params">(TreeNode root, <span class="type">long</span> max, <span class="type">long</span> min)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root.val &lt;= min || root.val &gt;= max)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> doisValid(root.left, root.val, min) &amp;&amp; doisValid(root.right, max, root.val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉搜索树中第k小的元素"><ahref="https://leetcode.cn/problems/kth-smallest-element-in-a-bst/">230.二叉搜索树中第K小的元素</a></h3><p>给定一个二叉搜索树的根节点 <code>root</code> ，和一个整数<code>k</code> ，请你设计一个算法查找其中第 <code>k</code>个最小元素（从 1 开始计数）。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/kthtree1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,1,4,null,2], k = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/kthtree2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [5,3,6,2,4,null,null,1], k = 3</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中的节点数为 <code>n</code> 。</li><li><code>1 &lt;= k &lt;= n &lt;= 10^4</code></li><li><code>0 &lt;= Node.val &lt;= 10^4</code></li></ul><p><strong>进阶：</strong>如果二叉搜索树经常被修改（插入/删除操作）并且你需要频繁地查找第<code>k</code> 小的值，你将如何优化算法？</p><h4 id="算法分析-42">算法分析</h4><h5 id="中序遍历">中序遍历</h5><p>树的中序遍历就是排序，在遍历过程中注意对K进行计数减，待到k减为0，返回即可</p><h6 id="递归-11">递归</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.left);</span><br><span class="line">        <span class="keyword">if</span> (--k == <span class="number">0</span>) &#123;</span><br><span class="line">            ans = root.val;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="迭代-7">迭代</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">kthSmallest</span><span class="params">(TreeNode root, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">                stack.push(p);</span><br><span class="line">                p = p.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (--k == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans = pop.val;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (pop.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    p = pop.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的右视图"><ahref="https://leetcode.cn/problems/binary-tree-right-side-view/">199.二叉树的右视图</a></h3><p>给定一个二叉树的 <strong>根节点</strong><code>root</code>，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p><p><strong>示例 1:</strong></p><figure><img src="https://assets.leetcode.com/uploads/2021/02/14/tree.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,2,3,null,5,null,4]</span><br><span class="line">输出: [1,3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,3]</span><br><span class="line">输出: [1,3]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: []</span><br><span class="line">输出: []</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li>二叉树的节点个数的范围是 <code>[0,100]</code></li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><h4 id="算法分析-43">算法分析</h4><h5 id="反向层序遍历">反向层序遍历</h5><p>正常层序遍历是自左往右，我们让进入队列的顺序反向一下，先进去右子树，这样层序遍历的时候也是从右边开始，把第一个结点加入即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;TreeNode&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="comment">// 用来标记是否是最右结点，因为是反向层序（右 -&gt; 左)，一般遍历到这一层第一个结点就是最右</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">right</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty() &amp;&amp; size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (right) &#123;</span><br><span class="line">                    ans.add(poll.val);</span><br><span class="line">                    right = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.add(poll.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (poll.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                    queue.add(poll.left);</span><br><span class="line">                &#125;</span><br><span class="line">                size--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归-12">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">rightSideView</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个参数：递归的深度，类似层序遍历的boolean指针，这样遍历到下一层，发现深度==集合的元素个数，那就表示进入新的一层</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> depth)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (depth == ans.size()) &#123;</span><br><span class="line">            ans.add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">        dfs(root.right, depth);</span><br><span class="line">        dfs(root.left, depth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树展开为链表"><ahref="https://leetcode.cn/problems/flatten-binary-tree-to-linked-list/">114.二叉树展开为链表</a></h3><p>给你二叉树的根结点 <code>root</code> ，请你将它展开为一个单链表：</p><ul><li>展开后的单链表应该同样使用 <code>TreeNode</code> ，其中<code>right</code> 子指针指向链表中下一个结点，而左子指针始终为<code>null</code> 。</li><li>展开后的单链表应该与二叉树 <ahref="https://baike.baidu.com/item/先序遍历/6442839?fr=aladdin"><strong>先序遍历</strong></a>顺序相同。</li></ul><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/flaten.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,5,3,4,null,6]</span><br><span class="line">输出：[1,null,2,null,3,null,4,null,5,null,6]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中结点数在范围 <code>[0, 2000]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><p><strong>进阶：</strong>你可以使用原地算法（<code>O(1)</code>额外空间）展开这棵树吗？</p><h4 id="算法分析-44">算法分析</h4><h5 id="递归-13">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line"></span><br><span class="line">        helper(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">helper</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">leftList</span> <span class="operator">=</span> helper(root.left);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> root.right;</span><br><span class="line">        root.right = leftList;</span><br><span class="line">        root.left = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (p.right != <span class="literal">null</span>) &#123;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">        p.right = helper(right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空间复杂度：O(logn)</p><h5 id="迭代空间o1">迭代(空间O(1)）</h5><p>连接链表最关键就是，以root为中点，左子树为要接上的结点，然后左子树转化为链表后的末尾（左子树的最右结点）必须找到然后接上处理后的右子树。</p><p>这个解法没有递归性质，过程如下(借鉴官方题解的图)：</p><figure><img src="leetcode-Hot100题目汇总/image-20240314085418798.png"alt="114:step-1" /><figcaption aria-hidden="true">114:step-1</figcaption></figure><figure><img src="leetcode-Hot100题目汇总/image-20240314085445946.png"alt="114:step-2" /><figcaption aria-hidden="true">114:step-2</figcaption></figure><p>依此类推......</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">flatten</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">p</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p.left != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 相对于当前结点的next</span></span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">next</span> <span class="operator">=</span> p.left;</span><br><span class="line">                <span class="type">TreeNode</span> <span class="variable">pre</span> <span class="operator">=</span> next;</span><br><span class="line">                <span class="keyword">while</span> (pre.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                    pre = pre.right;</span><br><span class="line">                &#125;</span><br><span class="line">                pre.right = p.right;</span><br><span class="line">                p.right = p.left;</span><br><span class="line">                p.left = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从前序与中序遍历序列构造二叉树"><ahref="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105.从前序与中序遍历序列构造二叉树</a></h3><p>给定两个整数数组 <code>preorder</code> 和 <code>inorder</code> ，其中<code>preorder</code> 是二叉树的<strong>先序遍历</strong>，<code>inorder</code>是同一棵树的<strong>中序遍历</strong>，请构造二叉树并返回其根节点。</p><p><strong>示例 1:</strong></p><figure><img src="leetcode-Hot100题目汇总/tree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]</span><br><span class="line">输出: [3,9,20,null,null,15,7]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: preorder = [-1], inorder = [-1]</span><br><span class="line">输出: [-1]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= preorder.length &lt;= 3000</code></li><li><code>inorder.length == preorder.length</code></li><li><code>-3000 &lt;= preorder[i], inorder[i] &lt;= 3000</code></li><li><code>preorder</code> 和 <code>inorder</code> 均<strong>无重复</strong> 元素</li><li><code>inorder</code> 均出现在 <code>preorder</code></li><li><code>preorder</code> <strong>保证</strong>为二叉树的前序遍历序列</li><li><code>inorder</code> <strong>保证</strong>为二叉树的中序遍历序列</li></ul><h4 id="算法分析-45">算法分析</h4><h5 id="递归-哈希表优化">递归 +哈希表优化</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">buildTree</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inorder.length; i++) &#123;</span><br><span class="line">            hashMap.put(inorder[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> helper(preorder, inorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TreeNode <span class="title function_">helper</span><span class="params">(<span class="type">int</span>[] preorder, <span class="type">int</span>[] inorder, <span class="type">int</span> prel, <span class="type">int</span> prer, <span class="type">int</span> inl, <span class="type">int</span> inr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prel &gt; prer) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeNode</span>(preorder[prel]);</span><br><span class="line">        <span class="comment">// 找到根节点在inorder里的下标，这里可以用哈希表优化</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">idx</span> <span class="operator">=</span> hashMap.get(preorder[prel]);</span><br><span class="line">        <span class="comment">// 根据这个下标去计算左右子树的结点的个数，以及限定数组的范围</span></span><br><span class="line">        root.left = helper(preorder, inorder, prel + <span class="number">1</span>, prel + idx - inl, inl, idx - <span class="number">1</span>);</span><br><span class="line">        root.right = helper(preorder, inorder, prel + idx - inl + <span class="number">1</span>, prer, idx + <span class="number">1</span>, inr);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路径总和-iii"><ahref="https://leetcode.cn/problems/path-sum-iii/">437. 路径总和III</a></h3><p>给定一个二叉树的根节点 <code>root</code> ，和一个整数<code>targetSum</code> ，求该二叉树里节点值之和等于<code>targetSum</code> 的 <strong>路径</strong> 的数目。</p><p><strong>路径</strong>不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/pathsum3-1-tree.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8</span><br><span class="line">输出：3</span><br><span class="line">解释：和等于 8 的路径有 3 条，如图所示。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li>二叉树的节点个数的范围是 <code>[0,1000]</code></li><li><code>-10^9 &lt;= Node.val &lt;= 10^9</code></li><li><code>-1000 &lt;= targetSum &lt;= 1000</code></li></ul><h4 id="算法分析-46">算法分析</h4><h5 id="dfs">dfs</h5><p>穷举全部路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        res += rootSum(root, targetSum);</span><br><span class="line">        res += pathSum(root.left, targetSum);</span><br><span class="line">        res += pathSum(root.right, targetSum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 以当前结点为起点遍历整个树</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param  long:防止溢出</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rootSum</span><span class="params">(TreeNode root, <span class="type">long</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> root.val;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res++;</span><br><span class="line">        &#125;</span><br><span class="line">        res += rootSum(root.left, target - sum);</span><br><span class="line">        res += rootSum(root.right, target - sum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀和-1">前缀和</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Long, Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pathSum</span><span class="params">(TreeNode root, <span class="type">int</span> targetSum)</span> &#123;</span><br><span class="line">        hash.put(<span class="number">0L</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> dfs(root, targetSum, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root, <span class="type">int</span> target, <span class="type">long</span> curr)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        curr += root.val;</span><br><span class="line"></span><br><span class="line">        res += hash.getOrDefault(curr - target, <span class="number">0</span>);</span><br><span class="line">        hash.put(curr, hash.getOrDefault(curr, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        res += dfs(root.left, target, curr);</span><br><span class="line">        res += dfs(root.right, target, curr);</span><br><span class="line">        hash.put(curr, hash.getOrDefault(curr, <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的最近公共祖先"><ahref="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236.二叉树的最近公共祖先</a></h3><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p><ahref="https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin">百度百科</a>中最近公共祖先的定义为：“对于有根树T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/binarytree.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</span><br><span class="line">输出：3</span><br><span class="line">解释：节点 5 和节点 1 的最近公共祖先是节点 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/binarytree.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4</span><br><span class="line">输出：5</span><br><span class="line">解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2], p = 1, q = 2</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[2, 10^5]</code> 内。</li><li><code>-10^9 &lt;= Node.val &lt;= 10^9</code></li><li>所有 <code>Node.val</code> <code>互不相同</code> 。</li><li><code>p != q</code></li><li><code>p</code> 和 <code>q</code> 均存在于给定的二叉树中。</li></ul><h4 id="算法分析-47">算法分析</h4><h5 id="dfs-1">DFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> TreeNode <span class="title function_">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span> || p == root || q == root) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">left</span> <span class="operator">=</span> lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">right</span> <span class="operator">=</span> lowestCommonAncestor(root.right, p, q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (left != <span class="literal">null</span> &amp;&amp; right != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left == <span class="literal">null</span> ? right : left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-4">困难</h2><h3 id="二叉树中的最大路径和"><ahref="https://leetcode.cn/problems/binary-tree-maximum-path-sum/">124.二叉树中的最大路径和</a></h3><p>二叉树中的 <strong>路径</strong>被定义为一条节点序列，序列中每对相邻节点之间都存在一条边。同一个节点在一条路径序列中<strong>至多出现一次</strong> 。该路径 <strong>至少包含一个</strong>节点，且不一定经过根节点。</p><p><strong>路径和</strong> 是路径中各节点值的总和。</p><p>给你一个二叉树的根节点 <code>root</code> ，返回其<strong>最大路径和</strong> 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/exx1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [1,2,3]</span><br><span class="line">输出：6</span><br><span class="line">解释：最优路径是 2 -&gt; 1 -&gt; 3 ，路径和为 2 + 1 + 3 = 6</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/exx2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [-10,9,20,null,null,15,7]</span><br><span class="line">输出：42</span><br><span class="line">解释：最优路径是 15 -&gt; 20 -&gt; 7 ，路径和为 15 + 20 + 7 = 42</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目范围是 <code>[1, 3 * 10^4]</code></li><li><code>-1000 &lt;= Node.val &lt;= 1000</code></li></ul><h4 id="算法分析-48">算法分析</h4><h5 id="dfs-贪心">DFS + 贪心</h5><p>贪心：任意子树返回的最大路径和，小于0就舍弃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxPathSum</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回值：单向路径</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> Math.max(dfs(root.left), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> Math.max(dfs(root.right), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        max = Math.max(max, left + right + root.val);</span><br><span class="line">        <span class="comment">//返回单向路径，这样调用自己的上一层方便接囊  满足路径的定义</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(left, right) + root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图">图</h1><h2 id="中等-9">中等</h2><h3 id="岛屿数量"><ahref="https://leetcode.cn/problems/number-of-islands/">200.岛屿数量</a></h3><p>给你一个由 <code>'1'</code>（陆地）和<code>'0'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class="line">]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class="line">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;]</span><br><span class="line">]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 300</code></li><li><code>grid[i][j]</code> 的值为 <code>'0'</code> 或<code>'1'</code></li></ul><h4 id="算法分析-49">算法分析</h4><h5 id="dfs-2">DFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span> &amp;&amp; !visited[i][j]) &#123;</span><br><span class="line">                    dfs(grid, i, j, visited);</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">boolean</span>[][] visited)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isValid(i, j) || visited[i][j]) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[i][j] = <span class="literal">true</span>;</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j, visited);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>, visited);</span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j, visited);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>, visited);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= x &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：<span class="math inline">\(O(n^2)\)</span></p><h6 id="空间优化">空间优化</h6><p>可以不采用visited数组，直接把访问过的元素变成0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(<span class="type">char</span>[][] grid)</span> &#123;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    dfs(grid, i, j);</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isValid(i, j) ) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(grid[i][j] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> &lt;= x &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bfs-1">BFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> <span class="title function_">numIslands</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nr</span> <span class="operator">=</span> grid.size();</span><br><span class="line">        <span class="keyword">if</span> (!nr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nc</span> <span class="operator">=</span> grid[<span class="number">0</span>].size();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num_islands</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>; r &lt; nr; ++r) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>; c &lt; nc; ++c) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[r][c] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    ++num_islands;</span><br><span class="line">                    grid[r][c] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; neighbors;</span><br><span class="line">                    neighbors.push(&#123;r, c&#125;);</span><br><span class="line">                    <span class="keyword">while</span> (!neighbors.empty()) &#123;</span><br><span class="line">                        <span class="type">auto</span> <span class="variable">rc</span> <span class="operator">=</span> neighbors.front();</span><br><span class="line">                        neighbors.pop();</span><br><span class="line">                        <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> rc.first, col = rc.second;</span><br><span class="line">                        <span class="keyword">if</span> (row - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row-<span class="number">1</span>][col] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row-<span class="number">1</span>, col&#125;);</span><br><span class="line">                            grid[row-<span class="number">1</span>][col] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (row + <span class="number">1</span> &lt; nr &amp;&amp; grid[row+<span class="number">1</span>][col] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row+<span class="number">1</span>, col&#125;);</span><br><span class="line">                            grid[row+<span class="number">1</span>][col] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (col - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[row][col-<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row, col-<span class="number">1</span>&#125;);</span><br><span class="line">                            grid[row][col-<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (col + <span class="number">1</span> &lt; nc &amp;&amp; grid[row][col+<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                            neighbors.push(&#123;row, col+<span class="number">1</span>&#125;);</span><br><span class="line">                            grid[row][col+<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> num_islands;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="腐烂的橘子"><ahref="https://leetcode.cn/problems/rotting-oranges/">994.腐烂的橘子</a></h3><p>在给定的 <code>m x n</code> 网格 <code>grid</code>中，每个单元格可以有以下三个值之一：</p><ul><li>值 <code>0</code> 代表空单元格；</li><li>值 <code>1</code> 代表新鲜橘子；</li><li>值 <code>2</code> 代表腐烂的橘子。</li></ul><p>每分钟，腐烂的橘子 <strong>周围 4 个方向上相邻</strong>的新鲜橘子都会腐烂。</p><p>返回<em>直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回<code>-1</code></em> 。</p><p><strong>示例 1：</strong></p><p><strong><img src="leetcode-Hot100题目汇总/oranges.png"alt="img" /></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[2,1,1],[1,1,0],[0,1,1]]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[2,1,1],[0,1,1],[1,0,1]]</span><br><span class="line">输出：-1</span><br><span class="line">解释：左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个方向上。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[0,2]]</span><br><span class="line">输出：0</span><br><span class="line">解释：因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 10</code></li><li><code>grid[i][j]</code> 仅为 <code>0</code>、<code>1</code> 或<code>2</code></li></ul><h4 id="算法分析-50">算法分析</h4><h5 id="dfs-3">DFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 每次更新橘子腐烂时间是直接覆盖 grid 而 grid 中已经有2了，所以从2开始</span></span><br><span class="line">                    dfs(grid, i, j, <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">maxTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    maxTime = Math.max(maxTime, grid[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxTime == <span class="number">0</span> ? <span class="number">0</span> : maxTime - <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[][] grid, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isValid(i, j)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (grid[i][j] != <span class="number">1</span> &amp;&amp; grid[i][j] &lt; time) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        grid[i][j] = time;</span><br><span class="line">        dfs(grid, i + <span class="number">1</span>, j, time + <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i - <span class="number">1</span>, j, time + <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i, j + <span class="number">1</span>, time + <span class="number">1</span>);</span><br><span class="line">        dfs(grid, i, j - <span class="number">1</span>, time + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="bfs-2">BFS</h5><p>BFS做这题由于迭代的特性，其时钟是统一的，所以无需向DFS那样记录每个位置被感染时最小的分钟数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        m = grid.length;</span><br><span class="line">        n = grid[<span class="number">0</span>].length;</span><br><span class="line">        LinkedList&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 总橘子数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; i, j &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (; count &gt; <span class="number">0</span> &amp;&amp; !queue.isEmpty();) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                <span class="type">int</span>[] poll = queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>], y = poll[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (isValid(x + <span class="number">1</span>, y) &amp;&amp; grid[x + <span class="number">1</span>][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                    grid[x + <span class="number">1</span>][y] = <span class="number">2</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; x + <span class="number">1</span>, y &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isValid(x - <span class="number">1</span>, y) &amp;&amp; grid[x - <span class="number">1</span>][y] == <span class="number">1</span>) &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                    grid[x - <span class="number">1</span>][y] = <span class="number">2</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; x - <span class="number">1</span>, y &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isValid(x, y + <span class="number">1</span>) &amp;&amp; grid[x][y + <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                    grid[x][y + <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; x, y + <span class="number">1</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (isValid(x, y - <span class="number">1</span>) &amp;&amp; grid[x][y - <span class="number">1</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">                    count--;</span><br><span class="line">                    grid[x][y - <span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    queue.add(<span class="keyword">new</span> <span class="title class_">int</span>[] &#123; x, y - <span class="number">1</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span> ? ans : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="课程表"><ahref="https://leetcode.cn/problems/course-schedule/">207.课程表</a></h3><p>你这个学期必须选修 <code>numCourses</code> 门课程，记为<code>0</code> 到 <code>numCourses - 1</code> 。</p><p>在选修某些课程之前需要一些先修课程。 先修课程按数组<code>prerequisites</code> 给出，其中<code>prerequisites[i] = [ai, bi]</code> ，表示如果要学习课程<code>ai</code> 则 <strong>必须</strong> 先学习课程 <code>bi</code>。</p><ul><li>例如，先修课程对 <code>[0, 1]</code> 表示：想要学习课程<code>0</code> ，你需要先完成课程 <code>1</code> 。</li></ul><p>请你判断是否可能完成所有课程的学习？如果可以，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numCourses = 2, prerequisites = [[1,0]]</span><br><span class="line">输出：true</span><br><span class="line">解释：总共有 2 门课程。学习课程 1 之前，你需要完成课程 0 。这是可能的。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numCourses = 2, prerequisites = [[1,0],[0,1]]</span><br><span class="line">输出：false</span><br><span class="line">解释：总共有 2 门课程。学习课程 1 之前，你需要先完成课程 0 ；并且学习课程 0 之前，你还应先完成课程 1 。这是不可能的。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= numCourses &lt;= 2000</code></li><li><code>0 &lt;= prerequisites.length &lt;= 5000</code></li><li><code>prerequisites[i].length == 2</code></li><li><code>0 &lt;= ai, bi &lt; numCourses</code></li><li><code>prerequisites[i]</code> 中的所有课程对<strong>互不相同</strong></li></ul><h4 id="算法分析-51">算法分析</h4><h5 id="拓扑排序-bfs">拓扑排序 + BFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canFinish</span><span class="params">(<span class="type">int</span> numCourses, <span class="type">int</span>[][] prerequisites)</span> &#123;</span><br><span class="line">        <span class="comment">// 入度表</span></span><br><span class="line">        <span class="type">int</span>[] indegree = <span class="keyword">new</span> <span class="title class_">int</span>[numCourses];</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; edges = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            edges.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] p : prerequisites) &#123;</span><br><span class="line">            indegree[p[<span class="number">0</span>]]++;</span><br><span class="line">            edges.get(p[<span class="number">1</span>]).add(p[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;Integer&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; numCourses; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indegree[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                queue.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">poll</span> <span class="operator">=</span> queue.poll();</span><br><span class="line">            numCourses--;</span><br><span class="line">            List&lt;Integer&gt; list = edges.get(poll);</span><br><span class="line">            <span class="keyword">for</span> (Integer integer : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (--indegree[integer] == <span class="number">0</span>) &#123;</span><br><span class="line">                    queue.add(integer);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> numCourses == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-trie-前缀树"><ahref="https://leetcode.cn/problems/implement-trie-prefix-tree/">208.实现 Trie (前缀树)</a></h3><p><strong><ahref="https://baike.baidu.com/item/字典树/9825209?fr=aladdin">Trie</a></strong>（发音类似"try"）或者说 <strong>前缀树</strong>是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串<code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串<code>word</code> 在前缀树中，返回<code>true</code>（即，在检索之前已经插入）；否则，返回<code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code>如果之前已经插入的字符串 <code>word</code> 的前缀之一为<code>prefix</code> ，返回 <code>true</code> ；否则，返回<code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]</span><br><span class="line">[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]</span><br><span class="line">输出</span><br><span class="line">[null, null, true, false, true, null, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   // 返回 True</span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 False</span><br><span class="line">trie.startsWith(&quot;app&quot;); // 返回 True</span><br><span class="line">trie.insert(&quot;app&quot;);</span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 True</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li><li><code>word</code> 和 <code>prefix</code> 仅由小写英文字母组成</li><li><code>insert</code>、<code>search</code> 和 <code>startsWith</code>调用次数 <strong>总计</strong> 不超过 <code>3 * 10^4</code> 次</li></ul><h4 id="算法分析-52">算法分析</h4><p>前缀树如图构造：</p><figure><img src="leetcode-Hot100题目汇总/image-20240322212519009.png"alt="前缀树" /><figcaption aria-hidden="true">前缀树</figcaption></figure><h5 id="模拟">模拟</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line">    Trie[] children;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                cur.children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isEnd = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (cur.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur.isEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prefix.length();</span><br><span class="line">            <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">                <span class="keyword">if</span> (cur.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cur = cur.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="回溯">回溯</h1><h2 id="中等-10">中等</h2><h3 id="全排列"><a href="https://leetcode.cn/problems/permutations/">46.全排列</a></h3><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其<em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong>返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1]</span><br><span class="line">输出：[[0,1],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><h4 id="算法分析-53">算法分析</h4><h5 id="dfs回溯">DFS回溯</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        dfs(ans, visited, nums, path);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; ans, <span class="type">boolean</span>[] visited, <span class="type">int</span>[] nums, List&lt;Integer&gt; path)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (path.size() == n) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (visited[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            dfs(ans, visited, nums, path);</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="子集"><a href="https://leetcode.cn/problems/subsets/">78.子集</a></h3><p>给你一个整数数组 <code>nums</code> ，数组中的元素<strong>互不相同</strong> 。返回该数组所有可能的</p><p>子集</p><p>（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按<strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0]</span><br><span class="line">输出：[[],[0]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有元素 <strong>互不相同</strong></li></ul><h4 id="算法分析-54">算法分析</h4><h5 id="dfs-有序去重">DFS + 有序去重</h5><p>为了保证集合不重复，以当前遍历下标为基准，按照id递增，进行去重操作。由于集合的无序性，必须要保证后面的元素不会访问前面的元素而造成重复现象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        dfs(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;</span><br><span class="line">            path.add(nums[j]);</span><br><span class="line">            dfs(nums, j + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="电话号码的字母组合"><ahref="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></h3><p>给定一个仅包含数字 <code>2-9</code>的字符串，返回所有它能表示的字母组合。答案可以按<strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1不对应任何字母。</p><figure><img src="leetcode-Hot100题目汇总/200px-telephone-keypad2svg.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;23&quot;</span><br><span class="line">输出：[&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;&quot;</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：digits = &quot;2&quot;</span><br><span class="line">输出：[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> 是范围 <code>['2', '9']</code>的一个数字。</li></ul><h4 id="算法分析-55">算法分析</h4><h5 id="dfs-4">DFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    Map&lt;Character,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()&#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;2&#x27;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;3&#x27;</span>,<span class="string">&quot;def&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;4&#x27;</span>,<span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;5&#x27;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;6&#x27;</span>,<span class="string">&quot;mno&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;7&#x27;</span>,<span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;8&#x27;</span>,<span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;9&#x27;</span>,<span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">path</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> digits.length();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        backTrack(digits, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(String digits, <span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> digits.length();</span><br><span class="line">        <span class="keyword">if</span>(path.length() == n) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">String</span>(path.toString()));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> digits.charAt(idx);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> map.get(c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            path.append(str.charAt(i));</span><br><span class="line">            backTrack(digits, idx + <span class="number">1</span>);</span><br><span class="line">            path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合总和"><ahref="https://leetcode.cn/problems/combination-sum/">39.组合总和</a></h3><p>给你一个 <strong>无重复元素</strong> 的整数数组<code>candidates</code> 和一个目标整数 <code>target</code> ，找出<code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按<strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以<strong>无限制重复被选取</strong>。如果至少一个数字的被选数量不同，则两种组合是不同的。</p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于<code>150</code> 个。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：candidates = [2,3,6,7], target = 7</span><br><span class="line">输出：[[2,2,3],[7]]</span><br><span class="line">解释：</span><br><span class="line">2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。</span><br><span class="line">7 也是一个候选， 7 = 7 。</span><br><span class="line">仅有这两种组合。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2,3,5], target = 8</span><br><span class="line">输出: [[2,2,2,2],[2,3,3],[3,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = [2], target = 1</span><br><span class="line">输出: []</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= candidates.length &lt;= 30</code></li><li><code>2 &lt;= candidates[i] &lt;= 40</code></li><li><code>candidates</code> 的所有元素 <strong>互不相同</strong></li><li><code>1 &lt;= target &lt;= 40</code></li></ul><h4 id="算法分析-56">算法分析</h4><h5 id="dfs-5">DFS</h5><p>本题还是要避免后面的元素访问前面的元素，不然就会出现这种情况：</p><figure><img src="leetcode-Hot100题目汇总/image-20240328162732516.png"alt="39:错误示例" /><figcaption aria-hidden="true">39:错误示例</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        dfs(candidates, target, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(target == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> candidates.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; n; i++) &#123;</span><br><span class="line">            target -= candidates[i];</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            dfs(candidates, target, i);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            target += candidates[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="括号生成"><ahref="https://leetcode.cn/problems/generate-parentheses/">22.括号生成</a></h3><p>数字 <code>n</code>代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且<strong>有效的</strong> 括号组合。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[&quot;()&quot;]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 8</code></li></ul><h4 id="算法分析-57">算法分析</h4><h5 id="dfs-6">DFS</h5><p>均分左右括号的数量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">path</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">generateParenthesis</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        dfs(n, n);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(left == <span class="number">0</span> &amp;&amp; right == <span class="number">0</span>) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">String</span>(path.toString()));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; <span class="number">0</span> || right &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        path.append(<span class="string">&quot;(&quot;</span>);</span><br><span class="line">        dfs(left - <span class="number">1</span>, right );</span><br><span class="line">        path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        path.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        dfs(left, right - <span class="number">1</span> );</span><br><span class="line">        path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单词搜索"><ahref="https://leetcode.cn/problems/word-search/">79. 单词搜索</a></h3><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code>和一个字符串单词 <code>word</code> 。如果 <code>word</code>存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code>。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/word2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCCED&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/word-1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;SEE&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure><img src="leetcode-Hot100题目汇总/word3.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;E&quot;],[&quot;S&quot;,&quot;F&quot;,&quot;C&quot;,&quot;S&quot;],[&quot;A&quot;,&quot;D&quot;,&quot;E&quot;,&quot;E&quot;]], word = &quot;ABCB&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == board.length</code></li><li><code>n = board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 6</code></li><li><code>1 &lt;= word.length &lt;= 15</code></li><li><code>board</code> 和 <code>word</code> 仅由大小写英文字母组成</li></ul><h4 id="算法分析-58">算法分析</h4><h5 id="dfs-7">DFS</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> n ;</span><br><span class="line">    <span class="type">int</span> m ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">exist</span><span class="params">(<span class="type">char</span>[][] board, String word)</span> &#123;</span><br><span class="line">        n = board.length;</span><br><span class="line">        m = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">boolean</span>[][] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][m];</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j] == word.charAt(<span class="number">0</span>)) &#123;</span><br><span class="line">                    flag = dfs(board, word, i, j, <span class="number">0</span>, vis);</span><br><span class="line">                    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] board, String word, <span class="type">int</span> i, <span class="type">int</span> j, <span class="type">int</span> idx, <span class="type">boolean</span>[][] vis)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == word.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!isValid(i, j) || vis[i][j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(board[i][j] != word.charAt(idx)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">ans</span> <span class="operator">=</span> dfs(board, word, i + <span class="number">1</span>, j, idx + <span class="number">1</span>, vis) || </span><br><span class="line">        dfs(board, word, i, j + <span class="number">1</span>, idx + <span class="number">1</span>, vis) ||</span><br><span class="line">        dfs(board, word, i - <span class="number">1</span>, j, idx + <span class="number">1</span>, vis) ||</span><br><span class="line">        dfs(board, word, i, j - <span class="number">1</span>, idx + <span class="number">1</span>, vis);</span><br><span class="line">        vis[i][j] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分割回文串"><ahref="https://leetcode.cn/problems/palindrome-partitioning/">131.分割回文串</a></h3><p>给你一个字符串 <code>s</code>，请你将 <code>s</code>分割成一些子串，使每个子串都是 <strong>回文串</strong>。返回<code>s</code> 所有可能的分割方案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aab&quot;</span><br><span class="line">输出：[[&quot;a&quot;,&quot;a&quot;,&quot;b&quot;],[&quot;aa&quot;,&quot;b&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;</span><br><span class="line">输出：[[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 16</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><h4 id="算法分析-59">算法分析</h4><h5 id="回溯-dfs-双指针判断">回溯 + DFS + 双指针判断</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        dfs(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    param2: 字符串的起点，相比于整个字符串，等同于s[0, idx]的字符串已做处理，剩下的找s[i, j]为回文串的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String s, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == s.length()) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path) );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> s.substring(idx, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(isRe(ss)) &#123;</span><br><span class="line">                path.add(ss);</span><br><span class="line">                dfs(s, i + <span class="number">1</span>);</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRe</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left) != s.charAt(right)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="回溯-动归预处理">回溯 + 动归预处理</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">boolean</span>[][] dp;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            Arrays.fill(dp[i], <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                dp[i][j] = (s.charAt(i) == s.charAt(j)) &amp;&amp; dp[i + <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    param2: </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String s, <span class="type">int</span> idx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(idx == s.length()) &#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path) );</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ss</span> <span class="operator">=</span> s.substring(idx, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(dp[idx][i]) &#123;</span><br><span class="line">                path.add(ss);</span><br><span class="line">                dfs(s, i + <span class="number">1</span>);</span><br><span class="line">                path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-5">困难</h2><h3 id="n-皇后"><a href="https://leetcode.cn/problems/n-queens/">51. N皇后</a></h3><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code>个皇后放置在 <code>n×n</code>的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong>的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code>分别代表了皇后和空位。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/queens.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class="line">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[&quot;Q&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul><h4 id="算法分析-60">算法分析</h4><h5 id="回溯-1">回溯</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] chessboard = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(chessboard, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">Array2List</span><span class="params">(<span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每一行转化为一个String</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            list.add(String.copyValueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] chessboard, <span class="type">int</span> idx, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (idx == n) &#123;</span><br><span class="line">            res.add(Array2List(chessboard));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在当前行idx中选择一列填充皇后</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(idx, i, chessboard, n)) &#123;</span><br><span class="line">                chessboard[idx][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                dfs(chessboard, idx + <span class="number">1</span>, n);</span><br><span class="line">                chessboard[idx][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查某个位置处皇后是否合法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span>[][] chessboard, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || j &lt; <span class="number">0</span> || j &gt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 以行为单位只需检测列、对角线</span></span><br><span class="line">        <span class="comment">// 列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>; row &lt; n; row++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[row][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上45°，右上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> i - <span class="number">1</span>, col = j + <span class="number">1</span>; row &gt;= <span class="number">0</span> &amp;&amp; col &lt; n; row--, col++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[row][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上135° 左上方</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> i - <span class="number">1</span>, col = j - <span class="number">1</span>; row &gt;= <span class="number">0</span> &amp;&amp; col &gt;= <span class="number">0</span>; row--, col--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[row][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二分">二分</h1><h2 id="简单-4">简单</h2><h3 id="搜索插入位置"><ahref="https://leetcode.cn/problems/search-insert-position/">35.搜索插入位置</a></h3><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 5</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 2</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,3,5,6], target = 7</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 为 <strong>无重复元素</strong> 的<strong>升序</strong> 排列数组</li><li><code>-10^4 &lt;= target &lt;= 10^4</code></li></ul><h4 id="算法分析-61">算法分析</h4><h5 id="普通二分">普通二分</h5><p>注意left最后停的位置即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-11">中等</h2><h3 id="搜索二维矩阵"><ahref="https://leetcode.cn/problems/search-a-2d-matrix/">74.搜索二维矩阵</a></h3><p>给你一个满足下述两条属性的 <code>m x n</code> 整数矩阵：</p><ul><li>每行中的整数从左到右按非严格递增顺序排列。</li><li>每行的第一个整数大于前一行的最后一个整数。</li></ul><p>给你一个整数 <code>target</code> ，如果 <code>target</code>在矩阵中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/mat.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/mat2-17118511466652.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == matrix.length</code></li><li><code>n == matrix[i].length</code></li><li><code>1 &lt;= m, n &lt;= 100</code></li><li><code>-10^4 &lt;= matrix[i][j], target &lt;= 10^4</code></li></ul><h4 id="算法分析-62">算法分析</h4><h5 id="二分-剪枝">二分 + 剪枝</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">searchMatrix</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length, n = matrix[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝处理</span></span><br><span class="line">            <span class="keyword">if</span>(target &gt; matrix[i][n - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(binarySearch(matrix[i], target)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在排序数组中查找元素的第一个和最后一个位置"><ahref="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34.在排序数组中查找元素的第一个和最后一个位置</a></h3><p>给你一个按照非递减顺序排列的整数数组 <code>nums</code>，和一个目标值<code>target</code>。请你找出给定目标值在数组中的开始位置和结束位置。</p><p>如果数组中不存在目标值 <code>target</code>，返回<code>[-1, -1]</code>。</p><p>你必须设计并实现时间复杂度为 <code>O(log n)</code>的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">输出：[3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [], target = 0</span><br><span class="line">输出：[-1,-1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li><li><code>nums</code> 是一个非递减数组</li><li><code>-10^9 &lt;= target &lt;= 10^9</code></li></ul><h4 id="算法分析-63">算法分析</h4><h5 id="leftmost-rightmost">leftmost &amp; rightmost</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= <span class="number">0</span> &amp;&amp; left &lt; n &amp;&amp; right &gt;= <span class="number">0</span> &amp;&amp; right &lt; n &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left, right&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    param3: 是否搜索最左边的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> lower)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(lower) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt;= target) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lower? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码优化">代码优化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span>(left &gt;= <span class="number">0</span> &amp;&amp; left &lt; n &amp;&amp; right &gt;= <span class="number">0</span> &amp;&amp; right &lt; n &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left, right&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    param3: 是否搜索最左边的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> lower)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target || (!lower &amp;&amp; nums[mid] &lt;= target)) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lower? left : right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="搜索旋转排序数组"><ahref="https://leetcode.cn/problems/search-in-rotated-sorted-array/">33.搜索旋转排序数组</a></h3><p>整数数组 <code>nums</code> 按升序排列，数组中的值<strong>互不相同</strong> 。</p><p>在传递给函数之前，<code>nums</code> 在预先未知的某个下标<code>k</code>（<code>0 &lt;= k &lt; nums.length</code>）上进行了<strong>旋转</strong>，使数组变为<code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标<strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7]</code>在下标 <code>3</code> 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code>。</p><p>给你 <strong>旋转后</strong> 的数组 <code>nums</code> 和一个整数<code>target</code> ，如果 <code>nums</code> 中存在这个目标值<code>target</code> ，则返回它的下标，否则返回 <code>-1</code> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code>的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,5,6,7,0,1,2], target = 0</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,5,6,7,0,1,2], target = 3</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1], target = 0</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5000</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li><li><code>nums</code> 中的每个值都 <strong>独一无二</strong></li><li>题目数据保证 <code>nums</code> 在预先未知的某个下标上进行了旋转</li><li><code>-10^4 &lt;= target &lt;= 10^4</code></li></ul><h4 id="算法分析-64">算法分析</h4><h5 id="二分-1">二分</h5><p>本题已知的最重要的条件：nums[0] &gt;= nums[n -1]，根据这个条件去二分查找，能判断mid落在前半边最大的区间内还是落在后半段较小的区间内，然后对target进行判断即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] == target) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//mid有两种情况</span></span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找旋转排序数组中的最小值"><ahref="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/">153.寻找旋转排序数组中的最小值</a></h3><p>已知一个长度为 <code>n</code> 的数组，预先按照升序排列，经由<code>1</code> 到 <code>n</code> 次 <strong>旋转</strong>后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7]</code>在变化后可能得到：</p><ul><li>若旋转 <code>4</code> 次，则可以得到<code>[4,5,6,7,0,1,2]</code></li><li>若旋转 <code>7</code> 次，则可以得到<code>[0,1,2,4,5,6,7]</code></li></ul><p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code><strong>旋转一次</strong> 的结果为数组<code>[a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p><p>给你一个元素值 <strong>互不相同</strong> 的数组 <code>nums</code>，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的<strong>最小元素</strong> 。</p><p>你必须设计一个时间复杂度为 <code>O(log n)</code>的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,4,5,1,2]</span><br><span class="line">输出：1</span><br><span class="line">解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,5,6,7,0,1,2]</span><br><span class="line">输出：0</span><br><span class="line">解释：原数组为 [0,1,2,4,5,6,7] ，旋转 3 次得到输入数组。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [11,13,15,17]</span><br><span class="line">输出：11</span><br><span class="line">解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>-5000 &lt;= nums[i] &lt;= 5000</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li><li><code>nums</code> 原来是一个升序排序的数组，并进行了 <code>1</code>至 <code>n</code> 次旋转</li></ul><h4 id="算法分析-65">算法分析</h4><h5 id="二分-判断mid位置">二分 + 判断mid位置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//mid有两种情况</span></span><br><span class="line">            <span class="comment">//这里带 = 号，逼指针统一往右移动</span></span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt;= nums[mid]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mid + <span class="number">1</span> &lt; n &amp;&amp; nums[mid] &lt; nums[mid + <span class="number">1</span>]) &#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[mid + <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(mid - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; nums[mid] &gt; nums[mid - <span class="number">1</span>]) &#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(mid - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> nums[mid];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="代码优化-1">代码优化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMin</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; nums[right]) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[right];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-6">困难</h2><h3 id="寻找两个正序数组的中位数"><ahref="https://leetcode.cn/problems/median-of-two-sorted-arrays/">4.寻找两个正序数组的中位数</a></h3><p>给定两个大小分别为 <code>m</code> 和 <code>n</code>的正序（从小到大）数组 <code>nums1</code> 和<code>nums2</code>。请你找出并返回这两个正序数组的<strong>中位数</strong> 。</p><p>算法的时间复杂度应该为 <code>O(log (m+n))</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,3], nums2 = [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 = [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2], nums2 = [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>nums1.length == m</code></li><li><code>nums2.length == n</code></li><li><code>0 &lt;= m &lt;= 1000</code></li><li><code>0 &lt;= n &lt;= 1000</code></li><li><code>1 &lt;= m + n &lt;= 2000</code></li><li><code>-10^6 &lt;= nums1[i], nums2[i] &lt;= 10^6</code></li></ul><h4 id="算法分析-66">算法分析</h4><h5 id="合并排序">合并排序</h5><p>不符合时间复杂度的要求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] array = merge(nums1, nums2);</span><br><span class="line">        <span class="type">double</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (m + n) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((m + n) % <span class="number">2</span> == <span class="number">0</span>) &#123; </span><br><span class="line">            ans = (array[mid] + array[mid - <span class="number">1</span>]) / <span class="number">2.0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ans = array[mid];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] merge(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[m + n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>, q = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p &lt; m &amp;&amp; q &lt; n) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[p] &lt;= nums2[q]) &#123;</span><br><span class="line">                array[k++] = nums1[p++];</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                array[k++] = nums2[q++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != m) &#123;</span><br><span class="line">            <span class="keyword">while</span>(p &lt; m) &#123;</span><br><span class="line">                array[k++] = nums1[p++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q != n) &#123;</span><br><span class="line">            <span class="keyword">while</span>(q &lt; n) &#123;</span><br><span class="line">                array[k++] = nums2[q++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分查找">二分查找</h5><h1 id="栈">栈</h1><h2 id="简单-5">简单</h2><h3 id="有效的括号"><ahref="https://leetcode.cn/problems/valid-parentheses/">20.有效的括号</a></h3><p>给定一个只包括<code>'('</code>，<code>')'</code>，<code>'&#123;'</code>，<code>'&#125;'</code>，<code>'['</code>，<code>']'</code>的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol type="1"><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li><li>每个右括号都有一个对应的相同类型的左括号。</li></ol><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 10^4</code></li><li><code>s</code> 仅由括号 <code>'()[]&#123;&#125;'</code> 组成</li></ul><h4 id="算法分析-67">算法分析</h4><h5 id="栈-1">栈</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        LinkedList&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                stack.push(<span class="string">&#x27;&#125;&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; stack.peek() == c) &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-12">中等</h2><h3 id="最小栈"><a href="https://leetcode.cn/problems/min-stack/">155.最小栈</a></h3><p>设计一个支持 <code>push</code> ，<code>pop</code> ，<code>top</code>操作，并能在常数时间内检索到最小元素的栈。</p><p>实现 <code>MinStack</code> 类:</p><ul><li><code>MinStack()</code> 初始化堆栈对象。</li><li><code>void push(int val)</code> 将元素val推入堆栈。</li><li><code>void pop()</code> 删除堆栈顶部的元素。</li><li><code>int top()</code> 获取堆栈顶部的元素。</li><li><code>int getMin()</code> 获取堆栈中的最小元素。</li></ul><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;MinStack&quot;,&quot;push&quot;,&quot;push&quot;,&quot;push&quot;,&quot;getMin&quot;,&quot;pop&quot;,&quot;top&quot;,&quot;getMin&quot;]</span><br><span class="line">[[],[-2],[0],[-3],[],[],[],[]]</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">[null,null,null,null,-3,null,0,-2]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">MinStack minStack = new MinStack();</span><br><span class="line">minStack.push(-2);</span><br><span class="line">minStack.push(0);</span><br><span class="line">minStack.push(-3);</span><br><span class="line">minStack.getMin();   --&gt; 返回 -3.</span><br><span class="line">minStack.pop();</span><br><span class="line">minStack.top();      --&gt; 返回 0.</span><br><span class="line">minStack.getMin();   --&gt; 返回 -2.</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= val &lt;= 2^31 - 1</code></li><li><code>pop</code>、<code>top</code> 和 <code>getMin</code> 操作总是在<strong>非空栈</strong> 上调用</li><li><code>push</code>, <code>pop</code>, <code>top</code>, and<code>getMin</code>最多被调用 <code>3 * 10^4</code> 次</li></ul><h4 id="算法分析-68">算法分析</h4><h5 id="辅助栈">辅助栈</h5><p>第二个栈存每个时期的最小元素，当pop元素的时候，栈中元素是当前时期最小的元素，那就顺带删除辅助栈中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MinStack</span> &#123;</span><br><span class="line">    LinkedList&lt;Integer&gt; stack ;</span><br><span class="line">    LinkedList&lt;Integer&gt; min ;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MinStack</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        min = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        stack.push(val);</span><br><span class="line">        <span class="keyword">if</span>(min.isEmpty() || val &lt;= min.peek()) &#123;</span><br><span class="line">            min.push(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(!min.isEmpty() &amp;&amp; pop.equals(min.peek()) ) &#123;</span><br><span class="line">            min.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> min.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串解码"><ahref="https://leetcode.cn/problems/decode-string/">394.字符串解码</a></h3><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的<code>encoded_string</code> 正好重复 <code>k</code> 次。注意<code>k</code> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p><p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数<code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code>的输入。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;3[a]2[bc]&quot;</span><br><span class="line">输出：&quot;aaabcbc&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;3[a2[c]]&quot;</span><br><span class="line">输出：&quot;accaccacc&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;2[abc]3[cd]ef&quot;</span><br><span class="line">输出：&quot;abcabccdcdcdef&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abc3[cd]xyz&quot;</span><br><span class="line">输出：&quot;abccdcdcdxyz&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 30</code></li><li><code>s</code> 由小写英文字母、数字和方括号 <code>'[]'</code>组成</li><li><code>s</code> 保证是一个 <strong>有效</strong> 的输入。</li><li><code>s</code> 中所有整数的取值范围为 <code>[1, 300]</code></li></ul><h4 id="算法分析-69">算法分析</h4><h5 id="模拟-1">模拟</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">decodeString</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//用栈解决嵌套括号</span></span><br><span class="line">        LinkedList&lt;Integer&gt; num_stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        LinkedList&lt;String&gt; str_stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">                num_stack.push(num);</span><br><span class="line">                str_stack.push(res.toString());</span><br><span class="line">                <span class="comment">//进入下一层嵌套需要重新计算</span></span><br><span class="line">                num = <span class="number">0</span>;</span><br><span class="line">                res = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> num_stack.pop();</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">tmp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pop; i++) &#123;</span><br><span class="line">                    tmp.append(res);</span><br><span class="line">                &#125;</span><br><span class="line">                res = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(str_stack.pop() + tmp.toString());</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                num = num * <span class="number">10</span> + Integer.valueOf(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                res.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="每日温度"><ahref="https://leetcode.cn/problems/daily-temperatures/">739.每日温度</a></h3><p>给定一个整数数组 <code>temperatures</code>，表示每天的温度，返回一个数组 <code>answer</code> ，其中<code>answer[i]</code> 是指对于第 <code>i</code>天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用<code>0</code> 来代替。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class="line">输出: [1,1,4,2,1,1,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [30,40,50,60]</span><br><span class="line">输出: [1,1,1,0]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [30,60,90]</span><br><span class="line">输出: [1,1,0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= temperatures.length &lt;= 10^5</code></li><li><code>30 &lt;= temperatures[i] &lt;= 100</code></li></ul><h4 id="算法分析-70">算法分析</h4><h5 id="单调栈">单调栈</h5><p>只要是比栈顶元素小的，就入栈，保证栈是单调递增栈（按照出栈顺序，大小递增）。栈存下标，方便计算距离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty() || temperatures[stack.peek()] &gt;= temperatures[i]) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt; temperatures[i]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    ans[pop] = i - pop;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-7">困难</h2><h3 id="柱状图中最大的矩形"><ahref="https://leetcode.cn/problems/largest-rectangle-in-histogram/">84.柱状图中最大的矩形</a></h3><p>给定 <em>n</em>个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例 1:</strong></p><figure><img src="leetcode-Hot100题目汇总/histogram.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [2,1,5,6,2,3]</span><br><span class="line">输出：10</span><br><span class="line">解释：最大的矩形为图中红色区域，面积为 10</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="leetcode-Hot100题目汇总/histogram-1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入： heights = [2,4]</span><br><span class="line">输出： 4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= heights.length &lt;=105</code></li><li><code>0 &lt;= heights[i] &lt;= 104</code></li></ul><h4 id="算法分析-71">算法分析</h4><h5 id="单调栈-1">单调栈</h5><p>以每个高度为维度，计算不同的高度对应不同的最大面积。</p><p>如何确定一个高度的最大面积，需要找到左右两边，左边严格比它小，右边严格比它小，才能确定该高度对应的最大面积。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> heights.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> heights[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录下标，方便横向计算宽度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty() || heights[i] &gt;= heights[stack.peek()]) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; heights[i] &lt; heights[stack.peek()]) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> heights[stack.pop()];</span><br><span class="line">                    <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; height == heights[stack.peek()]) stack.pop();</span><br><span class="line">                    <span class="keyword">if</span>(stack.isEmpty()) &#123;</span><br><span class="line">                        width = i;</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        width = i - stack.peek() - <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans = Math.max(ans, width * height);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">height</span> <span class="operator">=</span> heights[stack.pop()];</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; height == heights[stack.peek()]) stack.pop();</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//是整个矩形最低的那个元素，直接乘以数组长度即可</span></span><br><span class="line">                width = n;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                width = n - stack.peek() - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, width * height);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="堆">堆</h1><h2 id="中等-13">中等</h2><h3 id="数组中的第k个最大元素"><ahref="https://leetcode.cn/problems/kth-largest-element-in-an-array/">215.数组中的第K个最大元素</a></h3><p>给定整数数组 <code>nums</code> 和整数 <code>k</code>，请返回数组中第<code>**k**</code> 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 <code>k</code>个最大的元素，而不是第 <code>k</code> 个不同的元素。</p><p>你必须设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,1,5,6,4], k = 2</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,2,3,1,2,4,5,5,6], k = 4</span><br><span class="line">输出: 4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><h4 id="算法分析-72">算法分析</h4><h5 id="小顶堆建堆">小顶堆建堆</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> array[i];</span><br><span class="line">        array[i] = array[j];</span><br><span class="line">        array[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">build</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            down(nums, i, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//堆的下潜操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">down</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> root, <span class="type">int</span> heapSize)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">2</span> * root + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">minIdx</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">if</span>(left &lt; heapSize &amp;&amp; nums[left] &lt; nums[minIdx]) &#123;</span><br><span class="line">            minIdx = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right &lt; heapSize &amp;&amp; nums[right] &lt; nums[minIdx]) &#123;</span><br><span class="line">            minIdx = right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minIdx != root) &#123;</span><br><span class="line">            swap(nums, root, minIdx);</span><br><span class="line">            down(nums, minIdx, heapSize);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findKthLargest</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//原地建堆</span></span><br><span class="line">        build(nums, k);</span><br><span class="line">        <span class="comment">//根据堆外元素将大数添加进来，因为这最大的K个数可能一部分在堆中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[<span class="number">0</span>] &lt; nums[i]) &#123;</span><br><span class="line">                swap(nums, <span class="number">0</span>, i);</span><br><span class="line">                down(nums, <span class="number">0</span>, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前-k-个高频元素"><ahref="https://leetcode.cn/problems/top-k-frequent-elements/">347. 前 K个高频元素</a></h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按<strong>任意顺序</strong> 返回答案。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">输出: [1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1], k = 1</span><br><span class="line">输出: [1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>k</code> 的取值范围是<code>[1, 数组中不相同的元素的个数]</code></li><li>题目数据保证答案唯一，换句话说，数组中前 <code>k</code>个高频元素的集合是唯一的</li></ul><p><strong>进阶：</strong>你所设计算法的时间复杂度 <strong>必须</strong>优于 <code>O(n log n)</code> ，其中 <code>n</code> 是数组大小。</p><h4 id="算法分析-73">算法分析</h4><h5 id="小顶堆优先队列">小顶堆优先队列</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; occurrences = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            occurrences.put(num, occurrences.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// int[] 的第一个元素代表数组的值，第二个元素代表了该值出现的次数</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;<span class="type">int</span>[]&gt;(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] m, <span class="type">int</span>[] n)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> m[<span class="number">1</span>] - n[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : occurrences.entrySet()) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> entry.getKey(), count = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (queue.size() == k) &#123;</span><br><span class="line">                <span class="keyword">if</span> (queue.peek()[<span class="number">1</span>] &lt; count) &#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;num, count&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;num, count&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ret = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; ++i) &#123;</span><br><span class="line">            ret[i] = queue.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-8">困难</h2><h3 id="数据流的中位数"><ahref="https://leetcode.cn/problems/find-median-from-data-stream/">295.数据流的中位数</a></h3><p><strong>中位数</strong>是有序整数列表中的中间值。如果列表的大小是偶数，则没有中间值，中位数是两个中间值的平均值。</p><ul><li>例如 <code>arr = [2,3,4]</code> 的中位数是 <code>3</code> 。</li><li>例如 <code>arr = [2,3]</code> 的中位数是<code>(2 + 3) / 2 = 2.5</code> 。</li></ul><p>实现 MedianFinder 类:</p><ul><li><code>MedianFinder()</code>初始化 <code>MedianFinder</code>对象。</li><li><code>void addNum(int num)</code> 将数据流中的整数 <code>num</code>添加到数据结构中。</li><li><code>double findMedian()</code>返回到目前为止所有元素的中位数。与实际答案相差 <code>10-5</code>以内的答案将被接受。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]</span><br><span class="line">[[], [1], [2], [], [3], []]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, 1.5, null, 2.0]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">MedianFinder medianFinder = new MedianFinder();</span><br><span class="line">medianFinder.addNum(1);    // arr = [1]</span><br><span class="line">medianFinder.addNum(2);    // arr = [1, 2]</span><br><span class="line">medianFinder.findMedian(); // 返回 1.5 ((1 + 2) / 2)</span><br><span class="line">medianFinder.addNum(3);    // arr[1, 2, 3]</span><br><span class="line">medianFinder.findMedian(); // return 2.0</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>-10^5 &lt;= num &lt;= 10^5</code></li><li>在调用 <code>findMedian</code> 之前，数据结构中至少有一个元素</li><li>最多 <code>5 * 10^4</code> 次调用 <code>addNum</code> 和<code>findMedian</code></li></ul><h4 id="算法分析-74">算法分析</h4><h5 id="双堆">双堆</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MedianFinder</span> &#123;</span><br><span class="line">    PriorityQueue&lt;Integer&gt; queMin;<span class="comment">//对应左边元素，小于等于中位数，也就是大顶堆</span></span><br><span class="line">    PriorityQueue&lt;Integer&gt; queMax;<span class="comment">//对应右边元素，大于中位数，就是小顶堆</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MedianFinder</span><span class="params">()</span> &#123;</span><br><span class="line">        queMin = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;((a, b) -&gt; (b - a));</span><br><span class="line">        queMax = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Integer&gt;((a, b) -&gt; (a - b));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (queMin.isEmpty() || num &lt;= queMin.peek()) &#123;</span><br><span class="line">            queMin.offer(num);</span><br><span class="line">            <span class="comment">//注意保证元素平衡</span></span><br><span class="line">            <span class="keyword">if</span>(queMin.size() - queMax.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                queMax.add(queMin.poll());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            queMax.offer(num);</span><br><span class="line">            <span class="keyword">if</span>(queMax.size() &gt; queMin.size()) &#123;</span><br><span class="line">                queMin.add(queMax.poll());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedian</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (queMin.size() &gt; queMax.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> queMin.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (queMin.peek() + queMax.peek()) / <span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="贪心">贪心</h1><h2 id="简单-6">简单</h2><h3 id="买卖股票的最佳时机"><ahref="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121.买卖股票的最佳时机</a></h3><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素<code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在<strong>未来的某一个不同的日子</strong>卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回<code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[7,1,5,3,6,4]</span><br><span class="line">输出：5</span><br><span class="line">解释：在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。</span><br><span class="line">     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [7,6,4,3,1]</span><br><span class="line">输出：0</span><br><span class="line">解释：在这种情况下, 没有交易完成, 所以最大利润为 0。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= prices.length &lt;= 10^5</code></li><li><code>0 &lt;= prices[i] &lt;= 10^4</code></li></ul><h4 id="算法分析-75">算法分析</h4><h5 id="暴力">暴力</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> prices[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                max = Math.max(max, prices[j] - b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可行，但超时</p><h5 id="贪心-1">贪心</h5><p>贪心要明白贪什么，本题目标就是：花费最小，利润最大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cost</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">profit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//[0, i]天中花费最少的一天</span></span><br><span class="line">            cost = Math.min(cost, prices[i]);</span><br><span class="line">            <span class="comment">//[0, i]天中，利润最大</span></span><br><span class="line">            profit = Math.max(profit, prices[i] - cost);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> profit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于两次遍历，第一次找花费最小的一天min，第二次找 &gt;min的日期中，股票价格最高的一天。</p><h2 id="中等-14">中等</h2><h3 id="跳跃游戏"><a href="https://leetcode.cn/problems/jump-game/">55.跳跃游戏</a></h3><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的<strong>第一个下标</strong>。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,1,1,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,0,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>0 &lt;= nums[i] &lt;= 10^5</code></li></ul><h4 id="算法分析-76">算法分析</h4><p>本题的暴力法挺难想的，是回溯类型的暴力遍历，会超时</p><h5 id="回溯超时">回溯（超时）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">return</span> dfs(nums, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;= nums.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums[i] + i; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dfs(nums, j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="贪心-2">贪心</h5><p>不必纠结于到达每个位置后怎么走，走几步，只需关注我当前位置能覆盖到的最大范围即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//覆盖范围,贪心贪的就是这个变量值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cover</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= cover; i++) &#123;</span><br><span class="line">            cover = Math.max(cover, i + nums[i]);</span><br><span class="line">            <span class="keyword">if</span>(cover &gt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳跃游戏-ii"><ahref="https://leetcode.cn/problems/jump-game-ii/">45. 跳跃游戏II</a></h3><p>给定一个长度为 <code>n</code> 的 <strong>0 索引</strong>整数数组<code>nums</code>。初始位置为 <code>nums[0]</code>。</p><p>每个元素 <code>nums[i]</code> 表示从索引 <code>i</code>向前跳转的最大长度。换句话说，如果你在 <code>nums[i]</code>处，你可以跳转到任意 <code>nums[i + j]</code> 处:</p><ul><li><code>0 &lt;= j &lt;= nums[i]</code></li><li><code>i + j &lt; n</code></li></ul><p>返回到达 <code>nums[n - 1]</code>的最小跳跃次数。生成的测试用例可以到达 <code>nums[n - 1]</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,0,1,4]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li>题目保证可以到达 <code>nums[n-1]</code></li></ul><h4 id="算法分析-77">算法分析</h4><h5 id="贪心-3">贪心</h5><p>根据上一题，贪心贪的东西本质不变，还是它的覆盖范围，只不过这次要一步步遍历覆盖范围内的元素，去更新最大的覆盖范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">jump</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(maxLen &gt;= n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> jump;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不一样的点，要记录步数</span></span><br><span class="line">            jump++;</span><br><span class="line">            <span class="comment">//表示下一步能走的最大范围，更新maxlen覆盖域</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tempMax</span> <span class="operator">=</span> maxLen;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt;= tempMax; j++) &#123;</span><br><span class="line">                maxLen = Math.max(maxLen, j + nums[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> jump;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="划分字母区间"><ahref="https://leetcode.cn/problems/partition-labels/">763.划分字母区间</a></h3><p>给你一个字符串 <code>s</code>。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。</p><p>注意，划分结果需要满足：将所有划分结果按顺序连接，得到的字符串仍然是<code>s</code> 。</p><p>返回一个表示每个字符串片段的长度的列表。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ababcbacadefegdehijhklij&quot;</span><br><span class="line">输出：[9,7,8]</span><br><span class="line">解释：</span><br><span class="line">划分结果为 &quot;ababcbaca&quot;、&quot;defegde&quot;、&quot;hijhklij&quot; 。</span><br><span class="line">每个字母最多出现在一个片段中。</span><br><span class="line">像 &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; 这样的划分是错误的，因为划分的片段数较少。 </span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;eccbbbbdec&quot;</span><br><span class="line">输出：[10]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 500</code></li><li><code>s</code> 仅由小写英文字母组成</li></ul><h4 id="算法分析-78">算法分析</h4><h5 id="贪心-4">贪心</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] last = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">//记录每个字符最后一次出现的位置</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            last[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            end = Math.max(end, last[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">            <span class="comment">//每个区间内的字符不可能有一个字符最后的下标超过这个end</span></span><br><span class="line">            <span class="keyword">if</span>(i == end) &#123;</span><br><span class="line">                ans.add(end - start + <span class="number">1</span>);</span><br><span class="line">                start = end + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="动归">动归</h1><h2 id="简单-7">简单</h2><h3 id="爬楼梯"><ahref="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h3><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code>个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：有两种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶</span><br><span class="line">2. 2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：有三种方法可以爬到楼顶。</span><br><span class="line">1. 1 阶 + 1 阶 + 1 阶</span><br><span class="line">2. 1 阶 + 2 阶</span><br><span class="line">3. 2 阶 + 1 阶</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 45</code></li></ul><h4 id="算法分析-79">算法分析</h4><h5 id="动归-1">动归</h5><p>到达台阶n由两个子问题组成：到达n-1和到达n-2，这样就可以各走一步、两步到达n级台阶</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="空间优化-1">空间优化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="杨辉三角"><ahref="https://leetcode.cn/problems/pascals-triangle/">118.杨辉三角</a></h3><p>给定一个非负整数 <em><code>numRows</code>，</em>生成「杨辉三角」的前<em><code>numRows</code></em> 行。</p><p>在「杨辉三角」中，每个数是它左上方和右上方的数的和。</p><figure><imgsrc="leetcode-Hot100题目汇总/1626927345-DZmfxB-PascalTriangleAnimated2.gif"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: numRows = 5</span><br><span class="line">输出: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: numRows = 1</span><br><span class="line">输出: [[1]]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= numRows &lt;= 30</code></li></ul><h4 id="算法分析-80">算法分析</h4><h5 id="模拟-2">模拟</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">generate</span><span class="params">(<span class="type">int</span> numRows)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; list0 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list0.add(<span class="number">1</span>);</span><br><span class="line">        ans.add(list0);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numRows; i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; last = ans.get(i - <span class="number">1</span>);</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            list.add(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                list.add(last.get(j) + last.get(j - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(<span class="number">1</span>);</span><br><span class="line">            ans.add(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-15">中等</h2><h3 id="最大子数组和"><ahref="https://leetcode.cn/problems/maximum-subarray/">53.最大子数组和</a></h3><p>给你一个整数数组 <code>nums</code>，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-2,1,-3,4,-1,2,1,-5,4]</span><br><span class="line">输出：6</span><br><span class="line">解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [5,4,-1,7,8]</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><h4 id="算法分析-81">算法分析</h4><h5 id="动态规划">动态规划</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">//dp[i]表示以i下标为结尾，数组的最大和</span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">        max = Math.max(max, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="kadane动归优化">kadane动归优化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//全局数组最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">globalMax</span> <span class="operator">=</span>  nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">curMax</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            curMax = Math.max(nums[i], curMax + nums[i]);</span><br><span class="line">            globalMax = Math.max(curMax, globalMax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> globalMax;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打家劫舍"><ahref="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>不触动警报装置的情况下</strong>，一夜之内能够偷窃到的最高金额。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[2,7,9,3,1]</span><br><span class="line">输出：12</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。</span><br><span class="line">     偷窃到的最高金额 = 2 + 9 + 1 = 12 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 400</code></li></ul><h4 id="算法分析-82">算法分析</h4><h5 id="一维动归">一维动归</h5><p>每间房间要么偷要么不偷，对于第K间房间，偷了就不能偷第K -1间房间。不偷就可以偷第K - 1间。</p><p>这时定义dp数组，dp[i] 表示来到第i间房屋，偷的最大价值。</p><p>递推方程：dp[i] = Math.max(dp[i - 1]， dp[i - 2] + nums[i - 1])</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">1</span>], nums[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完全平方数"><ahref="https://leetcode.cn/problems/perfect-squares/">279.完全平方数</a></h3><p>给你一个整数 <code>n</code> ，返回 <em>和为 <code>n</code>的完全平方数的最少数量</em> 。</p><p><strong>完全平方数</strong>是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code>和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code>不是。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 12</span><br><span class="line">输出：3 </span><br><span class="line">解释：12 = 4 + 4 + 4</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 13</span><br><span class="line">输出：2</span><br><span class="line">解释：13 = 4 + 9</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^4</code></li></ul><h4 id="算法分析-83">算法分析</h4><h5 id="一维动归-1">一维动归</h5><p>在记忆化动归的基础上，加一层循环，遍历以不大于当前数的完全平方数，按照状态转移方程，得到最终最小的那个结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, Integer.MAX_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j * j &lt;= i; j++) &#123;</span><br><span class="line">                dp[i] = Math.min(dp[i - j*j] + <span class="number">1</span>, dp[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="零钱兑换"><ahref="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></h3><p>给你一个整数数组 <code>coins</code>，表示不同面额的硬币；以及一个整数 <code>amount</code>，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong>。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [1, 2, 5], amount = 11</span><br><span class="line">输出：3 </span><br><span class="line">解释：11 = 5 + 5 + 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [2], amount = 3</span><br><span class="line">输出：-1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：coins = [1], amount = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= coins.length &lt;= 12</code></li><li><code>1 &lt;= coins[i] &lt;= 231 - 1</code></li><li><code>0 &lt;= amount &lt;= 104</code></li></ul><h4 id="算法分析-84">算法分析</h4><h5 id="一维动归-2">一维动归</h5><p>正常思路是二维递归，也需要给硬币开一个维度，但这题是具有贪心的性质的，我们肯定优先选择大硬币，那所以直接遍历硬币数组即可，无需二维</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> coins.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">coin</span> <span class="operator">=</span> coins[j];</span><br><span class="line">                <span class="keyword">if</span>(i &lt; coin) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[i] = Math.min(dp[i], dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[amount] == amount + <span class="number">1</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单词拆分"><ahref="https://leetcode.cn/problems/word-break/">139. 单词拆分</a></h3><p>给你一个字符串 <code>s</code> 和一个字符串列表 <code>wordDict</code>作为字典。如果可以利用字典中出现的一个或多个单词拼接出 <code>s</code>则返回 <code>true</code>。</p><p><strong>注意：</strong>不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;leetcode&quot;, wordDict = [&quot;leet&quot;, &quot;code&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;leetcode&quot; 可以由 &quot;leet&quot; 和 &quot;code&quot; 拼接成。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;applepenapple&quot;, wordDict = [&quot;apple&quot;, &quot;pen&quot;]</span><br><span class="line">输出: true</span><br><span class="line">解释: 返回 true 因为 &quot;applepenapple&quot; 可以由 &quot;apple&quot; &quot;pen&quot; &quot;apple&quot; 拼接成。</span><br><span class="line">     注意，你可以重复使用字典中的单词。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;catsandog&quot;, wordDict = [&quot;cats&quot;, &quot;dog&quot;, &quot;sand&quot;, &quot;and&quot;, &quot;cat&quot;]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 300</code></li><li><code>1 &lt;= wordDict.length &lt;= 1000</code></li><li><code>1 &lt;= wordDict[i].length &lt;= 20</code></li><li><code>s</code> 和 <code>wordDict[i]</code> 仅由小写英文字母组成</li><li><code>wordDict</code> 中的所有字符串 <strong>互不相同</strong></li></ul><h4 id="算法分析-85">算法分析</h4><h5 id="动归-2">动归</h5><p>子问题重叠，满足动归性质</p><p>定义：dp[i] = s[0...i]的字符串，是不是可以由单词组成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(wordDict);</span><br><span class="line">        <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[j] &amp;&amp; set.contains(s.substring(j, i))) &#123;</span><br><span class="line">                    dp[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长递增子序列"><ahref="https://leetcode.cn/problems/longest-increasing-subsequence/">300.最长递增子序列</a></h3><p>给你一个整数数组 <code>nums</code>，找到其中最长严格递增子序列的长度。</p><p><strong>子序列</strong>是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code>是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [7,7,7,7,7,7,7]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2500</code></li><li><code>-10^4 &lt;= nums[i] &lt;= 10^4</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能将算法的时间复杂度降低到 <code>O(n log(n))</code> 吗?</li></ul><h4 id="算法分析-86">算法分析</h4><h5 id="动归-3">动归</h5><p>这里定义dp[i]不能简单的以为：dp[i]就是到i下标处，最长的递增子序列。最长连续还差不多，子序列需要二次遍历，这样才能继承之前已经计算出的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            max = Math.max(dp[i], max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乘积最大子数组"><ahref="https://leetcode.cn/problems/maximum-product-subarray/">152.乘积最大子数组</a></h3><p>给你一个整数数组 <code>nums</code>，请你找出数组中乘积最大的非空连续</p><p>子数组</p><p>（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p>测试用例的答案是一个 <strong>32-位</strong> 整数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,-2,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [-2,0,-1]</span><br><span class="line">输出: 0</span><br><span class="line">解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 的任何前缀或后缀的乘积都 <strong>保证</strong>是一个 <strong>32-位</strong> 整数</li></ul><h4 id="算法分析-87">算法分析</h4><h5 id="一维动归-3">一维动归</h5><p>如果按照上一题，只拿当前数字当终止位置，是无法计算到负数的情况的。</p><p>所以需要两个数组，一个记录每个位置处，最大乘积，另一个记录最小乘积。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] max = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] min = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        System.arraycopy(nums, <span class="number">0</span>, max, <span class="number">0</span>, n);</span><br><span class="line">        System.arraycopy(nums, <span class="number">0</span>, min, <span class="number">0</span>, n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            max[i] = Math.max(Math.max(nums[i] * min[i - <span class="number">1</span>], nums[i] * max[i - <span class="number">1</span>]), nums[i]);</span><br><span class="line">            min[i] = Math.min(Math.min(nums[i] * min[i - <span class="number">1</span>], nums[i] * max[i - <span class="number">1</span>]), nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> max[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> m : max) &#123;</span><br><span class="line">            ans = Math.max(m, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分割等和子集"><ahref="https://leetcode.cn/problems/partition-equal-subset-sum/">416.分割等和子集</a></h3><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组<code>nums</code>。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,5,11,5]</span><br><span class="line">输出：true</span><br><span class="line">解释：数组可以分割成 [1, 5, 5] 和 [11] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,5]</span><br><span class="line">输出：false</span><br><span class="line">解释：数组不能分割成两个元素和相等的子集。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h4 id="算法分析-88">算法分析</h4><h5 id="背包问题">背包问题</h5><p>为什么是背包问题？</p><p>从n个数字中选择，每个数字的价值就是本身的值，选择的数字总和为全部数字总和的一半即可。</p><p>背包问题是尽可能多的价值，而本题是恰好和为总和一半。采用布尔数组比较合适。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>, maxNum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            sum += num;</span><br><span class="line">            maxNum = Math.max(maxNum, num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum % <span class="number">2</span> != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//剪枝操作</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> (sum &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(maxNum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][target + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">0</span>][nums[<span class="number">0</span>]] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= target; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= nums[i]) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - num] || dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>][target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不同路径"><ahref="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></h3><p>一个机器人位于一个 <code>m x n</code> 网格的左上角（起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/1697422740-adxmsI-image.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 7</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 2</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">从左上角开始，总共有 3 条路径可以到达右下角。</span><br><span class="line">1. 向右 -&gt; 向下 -&gt; 向下</span><br><span class="line">2. 向下 -&gt; 向下 -&gt; 向右</span><br><span class="line">3. 向下 -&gt; 向右 -&gt; 向下</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 7, n = 3</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 3</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 100</code></li><li>题目数据保证答案小于等于 <code>2 * 10^9</code></li></ul><h4 id="算法分析-89">算法分析</h4><h5 id="二维动归">二维动归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        Arrays.fill(dp[<span class="number">0</span>], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n ; j++) &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] +  dp[i][j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小路径和"><ahref="https://leetcode.cn/problems/minimum-path-sum/">64.最小路径和</a></h3><p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code>，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong>每次只能向下或者向右移动一步。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode-Hot100题目汇总/minpath.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,3,1],[1,5,1],[4,2,1]]</span><br><span class="line">输出：7</span><br><span class="line">解释：因为路径 1→3→1→1→1 的总和最小。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[1,2,3],[4,5,6]]</span><br><span class="line">输出：12</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 200</code></li><li><code>0 &lt;= grid[i][j] &lt;= 200</code></li></ul><h4 id="算法分析-90">算法分析</h4><h5 id="二维动归-1">二维动归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minPathSum</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = dp[<span class="number">0</span>][i - <span class="number">1</span>] + grid[<span class="number">0</span>][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; m; j++) &#123;</span><br><span class="line">            dp[j][<span class="number">0</span>] = dp[j - <span class="number">1</span>][<span class="number">0</span>] + grid[j][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]) + grid[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长回文子串"><ahref="https://leetcode.cn/problems/longest-palindromic-substring/">5.最长回文子串</a></h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code>中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;babad&quot;</span><br><span class="line">输出：&quot;bab&quot;</span><br><span class="line">解释：&quot;aba&quot; 同样是符合题意的答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;cbbd&quot;</span><br><span class="line">输出：&quot;bb&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><h4 id="算法分析-91">算法分析</h4><h5 id="中心扩散法">中心扩散法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i - <span class="number">1</span>, right = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) == c) left--;</span><br><span class="line">            <span class="keyword">while</span>(right &lt; n &amp;&amp; s.charAt(right) == c) right++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; right &lt; n &amp;&amp; s.charAt(left) == s.charAt(right)) &#123;</span><br><span class="line">                left--;</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right - left - <span class="number">1</span> &gt; ans) &#123;</span><br><span class="line">                ans = Math.max(ans, right - left - <span class="number">1</span>);</span><br><span class="line">                start = left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动归-4">动归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxlen</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="comment">//j &lt; i 才有递推性</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> s.charAt(j);</span><br><span class="line">                <span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i - j &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                        dp[j][i] = dp[j + <span class="number">1</span>][i - <span class="number">1</span>];</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        dp[j][i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[j][i] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(dp[j][i] &amp;&amp; i - j + <span class="number">1</span> &gt; maxlen) &#123;</span><br><span class="line">                    maxlen = i - j + <span class="number">1</span>;</span><br><span class="line">                    start = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, start + maxlen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><ahref="https://leetcode.cn/problems/longest-common-subsequence/">1143.最长公共子序列</a></h3><p>给定两个字符串 <code>text1</code> 和<code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong>的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code>。</p><p>一个字符串的 <strong>子序列</strong>是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>"ace"</code> 是 <code>"abcde"</code> 的子序列，但<code>"aec"</code> 不是 <code>"abcde"</code> 的子序列。</li></ul><p>两个字符串的 <strong>公共子序列</strong>是这两个字符串所共同拥有的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 = &quot;abcde&quot;, text2 = &quot;ace&quot; </span><br><span class="line">输出：3  </span><br><span class="line">解释：最长公共子序列是 &quot;ace&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;abc&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：最长公共子序列是 &quot;abc&quot; ，它的长度为 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：text1 = &quot;abc&quot;, text2 = &quot;def&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：两个字符串没有公共子序列，返回 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li><li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成。</li></ul><h4 id="算法分析-92">算法分析</h4><h5 id="二维动归-2">二维动归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> text2.length();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> text1.charAt(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> text2.charAt(j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编辑距离"><ahref="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><p>给你两个单词 <code>word1</code> 和 <code>word2</code>， <em>请返回将<code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em>。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (删除 &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (删除 &#x27;e&#x27;)</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;intention&quot;, word2 = &quot;execution&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：</span><br><span class="line">intention -&gt; inention (删除 &#x27;t&#x27;)</span><br><span class="line">inention -&gt; enention (将 &#x27;i&#x27; 替换为 &#x27;e&#x27;)</span><br><span class="line">enention -&gt; exention (将 &#x27;n&#x27; 替换为 &#x27;x&#x27;)</span><br><span class="line">exention -&gt; exection (将 &#x27;n&#x27; 替换为 &#x27;c&#x27;)</span><br><span class="line">exection -&gt; execution (插入 &#x27;u&#x27;)</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= word1.length, word2.length &lt;= 500</code></li><li><code>word1</code> 和 <code>word2</code> 由小写英文字母组成</li></ul><h4 id="算法分析-93">算法分析</h4><h5 id="二维动归-3">二维动归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        <span class="keyword">if</span> (m * n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n + m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            dp[j][<span class="number">0</span>] = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">a</span> <span class="operator">=</span> word2.charAt(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> word1.charAt(j - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(a == b) &#123;</span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//添加(删对面)还是删还是换</span></span><br><span class="line">                    dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span> , Math.min(dp[i][j - <span class="number">1</span>] + <span class="number">1</span>, dp[i- <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当考虑是否添加一个字符的时候，就等于要组成的word2删除一个字符。因为添加字符的时候，肯定需要贪心一下，添加个一模一样的。</li></ul><h2 id="困难-9">困难</h2><h3 id="最长有效括号"><ahref="https://leetcode.cn/problems/longest-valid-parentheses/">32.最长有效括号</a></h3><p>给你一个只包含 <code>'('</code> 和 <code>')'</code>的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(()&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：最长有效括号子串是 &quot;()&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;)()())&quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&quot;</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 3 * 10^4</code></li><li><code>s[i]</code> 为 <code>'('</code> 或 <code>')'</code></li></ul><h4 id="算法分析-94">算法分析</h4><h5 id="栈-哈希表">栈 + 哈希表</h5><p>用栈进行括号匹配是最简单的。我们能得到：所有匹配的括号的下标位置。也就是一串连续or不连续的数字。</p><p>随后我们对数字进行排序，题目要求连续，那就是求排序后数字的最长连续序列，问题转化到<a href = "#128">最长连续序列</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                res.add(stack.pop());</span><br><span class="line">                res.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找最长连续子序列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(res.contains(j - <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j; k &lt; n; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(res.contains(k)) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(count, ans);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="动归-5">动归</h5><p>动归的思路还是比较难的。</p><p>定义dp[i] 表示以i处字符结尾，最长连续括号。</p><p>递推过程：</p><p><code>char c = s.charAt(i:)</code></p><ul><li>如果<code>c == '('</code>，以这个结尾不合法，跳过</li><li>如果<code>c == ')'</code>，看他前一个字符pre是什么<ul><li><code>pre = '('</code>，与当前i匹配，<code>dp[i] = dp[i - 2] + 2</code>;</li><li><code>pre = ')'</code>，那就看pre的最长序列，随后跳过，看位置<code>i - dp[pre] - 1</code>处的括号是什么<ul><li>如果是'('，与当前匹配，dp[i] = dp[i - 1] + 2 +（<code>i - dp[pre] - 1</code>前面是否还有最长序列？）<ul><li>如果有：dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]</li><li>没有：dp[i] = dp[i - 1] + 2</li></ul></li></ul></li></ul></li></ul><p>中间注意一些边界的判断即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestValidParentheses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; c == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">pre</span> <span class="operator">=</span> s.charAt(i - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(pre == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    dp[i] = i &gt;= <span class="number">2</span>? dp[i - <span class="number">2</span>] + <span class="number">2</span> : <span class="number">2</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//pre为 )，考虑以pre为终点的最长有效长度，减去这个长度如果遇到(，扩大范围</span></span><br><span class="line">                    <span class="keyword">if</span>(i - dp[i - <span class="number">1</span>] - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; s.charAt(i - dp[i - <span class="number">1</span>] - <span class="number">1</span>) == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                        dp[i] = dp[i - <span class="number">1</span>] + <span class="number">2</span> + (i - dp[i - <span class="number">1</span>] - <span class="number">2</span> &gt;= <span class="number">0</span> ? dp[i - dp[i - <span class="number">1</span>] - <span class="number">2</span>]: <span class="number">0</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="奇技淫巧">奇技淫巧</h1><h2 id="简单-8">简单</h2><h3 id="只出现一次的数字"><ahref="https://leetcode.cn/problems/single-number/">136.只出现一次的数字</a></h3><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code>，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><p><strong>示例 1 ：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2 ：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [4,1,2,1,2]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p><strong>示例 3 ：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 3 * 10^4</code></li><li><code>-3 * 10^4 &lt;= nums[i] &lt;= 3 * 10^4</code></li><li>除了某个元素只出现一次以外，其余每个元素均出现两次。</li></ul><h4 id="算法分析-95">算法分析</h4><h5 id="异或">异或</h5><p>异或的特征：对于参与运算的两个二进制数，相同为0，不同为1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            a = a ^ nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多数元素"><ahref="https://leetcode.cn/problems/majority-element/">169.多数元素</a></h3><p>给定一个大小为 <code>n</code> 的数组 <code>nums</code>，返回其中的多数元素。多数元素是指在数组中出现次数 <strong>大于</strong><code>⌊ n/2 ⌋</code> 的元素。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,1,1,1,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 5 * 10^4</code></li><li><code>-10^9 &lt;= nums[i] &lt;= 10^9</code></li></ul><p><strong>进阶：</strong>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1)的算法解决此问题。</p><h4 id="算法分析-96">算法分析</h4><h5 id="摩尔投票">摩尔投票</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">votes</span> <span class="operator">=</span> <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(votes == <span class="number">0</span>) ans = num;</span><br><span class="line">            votes += num == ans ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-16">中等</h2><h3 id="颜色分类"><ahref="https://leetcode.cn/problems/sort-colors/">75. 颜色分类</a></h3><p>给定一个包含红色、白色和蓝色、共 <code>n</code> 个元素的数组<code>nums</code> ，<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a></strong>对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。</p><p>我们使用整数 <code>0</code>、 <code>1</code> 和 <code>2</code>分别表示红色、白色和蓝色。</p><p>必须在不使用库内置的 sort 函数的情况下解决这个问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,2,1,1,0]</span><br><span class="line">输出：[0,0,1,1,2,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,0,1]</span><br><span class="line">输出：[0,1,2]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>1 &lt;= n &lt;= 300</code></li><li><code>nums[i]</code> 为 <code>0</code>、<code>1</code> 或<code>2</code></li></ul><p><strong>进阶：</strong></p><ul><li>你能想出一个仅使用常数空间的一趟扫描算法吗？</li></ul><h4 id="算法分析-97">算法分析</h4><h5 id="计数排序">计数排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sortColors</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            hash[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; hash[i]; j++) &#123;</span><br><span class="line">                nums[x++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下一个排列"><ahref="https://leetcode.cn/problems/next-permutation/">31.下一个排列</a></h3><p>整数数组的一个 <strong>排列</strong>就是将其所有成员以序列或线性顺序排列。</p><ul><li>例如，<code>arr = [1,2,3]</code> ，以下这些都可以视作<code>arr</code>的排列：<code>[1,2,3]</code>、<code>[1,3,2]</code>、<code>[3,1,2]</code>、<code>[2,3,1]</code>。</li></ul><p>整数数组的 <strong>下一个排列</strong>是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的<strong>下一个排列</strong>就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p><ul><li>例如，<code>arr = [1,2,3]</code> 的下一个排列是 <code>[1,3,2]</code>。</li><li>类似地，<code>arr = [2,3,1]</code> 的下一个排列是<code>[3,1,2]</code> 。</li><li>而 <code>arr = [3,2,1]</code> 的下一个排列是 <code>[1,2,3]</code>，因为 <code>[3,2,1]</code> 不存在一个字典序更大的排列。</li></ul><p>给你一个整数数组 <code>nums</code> ，找出 <code>nums</code>的下一个排列。</p><p>必须<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a></strong>修改，只允许使用额外常数空间。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3]</span><br><span class="line">输出：[1,3,2]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1]</span><br><span class="line">输出：[1,2,3]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,5]</span><br><span class="line">输出：[1,5,1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>0 &lt;= nums[i] &lt;= 100</code></li></ul><h4 id="算法分析-98">算法分析</h4><h5 id="贪心-双遍历">贪心 + 双遍历</h5><p>把整个数组看成一个数字，本质就是交换两个数字使得下一个数字刚好比当前数字大一点点（小于下一次排列交换后的数字）。</p><p>在数组不是完全倒序的情况，要找到下一个排列，一定是要交换靠后面的两个数，并且交换的两个数的差值不大，也就是将后面较大的数和前面较小的数交换，并且保证后面较大的数形成递增序列，保证总值最小。具体步骤如下：</p><ul><li><strong>从后往前</strong>，找到第一个递增序列元素对，记录下标(i,j)， [j, end] 是递减序列，从[j,end]逆序找到第一个比nums[i]大的数交换，此时[j,end]依旧降序，直接反转升序即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">nextPermutation</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>, j = n-<span class="number">1</span>, k = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &gt;= <span class="number">0</span> &amp;&amp; nums[i] &gt;= nums[j]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到了递增序列</span></span><br><span class="line">        <span class="keyword">if</span>(i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &lt;= k &amp;&amp; nums[k] &lt;= nums[i]) &#123;</span><br><span class="line">                k--;</span><br><span class="line">            &#125;</span><br><span class="line">            swap(nums, k, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i = j, j = n - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            swap(nums, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        nums[i] = nums[j];</span><br><span class="line">        nums[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找重复数"><ahref="https://leetcode.cn/problems/find-the-duplicate-number/">287.寻找重复数</a></h3><p>给定一个包含 <code>n + 1</code> 个整数的数组 <code>nums</code>，其数字都在 <code>[1, n]</code> 范围内（包括 <code>1</code> 和<code>n</code>），可知至少存在一个重复的整数。</p><p>假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，返回<strong>这个重复的数</strong> 。</p><p>你设计的解决方案必须 <strong>不修改</strong> 数组 <code>nums</code>且只用常量级 <code>O(1)</code> 的额外空间。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,3,4,2,2]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,1,3,4,2]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 3 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,3,3,3,3]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>nums.length == n + 1</code></li><li><code>1 &lt;= nums[i] &lt;= n</code></li><li><code>nums</code> 中 <strong>只有一个整数</strong> 出现<strong>两次或多次</strong> ，其余整数均只出现<strong>一次</strong></li></ul><p><strong>进阶：</strong></p><ul><li>如何证明 <code>nums</code> 中至少存在一个重复的数字?</li><li>你可以设计一个线性级时间复杂度 <code>O(n)</code> 的解决方案吗？</li></ul><h4 id="算法分析-99">算法分析</h4><h5 id="暴力超时">暴力（超时）</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(num == nums[j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二分查找-抽屉">二分查找 + 抽屉</h5><p>构造有序序列：</p><p>定义 <code>cnt[i]</code> 表示 <code>nums</code> 数组中小于等于 i的数有多少个，假设我们重复的数是 target，那么 [1,target−1]里的所有数满足 <code>cnt[i]≤i</code>，[target,n] 里的所有数满足<code>cnt[i]&gt;i</code>，具有单调性。</p><p>我们只需查找[target, n]的第一个数字即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findDuplicate</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &lt;= mid) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt; mid) &#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本合集按照hot100的题目类型分类进行分类，但是不仅局限于一种方法，尽量追求一题多解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;哈希&quot;&gt;哈希&lt;/h1&gt;
&lt;h2 id=&quot;简单&quot;&gt;简单&lt;/h2&gt;
&lt;h3 id=&quot;两数之和&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="Hot100" scheme="https://vlsmhd.github.io/categories/leetcode/Hot100/"/>
    
    
  </entry>
  
  <entry>
    <title>2024春招投递记录</title>
    <link href="https://vlsmhd.github.io/2024/01/04/2024%E6%98%A5%E6%8B%9B%E6%8A%95%E9%80%92%E8%AE%B0%E5%BD%95/"/>
    <id>https://vlsmhd.github.io/2024/01/04/2024%E6%98%A5%E6%8B%9B%E6%8A%95%E9%80%92%E8%AE%B0%E5%BD%95/</id>
    <published>2024-01-04T03:36:29.885Z</published>
    <updated>2024-04-18T06:46:43.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v1">V1</h1><h2 id="官网内推">官网&amp;内推</h2><h3 id="酷家乐简历挂">酷家乐（简历挂）</h3><p>投递日期：2024.1.4</p><p>岗位：java开发</p><h3 id="快手简历挂">快手（简历挂）</h3><p>投递日期：2024.1.4</p><p>岗位：java开发</p><p><ahref="https://campus.kuaishou.cn/recruit/campus/e/#/campus/my-apply">快手校招- 快手校招-投递记录 (kuaishou.cn)</a></p><h3 id="多益网络笔试挂">多益网络（笔试挂）</h3><p>投递日期：2024.1.12</p><p>岗位：游戏服务端开发</p><p><ahref="https://xz.duoyi.com/center/center.html#applynotify">多益网络校园招聘 (duoyi.com)</a></p><h3 id="cider">Cider</h3><p>投递日期：2024.1.13</p><p>岗位：Java 开发工程师（广州）</p><p><ahref="https://ciderglobal.jobs.feishu.cn/504718/position/application?spread=8M4EDZM">应聘记录- 我们正在招聘，加入Cider！ (feishu.cn)</a></p><h3 id="虎牙">虎牙</h3><p>投递日期：2024.1.26</p><p>岗位：Java 后台开发工程师（广州）</p><p><ahref="https://app.mokahr.com/campus_apply/huya/4112#/candidateHome/applications">虎牙直播-校园招聘(mokahr.com)</a></p><h3 id="oppo">OPPO</h3><p>投递日期：2024.2.19</p><p>岗位：后端开发工程师（广州）</p><p><ahref="https://careers.oppo.com/university/oppo/center/history">OPPO招聘- 加入我们 join us</a></p><h3 id="恒生">恒生</h3><p>投递日期：2024.2.23</p><p>岗位：Java开发工程师（广州）</p><h4 id="笔试">3.21笔试</h4><h2 id="boss投递">boss投递</h2><h3 id="得物春季训练营简历挂">得物春季训练营（简历挂）</h3><p>投递日期：2024.1.4</p><p>岗位：java开发</p><h3 id="卓望公司简历挂">卓望公司（简历挂）</h3><p>投递日期：2024.1.8</p><p>岗位：java开发</p><h3 id="字节日常实习-懂车帝简历挂">字节日常实习-懂车帝（简历挂）</h3><p>投递日期：2024.1.9</p><p>岗位：后端开发</p><h3 id="哈啰普惠简历挂">哈啰普惠（简历挂）</h3><p>投递日期：2024.1.9</p><p>岗位：java开发</p><h3 id="数橙科技简历挂">数橙科技（简历挂）</h3><p>投递日期：2024.1.10</p><p>岗位：java开发</p><h3 id="好未来简历挂">好未来（简历挂）</h3><p>投递日期：2024.1.10</p><p>岗位：java -&gt; 基础平台研发工程师</p><h3 id="百度日常实习一面挂">百度日常实习（一面挂）</h3><p>投递日期：2024.1.11</p><p>岗位：java开发实习</p><h4 id="一面">1.16一面</h4><ol type="1"><li>Vedis项目介绍<ol type="1"><li>介绍具体的实现</li><li>有无对读写性能的测试</li><li>持久化的实现，AOF的具体实现</li><li>日志监听器的具体实现</li></ol></li><li>实习经历<ol type="1"><li>sql优化</li></ol></li><li>mysql索引的数据结构</li><li>mysql事务的特性，怎么去保证的</li><li>事务的隔离级别</li><li>计算机OSI网络体系结构</li><li>DNS的解析过程</li><li>get和post方法的区别</li><li>业务幂等性一般怎么保证</li><li>并行并发的区别</li><li>死锁的概念</li><li><strong>redis事务</strong></li><li>redis实现分布式锁</li><li>redission实现的原理（不太细致）</li><li><strong>jvm的内存结构</strong></li><li>堆区的划分（结合垃圾回收器讲）</li><li>JUC包下的集合，简单说一下</li><li>synchronized，reentranted Lock ，<strong>线程池忘了说</strong></li><li>手撕题：字符串匹配，给定模式串，判断给定的s串是否和模式串有相同的规律</li></ol><p>反问：</p><ol type="1"><li>面试流程，至少一个技术面</li><li>指出问题<ol type="1"><li>经历还不错，jvm不太熟练</li><li>也挺聪明（下头）</li></ol></li></ol><h3 id="开云集致二面挂">开云集致（二面挂）</h3><p>投递日期：2024.1.11</p><p>岗位：java开发</p><p>规模：0-20人</p><h4 id="一面-1">1.15一面</h4><ol type="1"><li>实习经历<ol type="1"><li>SQL优化</li></ol></li><li>Vedis项目拷打<ol type="1"><li>介绍</li><li>拦截器</li><li>自定义注解，用 什么方法能获得方法上的注解</li><li>netty</li><li>项目预估会有多少数据，会出现什么问题</li><li>为什么要重写去做一个rehash，因为要渐进式处理，具体实现细节</li><li>在没迁移完成的情况下，第二个mapput满了，该怎么办（开放式回答，应该答挺满意）</li><li>对缓存击穿的理解，解决方法<ol type="1"><li>面试官解法：</li></ol></li></ol></li></ol><h4 id="二面">1.16二面</h4><ol type="1"><li>实习经历<ol type="1"><li>为什么开发接口</li><li>接口用什么技术暴露出去，还有哪些方式暴露接口</li></ol></li><li>sql优化</li><li>个人发展规划</li></ol><h3 id="心识宇宙简历挂">心识宇宙（简历挂）</h3><p>投递日期：2024.1.11</p><p>岗位：java开发</p><h3 id="货拉拉简历挂">货拉拉（简历挂）</h3><p>投递日期：2024.1.11</p><p>岗位：java开发</p><h3 id="cp集团简历挂">CP集团（简历挂）</h3><p>投递日期：2024.1.12</p><p>岗位：java开发</p><h3 id="三星电子南京研究所笔试挂">三星电子南京研究所（笔试挂）</h3><p>投递日期：2024.1.12</p><p>岗位：云服务开发工程师</p><h4 id="一面-2">1.18一面</h4><ol type="1"><li>英文自我介绍</li><li>sql调优介绍</li><li></li></ol><h4 id="线下笔试寄">1.31线下笔试（寄）</h4><h3 id="深圳理想爱豆">深圳理想爱豆</h3><p>投递日期：2024.1.12</p><p>岗位：java开发</p><h3 id="彩世界">彩世界</h3><p>投递日期：2024.1.13</p><p>岗位：java开发</p><h3 id="译选网络">译选网络</h3><p>投递日期：2024.1.15</p><p>岗位：java开发实习生</p><h3 id="滴滴">滴滴</h3><p>投递日期：2024.1.15</p><p>岗位：客户端开发</p><h3 id="moka">Moka</h3><p>投递日期：2024.1.15</p><p>岗位：java实习生</p><h3 id="共创软件oc-已拒">共创软件（oc， 已拒）</h3><p>投递日期：2024.1.16</p><p>岗位：java开发</p><h4 id="笔试-1">1.17 笔试</h4><h4 id="一面-3">1.24 一面</h4><ol type="1"><li>自我介绍</li><li>对于MVC的理解</li><li><strong>mysql的索引有哪些</strong></li><li>详细展开redis（Vedis项目 + 数据结构）</li><li>优品抢购介绍<ol type="1"><li>项目的表结构</li><li>为什么把优惠券分离</li></ol></li><li>假设一个优惠券只能用于（A、B、C、D）四个商品，怎么设计数据库表</li><li>链表翻转</li><li>一堆表达式，判断循环引用问题（a = b， b = a）</li><li>实习做了什么</li><li>自身最大的优势、最大的缺陷</li></ol><h3 id="老虎国际">老虎国际</h3><p>投递日期：2024.1.16</p><p>岗位：java开发</p><h3 id="酷渲科技">酷渲科技</h3><p>投递日期：2024.1.16</p><p>岗位：开发实习生</p><h3 id="既时设计二面挂">既时设计（二面挂）</h3><p>投递日期：2024.1.31</p><p>岗位：开发实习生</p><h4 id="一面-4">2.22一面</h4><h4 id="二面-1">2.26二面</h4><h3 id="百度春招">百度春招</h3><p>投递日期：2024.2.1</p><p>岗位：Java开发</p><h3 id="神州租车">神州租车</h3><p>投递日期：2024.2.1</p><p>岗位：Java开发</p><h3 id="峰台科技">峰台科技</h3><p>投递日期：2024.2.2</p><p>岗位：Java开发</p><h3 id="深圳尚游">深圳尚游</h3><p>投递日期：2024.2.5</p><p>岗位：Java开发</p><h3 id="收钱吧">收钱吧</h3><p>投递日期：2024.2.18</p><p>岗位：后端开发</p><h3 id="福富公司">福富公司</h3><p>投递日期：2024.2.18</p><p>岗位：java开发</p><h3 id="北森云计算">北森云计算</h3><p>投递日期：2024.2.19</p><p>岗位：后端工程师</p><h3 id="简则智能">简则智能</h3><p>投递日期：2024.2.19</p><p>岗位：Java开发工程师</p><h3 id="哈啰">哈啰</h3><p>投递日期：2024.2.20</p><p>岗位：金融数科</p><h3 id="杭州时代银通笔试挂">杭州时代银通（笔试挂）</h3><p>投递日期：2024.3.1</p><p>岗位：Java开发</p><h4 id="hr电话">HR电话</h4><p>时间：2024.3.5</p><h4 id="一面-5">3.6一面</h4><h3 id="深圳睿联">深圳睿联</h3><p>投递日期：2024.3.6</p><p>岗位：web后端开发</p><h3 id="小天才一面挂">小天才（一面挂）</h3><p>投递日期：2024.3.6</p><p>岗位：web后端开发</p><h4 id="面试">3.27面试</h4><h3 id="慧策">慧策</h3><p>投递日期：2024.3.11</p><p>岗位：Java后端开发</p><h3 id="南京叶子科技二面挂">南京叶子科技（二面挂）</h3><p>投递日期：2024.3.12</p><p>岗位：软件开发</p><h4 id="笔试-2">3.13笔试</h4><h5 id="餐馆问题">餐馆问题</h5><p>某餐馆有n张桌子，每张桌子有一个参数：a 可容纳的最大人数；有m批客人，每批客人有两个参数:b人数，c预计消费金额。在不允许拼桌的情况下，请实现一个算法选择其中一部分客人，使得总预计消费金额最大</p><p>输入描述: 输入包括m+2行。 第一行两个整数n(1 &lt;= n &lt;= 50000),m(1&lt;= m &lt;= 50000)第二行为n个参数a,即每个桌子可容纳的最大人数,以空格分隔,范围均在32位int范围内。接下来m行，每行两个参数b,c。分别表示第i批客人的人数和预计消费金额,以空格分隔,范围均在32位int范围内。</p><p>输出描述: 输出一个整数,表示最大的总预计消费金额</p><p>思路：</p><p>先对桌子容量进行从小到大排序，再对m批客人的消费金额进行从大到小排序<strong>用一个布尔数组作为标志变量：标志某个桌子是否已经被占用</strong></p><p>选定消费金额最多的客人后，找到合适的桌子容量（比客人数多的最小桌子）</p><h6 id="贪心二分">贪心+二分</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                a[i] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span>[][] b = <span class="keyword">new</span> <span class="title class_">int</span>[m][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                b[i][<span class="number">0</span>] = in.nextInt();</span><br><span class="line">                b[i][<span class="number">1</span>] = in.nextInt();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(max(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span>[][] b)</span> &#123;</span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        Arrays.sort(b, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;<span class="type">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] o1, <span class="type">int</span>[] o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2[<span class="number">1</span>] - o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">long</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> a.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> b.length;</span><br><span class="line">        <span class="comment">//标记桌子是否已经被使用</span></span><br><span class="line">        <span class="type">boolean</span>[] vis = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝操作</span></span><br><span class="line">            <span class="keyword">if</span> (b[i][<span class="number">0</span>] &gt; a[n - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">people</span> <span class="operator">=</span> b[i][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> b[i][<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> binarySearch(a, people);</span><br><span class="line">            <span class="keyword">while</span> (idx &lt; n &amp;&amp; vis[idx]) &#123;</span><br><span class="line">                idx++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (idx &lt; n) &#123;</span><br><span class="line">                max += money;</span><br><span class="line">                vis[idx] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (a[mid] &lt; num) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一面-6">3.14一面</h4><ol type="1"><li>自我介绍</li><li>对JUC的了解</li><li>线程池技术，为什么池化</li><li><strong>具体的数据库优化案例</strong></li><li>NIO，<strong>其它模型</strong></li><li>NIO相比阻塞模型的优势</li><li>Redis应用场景</li><li>进入到工作环境最需要的几种能力</li><li><strong>发展规划</strong>（广度、深度）</li><li>对于AI的认识</li><li>实习中如何跟领导沟通</li></ol><h4 id="二面-2">3.15二面</h4><ol type="1"><li>自我介绍</li><li><strong>删除重复元素，mysql</strong></li><li>秒杀项目<ol type="1"><li>贪心算法</li><li>改成按照价格排序，怎么办</li><li>业务上的改变</li></ol></li></ol><h1 id="v2">V2</h1><h2 id="官网内推-1">官网&amp;内推</h2><h3 id="微派网络笔试挂">微派网络（笔试挂）</h3><p>投递日期：2024.3.14</p><p>岗位：后台开发</p><p><ahref="https://wepie.jobs.feishu.cn/referral/campus/position/application?token=MzsxNzEwMTI4OTE1NDc0OzcyOTA3NTkxMTg0MjAwMTcxNTY7MA">应聘记录- 微派网络内推 (feishu.cn)</a></p><h4 id="笔试-3">3.18笔试</h4><h3 id="小红书">小红书</h3><p>投递日期：2024.3.18</p><p>岗位：Java后台开发</p><h3 id="滴滴-1">滴滴</h3><p>投递日期：2024.3.18</p><p>岗位：Java后台开发</p><h4 id="笔试-4">3.24笔试</h4><p>下午五点</p><p>算法AC</p><h3 id="bilibili">BiliBili</h3><p>投递日期：2024.3.19</p><p>岗位：服务端开发</p><p><ahref="https://jobs.bilibili.com/campus/records?channel=bilibiliaccounts">哔哩哔哩-招聘(bilibili.com)</a></p><h3 id="快手简历挂-1">快手（简历挂）</h3><p>投递日期：2024.3.19</p><p>岗位：服务端开发</p><p><ahref="https://campus.kuaishou.cn/recruit/campus/e/#/campus/my-apply">快手校招- 快手校招-投递记录 (kuaishou.cn)</a></p><h3 id="搜狐简历挂">搜狐（简历挂）</h3><p>投递日期：2024.3.19</p><p>岗位：服务端开发</p><p><ahref="https://app.mokahr.com/campus-recruitment/sohu/5682?sourceToken=b74e8a9dc0050254f9ae3f3c501d21bb#/candidateHome/applications">搜狐- 校园招聘 (mokahr.com)</a></p><h3 id="游卡">游卡</h3><p>投递日期：2024.3.19</p><p>岗位：游戏服务端开发</p><p><ahref="https://app.mokahr.com/campus-recruitment/yokagames/41940?sourceToken=88735135c81f14ffe399ca5edef5f191#/candidateHome/applications">游卡校园招聘(mokahr.com)</a></p><h3 id="传音">传音</h3><p>投递日期：2024.3.19</p><p>岗位：游戏服务端开发</p><p><a href="https://transsion.zhiye.com/Portal/Apply/Index">我的申请(zhiye.com)</a></p><h4 id="测评">3.19测评</h4><h4 id="测评-1">3.20测评</h4><h3 id="网龙科技">网龙科技</h3><p>投递日期：2024.3.21</p><p>岗位：数据开发</p><h3 id="小米">小米</h3><p>投递日期：2024.3.24</p><p>岗位：服务端开发</p><p><ahref="https://xiaomi.jobs.f.mioffice.cn/campus/position/application?spread=J7NS6YR">应聘记录- 小米校园招聘 (mioffice.cn)</a></p><h3 id="帆软">帆软</h3><p>投递日期：2024.3.26</p><p>岗位：Java开发</p><h3 id="度小满">度小满</h3><p>投递日期：2024.3.27</p><p>岗位：测试开发</p><h3 id="联想简历挂">联想（简历挂）</h3><p>投递日期：2024.3.29</p><p>岗位：测试开发</p><p><a href="https://talent.lenovo.com.cn/account/apply">我的申请(lenovo.com.cn)</a></p><h3 id="完美世界">完美世界</h3><p>投递日期：2024.3.31</p><p>岗位：Java开发</p><p><ahref="https://app.mokahr.com/campus-recruitment/pwrd/98446#/candidateHome/applications">完美世界- 校园招聘 (mokahr.com)</a></p><h3 id="虎牙-1">虎牙</h3><p>投递日期：2024.3.31</p><p>岗位：安卓开发</p><h3 id="深信服">深信服</h3><p>投递日期：2024.4.3</p><p>岗位：测试开发</p><h3 id="小鹏汽车">小鹏汽车</h3><p>投递日期：2024.4.3</p><p>岗位：后端开发</p><p><ahref="https://xiaopeng.jobs.feishu.cn/campus/position/application">应聘记录- 加入小鹏汽车 (feishu.cn)</a></p><h3 id="携程">携程</h3><p>投递日期：2024.4.3</p><p>岗位：Java开发</p><p><ahref="https://app.mokahr.com/campus-recruitment/trip/37757?sourceToken=08cacb038b6c00c6f76d22f8eed7e739#/jobs">携程集团- 校园招聘 (mokahr.com)</a></p><h4 id="测评-2">4.7测评</h4><h3 id="腾讯">腾讯</h3><p>投递日期：2024.4.9</p><p>岗位：后台开发</p><h3 id="西山居简历挂">西山居（简历挂）</h3><p>投递日期：2024.4.9</p><p>岗位：游戏测试开发</p><h3 id="元象科技">元象科技</h3><p>投递日期：2024.4.9</p><p>岗位：后台开发</p><p><ahref="https://xverse.xinrenxinshi.com/recruitGate/deliver-record?ey=0ebdb0058b4d7c688f15cdaec3375e4286c963&amp;meetingId=&amp;source=1">加入元象XVERSE(xinrenxinshi.com)</a></p><h3 id="shopee">Shopee</h3><p>投递日期：2024.4.15</p><p>岗位：后端开发</p><p><ahref="https://app.mokahr.com/campus_apply/shopee/2962?sourceToken=d6c7e961ed10d016957deacacf49f252#/candidateHome/applications">Shopee校园招聘 (mokahr.com)</a></p><h3 id="途虎养车">途虎养车</h3><p>投递日期：2024.4.16</p><p>岗位：Java开发</p><h2 id="boss">Boss</h2><h3 id="衡泰">衡泰</h3><p>投递日期：2024.3.13</p><p>岗位：软件开发</p><h3 id="万物云">万物云</h3><p>投递日期：2024.3.15</p><p>岗位：软件开发</p><h3 id="亿道集团">亿道集团</h3><p>投递日期：2024.3.18</p><p>岗位：软件开发</p><h4 id="测评-3">3.19测评</h4><h4 id="笔试-5">3.19笔试</h4><h3 id="第四范式">第四范式</h3><p>投递日期：2024.3.19</p><p>岗位：软件开发</p><h3 id="英雄游戏">英雄游戏</h3><p>投递日期：2024.3.20</p><p>岗位：java服务器开发</p><h3 id="中国电子云kpi面">中国电子云（KPI面）</h3><p>投递日期：2024.3.20</p><p>岗位：CRM软件开发</p><h4 id="一面-7">3.25一面</h4><h3 id="蚂蚁集团">蚂蚁集团</h3><p>投递日期：2024.3.20</p><p>岗位：OceanBase测开</p><h4 id="测评-4">3.22测评</h4><h4 id="笔试-6">3.23笔试</h4><h4 id="一面-8">3.25一面</h4><ol type="1"><li><p>自我介绍</p></li><li><p>为什么选择测开</p></li><li><p>做这么多项目有什么动机</p></li><li><p>哪个项目最有感受</p></li><li><p>缓存框架是不是类似一个插件组件</p></li><li><p>项目实现到什么程度</p></li><li><p>缓存污染问题</p></li><li><p>内部的设计，怎么实现LRU -2的</p></li><li><p>所以你也没有办法保证命中两次之后一定存在缓存中？</p><p>可以保证，我脑抽了···</p></li><li><p>项目能否进行空间上的调配</p></li><li><p>对于一二级队列的大小怎么考虑的</p></li><li><p>项目有使用吗</p></li><li><p><strong>异常率指的是什么，什么情况下会出现异常</strong></p></li><li><p>怎么管理expire过期的</p></li><li><p><strong>缓存的一致性问题怎么解决的</strong></p><p>我直接答得由程序员来解决</p></li><li><p>工具的难点</p></li><li><p>渐进式扩容的过程中，什么时候去释放掉这个空间</p></li><li><p>怎么解决，搬迁过程中，新的map被放满了</p></li><li><p>如何解决hashmap线程安全问题</p></li><li><p>对分布式的理解</p></li><li><p>IM即时通讯，用到的分布式的概念</p></li><li><p>长链接是谁和谁保持</p></li><li><p>对于这个项目的消息处理，概述一下</p></li><li><p>对几种设计模式的理解</p></li><li><p>对linux的使用，用linux做什么</p></li><li><p><strong>linux怎么确定mysql安装成功</strong></p></li><li><p>有没有自己设计过表格</p></li><li><p>数据库的索引、应用，原理等等</p></li><li><p>这些项目是怎么测试的</p></li><li><p>postman调用接口，对某一个接口的测试，怎么验证是否满足需求</p></li><li><p>有没有其它offer</p></li></ol><h4 id="二面-3">3.28二面</h4><h4 id="hr面">4.16HR面</h4><h3 id="药网">1药网</h3><p>投递日期：2024.3.21</p><p>岗位：Java</p><h3 id="极致游戏简历挂">极致游戏（简历挂）</h3><p>投递日期：2024.3.21</p><p>岗位：游戏开发</p><p><ahref="https://jzyxgames.jobs.feishu.cn/campus/position/application">应聘记录- 极致游戏 校园招聘 (feishu.cn)</a></p><h3 id="云智慧">云智慧</h3><p>投递日期：2024.3.21</p><p>岗位：java开发</p><h3 id="中科创达笔试挂">中科创达（笔试挂）</h3><p>投递日期：2024.3.22</p><p>岗位：java开发</p><h4 id="笔试-7">3.24笔试</h4><h3 id="京东">京东</h3><p>投递日期：2024.3.26</p><p>岗位：测试开发</p><h3 id="西点信息笔试挂">西点信息（笔试挂）</h3><p>投递日期：2024.4.1</p><p>岗位：Java开发</p><h4 id="笔试-8">4.1笔试</h4><h3 id="转转简历挂">转转（简历挂）</h3><p>投递日期：2024.4.8</p><p>岗位：测试开发</p><h3 id="数字马力">数字马力</h3><p>投递日期：2024.4.1</p><p>岗位：Java开发</p><h4 id="笔试-9">4.15笔试</h4><h3 id="汽车之家">汽车之家</h3><p>投递日期：2024.4.13</p><p>岗位：Java开发</p><h3 id="上海更赢">上海更赢</h3><p>投递日期：2024.4.15</p><p>岗位：后端开发</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;v1&quot;&gt;V1&lt;/h1&gt;
&lt;h2 id=&quot;官网内推&quot;&gt;官网&amp;amp;内推&lt;/h2&gt;
&lt;h3 id=&quot;酷家乐简历挂&quot;&gt;酷家乐（简历挂）&lt;/h3&gt;
&lt;p&gt;投递日期：2024.1.4&lt;/p&gt;
&lt;p&gt;岗位：java开发&lt;/p&gt;
&lt;h3 id=&quot;快手简历挂&quot;&gt;快手（</summary>
      
    
    
    
    <category term="求职" scheme="https://vlsmhd.github.io/categories/%E6%B1%82%E8%81%8C/"/>
    
    
    <category term="求职" scheme="https://vlsmhd.github.io/tags/%E6%B1%82%E8%81%8C/"/>
    
    <category term="2024春招" scheme="https://vlsmhd.github.io/tags/2024%E6%98%A5%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>黑马JVM学习</title>
    <link href="https://vlsmhd.github.io/2023/12/18/%E9%BB%91%E9%A9%ACJVM%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/12/18/%E9%BB%91%E9%A9%ACJVM%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-12-18T02:10:13.777Z</published>
    <updated>2024-03-14T02:02:05.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jvm内存结构">JVM内存结构</h1><h2 id="程序计数器">程序计数器</h2><p>Program Counter Register 程序计数器（寄存器）</p><p>作用：是<strong>记录下一条 jvm 指令</strong>的执行地址行号。</p><p>特点：</p><ul><li>线程私有</li><li>不会溢出</li></ul><p>如下是一段字节码指令，注释对应的具体的代码块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">0: getstatic <span class="comment">#20 // PrintStream out = System.out; </span></span><br><span class="line">3: astore_1 // -- </span><br><span class="line">4: aload_1 // out.println(1); </span><br><span class="line">5: iconst_1 // -- </span><br><span class="line">6: invokevirtual <span class="comment">#26 // -- </span></span><br><span class="line">9: aload_1 // out.println(2); </span><br><span class="line">10: iconst_2 // -- </span><br><span class="line">11: invokevirtual <span class="comment">#26 // -- </span></span><br><span class="line">14: aload_1 // out.println(3); </span><br><span class="line">15: iconst_3 // -- </span><br><span class="line">16: invokevirtual <span class="comment">#26 // -- </span></span><br><span class="line">19: aload_1 // out.println(4); </span><br><span class="line">20: iconst_4 // -- </span><br><span class="line">21: invokevirtual <span class="comment">#26 // -- </span></span><br><span class="line">24: aload_1 // out.println(5); </span><br><span class="line">25: iconst_5 // -- </span><br><span class="line">26: invokevirtual <span class="comment">#26 // -- </span></span><br><span class="line">29: <span class="built_in">return</span></span><br></pre></td></tr></table></figure><ul><li>以上这些指令，存储在CPU的寄存器中；程序计数器会记录下一条指令的地址行号，这样下一次解释器会从程序计数器拿到指令然后进行解释执行。</li><li><strong>解释器</strong>会解释以上这些指令为机器码交给 cpu 执行</li></ul><h2 id="虚拟机栈">虚拟机栈</h2><p>概念：</p><ul><li>栈：每个线程运行时需要的内存空间，就叫虚拟机栈；每个线程独有一份；每个线程有一个活动栈帧，只能执行一个方法<ul><li>栈帧：栈内有多个栈帧，每个栈帧对应一个方法，里面存储了方法的局部变量等</li></ul></li></ul><p>常见问题</p><ol type="1"><li>垃圾回收是否涉及栈内存？</li></ol><p>​ 不会。栈内存是方法调用产生的，方法调用结束后会弹出栈。</p><ol start="2" type="1"><li>栈内存分配越大越好吗？</li></ol><p>​不是。因为物理内存是一定的，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。</p><ol start="3" type="1"><li>方法里的局部变量是否线程安全<ul><li>局部变量逃离了方法的作用范围，就会有。例如：引用传参、返回值、外部引用等等</li></ul></li></ol><p>​</p><h3 id="stackoverflow">StackOverFlow</h3><p><strong>出现情况</strong></p><ol type="1"><li>栈帧过大</li><li>递归调用</li><li>第三方类库引用：如循环引用</li></ol><h3 id="线程运行诊断">线程运行诊断</h3><h4 id="cpu占用分析">CPU占用分析</h4><p>Linux 环境下运行某些程序的时候，可能导致 CPU的占用过高，这时需要定位占用 CPU 过高的线程</p><ol type="1"><li>top命令，查看是哪个进程占用 CPU过高；记住进程号pid，用于下面命令</li><li><code>ps H -eo pid,tid,%cpu | grep</code>，通过 ps命令进一步查看是哪个线程占用 CPU 过高</li><li>利用<code>jstack pid</code>，找到对应的线程，查看执行情况</li></ol><h4 id="死锁分析">死锁分析</h4><p>通过jstack命令定位。</p><p>找到两个线程对应的执行代码位置。</p><h2 id="本地方法栈">本地方法栈</h2><p>一些带有 native 关键字的方法就是需要 JAVA去调用本地的C或者C++方法，因为 JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法栈，服务于带native 关键字的方法。</p><h2 id="堆">堆</h2><p>存放对象：通过new关键字创建的对象都会被放在堆内存</p><p>特点：</p><ul><li>线程共享</li><li>有gc机制</li></ul><h3 id="堆内存溢出">堆内存溢出</h3><p>java.lang.OutofMemoryError ：java heap space. 堆内存溢出</p><ul><li>可以使用 -Xmx 来指定堆内存大小</li></ul><h3 id="堆内存诊断">堆内存诊断</h3><ol type="1"><li>jps 工具 查看当前系统中有哪些 java 进程</li><li>jmap 工具 查看堆内存占用情况 <code>jmap - heap 进程id</code></li><li>jconsole 工具 图形界面的，多功能的监测工具，可以连续监测</li><li>jvisualvm 工具</li></ol><h3 id="stringtable">StringTable</h3><p>定义：是一个记录字符督串的常量表（哈希表），可利用这样一个串池，避免重复创建相同的字符串对象。</p><ul><li>常量池中的字符串仅是符号，符合懒加载机制，被用到以后会转化为字符串对象</li><li>字符串<strong>对象</strong>拼接的原理：StringBuilder</li><li>字符串<strong>常量</strong>拼接的原理：编译器优化。编译时期将字符串合并</li><li>使用intern方法，主动将不在串池中的字符串对象放入串池中</li></ul><p>是否会垃圾回收：是</p><h4 id="intern方法">intern方法</h4><p>1.8版本：调用字符串对象的 intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，则放入成功</li><li>如果有该字符串对象，则放入失败；无论放入是否成功，都会<strong>返回串池中</strong>的字符串对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// &quot;a&quot; &quot;b&quot; 被放入串池中，str 则存在于堆内存之中  </span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>);<span class="comment">//此时串池[&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line"><span class="comment">// 调用 str 的 intern 方法，这时串池中没有 &quot;ab&quot; ，则会将该字符串对象放入到串池中，此时堆内存与串池中的 &quot;ab&quot; 是同一个对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.intern();<span class="comment">//此时串池[&quot;a&quot;, &quot;b&quot;, &quot;ab&quot;(指向堆中&quot;ab&quot;对象)]</span></span><br><span class="line"><span class="comment">// 给 str3 赋值，因为此时串池中已有 &quot;ab&quot; ，则直接将串池中的内容返回</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;</span><br><span class="line"><span class="comment">// 因为堆内存与串池中的 &quot;ab&quot; 是同一个对象，所以以下两条语句打印的都为 true</span></span><br><span class="line">System.out.println(str == str2);</span><br><span class="line">System.out.println(str == str3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用关系：str2 -&gt; str（串池） -&gt; "ab"（堆中） str3 -&gt;str</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 此处创建字符串对象 &quot;ab&quot; ，因为串池中还没有 &quot;ab&quot; ，所以将其放入串池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;ab&quot;</span>;<span class="comment">//此时串池[&quot;ab&quot;]</span></span><br><span class="line">        <span class="comment">// &quot;a&quot; &quot;b&quot; 被放入串池中，str 则存在于堆内存之中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;a&quot;</span>) + <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;b&quot;</span>);<span class="comment">//此时串池[&quot;ab&quot; ,&quot;a&quot;, &quot;b&quot;]</span></span><br><span class="line">        <span class="comment">// 此时因为在创建 str3 时，&quot;ab&quot; 已存在与串池中，所以放入失败，但是会返回串池中的 &quot;ab&quot; </span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> str.intern();</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">System.out.println(str == str2);</span><br><span class="line">        <span class="comment">// false</span></span><br><span class="line">System.out.println(str == str3);</span><br><span class="line">        <span class="comment">// true</span></span><br><span class="line">System.out.println(str2 == str3);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引用关系： str2 -&gt; str3(串池) -&gt; "ab"(1) str -&gt;"ab"(2)</li></ul><h4 id="位置">位置</h4><p>1.8版本：</p><p><img src="image-20231223132738881.png" alt="image-20231223132738881" style="zoom:80%;" /></p><p>1.6版本以下：</p><p><img src="image-20231223132804083.png" alt="image-20231223132804083" style="zoom:80%;" /></p><h4 id="调优">调优</h4><p>因为StringTable是由HashTable实现的，所以可以适当增加HashTable桶的个数，来减少字符串放入串池所需要的时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:StringTableSize=桶个数（最少设置为 1009 以上）</span><br></pre></td></tr></table></figure><h2 id="方法区">方法区</h2><p>Java 虚拟机有一个在所有 Java虚拟机<strong>线程之间共享</strong>的方法区域。方法区域类似于用于传统语言的编译代码的存储区域，或者类似于操作系统进程中的 “文本”段。</p><ul><li>内容：它存储每个类的结构，例如运行时常量池、字段和方法数据，以及方法和构造函数的代码，包括特殊方法，用于类和实例初始化以及接口初始化</li><li>创建时机：方法区域是在虚拟机启动时创建的。</li><li>实现：尽管方法区域在逻辑上是堆的一部分，但简单的实现可能不会选择垃圾收集或压缩它。此规范不强制指定方法区的位置或用于管理已编译代码的策略。方法区域可以具有固定的大小，或者可以根据计算的需要进行扩展，并且如果不需要更大的方法区域，则可以收缩。方法区域的内存不需要是连续的！不同的虚拟机有不同的实现</li></ul><figure><img src="image-20231222114529710.png" alt="方法区" /><figcaption aria-hidden="true">方法区</figcaption></figure><h3 id="运行时常量池">运行时常量池</h3><p>二进制字节码包含（类的基本信息，<strong>常量池</strong>，类方法定义，包含了虚拟机的指令）</p><p>反编译如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到：</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-17032216964146.png" alt="字节码-代码指令" style="zoom:80%;" /></p><ul><li>红框内的就是在常量表中的地址</li></ul><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-17032216494603.png" alt="字节码-常量池表" style="zoom:80%;" /></p><p><strong>常量池</strong></p><p>就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息</p><p><strong>运行时常量池</strong></p><p>常量池是 *.class文件中的，当该类被加载以后，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</p><h2 id="直接内存">直接内存</h2><p>应用场景：NIO 操作时，用于数据缓冲区bytebuffer</p><p>特点：</p><ul><li>分配回收成本较高，但读写性能高</li><li>不受JVM垃圾回收管理</li></ul><h3 id="优势-文件读写">优势-文件读写</h3><p>正常文件读写流程</p><p><img src="image-20231224103120537.png" alt="image-20231224103120537" style="zoom:80%;" /></p><p>因为 java不能直接操作文件管理，需要切换到内核态，使用本地方法进行操作，然后读取磁盘文件，会在系统内存中创建一个缓冲区，将数据读到系统缓冲区，然后在将系统缓冲区数据，复制到 java堆内存中。缺点是数据存储了两份，在系统内存中有一份，java堆中有一份，造成了不必要的复制。</p><p><strong>使用了 DirectBuffer 文件读取流程</strong></p><p><img src="image-20231224103633606.png" alt="image-20231224103633606" style="zoom:67%;" /></p><p>直接内存是<strong>操作系统和 Java程序共享的一块区域</strong>，无需将代码从系统内存复制到 Java堆内存，从而提高了效率。</p><h3 id="回收原理">回收原理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code_06_DirectMemoryTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">_1GB</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"><span class="comment">//        method();</span></span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示 直接内存 是被 unsafe 创建与回收</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Unsafe.class.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe)field.get(Unsafe.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> unsafe.allocateMemory(_1GB);</span><br><span class="line">        unsafe.setMemory(base,_1GB, (<span class="type">byte</span>)<span class="number">0</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">        unsafe.freeMemory(base);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示 直接内存被 释放</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">byteBuffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(_1GB);</span><br><span class="line">        System.out.println(<span class="string">&quot;分配完毕&quot;</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">&quot;开始释放&quot;</span>);</span><br><span class="line">        byteBuffer = <span class="literal">null</span>;</span><br><span class="line">        System.gc(); <span class="comment">// 手动 gc   才能释放byteBuffer虚引用，这样真正的内存不被引用，就可以用unsafe释放</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接内存的回收不通过gc垃圾回收，是通过unsafe.freeMemory来手动释放</p><p><strong>Bytebuffer底层实现</strong></p><ol type="1"><li><p>allocateDirect 的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocateDirect</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="comment">//创建这个对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectByteBuffer</span>(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DirectByteBuffer 类</p></li></ol><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="type">int</span> cap) &#123;   <span class="comment">// package-private</span></span><br><span class="line">   </span><br><span class="line">    <span class="built_in">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">pa</span> <span class="operator">=</span> VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="type">int</span> <span class="variable">ps</span> <span class="operator">=</span> Bits.pageSize();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> Math.max(<span class="number">1L</span>, (<span class="type">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        base = unsafe.allocateMemory(size); <span class="comment">// 申请内存</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    unsafe.setMemory(base, size, (<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    cleaner = Cleaner.create(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">Deallocator</span>(base, size, cap)); <span class="comment">// 通过虚引用，来实现直接内存的释放，this为虚引用的实际对象(bytebuffer), 第二个参数是一个回调，实现了 runnable 接口，run 方法中通过 unsafe 释放内存。</span></span><br><span class="line">    att = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="3" type="1"><li><p>Cleaner.create方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cleaner</span> <span class="keyword">extends</span> <span class="title class_">PhantomReference</span>&lt;Object&gt; </span><br></pre></td></tr></table></figure><p>这个方法是<strong>创建一个虚引用的对象</strong>，底层是一个双向链表连起来；</p><p>虚拟机后台会对虚引用的对象监测，如果虚引用的实际对象（这里是DirectByteBuffer ）被回收以后就会调用 Cleaner 的 clean方法，来清除直接内存中占用的内存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (remove(<span class="built_in">this</span>)) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//如果remove成功，调用thunk线程的run方法执行，这个run方法是前面DirectByteBuffer的构造方法传入进来，通过Cleaner.create方法传入</span></span><br><span class="line">               <span class="built_in">this</span>.thunk.run();</span><br><span class="line">           &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable var2) &#123;</span><br><span class="line">               AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">                   <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (System.err != <span class="literal">null</span>) &#123;</span><br><span class="line">                           (<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Cleaner terminated abnormally&quot;</span>, var2)).printStackTrace();</span><br><span class="line">                       &#125;</span><br><span class="line">   </span><br><span class="line">                       System.exit(<span class="number">1</span>);</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//真正从链表中移除</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Cleaner var0)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (var0.next == var0) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (first == var0) &#123;</span><br><span class="line">               <span class="keyword">if</span> (var0.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                   first = var0.next;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   first = var0.prev;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">if</span> (var0.next != <span class="literal">null</span>) &#123;</span><br><span class="line">               var0.next.prev = var0.prev;</span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">           <span class="keyword">if</span> (var0.prev != <span class="literal">null</span>) &#123;</span><br><span class="line">               var0.prev.next = var0.next;</span><br><span class="line">           &#125;</span><br><span class="line">   </span><br><span class="line">           var0.next = var0;</span><br><span class="line">           var0.prev = var0;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>this.thunk.run()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Deallocator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Runnable</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> address;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">long</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">Deallocator</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> size, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">            <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">this</span>.address = address;</span><br><span class="line">            <span class="built_in">this</span>.size = size;</span><br><span class="line">            <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//真正执行回收的方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Paranoia</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            unsafe.freeMemory(address);</span><br><span class="line">            address = <span class="number">0</span>;</span><br><span class="line">            Bits.unreserveMemory(size, capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="禁用显示回收">禁用显示回收</h3><p>System.gc()方法，在jvm调优的时候尽量设置 -XX:+DisableExplicitGC</p><h1 id="gc垃圾回收机制">GC垃圾回收机制</h1><p>JVM之所以能够帮我们管理对象的回收操作，不用我们手动释放对象的内存，就是靠JVM的垃圾回收。</p><h2 id="判断回收条件">判断回收条件</h2><h3 id="引用计数法">引用计数法</h3><p>概念：当一个对象被引用时，这个对象的引用计数器 +1，值为0表示不在被引用，直接清除</p><p>缺陷：循环引用问题</p><p><img src="image-20231225103144019.png" alt="image-20231225103144019" style="zoom:80%;" /></p><ul><li>两个对象的计数都为1，导致两个对象都无法被释放。</li></ul><h4 id="种引用类型">5种引用类型</h4><p><img src="image-20231226102624330.png" alt="image-20231226102624330" style="zoom: 67%;" /></p><h5 id="强引用">强引用</h5><p>所有 GC Roots对象都不通过【强引用】引用该对象，该对象才能被垃圾回收</p><h5 id="软引用">软引用</h5><p>仅有软引用引用该对象时，在垃圾回收后，内存<strong>仍不足</strong>时会再次出发垃圾回收，回收软引用对象，可以配合引用队列来释放软引用自身</p><h5 id="弱引用">弱引用</h5><p>仅有弱引用引用该对象时，在垃圾回收时，无论内存是否充足，都会回收弱引用对象，可以配合引用队列来释放弱引用自身。</p><h6 id="threadlocal内存泄露">ThreadLocal内存泄露</h6><figure><img src="v2-50b25a5f65fe02d6eebe27801a94c833_720w.webp"alt="ThreadLocal引用" /><figcaption aria-hidden="true">ThreadLocal引用</figcaption></figure><p>线程内部实际拥有的是Entry，ThreadLocal只是对这个Entry的K的一个引用，但是获取这个Entry的Value的途径还是通过K获取。</p><p><strong>突然我们ThreadLocal是null了，也就是要被垃圾回收器回收了，但是此时我们的ThreadLocalMap（thread的内部属性）生命周期和Thread的一样，它不会回收，这时候就出现了一个现象。那就是ThreadLocalMap的key没了，但是value还在，这就造成了内存泄漏。</strong></p><h5 id="虚引用">虚引用</h5><p><strong>必须配合引用队列使用</strong>，主要配合 ByteBuffer使用，被引用对象回收时，会将虚引用入队，由 Reference Handler线程调用虚引用相关方法释放直接内存</p><h5 id="终结器引用">终结器引用</h5><p>无需手动编码，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队（被引用对象暂时没有被回收），再由Finalizer 线程通过终结器引用找到被引用对象并调用它的 finalize（已重写）方法，第二次 GC 时才能回收被引用对象。</p><h3 id="可达性分析法">可达性分析法</h3><p>JVM 中的垃圾回收器通过可达性分析来探索所有存活的对象。</p><p>jvm会定时去搜索扫描堆中的对象，沿着GCroot的引用链搜寻，搜寻到的对象不被清除，没有搜寻到也就是没有被GCroot引用链串起来的对象会被垃圾回收。</p><h4 id="可以作为gc-root的对象">可以作为GC root的对象</h4><ul><li><strong>虚拟机栈</strong>（栈帧中的本地变量表）中引用的对象。</li><li>方法区中类<strong>静态属性</strong>引用的对象</li><li>方法区中<strong>常量</strong>引用的对象</li><li>本地方法栈中JNI（即一般说的<strong>Native方法</strong>）引用的对象</li></ul><h5 id="eclipse-memory-analyzer工具查看">Eclipse MemoryAnalyzer工具查看</h5><ol type="1"><li><p>使用 jps 命令，查看程序的进程</p></li><li><p>使用 <code>jmap -dump:format=b,live,file=1.bin 进程id</code>命令转储文件</p><ul><li>dump：转储文件</li><li>format=b：二进制文件</li><li>file：文件名</li></ul></li><li><p>打开 Eclipse Memory Analyzer 对 1.bin 文件进行分析</p><figure><img src="image-20231225103710405.png" alt="image-20231225103710405" /><figcaption aria-hidden="true">image-20231225103710405</figcaption></figure></li></ol><h2 id="垃圾回收算法">垃圾回收算法</h2><h3 id="标记-清除">标记-清除</h3><p>对标记的对象直接清除</p><p>优点：</p><ul><li>速度快</li></ul><p>缺点：</p><ul><li>会产生内存碎片</li></ul><p><img src="image-20231227111055176.png" alt="image-20231227111055176" style="zoom:67%;" /></p><h3 id="标记-整理">标记-整理</h3><p>清除完之后，会把存活的对象的内存地址重新整理，排列整齐，保证不出现内存碎片问题，但是效率比较慢。</p><p>存活对象比较多的话，整理起来耗时，占用CPU，甚至出现用户程序阻塞的问题。</p><p><img src="image-20231227111237657.png" alt="image-20231227111237657" style="zoom:67%;" /></p><h3 id="标记-复制">标记-复制</h3><p>一种空间换时间的思想，两段空间，省去了整理对象的用时，同时能保证对象复制到另一半内存空间之后不会产生内存碎片。</p><figure><img src="image-20231227111408977.png" alt="image-20231227111408977" /><figcaption aria-hidden="true">image-20231227111408977</figcaption></figure><h3 id="分代回收">分代回收</h3><figure><img src="image-20231228195330497.png" alt="image-20231228195330497" /><figcaption aria-hidden="true">image-20231228195330497</figcaption></figure><ol type="1"><li>新的对象首先分配在eden区 ，其中新生代区域还包括幸存区（from、to）</li><li>新生代空间不足时，触发minor gc<ul><li>Minor GC： 把eden区和from区存活的对象移动到to区，并且对应的存活年龄+ 1</li><li>引发stop theworld：暂停其他线程，等垃圾回收结束后，恢复用户线程运行</li><li>存活年龄：用四个比特位标识，最大15，当年龄到达15就会被送到老年代</li></ul></li><li>当老年代空间不足时，会先触发 minor gc，如果空间仍然不足，那么就触发full gc ，STW停止的时间更长。</li><li>当最后一次fullGC以后，老年代依旧没内存，整个内存空间满了，就会触发OOM异常</li></ol><h3 id="gc调优参数">GC调优参数</h3><table><colgroup><col style="width: 23%" /><col style="width: 76%" /></colgroup><thead><tr class="header"><th style="text-align: center;">含义</th><th style="text-align: center;">参数</th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">堆初始大小</td><td style="text-align: center;">-Xms</td></tr><tr class="even"><td style="text-align: center;">堆最大大小</td><td style="text-align: center;">-Xmx 或 -XX:MaxHeapSize=size</td></tr><tr class="odd"><td style="text-align: center;">新生代大小</td><td style="text-align: center;">-Xmn 或 (-XX:NewSize=size +-XX:MaxNewSize=size )</td></tr><tr class="even"><td style="text-align: center;">幸存区比例（动态）</td><td style="text-align: center;">-XX:InitialSurvivorRatio=ratio 和-XX:+UseAdaptiveSizePolicy</td></tr><tr class="odd"><td style="text-align: center;">幸存区比例</td><td style="text-align: center;">-XX:SurvivorRatio=ratio</td></tr><tr class="even"><td style="text-align: center;">晋升阈值</td><td style="text-align: center;">-XX:MaxTenuringThreshold=threshold</td></tr><tr class="odd"><td style="text-align: center;">晋升详情</td><td style="text-align: center;">-XX:+PrintTenuringDistribution</td></tr><tr class="even"><td style="text-align: center;">GC详情</td><td style="text-align: center;">-XX:+PrintGCDetails -verbose:gc</td></tr><tr class="odd"><td style="text-align: center;">FullGC 前 MinorGC</td><td style="text-align: center;">-XX:+ScavengeBeforeFullGC</td></tr></tbody></table><h2 id="垃圾回收器">垃圾回收器</h2><p>指标：</p><ul><li>并行收集：指多条垃圾收集线程并行工作，但此时用户线程仍处于等待状态。</li><li>并发收集：指用户线程与垃圾收集线程同时工作（不一定是并行的可能会交替执行）。用户程序在继续运行，而垃圾收集程序运行在另一个CPU 上</li><li>吞吐量：即 CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值<ul><li><code>吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )</code>，也就是。例如：虚拟机共运行100 分钟，垃圾收集器花掉 1 分钟，那么吞吐量就是 99% 。</li></ul></li></ul><h3 id="串行">串行</h3><p>适用场景：</p><ul><li>单线程</li><li>堆内存较少，适合个人电脑</li></ul><figure><img src="image-20231230171402073.png" alt="image-20231230171402073" /><figcaption aria-hidden="true">image-20231230171402073</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//老年代新生代都采用</span><br><span class="line">-XX:+UseSerialGC=serial + serialOld</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>安全：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象</li><li>阻塞：因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入阻塞状态</li></ul><p><strong>Serial 收集器</strong> Serial收集器是最基本的、发展历史最悠久的收集器特点：单线程、简单高效（与其他收集器的单线程相比），采用标记-复制算法。对于限定单个CPU 的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（StopThe World）</p><p><strong>ParNew 收集器</strong> ParNew 收集器其实就是 Serial收集器的多线程版本 特点：多线程、ParNew收集器默认开启的收集线程数与CPU的数量相同，在 CPU非常多的环境中，可以使用 -XX:ParallelGCThreads参数来限制垃圾收集的线程数。和 Serial 收集器一样存在 Stop The World问题</p><p><strong>Serial Old 收集器</strong> Serial Old 是 Serial收集器的老年代版本 特点：同样是单线程收集器，采用标记-整理算法</p><h3 id="吞吐量优先">吞吐量优先</h3><p>适用场景：</p><ul><li>多线程</li><li>适用于堆内存较大，多核 cpu</li><li>目的：让单位时间内，STW 的时间最短</li></ul><figure><img src="image-20231230173848573.png" alt="image-20231230173848573" /><figcaption aria-hidden="true">image-20231230173848573</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseParallelGC ~ -XX:+UsePrallerOldGC</span><br><span class="line">-XX:+UseAdaptiveSizePolicy</span><br><span class="line">-XX:GCTimeRatio=ratio // 1/(1+radio)</span><br><span class="line">-XX:MaxGCPauseMillis=ms // 200ms</span><br><span class="line">-XX:ParallelGCThreads=n</span><br></pre></td></tr></table></figure><p><strong>Parallel Scavenge 收集器</strong>与吞吐量关系密切，故也称为吞吐量优先收集器特点：属于新生代收集器也是采用复制算法的收集器（用到了新生代的幸存区），又是并行的多线程收集器（与ParNew 收集器类似）</p><p>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：GC自适应调节策略（与ParNew 收集器最重要的一个区别）</p><ul><li>GC自适应调节策略：Parallel Scavenge 收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden 与 Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC 的自适应调节策略。</li></ul><p>Parallel Scavenge 收集器使用两个参数控制吞吐量：</p><ul><li>XX:MaxGCPauseMillis=ms 控制最大的垃圾收集停顿时间（默认200ms）</li><li>XX:GCTimeRatio=rario 直接设置吞吐量的大小</li></ul><p><strong>Parallel Old 收集器</strong></p><ul><li>是 Parallel Scavenge 收集器的老年代版本</li><li>特点：多线程，采用标记-整理算法（老年代没有幸存区）</li></ul><h3 id="响应时间优先">响应时间优先</h3><p>特点：</p><ul><li>多线程</li><li>适用于堆内存较大，多核 cpu</li><li>尽可能让 STW 的单次时间最短</li></ul><figure><img src="image-20231230174314031.png" alt="image-20231230174314031" /><figcaption aria-hidden="true">image-20231230174314031</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC ~ -XX:+UseParNewGC ~ SerialOld</span><br><span class="line">-XX:ParallelGCThreads=n ~ -XX:ConcGCThreads=threads</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=percent</span><br><span class="line">-XX:+CMSScavengeBeforeRemark</span><br></pre></td></tr></table></figure><h4 id="cms-收集器">CMS 收集器</h4><p>Concurrent MarkSweep，一种以获取最短回收停顿时间为目标的老年代收集器</p><p>特点：</p><ul><li>基于标记-清除算法实现。</li><li>并发收集、低停顿，但是会产生内存碎片</li></ul><p>应用场景：适用于注重服务的<strong>响应</strong>速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web 程序、b/s 服务</p><p>CMS 收集器的运行过程分为下列4步：</p><ol type="1"><li>初始标记：标记 GC Roots 能直接到的对象。速度很快但是仍存在 Stop TheWorld 问题。</li><li>并发标记：进行 GC Roots Tracing的过程，找出存活对象且用户线程可并发执行。</li><li>重新标记：为了修正并发标记期间因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World 问题</li><li>并发清除：对标记的对象进行清除回收，清除的过程中，可能任然会有新的垃圾产生，这些垃圾就叫浮动垃圾，如果当用户需要存入一个很大的对象时，新生代放不下去，老年代由于浮动垃圾过多，就会退化为serial Old收集器，将老年代垃圾进行标记-整理，当然这也是很耗费时间的</li></ol><p>CMS 收集器的内存回收过程是与用户线程一起并发执行的，可以搭配 ParNew收集器（多线程，新生代，复制算法）与 Serial Old收集器（单线程，老年代，标记-整理算法）使用。</p><h3 id="g1">G1</h3><p><strong>特征</strong></p><ul><li>同时注重<strong>吞吐量</strong>和<strong>低延迟</strong>（响应时间）</li><li>超大堆内存（内存大的），会将堆内存划分为多个大小相等的区域Region</li><li>整体上是标记-整理算法，两个区域之间是复制算法</li></ul><p>JDK8 并不是默认开启的，所需要参数开启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseG1GC</span><br><span class="line">-XX:G1HeapRegionSize=size</span><br><span class="line">-XX:MaxGCPauseMillis=time</span><br></pre></td></tr></table></figure><h4 id="垃圾回收阶段">垃圾回收阶段</h4><p><img src="image-20240102110849985.png" alt="image-20240102110849985" style="zoom:67%;" /></p><ul><li>Young Collection：对新生代垃圾收集</li><li>Young Collection + ConcurrentMark：如果老年代内存到达一定的阈值了，新生代垃圾收集同时会执行一些并发的标记。</li><li>Mixed Collection：会对新生代 + 老年代 +幸存区等进行混合收集，然后收集结束，会重新进入新生代收集。</li></ul><h5 id="young-collection">Young Collection</h5><p>分区是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制GC 产生的停顿时间！</p><p>每个小区间可以代表：E：eden，S：幸存区，O：老年代</p><figure><img src="20210210122339138.gif" alt="Young Collection" /><figcaption aria-hidden="true">Young Collection</figcaption></figure><p>注意：会产生STW</p><h6 id="跨代引用">跨代引用</h6><p>老年代可能有老年对象引用了新生代对象（卡表），这样可以使新生代对象不被回收</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-170416686796910.png" alt="跨代引用" style="zoom:50%;" /></p><p><strong>卡表&amp;Remembered Set</strong></p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-170416698795213.png" alt="卡表" style="zoom:50%;" /></p><ul><li>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<ul><li>脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡</li></ul></li></ul><h5 id="young-collection-cm">Young Collection + CM</h5><p>老年代占用堆空间比例达到阈值时，进行并发标记（不会STW），由 JVM参数决定 -XX:InitiatingHeapOccupancyPercent=percent （默认45%）</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70.png" alt="在这里插入图片描述" style="zoom:50%;" /></p><h5 id="mixed-collection">Mixed Collection</h5><p>会对 E S O进行<strong>全面的回收</strong>，阶段分为：最终标记、拷贝存活的对象（都会产生STW）</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-17041665984177.png" alt="Mixed Collection" style="zoom:50%;" /></p><h5 id="full-gc">Full GC</h5><p>G1 在老年代内存不足时（老年代所占内存超过阈值）</p><ul><li>如果垃圾产生速度慢于垃圾回收速度，不会触发 FullGC，还是并发地进行清理</li><li>如果垃圾产生速度快于垃圾回收速度，便会触发 FullGC，然后<strong>退化成 serial Old</strong>收集器串行的收集，就会导致停顿的时候长。</li></ul><h5 id="remark">Remark</h5><p>三色标记法：</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-170416746268716.png" alt="三色标记法" style="zoom:33%;" /></p><ul><li>黑色：已被处理，需要保留的</li><li>灰色：正在处理中的</li><li>白色：还未处理的</li></ul><p>并发标记问题：</p><p><img src="image-20240102115226270.png" alt="标记1" style="zoom:67%;" /></p><p>这时，B断掉与C的引用，但是与此同时，A打算引用C，这时会引发Remark：</p><ul><li><p>之前 C 未被引用，这时 A 引用了 C ，就会给 C加一个写屏障，写屏障的指令会被执行，将 C 放入一个队列当中，并将 C 变为<strong>处理中</strong>状态，也就是灰色</p><p><img src="image-20240102115559103.png" alt="Remark1" style="zoom:50%;" /></p></li><li><p>在并发标记阶段结束以后，重新标记阶段会 STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它，由灰色变成黑色。</p><p><img src="image-20240102115620042.png" alt="Remark2" style="zoom:50%;" /></p></li></ul><h4 id="优化">优化</h4><h5 id="字符串去重">字符串去重</h5><p>过程：</p><ul><li>将所有新分配的字符串（底层是 char[]）放入一个<strong>队列</strong></li><li>当新生代回收时，G1 并发检查是否有重复的字符串</li><li>如果字符串的值一样，就让他们引用<strong>同一个char数组</strong></li></ul><p>注意，其与 String.intern() 的区别</p><ul><li>String.intern() 关注的是字符串对象</li><li>字符串去重关注的是 char[]</li><li>在 JVM 内部，使用了不同的字符串标</li></ul><h5 id="巨型对象的回收">巨型对象的回收</h5><ul><li>一个对象大于region的一半时，就称为巨型对象</li><li><strong>G1不会对巨型对象进行拷贝</strong></li><li>回收时被优先考虑</li><li>G1会跟踪老年代所有incoming（卡表）引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉</li></ul><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MDI4MDU3Ng==,size_16,color_FFFFFF,t_70-170416845516119.png" alt="巨型对象的回收" style="zoom:50%;" /></p><h2 id="gc调优">gc调优</h2><p>查看虚拟机参数命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\JavaJDK1.8\bin\java   -XX:+PrintFlagsFinal -version | findstr &quot;GC&quot;</span><br></pre></td></tr></table></figure><p>可以根据参数去查询具体的信息</p><p><strong>调优领域</strong></p><ul><li>内存</li><li>锁竞争</li><li>cpu 占用</li><li>io</li><li>gc</li></ul><p><strong>目标</strong> 低延迟/高吞吐量 ？ 选择合适的GC</p><ul><li><p>CMS G1 ZGC</p></li><li><p>ParallelGC</p></li><li><p>Zing</p></li></ul><p><strong>最快的 GC</strong></p><p>首先排除减少因为自身编写的代码而引发的内存问题，不产生GC就是最快的GC</p><p>查看 Full GC 前后的内存占用，考虑以下几个问题</p><ul><li><p>数据是不是太多？</p><ul><li>例如：<code>resultSet = statement.executeQuery(“select * from 大表 limit n”)</code>从数据库中一下子取出众多数据放到内存中，肯定会引起堆内存紧张</li></ul></li><li><p>数据表示是否太臃肿</p><ul><li><p>对象图</p></li><li><p>对象大小 16byte 例如 Integer 是24字节，非必要可以转化成 int类型，只占用4byte</p></li></ul></li><li><p>是否存在内存泄漏</p><ul><li><p>static Map map …</p></li><li><p>软</p></li><li><p>弱</p></li><li><p>第三方缓存实现</p></li></ul></li></ul><h3 id="新生代调优">新生代调优</h3><p><strong>新生代的特点</strong></p><ul><li><p>所有的 new 操作分配内存都是非常廉价的</p><ul><li>为了防止多线程并发访问某一内存块，采用TLAB thread-lcoal allocationbuffer 单独的给每个线程提供私有空间</li></ul></li><li><p>死亡对象回收零代价</p></li><li><p>大部分对象用过即死（朝生夕死）</p></li><li><p>Minor GC 所用时间远小于 Full GC</p></li></ul><p>新生代内存越大越好么？</p><p>不是</p><ul><li>新生代内存太小：频繁触发 Minor GC ，会 STW ，会使得吞吐量下降</li><li>新生代内存太大：老年代内存占比有所降低，会更频繁地触发 FullGC。而且触发 Minor GC 时，清理新生代所花费的时间会更长</li></ul><p>新生代内存设置为能容纳<code>[并发量*(单次请求-&gt;响应 产生的对象大小)]</code> 的数据为宜</p><ul><li><p>幸存区需要能够保存 当前活跃对象 + 需要晋升的对象</p><ul><li>晋升阈值配置得当，让长时间存活的对象尽快晋升</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxTenuringThreshold=threshold</span><br><span class="line">-XX:+PrintTenuringDistrubution</span><br></pre></td></tr></table></figure><h3 id="老年代调优">老年代调优</h3><p><strong>CMS</strong></p><p>CMS 的老年代内存越大越好，先尝试不做调优</p><ul><li><p>如果没有 Full GC那么内存已经够用，否则先尝试调优新生代。</p></li><li><p>当观察发现 Full GC 时老年代内存占用，将老年代内存预设调大 1/4 ~1/3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:CMSInitiatingOccupancyFraction=percent</span><br></pre></td></tr></table></figure></li></ul><p>案例</p><p>案例1：Full GC 和 Minor GC 频繁</p><p>案例2：请求高峰期发生 Full GC，单次暂停时间特别长（CMS）</p><p>案例3：老年代充裕情况下，发生 Full GC（jdk1.7）</p><h1 id="字节码技术">字节码技术</h1><h2 id="类文件结构">类文件结构</h2><p>通过 javac 类名.java 编译 java 文件后，会生成一个 .class的文件，以下是字节码文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">0000000 ca fe ba be 00 00 00 34 00 23 0a 00 06 00 15 09 </span><br><span class="line">0000020 00 16 00 17 08 00 18 0a 00 19 00 1a 07 00 1b 07 </span><br><span class="line">0000040 00 1c 01 00 06 3c 69 6e 69 74 3e 01 00 03 28 29 </span><br><span class="line">0000060 56 01 00 04 43 6f 64 65 01 00 0f 4c 69 6e 65 4e </span><br><span class="line">0000100 75 6d 62 65 72 54 61 62 6c 65 01 00 12 4c 6f 63 </span><br><span class="line">0000120 61 6c 56 61 72 69 61 62 6c 65 54 61 62 6c 65 01 </span><br><span class="line">0000140 00 04 74 68 69 73 01 00 1d 4c 63 6e 2f 69 74 63 </span><br><span class="line">0000160 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c 6f </span><br><span class="line">0000200 57 6f 72 6c 64 3b 01 00 04 6d 61 69 6e 01 00 16 </span><br><span class="line">0000220 28 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 </span><br><span class="line">0000240 69 6e 67 3b 29 56 01 00 04 61 72 67 73 01 00 13 </span><br><span class="line">0000260 5b 4c 6a 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 </span><br><span class="line">0000300 6e 67 3b 01 00 10 4d 65 74 68 6f 64 50 61 72 61 </span><br><span class="line">0000320 6d 65 74 65 72 73 01 00 0a 53 6f 75 72 63 65 46 </span><br><span class="line">0000340 69 6c 65 01 00 0f 48 65 6c 6c 6f 57 6f 72 6c 64</span><br><span class="line">0000360 2e 6a 61 76 61 0c 00 07 00 08 07 00 1d 0c 00 1e </span><br><span class="line">0000400 00 1f 01 00 0b 68 65 6c 6c 6f 20 77 6f 72 6c 64 </span><br><span class="line">0000420 07 00 20 0c 00 21 00 22 01 00 1b 63 6e 2f 69 74 </span><br><span class="line">0000440 63 61 73 74 2f 6a 76 6d 2f 74 35 2f 48 65 6c 6c </span><br><span class="line">0000460 6f 57 6f 72 6c 64 01 00 10 6a 61 76 61 2f 6c 61 </span><br><span class="line">0000500 6e 67 2f 4f 62 6a 65 63 74 01 00 10 6a 61 76 61 </span><br><span class="line">0000520 2f 6c 61 6e 67 2f 53 79 73 74 65 6d 01 00 03 6f </span><br><span class="line">0000540 75 74 01 00 15 4c 6a 61 76 61 2f 69 6f 2f 50 72 </span><br><span class="line">0000560 69 6e 74 53 74 72 65 61 6d 3b 01 00 13 6a 61 76 </span><br><span class="line">0000600 61 2f 69 6f 2f 50 72 69 6e 74 53 74 72 65 61 6d </span><br><span class="line">0000620 01 00 07 70 72 69 6e 74 6c 6e 01 00 15 28 4c 6a </span><br><span class="line">0000640 61 76 61 2f 6c 61 6e 67 2f 53 74 72 69 6e 67 3b </span><br><span class="line">0000660 29 56 00 21 00 05 00 06 00 00 00 00 00 02 00 01 </span><br><span class="line">0000700 00 07 00 08 00 01 00 09 00 00 00 2f 00 01 00 01 </span><br><span class="line">0000720 00 00 00 05 2a b7 00 01 b1 00 00 00 02 00 0a 00 </span><br><span class="line">0000740 00 00 06 00 01 00 00 00 04 00 0b 00 00 00 0c 00 </span><br><span class="line">0000760 01 00 00 00 05 00 0c 00 0d 00 00 00 09 00 0e 00 </span><br><span class="line">0001000 0f 00 02 00 09 00 00 00 37 00 02 00 01 00 00 00 </span><br><span class="line">0001020 09 b2 00 02 12 03 b6 00 04 b1 00 00 00 02 00 0a </span><br><span class="line">0001040 00 00 00 0a 00 02 00 00 00 06 00 08 00 07 00 0b </span><br><span class="line">0001060 00 00 00 0c 00 01 00 00 00 09 00 10 00 11 00 00 </span><br><span class="line">0001100 00 12 00 00 00 05 01 00 10 00 00 00 01 00 13 00 </span><br><span class="line">0001120 00 00 02 00 14</span><br></pre></td></tr></table></figure><p>根据 JVM 规范，字节码文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">u4    magic-- 前四个字节的魔数，不同的东西有不同的魔数</span><br><span class="line">u2             minor_version;    -- 小版本</span><br><span class="line">u2             major_version;     -- 大版本   </span><br><span class="line">u2             constant_pool_count;    -- 常量池大小</span><br><span class="line">cp_info        constant_pool[constant_pool_count-1];    -- </span><br><span class="line">u2             access_flags;    </span><br><span class="line">u2             this_class;    </span><br><span class="line">u2             super_class;   </span><br><span class="line">u2             interfaces_count;    </span><br><span class="line">u2             interfaces[interfaces_count];   </span><br><span class="line">u2             fields_count;    </span><br><span class="line">field_info     fields[fields_count];   </span><br><span class="line">u2             methods_count;    </span><br><span class="line">method_info    methods[methods_count];    </span><br><span class="line">u2             attributes_count;    </span><br><span class="line">attribute_info attributes[attributes_count];</span><br></pre></td></tr></table></figure><h2 id="字节码指令">字节码指令</h2><h3 id="javap工具">javap工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javap -v D:Demo.class</span><br></pre></td></tr></table></figure><h3 id="图解案例">图解案例</h3><h4 id="赋值基础运算">赋值基础运算</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3_1</span> &#123;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        </span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;        </span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Short.MAX_VALUE + <span class="number">1</span>;        </span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a + b;        </span><br><span class="line">System.out.println(c);   </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的字节码文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">Classfile /root/Demo3_1.<span class="keyword">class</span></span><br><span class="line"><span class="title class_">Last</span> modified Jul <span class="number">7</span>, <span class="number">2019</span>; size <span class="number">665</span> bytes</span><br><span class="line">MD5 checksum a2c29a22421e218d4924d31e6990cfc5</span><br><span class="line">Compiled from <span class="string">&quot;Demo3_1.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cn</span>.itcast.jvm.t3.bytecode.Demo3_1</span><br><span class="line">minor version: <span class="number">0</span></span><br><span class="line">major version: <span class="number">52</span></span><br><span class="line">flags: ACC_PUBLIC, ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">#<span class="number">1</span> = Methodref #<span class="number">7.</span>#<span class="number">26</span> <span class="comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">#<span class="number">2</span> = Class #<span class="number">27</span> <span class="comment">// java/lang/Short</span></span><br><span class="line">#<span class="number">3</span> = Integer <span class="number">32768</span></span><br><span class="line">#<span class="number">4</span> = Fieldref #<span class="number">28.</span>#<span class="number">29</span> <span class="comment">//</span></span><br><span class="line">java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">#<span class="number">5</span> = Methodref #<span class="number">30.</span>#<span class="number">31</span> <span class="comment">// java/io/PrintStream.println:(I)V</span></span><br><span class="line">#<span class="number">6</span> = Class #<span class="number">32</span> <span class="comment">// cn/itcast/jvm/t3/bytecode/Demo3_1</span></span><br><span class="line">#<span class="number">7</span> = Class #<span class="number">33</span> <span class="comment">// java/lang/Object</span></span><br><span class="line">#<span class="number">8</span> = Utf8 &lt;init&gt;</span><br><span class="line">#<span class="number">9</span> = Utf8 ()V</span><br><span class="line">#<span class="number">10</span> = Utf8 Code</span><br><span class="line">#<span class="number">11</span> = Utf8 LineNumberTable</span><br><span class="line">#<span class="number">12</span> = Utf8 LocalVariableTable</span><br><span class="line">#<span class="number">13</span> = Utf8 <span class="built_in">this</span></span><br><span class="line">#<span class="number">14</span> = Utf8 Lcn/itcast/jvm/t3/bytecode/Demo3_1;</span><br><span class="line">#<span class="number">15</span> = Utf8 main</span><br><span class="line">#<span class="number">16</span> = Utf8 ([Ljava/lang/String;)V</span><br><span class="line">#<span class="number">17</span> = Utf8 args</span><br><span class="line">#<span class="number">18</span> = Utf8 [Ljava/lang/String;</span><br><span class="line">#<span class="number">19</span> = Utf8 a</span><br><span class="line">#<span class="number">22</span> = Utf8 c</span><br><span class="line">#<span class="number">23</span> = Utf8 MethodParameters</span><br><span class="line">#<span class="number">24</span> = Utf8 SourceFile</span><br><span class="line">#<span class="number">25</span> = Utf8 Demo3_1.java</span><br><span class="line">#<span class="number">26</span> = NameAndType #<span class="number">8</span>:#<span class="number">9</span> <span class="comment">// &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">#<span class="number">27</span> = Utf8 java/lang/Short</span><br><span class="line">#<span class="number">28</span> = Class #<span class="number">34</span> <span class="comment">// java/lang/System</span></span><br><span class="line">#<span class="number">29</span> = NameAndType #<span class="number">35</span>:#<span class="number">36</span> <span class="comment">// out:Ljava/io/PrintStream;</span></span><br><span class="line">#<span class="number">30</span> = Class #<span class="number">37</span> <span class="comment">// java/io/PrintStream</span></span><br><span class="line">#<span class="number">31</span> = NameAndType #<span class="number">38</span>:#<span class="number">39</span> <span class="comment">// println:(I)V</span></span><br><span class="line">#<span class="number">32</span> = Utf8 cn/itcast/jvm/t3/bytecode/Demo3_1</span><br><span class="line">#<span class="number">33</span> = Utf8 java/lang/Object</span><br><span class="line">#<span class="number">34</span> = Utf8 java/lang/System</span><br><span class="line">#<span class="number">35</span> = Utf8 out</span><br><span class="line">#<span class="number">36</span> = Utf8 Ljava/io/PrintStream;</span><br><span class="line">#<span class="number">37</span> = Utf8 java/io/PrintStream</span><br><span class="line">#<span class="number">38</span> = Utf8 println</span><br><span class="line">#<span class="number">39</span> = Utf8 (I)V</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> cn.itcast.jvm.t3.bytecode.Demo3_1();</span><br><span class="line">descriptor: ()V</span><br><span class="line">flags: ACC_PUBLIC</span><br><span class="line">Code:</span><br><span class="line">stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line"><span class="number">0</span>: aload_0</span><br><span class="line"><span class="number">1</span>: invokespecial #<span class="number">1</span> <span class="comment">// Method java/lang/Object.&quot;</span></span><br><span class="line">&lt;init&gt;<span class="string">&quot;:()V</span></span><br><span class="line"><span class="string">4: return</span></span><br><span class="line"><span class="string">LineNumberTable:</span></span><br><span class="line"><span class="string">line 6: 0</span></span><br><span class="line"><span class="string">LocalVariableTable:</span></span><br><span class="line"><span class="string">Start Length Slot Name Signature</span></span><br><span class="line"><span class="string">0 5 0 this Lcn/itcast/jvm/t3/bytecode/Demo3_1;</span></span><br><span class="line"><span class="string">public static void main(java.lang.String[]);</span></span><br><span class="line"><span class="string">descriptor: ([Ljava/lang/String;)V</span></span><br><span class="line"><span class="string">flags: ACC_PUBLIC, ACC_STATIC</span></span><br><span class="line"><span class="string">Code:</span></span><br><span class="line"><span class="string">stack=2, locals=4, args_size=1</span></span><br><span class="line"><span class="string">    0: bipush 10</span></span><br><span class="line"><span class="string">    2: istore_1</span></span><br><span class="line"><span class="string">    3: ldc #3 // int 32768</span></span><br><span class="line"><span class="string">    5: istore_2</span></span><br><span class="line"><span class="string">    6: iload_1</span></span><br><span class="line"><span class="string">    7: iload_2</span></span><br><span class="line"><span class="string">    8: iadd</span></span><br><span class="line"><span class="string">    9: istore_3</span></span><br><span class="line"><span class="string">    10: getstatic #4 // Field</span></span><br><span class="line"><span class="string">    java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line"><span class="string">    13: iload_3</span></span><br><span class="line"><span class="string">    14: invokevirtual #5 // Method</span></span><br><span class="line"><span class="string">    java/io/PrintStream.println:(I)V</span></span><br><span class="line"><span class="string">    17: return</span></span><br><span class="line"><span class="string">LineNumberTable:</span></span><br><span class="line"><span class="string">    line 8: 0</span></span><br><span class="line"><span class="string">    line 9: 3</span></span><br><span class="line"><span class="string">    line 12: 17</span></span><br><span class="line"><span class="string">LocalVariableTable:</span></span><br><span class="line"><span class="string">Start Length Slot Name Signature</span></span><br><span class="line"><span class="string">0 18 0 args [Ljava/lang/String;</span></span><br><span class="line"><span class="string">3 15 1 a I</span></span><br><span class="line"><span class="string">6 12 2 b I</span></span><br><span class="line"><span class="string">10 8 3 c I</span></span><br><span class="line"><span class="string">MethodParameters:</span></span><br><span class="line"><span class="string">Name Flags</span></span><br><span class="line"><span class="string">args</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>常量池载入运行时常量池</strong></p><p>将静态变量放到常量池中，其实常量池也属于方法区，单独抽出来了。</p><figure><img src="image-20240108120650688.png" alt="常量池载入" /><figcaption aria-hidden="true">常量池载入</figcaption></figure><p><strong>方法字节码载入方法区</strong></p><figure><img src="image-20240108121208720.png" alt="方法字节码载入方法区" /><figcaption aria-hidden="true">方法字节码载入方法区</figcaption></figure><p><strong>main 线程开始运行，分配栈帧内存</strong></p><p>（stack=2，locals=4）对应操作数栈有 2 个空间（每个空间 4个字节），局部变量表中有 4 个槽位。</p><figure><img src="image-20240108150115655.png" alt="image-20240108150115655" /><figcaption aria-hidden="true">image-20240108150115655</figcaption></figure><p><strong>执行引擎执行代码</strong></p><ol type="1"><li><strong>bipush 10</strong><ul><li><strong>将一个 byte 压入操作数栈</strong>（其长度会补齐 4个字节），类似的指令还有<ul><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li><li>ldc 将一个 int 压入操作数栈</li><li>ldc2_w 将一个 long 压入操作数栈（<strong>分两次压入</strong>，因为long 是 8 个字节）</li><li>这里存在于short范围内的数字都是和字节码指令存在一起，<strong>超过short 范围的数字存入了常量池</strong></li></ul></li></ul></li></ol><figure><img src="image-20240108152307214.png" alt="bipush" /><figcaption aria-hidden="true">bipush</figcaption></figure><ol start="2" type="1"><li><strong>istore 1</strong><ul><li>将操作数栈栈顶元素弹出，放入局部变量表的 slot 1 中，对应代码中的 a =10</li></ul></li></ol><figure><img src="image-20240108152626006.png" alt="istore 1" /><figcaption aria-hidden="true">istore 1</figcaption></figure><ol start="3" type="1"><li><strong>ldc #3</strong><ul><li>读取运行时常量池中 #3 ，即 32768 (超过 short最大值范围的数会被放到运行时常量池中)，将其<strong>加载到操作数栈</strong>中，编译期已经做了编译优化，进行了计算。</li></ul></li></ol><figure><img src="image-20240108152733243.png" alt="ldc #3" /><figcaption aria-hidden="true">ldc #3</figcaption></figure><ol start="4" type="1"><li><strong>istore 2</strong><ul><li>将操作数栈中的元素弹出，放到局部变量表的 2 号位置</li></ul></li></ol><figure><img src="image-20240108152838616.png" alt="istore 2" /><figcaption aria-hidden="true">istore 2</figcaption></figure><ol start="5" type="1"><li><strong>iload1 iload2</strong><ul><li>将局部变量表中 1 号位置和 2号位置的元素放入操作数栈中。因为<strong>只能在操作数栈中执行运算操作</strong></li></ul></li></ol><figure><img src="image-20240108154151871.png" alt="iload" /><figcaption aria-hidden="true">iload</figcaption></figure><figure><img src="image-20240108154407127.png" alt="iload" /><figcaption aria-hidden="true">iload</figcaption></figure><ol start="6" type="1"><li><strong>iadd</strong><ul><li>将操作数栈中的两个元素弹出栈并相加，结果在压入操作数栈中。</li></ul></li></ol><figure><img src="image-20240108154817167.png" alt="iadd" /><figcaption aria-hidden="true">iadd</figcaption></figure><ol start="7" type="1"><li><strong>istore 3</strong><ul><li>将操作数栈中的元素弹出，放入局部变量表的3号位置</li></ul></li></ol><figure><img src="image-20240108154904597.png" alt="istore" /><figcaption aria-hidden="true">istore</figcaption></figure><ol start="8" type="1"><li><strong>getstatic #4</strong><ul><li>在运行时常量池中找到#4，发现是一个对象，在堆内存中找到该对象，并将其<strong>引用</strong>放入操作数栈中</li></ul></li></ol><figure><img src="image-20240108155055022.png" alt="getstatic #4" /><figcaption aria-hidden="true">getstatic #4</figcaption></figure><ol start="9" type="1"><li><strong>iload 3</strong></li></ol><figure><img src="image-20240108155129991.png" alt="iload 3" /><figcaption aria-hidden="true">iload 3</figcaption></figure><ol start="10" type="1"><li><strong>invokevirtual</strong> 5<ul><li>找到常量池 #5 项</li><li>定位到方法区 <code>java/io/PrintStream.println:(I)V</code> 方法</li><li>生成新的栈帧（分配 locals、stack等）</li><li>传递参数，执行新栈帧中的字节码</li></ul></li></ol><figure><img src="image-20240108155220452.png" alt="invokevirtual 5" /><figcaption aria-hidden="true">invokevirtual 5</figcaption></figure><p>​</p><ul><li><p>执行完毕，弹出栈帧</p></li><li><p>清除 main 操作数栈内容</p></li></ul><figure><img src="image-20240108155322128.png" alt="清除 main 操作数栈内容" /><figcaption aria-hidden="true">清除 main 操作数栈内容</figcaption></figure><ol start="11" type="1"><li>return<ul><li>完成 main 方法调用，弹出 main 栈帧</li><li>程序结束</li></ul></li></ol><h4 id="i-i案例">i++ ++i案例</h4><p>对于i++，先执行iload，再执行iint，但是只对变量表里变量自增，并不在操作栈更新</p><p>对于++i，先执行iint，再执行iload，这样先在变量表更新后的值再放到操作数栈里</p><h4 id="x恒等于0">x恒等于0</h4><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code_11_ByteCodeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">            x = x++;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x); <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码解析如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span><span class="comment">// 操作数栈分配2个空间，局部变量表分配 3 个空间</span></span><br><span class="line">        <span class="number">0</span>: iconst_0<span class="comment">// 准备一个常数 0</span></span><br><span class="line">        <span class="number">1</span>: istore_1<span class="comment">// 将常数 0 放入局部变量表的 1 号槽位 i = 0</span></span><br><span class="line">        <span class="number">2</span>: iconst_0<span class="comment">// 准备一个常数 0</span></span><br><span class="line">        <span class="number">3</span>: istore_2<span class="comment">// 将常数 0 放入局部变量的 2 号槽位 x = 0</span></span><br><span class="line">        <span class="number">4</span>: iload_1<span class="comment">// 将局部变量表 1 号槽位的数放入操作数栈中</span></span><br><span class="line">        <span class="number">5</span>: bipush        <span class="number">10</span><span class="comment">// 将数字 10 放入操作数栈中，此时操作数栈中有 2 个数</span></span><br><span class="line">        <span class="number">7</span>: if_icmpge     <span class="number">21</span><span class="comment">// 比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到 21 。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空</span></span><br><span class="line">            </span><br><span class="line">       <span class="number">10</span>: iload_2<span class="comment">// 将局部变量 2 号槽位的数放入操作数栈中，放入的值是 0 </span></span><br><span class="line">       <span class="number">11</span>: iinc          <span class="number">2</span>, <span class="number">1</span><span class="comment">// 将局部变量 2 号槽位的数加 1 ，自增后，槽位中的值为 1 </span></span><br><span class="line">       <span class="number">14</span>: istore_2<span class="comment">//将操作数栈中的数放入到局部变量表的 2 号槽位，2 号槽位的值又变为了0</span></span><br><span class="line">       <span class="number">15</span>: iinc          <span class="number">1</span>, <span class="number">1</span> <span class="comment">// 1 号槽位的值自增 1 </span></span><br><span class="line">           </span><br><span class="line">       <span class="number">18</span>: goto          <span class="number">4</span> <span class="comment">// 跳转到第4条指令</span></span><br><span class="line">       <span class="number">21</span>: getstatic     #<span class="number">2</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">       <span class="number">24</span>: iload_2</span><br><span class="line">       <span class="number">25</span>: invokevirtual #<span class="number">3</span>                  <span class="comment">// Method java/io/PrintStream.println:(I)V</span></span><br><span class="line">       <span class="number">28</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="构造方法">构造方法</h3><h4 id="静态">静态</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code_12_CinitTest</span> &#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">i = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">i = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">System.out.println(i); <span class="comment">// 30</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编译器会按从上至下的顺序，收集所有 static静态代码块和静态成员赋值的代码，合并为一个特殊的方法<code>cinit()V</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        10</span><br><span class="line">         2: putstatic     #3                  // Field i:I</span><br><span class="line">         5: bipush        20</span><br><span class="line">         7: putstatic     #3                  // Field i:I</span><br><span class="line">        10: bipush        30</span><br><span class="line">        12: putstatic     #3                  // Field i:I</span><br><span class="line">        15: return</span><br></pre></td></tr></table></figure><h4 id="对象">对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code_13_InitTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;s1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        b = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        a = <span class="string">&quot;s2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Code_13_InitTest</span><span class="params">(String a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Code_13_InitTest</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Code_13_InitTest</span>(<span class="string">&quot;s3&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(d.a);</span><br><span class="line">        System.out.println(d.b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译器会按从上至下的顺序，收集所有 {}代码块和成员变量赋值的代码，形成新的构造方法，但<strong>原始构造方法</strong>内的代码总是<strong>在后.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">3</span></span><br><span class="line">        <span class="number">0</span>: aload_0</span><br><span class="line">        <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">        <span class="number">4</span>: aload_0</span><br><span class="line">        <span class="number">5</span>: ldc           #<span class="number">2</span>                  <span class="comment">// String s1</span></span><br><span class="line">        <span class="number">7</span>: putfield      #<span class="number">3</span>                  <span class="comment">// Field a:Ljava/lang/String;</span></span><br><span class="line">       <span class="number">10</span>: aload_0</span><br><span class="line">       <span class="number">11</span>: bipush        <span class="number">20</span></span><br><span class="line">       <span class="number">13</span>: putfield      #<span class="number">4</span>                  <span class="comment">// Field b:I</span></span><br><span class="line">       <span class="number">16</span>: aload_0</span><br><span class="line">       <span class="number">17</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">19</span>: putfield      #<span class="number">4</span>                  <span class="comment">// Field b:I</span></span><br><span class="line">       <span class="number">22</span>: aload_0</span><br><span class="line">       <span class="number">23</span>: ldc           #<span class="number">5</span>                  <span class="comment">// String s2</span></span><br><span class="line">       <span class="number">25</span>: putfield      #<span class="number">3</span>                  <span class="comment">// Field a:Ljava/lang/String;</span></span><br><span class="line">       <span class="comment">// 原始构造方法在最后执行</span></span><br><span class="line">       <span class="number">28</span>: aload_0</span><br><span class="line">       <span class="number">29</span>: aload_1</span><br><span class="line">       <span class="number">30</span>: putfield      #<span class="number">3</span>                  <span class="comment">// Field a:Ljava/lang/String;</span></span><br><span class="line">       <span class="number">33</span>: aload_0</span><br><span class="line">       <span class="number">34</span>: iload_2</span><br><span class="line">       <span class="number">35</span>: putfield      #<span class="number">4</span>                  <span class="comment">// Field b:I</span></span><br><span class="line">       <span class="number">38</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="方法调用">方法调用</h3><p>不同类型的方法，调用时对应的字节码指令如下：</p><ul><li>私有、构造、被 final 修饰的方法，在调用时都使用 invokespecial指令，就是调用特定方法</li><li>普通成员方法在调用时，使用 invokevirtual指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定</li><li>静态方法在调用时使用 invokestatic 指令</li></ul><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code_14_MethodTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Code_14_MethodTest</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test4</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Code_14_MethodTest</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Code_14_MethodTest</span>();</span><br><span class="line">        obj.test1();</span><br><span class="line">        obj.test2();</span><br><span class="line">        obj.test3();</span><br><span class="line">        Code_14_MethodTest.test4();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">对应字节码</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">2</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">//</span></span><br><span class="line">         <span class="number">3</span>: dup <span class="comment">// 复制一份对象地址压入操作数栈中</span></span><br><span class="line">         <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">7</span>: astore_1</span><br><span class="line">         <span class="number">8</span>: aload_1</span><br><span class="line">         <span class="number">9</span>: invokespecial #<span class="number">4</span>                  <span class="comment">// Method test1:()V</span></span><br><span class="line">        <span class="number">12</span>: aload_1</span><br><span class="line">        <span class="number">13</span>: invokespecial #<span class="number">5</span>                  <span class="comment">// Method test2:()V</span></span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        <span class="number">17</span>: invokevirtual #<span class="number">6</span>                  <span class="comment">// Method test3:()V</span></span><br><span class="line">        <span class="number">20</span>: invokestatic  #<span class="number">7</span>                  <span class="comment">// Method test4:()V</span></span><br><span class="line">        <span class="number">23</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h3 id="多态原理">多态原理</h3><p>因为普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用invokevirtual 指令，在执行 invokevirtual指令时，经历了以下几个步骤：</p><ol type="1"><li>先通过栈帧中对象的引用找到对象</li><li>分析对象头，找到对象实际的 Class</li><li>Class 结构中有 vtable</li><li>查询 vtable 找到方法的具体地址</li><li>执行方法的字节码</li></ol><h3 id="异常机制">异常机制</h3><h4 id="普通try-catch">普通try-catch</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i = <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="number">5</span>: goto          <span class="number">12</span></span><br><span class="line">        <span class="number">8</span>: astore_2<span class="comment">//将异常对象e放入局部变量表2号位置</span></span><br><span class="line">        <span class="number">9</span>: bipush        <span class="number">20</span></span><br><span class="line">       <span class="number">11</span>: istore_1</span><br><span class="line">       <span class="number">12</span>: <span class="keyword">return</span></span><br><span class="line">     <span class="comment">//多出来一个异常表</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/Exception</span><br></pre></td></tr></table></figure><ul><li>[from, to) 是前闭后开（也就是检测 2~4 行）的检测范围</li><li>type 匹配异常类型，如果一致，进入 target 所指示行号</li></ul><h4 id="多catch块">多catch块</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        i = <span class="number">10</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">        i = <span class="number">20</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="number">5</span>: goto          <span class="number">19</span></span><br><span class="line">        <span class="number">8</span>: astore_2</span><br><span class="line">        <span class="number">9</span>: bipush        <span class="number">20</span></span><br><span class="line">       <span class="number">11</span>: istore_1</span><br><span class="line">       <span class="number">12</span>: goto          <span class="number">19</span></span><br><span class="line">       <span class="number">15</span>: astore_2</span><br><span class="line">       <span class="number">16</span>: bipush        <span class="number">30</span></span><br><span class="line">       <span class="number">18</span>: istore_1</span><br><span class="line">       <span class="number">19</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>     <span class="number">8</span>   Class java/lang/ArithmeticException</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">15</span>   Class java/lang/Exception</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="finally">finally</h4><p>代码1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           i = <span class="number">10</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           i = <span class="number">20</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           i = <span class="number">30</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>对应字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">        <span class="number">0</span>: iconst_0</span><br><span class="line">        <span class="number">1</span>: istore_1</span><br><span class="line">        <span class="comment">// try块</span></span><br><span class="line">        <span class="number">2</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">4</span>: istore_1</span><br><span class="line">        <span class="comment">// try块执行完后，会执行finally    </span></span><br><span class="line">        <span class="number">5</span>: bipush        <span class="number">30</span></span><br><span class="line">        <span class="number">7</span>: istore_1</span><br><span class="line">        <span class="number">8</span>: goto          <span class="number">27</span></span><br><span class="line">       <span class="comment">// catch块     </span></span><br><span class="line">       <span class="number">11</span>: astore_2 <span class="comment">// 异常信息放入局部变量表的2号槽位</span></span><br><span class="line">       <span class="number">12</span>: bipush        <span class="number">20</span></span><br><span class="line">       <span class="number">14</span>: istore_1</span><br><span class="line">       <span class="comment">// catch块执行完后，会执行finally        </span></span><br><span class="line">       <span class="number">15</span>: bipush        <span class="number">30</span></span><br><span class="line">       <span class="number">17</span>: istore_1</span><br><span class="line">       <span class="number">18</span>: goto          <span class="number">27</span></span><br><span class="line">       <span class="comment">// 出现异常，但未被 Exception 捕获，会抛出其他异常，这时也需要执行 finally 块中的代码   </span></span><br><span class="line">       <span class="number">21</span>: astore_3</span><br><span class="line">       <span class="number">22</span>: bipush        <span class="number">30</span></span><br><span class="line">       <span class="number">24</span>: istore_1</span><br><span class="line">       <span class="number">25</span>: aload_3</span><br><span class="line">       <span class="number">26</span>: athrow  <span class="comment">// 抛出异常</span></span><br><span class="line">       <span class="number">27</span>: <span class="keyword">return</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">11</span>   Class java/lang/Exception</span><br><span class="line">            <span class="number">2</span>     <span class="number">5</span>    <span class="number">21</span>   any</span><br><span class="line">           <span class="number">11</span>    <span class="number">15</span>    <span class="number">21</span>   any</span><br></pre></td></tr></table></figure><ul><li>ﬁnally 中的代码被复制了 3 份，分别放入 try 流程，catch 流程以及catch 剩余的异常类型流程</li></ul><p>代码2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code_18_FinallyReturnTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Code_18_FinallyReturnTest.test();</span><br><span class="line">        <span class="comment">// 结果为 20</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            i = <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i = <span class="number">20</span>;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回结果：<span class="number">20</span></span><br></pre></td></tr></table></figure><p>对应字节码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=1, locals=3, args_size=0</span><br><span class="line">        0: bipush        10</span><br><span class="line">        2: istore_0</span><br><span class="line">        3: iload_0</span><br><span class="line">        4: istore_1  // 暂存返回值</span><br><span class="line">        5: bipush        20</span><br><span class="line">        7: istore_0</span><br><span class="line">        8: iload_0</span><br><span class="line">        9: ireturn// ireturn 会返回操作数栈顶的整型值 20</span><br><span class="line">       // 如果出现异常，还是会执行finally 块中的内容，没有抛出异常</span><br><span class="line">       10: astore_2</span><br><span class="line">       11: bipush        20</span><br><span class="line">       13: istore_0</span><br><span class="line">       14: iload_0</span><br><span class="line">       15: ireturn// 这里没有 athrow 了，也就是如果在 finally 块中如果有返回操作的话，且 try 块中出现异常，会吞掉异常！</span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            0     5    10   any</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">i = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">返回值：<span class="number">10</span></span><br></pre></td></tr></table></figure><p>对应字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">     stack=<span class="number">1</span>, locals=<span class="number">3</span>, args_size=<span class="number">0</span></span><br><span class="line">        <span class="number">0</span>: bipush        <span class="number">10</span></span><br><span class="line">        <span class="number">2</span>: istore_0 <span class="comment">// 赋值给i 10</span></span><br><span class="line">        <span class="number">3</span>: iload_0<span class="comment">// 加载到操作数栈顶</span></span><br><span class="line">        <span class="number">4</span>: istore_1 <span class="comment">// 加载到局部变量表的1号位置</span></span><br><span class="line">        <span class="number">5</span>: bipush        <span class="number">20</span></span><br><span class="line">        <span class="number">7</span>: istore_0 <span class="comment">// 赋值给i 20</span></span><br><span class="line">        <span class="number">8</span>: iload_1 <span class="comment">// 加载局部变量表1号位置的数10到操作数栈</span></span><br><span class="line">        <span class="number">9</span>: ireturn <span class="comment">// 返回操作数栈顶元素 10</span></span><br><span class="line">       <span class="number">10</span>: astore_2</span><br><span class="line">       <span class="number">11</span>: bipush        <span class="number">20</span></span><br><span class="line">       <span class="number">13</span>: istore_0</span><br><span class="line">       <span class="number">14</span>: aload_2 <span class="comment">// 加载异常</span></span><br><span class="line">       <span class="number">15</span>: athrow <span class="comment">// 抛出异常</span></span><br><span class="line">     Exception table:</span><br><span class="line">        from    to  target type</span><br><span class="line">            <span class="number">3</span>     <span class="number">5</span>    <span class="number">10</span>   any</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类加载">类加载</h1><h2 id="过程">过程</h2><h3 id="加载">加载</h3><p>加载规则：</p><ul><li><p>将<strong>类的字节码载入方法区</strong>（1.8后为元空间，在本地内存中）中，内部采用C++ 的 <strong>instanceKlass</strong> 描述 java 类，它的重要 ﬁeld有：</p><ul><li><p>_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是String.class，作用是把 klass 暴露给 java 使用</p></li><li><p>_super 即父类</p></li><li><p>_ﬁelds 即成员变量</p></li><li><p>_methods 即方法</p></li><li><p>_constants 即常量池</p></li><li><p>_class_loader 即类加载器</p></li><li><p>_vtable 虚方法表</p></li><li><p>_itable 接口方法</p></li></ul></li><li><p>优先加载父类</p></li><li><p>加载和链接可能是<strong>交替运行</strong>的</p></li><li><p><strong>instanceKlass</strong>这样的【元数据】是存储在<strong>方法区</strong>（1.8 后的元空间内），但**_java_mirror** 是存储在<strong>堆</strong>中</p></li><li><p>instanceKlass和_java_mirror（java镜像类）互相保存了对方的地址</p></li><li><p>类的对象在对象头中保存了 *.class的地址，让对象可以通过其找到方法区中的instanceKlass，从而获取类的各种信息</p></li></ul><figure><img src="image-20240127173914863.png" alt="jvm内存结构——类存储" /><figcaption aria-hidden="true">jvm内存结构——类存储</figcaption></figure><h3 id="链接">链接</h3><h4 id="验证">验证</h4><p>验证类是否符合 JVM规范，安全性检查，检查字节码文件中的二进制位。</p><h4 id="准备">准备</h4><p>为 <code>static</code> 变量分配空间，设置默认值</p><ul><li><p>static变量在JDK 7以前是存储与instanceKlass末尾。但在JDK7以后就存储在_java_mirror末尾了</p></li><li><p>static变量在分配空间和赋值是在两个阶段完成的。分配空间在准备阶段完成，赋值在初始化阶段完成</p></li><li><p>如果 static 变量是 ﬁnal的基本类型，以及字符串常量，那么编译阶段值就确定了，赋值在准备阶段完成</p></li><li><p>如果 static 变量是 ﬁnal的，但属于引用类型，那么赋值也会在初始化阶段完成</p></li></ul><h4 id="解析">解析</h4><p>将常量池中的符号引用解析为直接引用</p><p>类似linux的符号、物理链接</p><h3 id="初始化">初始化</h3><p>初始化即调用<code>&lt;cinit&gt;()</code>，虚拟机会保证这个类的【构造方法】的线程安全。</p><p>触发时机：</p><ul><li><p>main 方法所在的类，总会被首先初始化</p></li><li><p>首次访问这个类的静态变量或静态方法时</p></li><li><p>子类初始化，如果父类还没初始化，会引发</p></li><li><p>子类访问父类的静态变量，只会触发父类的初始化</p></li><li><p>Class.forName</p></li><li><p>new 会导致初始化</p></li></ul><p>以下情况不会初始化：</p><ul><li>访问类的 static ﬁnal 静态常量（基本类型和字符串）</li><li>类对象.class 不会触发初始化</li><li>创建该类对象的数组</li><li>类加载器的.loadClass方法</li><li>Class.forName的参数2为false时</li></ul><h2 id="类加载器">类加载器</h2><p>以 JDK 8 为例：</p><table><colgroup><col style="width: 46%" /><col style="width: 23%" /><col style="width: 30%" /></colgroup><thead><tr class="header"><th>名称</th><th>加载的类路径</th><th>说明</th></tr></thead><tbody><tr class="odd"><td>Bootstrap ClassLoader（启动类加载器）</td><td>JAVA_HOME/jre/lib</td><td>无法直接访问</td></tr><tr class="even"><td>Extension ClassLoader(拓展类加载器)</td><td>JAVA_HOME/jre/lib/ext</td><td>上级为Bootstrap，显示为null</td></tr><tr class="odd"><td>Application ClassLoader(应用程序类加载器)</td><td>classpath</td><td>上级为Extension</td></tr><tr class="even"><td>自定义类加载器</td><td>自定义</td><td>上级为Application</td></tr></tbody></table><p>启用Bootstrap ClassLoader：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -Xbootclasspath/a:&lt;追加路径&gt;（后追加）</span><br><span class="line"></span><br><span class="line">java -Xbootclasspath/p:&lt;追加路径&gt;（前追加）</span><br></pre></td></tr></table></figure><ul><li>-Xbootclasspath 表示设置 bootclasspath</li><li>其中 /a: . 表示将当前目录追加至 bootclasspath 之后</li></ul><h3 id="双亲委派">双亲委派</h3><p>类加载过程：</p><ol type="1"><li><code>AppClassLoader</code>加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器<code>ExtClassLoader</code>去完成。</li><li>当<code>ExtClassLoader</code>加载一个class时，它也不会自己去尝试加载这个类，而是把类加载请求委派给<code>BootStrapClassLoader</code>去完成。</li><li>如果<code>BootStrapClassLoader</code>加载失败(例如在$JAVA_HOME/jre/lib里未查找到该class)，会使用<code>ExtClassLoader</code>来尝试加载；</li><li>若<code>ExtClassLoader</code>也加载失败，则会使用<code>AppClassLoader</code>来加载，如果<code>AppClassLoader</code>也加载失败，则会报出异常<code>ClassNotFoundException</code>。</li></ol><p>类加载器的loadClass方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 1. 检查该类是否已经加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 2. 有上级的话，委派上级 loadClass</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 3. 如果没有上级了（ExtClassLoader），则委派</span></span><br><span class="line">                    <span class="type">BootstrapClassLoader</span></span><br><span class="line">                        <span class="variable">c</span> <span class="operator">=</span> findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="comment">// 4. 每一层找不到，调用 findClass 方法（每个类加载器自己扩展）来加载</span></span><br><span class="line">                c = findClass(name);</span><br><span class="line">                <span class="comment">// 5. 记录耗时</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义类加载器">自定义类加载器</h2><p><strong>场景</strong></p><ul><li>想加载非 classpath 随意路径中的类文件</li><li>通过接口来使用实现，希望解耦时，常用在框架设计</li><li>这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于tomcat 容器</li></ul><p><strong>使用步骤</strong></p><ol type="1"><li>继承ClassLoader父类</li><li>要遵从双亲委派机制，重写 ﬁndClass 方法<ul><li>不是重写loadClass方法，否则不会走双亲委派机制</li></ul></li><li>读取类文件的字节码</li><li>调用父类的 deﬁneClass 方法来加载类</li><li>使用者调用该类加载器的 loadClass 方法</li></ol><h1 id="运行期优化">运行期优化</h1><h2 id="即时编译">即时编译</h2><h3 id="分层编译">分层编译</h3><p>JVM 将执行状态分成了 5 个层次：</p><ul><li>0层：<strong>解释</strong>执行，用解释器将字节码翻译为机器码</li><li>1层：使用 C1 <strong>即时编译器</strong>编译执行（不带proﬁling）</li><li>2层：使用 C1 即时编译器编译执行（带基本的profiling）</li><li>3层：使用 C1 即时编译器编译执行（带完全的profiling）</li><li>4层：使用 C2 即时编译器编译执行</li></ul><p>解释器</p><ul><li>将字节码<strong>解释</strong>为机器码，下次即使遇到相同的字节码，仍会执行重复的解释</li><li>是将字节码解释为针对所有平台都通用的机器码</li></ul><p>即时编译器</p><ul><li>将一些字节码<strong>编译</strong>为机器码，<strong>并存入 CodeCache</strong>，下次遇到相同的代码，直接执行，无需再编译</li><li>根据平台类型，生成平台特定的机器码</li></ul><p>对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</p><p>效率：解释器 &lt; C1 &lt; C2</p><h3 id="方法内联">方法内联</h3><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">square</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i * i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(square(<span class="number">9</span>));</span><br></pre></td></tr></table></figure><p>如果发现 square是热点方法，并且长度不太长时，会进行<strong>内联</strong>；内联就是把方法内代码拷贝、粘贴到调用者的位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(9 * 9);</span><br></pre></td></tr></table></figure><p>再进行<strong>常量折叠</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(8);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;jvm内存结构&quot;&gt;JVM内存结构&lt;/h1&gt;
&lt;h2 id=&quot;程序计数器&quot;&gt;程序计数器&lt;/h2&gt;
&lt;p&gt;Program Counter Register 程序计数器（寄存器）&lt;/p&gt;
&lt;p&gt;作用：是&lt;strong&gt;记录下一条 jvm 指令&lt;/strong&gt;的执</summary>
      
    
    
    
    <category term="Java" scheme="https://vlsmhd.github.io/categories/Java/"/>
    
    <category term="JVM" scheme="https://vlsmhd.github.io/categories/Java/JVM/"/>
    
    
  </entry>
  
  <entry>
    <title>渐进式redis缓存工具Vedis</title>
    <link href="https://vlsmhd.github.io/2023/11/29/%E6%B8%90%E8%BF%9B%E5%BC%8Fredis%E7%BC%93%E5%AD%98%E5%B7%A5%E5%85%B7Vedis/"/>
    <id>https://vlsmhd.github.io/2023/11/29/%E6%B8%90%E8%BF%9B%E5%BC%8Fredis%E7%BC%93%E5%AD%98%E5%B7%A5%E5%85%B7Vedis/</id>
    <published>2023-11-29T13:45:19.032Z</published>
    <updated>2024-07-14T13:49:02.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建">环境搭建</h1><h2 id="git命令封装">git命令封装</h2><p>提交当前变更：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;[Feature] add for new&quot;</span></span><br><span class="line">git push</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="项目格式搭建">项目格式搭建</h2><figure><img src="image-20231204145729602.png" alt="image-20231204145729602" /><figcaption aria-hidden="true">image-20231204145729602</figcaption></figure><ul><li>Vedis-api：</li><li>Vedis-core</li><li>Vedis-test：测试项目模块</li></ul><p>总项目pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Vedis-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Vedis-test<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--============================== All Plugins START ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.compiler.version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">plugin.compiler.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.compiler.version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">plugin.compiler.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.surefire.version</span>&gt;</span>2.18.1<span class="tag">&lt;/<span class="name">plugin.surefire.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.surefire.skip-it</span>&gt;</span>false<span class="tag">&lt;/<span class="name">plugin.surefire.skip-it</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.surefire.ignore-failure</span>&gt;</span>false<span class="tag">&lt;/<span class="name">plugin.surefire.ignore-failure</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.maven-source-plugin.version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">plugin.maven-source-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.maven-javadoc-plugin.version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">plugin.maven-javadoc-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.maven-gpg-plugin.version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">plugin.maven-gpg-plugin.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.coveralls.version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">plugin.coveralls.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.cobertura.version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">plugin.cobertura.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--============================== MAIN ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.compiler.level</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">project.compiler.level</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--============================== INTER ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heaven.version</span>&gt;</span>0.1.115<span class="tag">&lt;/<span class="name">heaven.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test.version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">test.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--============================== OTHER ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--============================== SELF ==============================--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--============================== INTER ==============================--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.houbb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;heaven.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.houbb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;test.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--============================== OTHER ==============================--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--compiler plugin --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.compiler.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;project.compiler.level&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;project.compiler.level&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-proc:none<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--============================== ADD For sonatype START ==============================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>cache<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>cache is a java bean copy tool.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/houbb/cache<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>https://github.com/houbb/cache.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>https://houbb.github.io/<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>houbb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>houbinbin.echo@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://houbb.github.io/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--============================== ADD For sonatype END ==============================--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mvn clean deploy -P release -Darguments=&quot;gpg.passphrase=设置gpg设置密钥时候输入的Passphrase&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-source-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- GPG --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-gpg-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--=================================== coveralls START ===================================--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--mvn cobertura:cobertura coveralls:report -DrepoToken=yourcoverallsprojectrepositorytoken--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eluder.coveralls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>coveralls-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.coveralls.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cobertura-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.cobertura.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">format</span>&gt;</span>xml<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">maxmem</span>&gt;</span>256m<span class="tag">&lt;/<span class="name">maxmem</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- aggregated reports for multi-module projects --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">aggregate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">aggregate</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">instrumentation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*Test.class<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">instrumentation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--=================================== coveralls END ===================================--&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目pom文件：</p><p>api：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>core：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础固定大小缓存">基础固定大小缓存</h1><h2 id="接口定义">接口定义</h2><p>ICache：缓存接口，供使用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定义最基本的map接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICache</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ICacheContext：缓存上下文对象，核心容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  获取容器</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;K,V&gt; <span class="title function_">map</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取容器大小限制</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 淘汰策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICacheEvict&lt;K,V&gt; <span class="title function_">cacheEvict</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心实现">核心实现</h2><h3 id="全局异常"><strong>全局异常</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheRuntimeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cache">Cache</h3><p><strong>成员变量和构造方法</strong></p><p>cache类由上下文创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> sizeLimit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ICacheEvict&lt;K,V&gt; cacheEvict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cache</span><span class="params">(ICacheContext&lt;K,V&gt; context)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.map = context.map();</span><br><span class="line">    <span class="built_in">this</span>.sizeLimit = context.sizeLimit();</span><br><span class="line">    cacheEvict = context.cahceEvict();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成员变量从上下文中获取得到初始化</li><li>final：这些变量只能在context中修改，cache只能使用，不能更改引用</li></ul><p><strong>put方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 尝试淘汰内存,初始化一个CacheEvictContext</span></span><br><span class="line">    CacheEvictContext&lt;K, V&gt; context = <span class="keyword">new</span> <span class="title class_">CacheEvictContext</span>&lt;&gt;();</span><br><span class="line">    context.key(key).sizeLimit(sizeLimit).cache(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    cacheEvict.evict(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 淘汰后判断能否添加</span></span><br><span class="line">    <span class="keyword">if</span>(isSizeLimited())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;当前缓存已满，数据添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isSizeLimited</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">curSize</span> <span class="operator">=</span> <span class="built_in">this</span>.size();<span class="comment">//加final防止并发</span></span><br><span class="line">    <span class="keyword">return</span> curSize &gt;= sizeLimit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它方法都是map封装好的，略</p><p><strong>获取当前缓存的元素个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 当前缓存中存储元素的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/4 17:50</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cachecontext">CacheContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 缓存上下文信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheContext</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, V&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sizeLimit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheEvict&lt;K,V&gt; cacheEvict;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;K,V&gt; <span class="title function_">map</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheContext&lt;K, V&gt; <span class="title function_">map</span><span class="params">(Map&lt;K, V&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取容器大小限制</span></span><br><span class="line"><span class="comment">    * @param</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sizeLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheContext&lt;K, V&gt; <span class="title function_">sizeLimit</span><span class="params">(<span class="type">int</span> sizeLimit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeLimit = sizeLimit;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 淘汰策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICacheEvict&lt;K,V&gt; <span class="title function_">cahceEvict</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheEvict;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheContext&lt;K, V&gt; <span class="title function_">cacheEvict</span><span class="params">(ICacheEvict&lt;K, V&gt; cacheEvict)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheEvict = cacheEvict;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>流式编程：把成员变量的set抽象成单独的方法，返回值就是这个类的对象。采用建造者模式，这样构建这个对象就会有流式体验</li></ul><h3 id="引导类">引导类</h3><p>位于guide包下，便于用户使用。</p><p>会给缓存中每一个变量赋初值，用户也可以自定义，采用建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 指导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CacheGuide</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存变量, 真正创建map的地方</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sizeLimit</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheEvict&lt;K,V&gt; cacheEvict = <span class="keyword">new</span> <span class="title class_">CacheEvictFIFO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheGuide</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 单例创建对象实例</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; CacheGuide&lt;K,V&gt; <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheGuide</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 建造者模式，流式编程</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CacheGuide&lt;K,V&gt; <span class="title function_">map</span><span class="params">(Map&lt;K,V&gt; map)</span>&#123;</span><br><span class="line">        ArgUtil.notNull(map, <span class="string">&quot;map&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheGuide&lt;K,V&gt; <span class="title function_">sizeLimit</span><span class="params">(<span class="type">int</span> sizeLimit)</span>&#123;</span><br><span class="line">        ArgUtil.notNegative(sizeLimit, <span class="string">&quot;sizeLimit&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.sizeLimit = sizeLimit;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ICache&lt;K,V&gt; <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建缓存上下文</span></span><br><span class="line">        CacheContext&lt;K, V&gt; context = <span class="keyword">new</span> <span class="title class_">CacheContext</span>&lt;&gt;();</span><br><span class="line">        context.map(map);</span><br><span class="line">        context.cacheEvict(cacheEvict);</span><br><span class="line">        context.sizeLimit(sizeLimit);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cache</span>&lt;&gt;(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过期删除">过期删除</h1><h2 id="接口定义-1">接口定义</h2><p><strong>ICache接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICache</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ICache&lt;K,V&gt; <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ICache&lt;K,V&gt; <span class="title function_">expireAt</span><span class="params">(K key, <span class="type">long</span> timeoutAt)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取缓存对应过期处理的策略类</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICacheExpire&lt;K,V&gt; <span class="title function_">expire</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="icacheexpire">ICacheExpire</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheExpire</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 设置过期函数</span></span><br><span class="line"><span class="comment">     * @param expireAt: 在什么时候过期</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 惰性删除策略</span></span><br><span class="line"><span class="comment">     * @param 需要处理的key集合</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keys)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基本缓存过期实现">基本缓存过期实现</h2><p>实现思路：利用定时任务，每一分钟、每一秒做一次轮询检查，<strong>开启额外线程</strong>执行。也需要把过期信息持久化，清理真正缓存中的数据</p><h3 id="cache-1">Cache</h3><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多少时间后过期</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">mills</span> <span class="operator">=</span> unit.toMillis(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">timeoutAt</span> <span class="operator">=</span> System.currentTimeMillis() + mills;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.expireAt(key, timeoutAt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title function_">expireAt</span><span class="params">(K key, <span class="type">long</span> timeoutAt)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cacheExpire.expire(key, timeoutAt);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过期信息存储">过期信息存储</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储设置了过期时间的缓存信息</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;K,Long&gt; expireMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span> &#123;</span><br><span class="line">       expireMap.put(key, expireAt);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="定期轮询清理清空缓存任务">定期轮询清理&amp;清空缓存任务</h3><p>利用JDK原生的<code>ScheduledExecutorService</code> 线程池来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化轮询任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">ExpireThread</span>(),<span class="number">100</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        CLEAN_LIMIT = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 定义执行清理任务的单线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/5 16:07</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ExpireThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(expireMap == <span class="literal">null</span> || expireMap.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (K key : expireMap.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(count &gt;= CLEAN_LIMIT)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cleanExpireKey(key);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanExpireKey</span><span class="params">(K key)</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expireAtMs</span> <span class="operator">=</span> expireMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentTimeMillis &gt;= expireAtMs)&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;要清除的缓存key = &#123;&#125;&quot;</span>, key);</span><br><span class="line">            expireMap.remove(key);</span><br><span class="line">            cache.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="排序的key-优化">排序的key-优化</h2><p>过期的应用场景不多，那么经常轮训的意义实际不大。比如我们的任务 99%都是在凌晨清空数据，白天无论怎么轮询，纯粹是浪费资源。</p><p>相比于之前轮询访问每个缓存的key，比较耗时，我们需要快速判断需要处理的缓存才行</p><p>最直观的方法就是将key排序处理，将key升序排列放到容器中，过期时间相同的key放到同一列表中处理</p><h3 id="实现">实现</h3><p>实现：利用java中TreeMap实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheExpireSort</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheExpire</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//存储设置了过期时间的缓存信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Long, List&lt;K&gt;&gt; sortedExpireMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//便于获取key的过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次清除的个数限制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> CLEAN_LIMIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheExpireSort</span><span class="params">(ICache&lt;K,V&gt; cache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sortedExpireMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; (<span class="type">int</span>)(o1 - o2));</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">EXECUTOR_SERVICE</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化轮询任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">ExpireThread</span>(),<span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        CLEAN_LIMIT = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 定义执行清理任务的单线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/5 16:07</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ExpireThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(sortedExpireMap == <span class="literal">null</span> || sortedExpireMap.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Long, List&lt;K&gt;&gt; entry : sortedExpireMap.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">expireAt</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                List&lt;K&gt; keys = entry.getValue();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(CollectionUtil.isEmpty(keys))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(count &gt; CLEAN_LIMIT)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(currentTimeMillis &gt;= expireAt)&#123;</span><br><span class="line">                    Iterator&lt;K&gt; keysIterator = keys.iterator();</span><br><span class="line">                    <span class="keyword">while</span> (keysIterator.hasNext())&#123;</span><br><span class="line">                        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> keysIterator.next();</span><br><span class="line">                        log.debug(<span class="string">&quot;删除的缓存key为&#123;&#125;&quot;</span>, key);</span><br><span class="line">                        keysIterator.remove();</span><br><span class="line">                        expireMap.remove(key);</span><br><span class="line"></span><br><span class="line">                        cache.remove(key);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//剪枝操作，因为是有序遍历，当遍历到过期时间在未来的集合，直接返回，因为下面的过期时间只会更久远</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span> &#123;</span><br><span class="line">        List&lt;K&gt; keys = sortedExpireMap.get(expireAt);</span><br><span class="line">        <span class="keyword">if</span>(keys == <span class="literal">null</span>)&#123;</span><br><span class="line">            keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        keys.add(key);</span><br><span class="line">        sortedExpireMap.put(expireAt, keys);</span><br><span class="line">        expireMap.put(key, expireAt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">expireTime</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expireMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺陷：</p><ol type="1"><li>遍历的大部分key是无效的遍历，比较耗费时间</li><li>key的选择不是随机的</li></ol><h2 id="惰性删除策略">惰性删除策略</h2><p>使用原因：</p><ol type="1"><li>CPU友好，不会占用CPU资源</li><li>数据一致性比较好</li></ol><p>思路：不主动删除过期键，每次从数据库访问 key 时，都检测 key是否过期，如果过期则删除该 key。</p><ul><li>也就是说要在get方法处添加</li></ul><p>惰性删除实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keys)</span> &#123;</span><br><span class="line">    <span class="comment">//要清理两个集合，一个是传入的key，另一个是当前expireMap</span></span><br><span class="line">    <span class="keyword">if</span>(CollectionUtil.isEmpty(keys))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(keys.size() &lt;= expireMap.size())&#123;</span><br><span class="line">        <span class="keyword">for</span> (K key : keys) &#123;</span><br><span class="line">            cleanExpireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (K key : expireMap.keySet()) &#123;</span><br><span class="line">            cleanExpireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>惰性删除应用</p><p>Cache类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">K</span> <span class="variable">genericKey</span> <span class="operator">=</span> (K) key;</span><br><span class="line">    <span class="built_in">this</span>.cacheExpire.lazyRefresh( Collections.singletonList(genericKey));</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    refreshExpireAllKeys();</span><br><span class="line">    <span class="keyword">return</span> map.keySet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">    refreshExpireAllKeys();</span><br><span class="line">    <span class="keyword">return</span> map.values();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Entry&lt;K, V&gt;&gt; <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    refreshExpireAllKeys();</span><br><span class="line">    <span class="keyword">return</span> map.entrySet();</span><br><span class="line">&#125;</span><br><span class="line">。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="随机删除策略">随机删除策略</h2><p>Redis内部维护一个定时任务，默认每秒运行10次（通过配置hz控制）。</p><p>定时任务中删除过期键逻辑采用了自适应算法，根据<strong>键的过期比例</strong>、使用<strong>快慢两种速率</strong>模式回收键，流程如下所示。</p><figure><img src="640.png" alt="redis过期策略流程" /><figcaption aria-hidden="true">redis过期策略流程</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheExpireRandom</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheExpire</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_LIMIT</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//是否启用快模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">fastMode</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheExpireRandom</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">EXECUTOR_SERVICE</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">ExpireRandomThread</span>(), <span class="number">10</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ExpireRandomThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(MapUtil.isEmpty(expireMap)) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;expireMap 信息为空，直接跳过本次处理。&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fastMode) &#123;</span><br><span class="line">                expireKeys(<span class="number">10L</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            expireKeys(<span class="number">100L</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">expireKeys</span><span class="params">(<span class="type">long</span> timeMills)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeLimit</span> <span class="operator">=</span> timeMills + System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.fastMode = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(count &gt;= COUNT_LIMIT) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;过期淘汰次数已经达到最大次数: &#123;&#125;，完成本次执行。&quot;</span>, COUNT_LIMIT);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(System.currentTimeMillis() &gt;= timeLimit) &#123;</span><br><span class="line">                fastMode = <span class="literal">true</span>;</span><br><span class="line">                log.debug(<span class="string">&quot;过期淘汰已经达到限制时间，中断本次执行，设置 fastMode=true&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> getRandomKeyWithList();</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isCleaned</span> <span class="operator">=</span> cleanExpireKey(key);</span><br><span class="line">            log.debug(<span class="string">&quot;key: &#123;&#125; 过期执行结果 &#123;&#125;&quot;</span>, key, isCleaned);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K <span class="title function_">getRandomKeyWithList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current();</span><br><span class="line">        ArrayList&lt;K&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(expireMap.keySet());</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomIdx</span> <span class="operator">=</span> random.nextInt(list.size());</span><br><span class="line">        <span class="keyword">return</span> list.get(randomIdx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K <span class="title function_">getRandomKeyWithIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current();</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomIdx</span> <span class="operator">=</span> random.nextInt(expireMap.size());</span><br><span class="line">        Iterator&lt;K&gt; iterator = expireMap.keySet().iterator();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count == randomIdx) &#123;</span><br><span class="line">                <span class="keyword">return</span> iterator.next();</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;Random 获取对应key: [error] 信息不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">BATCH_RANDOM_KEY_SIZE_LIMIT</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;K&gt; <span class="title function_">getRandomKeyBatch</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> ThreadLocalRandom.current();</span><br><span class="line">        <span class="type">int</span> <span class="variable">randomIdx</span> <span class="operator">=</span> random.nextInt(expireMap.size());</span><br><span class="line">        Iterator&lt;K&gt; iterator = expireMap.keySet().iterator();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Set&lt;K&gt; keySet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//一次性最多取50个数据</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(keySet.size() &gt;= BATCH_RANDOM_KEY_SIZE_LIMIT) &#123;</span><br><span class="line">                <span class="keyword">return</span> keySet;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">K</span> <span class="variable">curKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(count &gt; randomIdx - <span class="number">50</span> &amp;&amp; count &lt;= randomIdx + <span class="number">50</span>) &#123;</span><br><span class="line">                keySet.add(curKey);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> keySet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * @param expireAt:设置的过期时间</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">cleanExpireKey</span><span class="params">(K key)</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expireAtMs</span> <span class="operator">=</span> expireMap.get(key);</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(currentTimeMillis &gt;= expireAtMs)&#123;</span><br><span class="line">                expireMap.remove(key);</span><br><span class="line">                <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> cache.remove(key);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//过期监听器</span></span><br><span class="line">                CacheRemoveListenerContext&lt;K, V&gt; cacheRemoveListenerContext = CacheRemoveListenerContext.&lt;K, V&gt;newInstance()</span><br><span class="line">                        .setKey(key)</span><br><span class="line">                        .setValue(removeValue)</span><br><span class="line">                        .setType(CacheRemoveType.EXPIRE.getCode());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (ICacheRemoveListener&lt;K, V&gt; removeListener : cache.removeListeners()) &#123;</span><br><span class="line">                    removeListener.listen(cacheRemoveListenerContext);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span> &#123;</span><br><span class="line">        expireMap.put(key, expireAt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keyList)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(keyList)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断大小，小的作为外循环。一般都是过期的 keys 比较小。</span></span><br><span class="line">        <span class="keyword">if</span>(keyList.size() &lt;= expireMap.size()) &#123;</span><br><span class="line">            <span class="keyword">for</span>(K key : keyList) &#123;</span><br><span class="line">                cleanExpireKey(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(Map.Entry&lt;K, Long&gt; entry : expireMap.entrySet()) &#123;</span><br><span class="line">                cleanExpireKey(entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">expireTime</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expireMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="持久化">持久化</h1><h2 id="rdb">RDB</h2><h3 id="接口定义-2">接口定义</h3><p><strong>ICache接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ICacheLoad&lt;K,V&gt; <span class="title function_">load</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">ICachePersist&lt;K,V&gt; <span class="title function_">persist</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="加载接口">加载接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheLoad</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 加载上次关机前的缓存信息</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ICache&lt;K,V&gt; cache)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持久化接口">持久化接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 持久化策略接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 20:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略工具类">策略工具类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="json字符串形式持久化">JSON字符串形式持久化</h3><h4id="持久化实现类cachepersistfilejson">持久化实现类CachePersistFileJson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: JSON形式 RDB持久化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 20:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachePersistFileJson</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CachePersistFileJson</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K, V&gt;&gt; entries = cache.entrySet();</span><br><span class="line"></span><br><span class="line">        FileUtil.createFile(filePath);</span><br><span class="line">        <span class="comment">//清空文件内容</span></span><br><span class="line">        truncateFile(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">expireTime</span> <span class="operator">=</span> cache.expire().expireTime(key);</span><br><span class="line">            PersistRdbEntry&lt;K,V&gt; rdbEntry = <span class="keyword">new</span> <span class="title class_">PersistRdbEntry</span>&lt;&gt;();</span><br><span class="line">            rdbEntry.setKey(key);</span><br><span class="line">            rdbEntry.setValue(entry.getValue());</span><br><span class="line">            rdbEntry.setExpire(expireTime);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> JSON.toJSONString(rdbEntry);</span><br><span class="line">            FileUtil.write(filePath, line, StandardOpenOption.APPEND);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">truncateFile</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载实现类cacheloadfilejson">加载实现类CacheLoadFileJson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: JSON持久化加载实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 21:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheLoadFileJson</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheLoad</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheLoadFileJson</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        List&lt;String&gt; lines = FileUtil.readAllLines(filePath);</span><br><span class="line">        log.debug(<span class="string">&quot;[load] 开始加载处理 path: &#123;&#125;&quot;</span>, filePath);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(lines)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[load] path: &#123;&#125; 文件内容为空，直接返回&quot;</span>, filePath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">            <span class="keyword">if</span>(StringUtil.isEmpty(line))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            PersistRdbEntry&lt;K,V&gt; rdbEntry = JSONObject.parseObject(line, PersistRdbEntry.class);</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> rdbEntry.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> rdbEntry.getValue();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span> rdbEntry.getExpire();</span><br><span class="line"></span><br><span class="line">            cache.put(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(expire != <span class="literal">null</span>)&#123;</span><br><span class="line">                cache.expireAt(key, expire);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定时rdb持久化任务实现">定时RDB持久化任务实现</h3><h4 id="innercachepersist">InnerCachePersist</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定时执行持久化策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerCachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICachePersist&lt;K,V&gt; cachePersist;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InnerCachePersist</span><span class="params">(ICache&lt;K, V&gt; cache, ICachePersist&lt;K, V&gt; cachePersist)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="built_in">this</span>.cachePersist = cachePersist;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">EXECUTOR_SERVICE</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化轮询任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;开始持久化......  time : &#123;&#125;&quot;</span>, formatter.format(System.currentTimeMillis()));</span><br><span class="line">                cachePersist.persist(cache);</span><br><span class="line">                log.debug(<span class="string">&quot;完成持久化......  time : &#123;&#125;&quot;</span>, formatter.format(System.currentTimeMillis()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="aof">AOF</h2><p>AOF是redis典型的持久化策略，将<strong>写命令</strong>，追加到aof文件内，这样下次重启redis，会加载这些命令初始化缓存容器。</p><p>具体思路：拦截器拦截方法执行，将调用的方法转化成json字符串，把字符串缓存到buffer中，随后根据设置的刷盘时间，把aof刷到磁盘中。</p><h3 id="注解定义">注解定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CacheInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 是否开启aof持久化模式</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">aof</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在cache类的expireAt、put、remove等写方法上加入注解，并指定使用aof</p><h3 id="持久化aofentry定义">持久化aofEntry定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PersistAofEntry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PersistAofEntry</span><span class="params">(String methodName, Object[] params)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.params = params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PersistAofEntry <span class="title function_">of</span><span class="params">(String methodName, Object[] params)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersistAofEntry</span>(methodName, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="持久化拦截器">持久化拦截器</h3><p>专门服务于aof的拦截器</p><p>目的：当cache中定义的持久化方式是aof时，会把操作的信息放入到CachePersistAof 的 buffer 列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheInterceptorAof</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheInterceptor</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        ICachePersist&lt;K, V&gt; persist = cache.persist();</span><br><span class="line">        <span class="comment">//判断持久化策略</span></span><br><span class="line">        <span class="keyword">if</span>(persist <span class="keyword">instanceof</span> CachePersistAof)&#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> context.method();</span><br><span class="line">            Object[] params = context.params();</span><br><span class="line"></span><br><span class="line">            <span class="type">PersistAofEntry</span> <span class="variable">aofEntry</span> <span class="operator">=</span> PersistAofEntry.of(method.getName(), params);</span><br><span class="line">            <span class="type">String</span> <span class="variable">aofEntryJSON</span> <span class="operator">=</span> JSON.toJSONString(aofEntry);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//先添加到buffer</span></span><br><span class="line">            <span class="type">CachePersistAof</span> <span class="variable">cachePersistAof</span> <span class="operator">=</span> (CachePersistAof) persist;</span><br><span class="line"></span><br><span class="line">            log.debug(<span class="string">&quot;AOF 开始追加文件内容：&#123;&#125;&quot;</span>, aofEntryJSON);</span><br><span class="line">            cachePersistAof.appendBuffer(aofEntryJSON);</span><br><span class="line">            log.debug(<span class="string">&quot;AOF 完成追加文件内容：&#123;&#125;&quot;</span>, aofEntryJSON);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现aof">实现AOF</h3><h4 id="接口">接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//aof + rdb 共同工作   需要以下参数</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">delay</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">period</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    TimeUnit <span class="title function_">timeUnit</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-1">实现</h4><p><strong>CachePersistAof</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachePersistAof</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; bufferList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CachePersistAof</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">        bufferList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始 AOF 持久化到文件&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!FileUtils.exists(filePath))&#123;</span><br><span class="line">            FileUtils.createFile(filePath);</span><br><span class="line">        &#125;</span><br><span class="line">        FileUtils.append(filePath, bufferList);</span><br><span class="line"></span><br><span class="line">        bufferList.clear();</span><br><span class="line">        log.info(<span class="string">&quot;完成 AOF 持久化到文件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">delay</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">period</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> TimeUnit <span class="title function_">timeUnit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TimeUnit.SECONDS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加载的实现">加载的实现</h3><p>思路：通过遍历cache类的全部方法，得到每一个方法，然后获得每一个方法的annotation也就是注解，然后判断这个注解的aof属性是否为true，把为true的method都添加到map里，然后读取aof文件，把文件的json字符串转化为aofEntry，然后通过entry的method名，调用map的get，获得方法本体，然后通过反射调用，达到初始化map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheLoadAof</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheLoad</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheLoadAof</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Method&gt; METHOD_MAP ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化METHOD_MAP,这里是统计添加了CacheInterceptor拦截器的全部方法</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        METHOD_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Method[] methods = Cache.class.getMethods();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="type">CacheInterceptor</span> <span class="variable">cacheInterceptor</span> <span class="operator">=</span> method.getAnnotation(CacheInterceptor.class);</span><br><span class="line">            <span class="keyword">if</span>(cacheInterceptor != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cacheInterceptor.aof())&#123;</span><br><span class="line">                    METHOD_MAP.put(method.getName(), method);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        List&lt;String&gt; lines = FileUtil.readAllLines(filePath);</span><br><span class="line">        log.debug(<span class="string">&quot;[load] 开始加载处理 path: &#123;&#125;&quot;</span>, filePath);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(lines)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[load] path: &#123;&#125; 文件内容为空，直接返回&quot;</span>, filePath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">            <span class="keyword">if</span>(StringUtil.isEmpty(line))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">PersistAofEntry</span> <span class="variable">aofEntry</span> <span class="operator">=</span> JSON.parseObject(line, PersistAofEntry.class);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> aofEntry.getMethodName();</span><br><span class="line">            Object[] params = aofEntry.getParams();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> METHOD_MAP.get(methodName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                method.invoke(cache, params);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException| InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="淘汰策略">淘汰策略</h1><p>采用<strong>策略模式</strong>，策略类的顶层接口是<code>ICacheEvict</code>，核心方法是<code>void evict(ICacheEvictContext&lt;K,V&gt; context);</code></p><p>以下是具体的实现类，context是<code>ICacheEvictContext</code>，内部含有缓存基础信息，包括新添加的key，专门服务于<code>CacheEvic</code>接口，负责运行时选择具体的策略。同时也减少了<code>CacheContext</code>的职责。</p><h2 id="接口定义-3">接口定义</h2><h3 id="icacheevict">ICacheEvict</h3><p>ICacheEvict：内存驱逐/淘汰策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 17:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义  驱逐淘汰方法</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICacheEntry&lt;K,V&gt; <span class="title function_">evict</span><span class="params">(ICacheEvictContext&lt;K,V&gt; context)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务于lru，将key添加到链表头</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 服务于lru，将key移除</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="icacheevictcontext">ICacheEvictContext</h3><p>ICacheEvictContext：内存驱逐/淘汰策略 上下文</p><p>功能：负责<strong>传递缓存上下文</strong>以及新元素key的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 17:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheEvictContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新加的 key，为具体缓存策略提供key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    K <span class="title function_">key</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cache 实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICache&lt;K, V&gt; <span class="title function_">cache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取大小限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象策略类">抽象策略类</h3><p>应用到<strong>模板方法模式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICacheEntry&lt;K, V&gt; <span class="title function_">evict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dpEvict(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> ICacheEntry&lt;K,V&gt; <span class="title function_">dpEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样以后的策略只需专注实现dpEvict方法即可</p><h2 id="策略工具类-1">策略工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 策略工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CacheEvicts</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheEvicts</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 无策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return  具体策略实现类CacheEvict</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; ICacheEvict&lt;K,V&gt; <span class="title function_">none</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheEvictNone</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 无策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return  具体策略实现类CacheEvict</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; ICacheEvict&lt;K,V&gt; <span class="title function_">fifo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheEvictFIFO</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体实现">具体实现</h2><h3 id="cacheevictcontext">CacheEvictContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictContext</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheEvictContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sizeLimit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新加的 key</span></span><br><span class="line"><span class="comment">     *  后跟set方法，返回值保证流式编程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">key</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="title function_">key</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cache 实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title function_">cache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="title function_">cache</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sizeLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="title function_">sizeLimit</span><span class="params">(<span class="type">int</span> sizeLimit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeLimit = sizeLimit;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无策略">无策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 无淘汰策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictNone</span> <span class="keyword">implements</span> <span class="title class_">ICacheEvict</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">(ICacheEvictContext context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用模板方法模式，引入抽象策略类以后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictNone</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">dpEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="fifo">FIFO</h3><p>先进先出的思想，具体采用链表实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: FIFO淘汰策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 20:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictFIFO</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;K&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictFIFO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit())&#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">removeKey</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            cache.remove(removeKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这种final可加可不加，这是提高可读性的一种方式</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> context.key();</span><br><span class="line">        queue.add(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>采用模板方法模式，引入抽象策略类以后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">dpEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">    ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">    ICacheEntry&lt;K,V&gt; result = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit())&#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">removeKey</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">        <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> cache.remove(removeKey);</span><br><span class="line">        result = <span class="keyword">new</span> <span class="title class_">CacheEntry</span>&lt;&gt;(removeKey, removeValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这种final可加可不加，这是提高可读性的一种方式</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> context.key();</span><br><span class="line">    queue.add(key);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="朴素lru">朴素LRU</h3><p>连续性准则：</p><ul><li>时间连续性：对于信息的访问，最近被访问过，被再次访问的可能性会很高。缓存就是基于这个理念进行数据淘汰的。</li><li>空间连续性：对于磁盘信息的访问，将很有可能访问连续的空间信息。所以会有page 预取来提升性能。</li></ul><p>实现思路：创建一个链表实现</p><ol type="1"><li>新数据放到链表头部</li><li>缓存命中的时候，将对应的数据移动到头部<ul><li>命中缓存，删除这个缓存，再添加到头部</li></ul></li><li>链表满的时候，从尾部淘汰数据</li></ol><p>具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictLRU</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;K&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">dpEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> context.key();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sizeLimit</span> <span class="operator">=</span> context.sizeLimit();</span><br><span class="line">        ICacheEntry&lt;K, V&gt; removeEntry = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= sizeLimit)&#123;</span><br><span class="line">            <span class="comment">//获取最后一个结点的key</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">removeKey</span> <span class="operator">=</span> list.get(list.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> cache.remove(removeKey);</span><br><span class="line">             removeEntry = CacheEntry.of(removeKey, removeValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> removeEntry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.remove(key);</span><br><span class="line">        <span class="comment">//头插</span></span><br><span class="line">        <span class="built_in">this</span>.list.add(<span class="number">0</span>,key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新添加的方法具体在哪使用，如下：</p><p>注解添加：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">evict</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>在<strong>containsKey</strong>、<strong>get</strong>、<strong>put</strong>、<strong>remove</strong>方法上使用</p><h4 id="驱逐拦截器的实现">驱逐拦截器的实现</h4><p>放在方法之后更新，不然每次当前操作的 key 都会被放在最前面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheInterceptorEvict</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheInterceptor</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 额外配置lru功能</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        ICacheEvict&lt;K, V&gt; evict = cache.evict();</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> context.method();</span><br><span class="line">        Object[] params = context.params();</span><br><span class="line">        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)params[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;remove&quot;</span>.equals(method.getName()))&#123;</span><br><span class="line">            evict.removeKey(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            evict.updateKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>驱逐拦截器投入使用：</p><ol type="1"><li>CacheInterceptors定义获取方法evict()</li><li>核心代理类CacheProxyGuide定义成员变量，并且在interceptorHandler增强方法中投入使用</li></ol><h3 id="双向链表-哈希表lru优化">双向链表 + 哈希表LRU优化</h3><p>我们的目标是要把淘汰算法的搜索时间复杂度将下去，降为O(1)。</p><h4 id="接口定义-4">接口定义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILruMap</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ICacheEntry&lt;K,V&gt; <span class="title function_">removeOldest</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(K key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-2">实现</h4><p>双向链表的结点定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DoubleListNode</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">key</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DoubleListNode</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DoubleListNode&lt;K, V&gt; <span class="title function_">key</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DoubleListNode&lt;K, V&gt; <span class="title function_">value</span><span class="params">(V value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DoubleListNode&lt;K, V&gt; <span class="title function_">pre</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DoubleListNode&lt;K, V&gt; <span class="title function_">pre</span><span class="params">(DoubleListNode&lt;K, V&gt; pre)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pre = pre;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DoubleListNode&lt;K, V&gt; <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DoubleListNode&lt;K, V&gt; <span class="title function_">next</span><span class="params">(DoubleListNode&lt;K, V&gt; next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双向链表数据结构实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruMapDoubleList</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ILruMap</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, DoubleListNode&lt;K,V&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruMapDoubleList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.head.next(<span class="built_in">this</span>.tail);</span><br><span class="line">        <span class="built_in">this</span>.tail.pre(<span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICacheEntry&lt;K, V&gt; <span class="title function_">removeOldest</span><span class="params">()</span> &#123;</span><br><span class="line">        DoubleListNode&lt;K, V&gt; tailPre = <span class="built_in">this</span>.tail.pre();</span><br><span class="line">        <span class="keyword">if</span>(tailPre == <span class="built_in">this</span>.head)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;链表中无结点，头结点无法删除!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ICacheEntry&lt;K, V&gt; entry = CacheEntry.&lt;K, V&gt;of(tailPre.key(), tailPre.value());</span><br><span class="line">        removeKey(tailPre.key());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        DoubleListNode&lt;K, V&gt; updateNode = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isNull(updateNode)) &#123;</span><br><span class="line">            updateNode = <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>&lt;&gt;();</span><br><span class="line">            updateNode.key(key);</span><br><span class="line">        &#125;</span><br><span class="line">        removeKey(key);</span><br><span class="line">        <span class="comment">//头插</span></span><br><span class="line">        updateNode.next(head.next());</span><br><span class="line">        updateNode.pre(head);</span><br><span class="line">        head.next().pre(updateNode);</span><br><span class="line">        head.next(updateNode);</span><br><span class="line"></span><br><span class="line">        map.put(key, updateNode);</span><br><span class="line">        log.debug(<span class="string">&quot;在 LruMapDoubleList 中更新, key: &#123;&#125;&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        DoubleListNode&lt;K, V&gt; removeNode = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isNull(removeNode)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        removeNode.pre().next(removeNode.next());</span><br><span class="line">        removeNode.next().pre(removeNode.pre());</span><br><span class="line"></span><br><span class="line">        map.remove(key);</span><br><span class="line">        log.debug(<span class="string">&quot;从 LruMapDoubleList 中移除, key: &#123;&#125;&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="cacheevictlrudoublelistmap">CacheEvictLRUDoubleListMap</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictLRUDoubleListMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DoubleListNode&lt;K,V&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, DoubleListNode&lt;K,V&gt;&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictLRUDoubleListMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.head.next(<span class="built_in">this</span>.tail);</span><br><span class="line">        <span class="built_in">this</span>.tail.pre(<span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K,V&gt; <span class="title function_">doEvict</span><span class="params">(ICacheEvictContext&lt;K,V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        ICacheEntry&lt;K, V&gt; removeEntry = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(map.size() &gt;= context.sizeLimit())&#123;</span><br><span class="line">            removeEntry = removeOldest();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> removeEntry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        DoubleListNode&lt;K, V&gt; updateNode = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isNull(updateNode)) &#123;</span><br><span class="line">            updateNode = <span class="keyword">new</span> <span class="title class_">DoubleListNode</span>&lt;&gt;();</span><br><span class="line">            updateNode.key(key);</span><br><span class="line">        &#125;</span><br><span class="line">        removeKey(key);</span><br><span class="line">        <span class="comment">//头插</span></span><br><span class="line">        updateNode.next(head.next());</span><br><span class="line">        updateNode.pre(head);</span><br><span class="line">        head.next().pre(updateNode);</span><br><span class="line">        head.next(updateNode);</span><br><span class="line"></span><br><span class="line">        map.put(key, updateNode);</span><br><span class="line">        log.debug(<span class="string">&quot;在 LruMapDoubleList 中更新, key: &#123;&#125;&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        DoubleListNode&lt;K, V&gt; removeNode = map.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isNull(removeNode)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        removeNode.pre().next(removeNode.next());</span><br><span class="line">        removeNode.next().pre(removeNode.pre());</span><br><span class="line"></span><br><span class="line">        map.remove(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheEntry&lt;K, V&gt; <span class="title function_">removeOldest</span><span class="params">()</span> &#123;</span><br><span class="line">        DoubleListNode&lt;K, V&gt; tailPre = <span class="built_in">this</span>.tail.pre();</span><br><span class="line">        <span class="keyword">if</span>(tailPre == <span class="built_in">this</span>.head)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;链表中无结点，头结点无法删除!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ICacheEntry&lt;K, V&gt; entry = CacheEntry.&lt;K, V&gt;of(tailPre.key(), tailPre.value());</span><br><span class="line">        removeKey(tailPre.key());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="cacheevictlrulinkedhashmap">CacheEvictLruLinkedHashMap</h5><p>这个类是jdk自带的 双向链表 + hashmap的实现，我们可以直接用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictLruLinkedHashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">LinkedHashMap</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictLruLinkedHashMap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.size() &gt;= capacity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lru2q">LRU2Q</h3><p>2Q将LRU-2算法中的访问历史队列（注意这不是缓存数据的）改为一个<strong>FIFO缓存队列</strong>。</p><p>数据第一次访问，添加到FIFO缓存队列，第二次访问，再放到LRU缓存队列。</p><p>两个队列有各自的淘汰策略</p><h4 id="实现-3">实现</h4><p>具体淘汰模式：</p><p>先淘汰fifo队列，再淘汰lruMap中数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictLRU2Q</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;K&gt; fifoQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">QUEUE_LIMIT</span> <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LruMapDoubleList&lt;K,V&gt; lruMapDoubleList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictLRU2Q</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fifoQueue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.lruMapDoubleList = <span class="keyword">new</span> <span class="title class_">LruMapDoubleList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        <span class="type">K</span> <span class="variable">evictKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        ICacheEntry&lt;K, V&gt; result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit())&#123;</span><br><span class="line">            <span class="keyword">if</span>(fifoQueue != <span class="literal">null</span>)&#123;</span><br><span class="line">                evictKey = fifoQueue.poll();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ICacheEntry&lt;K, V&gt; removeEntry = lruMapDoubleList.removeOldest();</span><br><span class="line">                evictKey = removeEntry.key();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">V</span> <span class="variable">remove</span> <span class="operator">=</span> cache.remove(evictKey);</span><br><span class="line">            result = CacheEntry.of(evictKey, remove);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="comment">//自顶向下</span></span><br><span class="line">        <span class="keyword">if</span> (lruMapDoubleList.containsKey(key)) &#123;</span><br><span class="line">            lruMapDoubleList.removeKey(key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//O(n)的时间复杂度</span></span><br><span class="line">            fifoQueue.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lruMapDoubleList.containsKey(key) || fifoQueue.contains(key)) &#123;</span><br><span class="line">            removeKey(key);</span><br><span class="line">            lruMapDoubleList.updateKey(key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fifoQueue.offer(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lru-2">LRU-2</h3><p>LRU-2是LRU-K的最佳实践。</p><p><strong>LRU-K介绍</strong></p><ul><li>K：最近访问的次数</li></ul><p>目的：解决缓存污染问题</p><p>数据结构：LRU需要多维护一个队列，表示缓存被访问的历史，数据的访问次数达到K次，就放入缓存。</p><p>淘汰规则：会淘汰第K次访问时间距当前时间最大的数据；数据第一次被访问时，加入到历史访问列表，如果数据在访问历史列表中没有达到K次访问，则按照一定的规则（FIFO,LRU）淘汰；</p><p>添加缓存规则：当访问历史队列中的数据访问次数达到K次后，将数据索引从历史队列中删除，将数据移到缓存队列中，并缓存数据，缓存队列重新按照时间排序；</p><p>底层数据结构还是<code>lru</code> 的双向链表 + map</p><h4 id="实现-4">实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictLRU2</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ILruMap&lt;K,V&gt; firstVisitLruMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ILruMap&lt;K,V&gt; moreVisitLruMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictLRU2</span><span class="params">()</span>&#123;</span><br><span class="line">        firstVisitLruMap = <span class="keyword">new</span> <span class="title class_">LruMapDoubleList</span>&lt;&gt;();</span><br><span class="line">        moreVisitLruMap = <span class="keyword">new</span> <span class="title class_">LruMapDoubleList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        ICacheEntry&lt;K, V&gt; result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit()) &#123;</span><br><span class="line">            ICacheEntry&lt;K, V&gt; removeEntry = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(!firstVisitLruMap.isEmpty())&#123;</span><br><span class="line">                removeEntry = firstVisitLruMap.removeOldest();</span><br><span class="line">                log.debug(<span class="string">&quot;[lru-2]: 从 firstVisitLruMap 中淘汰数据 key：&#123;&#125;&quot;</span>, removeEntry.key());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                removeEntry = moreVisitLruMap.removeOldest();</span><br><span class="line">                log.debug(<span class="string">&quot;[lru-2]: 从 moreVisitLruMap 中淘汰数据 key：&#123;&#125;&quot;</span>, removeEntry.key());</span><br><span class="line">            &#125;</span><br><span class="line">            result = removeEntry;</span><br><span class="line">            cache.remove(result.key());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(moreVisitLruMap.containsKey(key)) &#123;</span><br><span class="line">            moreVisitLruMap.removeKey(key);</span><br><span class="line">            log.debug(<span class="string">&quot;[lru-2]: 从 moreVisitLruMap 中移除 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            firstVisitLruMap.removeKey(key);</span><br><span class="line">            log.debug(<span class="string">&quot;[lru-2]: 从 firstVisitLruMap 中移除 key：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(moreVisitLruMap.containsKey(key) || firstVisitLruMap.containsKey(key))&#123;</span><br><span class="line">            removeKey(key);</span><br><span class="line">            moreVisitLruMap.updateKey(key);</span><br><span class="line">            log.debug(<span class="string">&quot;key: &#123;&#125; 多次访问，加入到 moreLruMap 中&quot;</span>, key);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            firstVisitLruMap.updateKey(key);</span><br><span class="line">            log.debug(<span class="string">&quot;key: &#123;&#125; 为第一次访问，加入到 firstLruMap 中&quot;</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lfu">LFU</h3><p>LFU(Least FrequentlyUsed)即最近最不常用，是基于访问频次的一种算法</p><p>存储空间上会多出一些，存储元素的访问次数</p><p>淘汰性能：</p><p>O(n)： <code>HashMap&lt;String, Interger&gt;</code>, String 对应 key信息，Integer 对应次数。每次访问到就去+1，设置和读取的时间复杂度都是O(1)；不过删除就比较麻烦了，需要全部遍历对比，时间复杂度为 O(n);</p><p>O(logn)：利用小顶堆+hashmap，小顶堆插入、删除操作都能达到O(logn)时间复杂度，因此效率相比第一种实现方法更加高效。</p><p>本项目实现基于O(1)形式：</p><p>0(1)：都需要hash操作，参考用于HTTP协议的缓存网络代理应用程序</p><p>浏览器经常出现循环请求的场景，这时用lfu命中率会大大提高</p><p>LFU支持的操作：</p><ol type="1"><li>插入数据</li><li>对数据的频次自增</li><li>从缓存中逐出使用次数最少的数据</li></ol><p>数据结构演示：</p><p><img src="image-20231212180338056.png" alt="LFU-O(1)时间复杂度数据结构" style="zoom:67%;" /></p><p>通过维护2个链接列表来实现，一个用于访问频率，另一个用于访问相同频率的全部结点。</p><ul><li>哈希表：按key访问元素</li><li>双向列表：存放不同频率的集合</li></ul><h4 id="实现-5">实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictLFU</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, FreqNode&lt;K,V&gt;&gt; keyMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, LinkedHashSet&lt;FreqNode&lt;K,V&gt;&gt;&gt; freqMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> minFreq;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictLFU</span><span class="params">()</span> &#123;</span><br><span class="line">        keyMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        freqMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        minFreq = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        ICacheEntry&lt;K,V&gt; result = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit())&#123;</span><br><span class="line">            FreqNode&lt;K, V&gt; evictNode = getMinFreqNode();</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> evictNode.key();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> cache.remove(key);</span><br><span class="line">            <span class="built_in">this</span>.removeKey(key);</span><br><span class="line">            log.debug(<span class="string">&quot;淘汰最小频率信息, key: &#123;&#125;, value: &#123;&#125;, freq: &#123;&#125;&quot;</span>,</span><br><span class="line">                    key, value, evictNode.frequency());</span><br><span class="line">            result = CacheEntry.of(key, value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FreqNode&lt;K,V&gt; <span class="title function_">getMinFreqNode</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;FreqNode&lt;K, V&gt;&gt; minFreqSet = freqMap.get(minFreq);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isNotEmpty(minFreqSet))&#123;</span><br><span class="line">            <span class="comment">//返回第一个元素</span></span><br><span class="line">            <span class="keyword">return</span> minFreqSet.iterator().next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;未发现最小频率的 Key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        FreqNode&lt;K, V&gt; freqNode = keyMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isNotEmpty(freqNode))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">oldFrequency</span> <span class="operator">=</span> freqNode.frequency();</span><br><span class="line">            LinkedHashSet&lt;FreqNode&lt;K, V&gt;&gt; preSet = freqMap.get(oldFrequency);</span><br><span class="line">            preSet.remove(freqNode);</span><br><span class="line">            <span class="comment">//更新min</span></span><br><span class="line">            <span class="keyword">if</span>(minFreq == oldFrequency &amp;&amp; preSet.isEmpty())&#123;</span><br><span class="line">                minFreq++;</span><br><span class="line">                log.debug(<span class="string">&quot;minFreq 增加为：&#123;&#125;&quot;</span>, minFreq);</span><br><span class="line">            &#125;</span><br><span class="line">            addToFreqMap(oldFrequency + <span class="number">1</span> , freqNode);</span><br><span class="line">            freqNode.frequency(oldFrequency + <span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            freqNode = <span class="keyword">new</span> <span class="title class_">FreqNode</span>&lt;&gt;(key);</span><br><span class="line">            keyMap.put(key, freqNode);</span><br><span class="line">            addToFreqMap(<span class="number">1</span>, freqNode);</span><br><span class="line">            <span class="comment">//更新min</span></span><br><span class="line">            minFreq = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addToFreqMap</span><span class="params">(<span class="type">int</span> frequency, FreqNode&lt;K, V&gt; freqNode)</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;FreqNode&lt;K, V&gt;&gt; set = freqMap.get(frequency);</span><br><span class="line">        <span class="keyword">if</span>(set == <span class="literal">null</span>)&#123;</span><br><span class="line">            set = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        set.add(freqNode);</span><br><span class="line">        freqMap.put(frequency, set);</span><br><span class="line">        log.debug(<span class="string">&quot;[freqMap]: freq=&#123;&#125; 添加元素节点：&#123;&#125;&quot;</span>, frequency, freqNode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        FreqNode&lt;K, V&gt; removeNode = keyMap.remove(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">frequency</span> <span class="operator">=</span> removeNode.frequency();</span><br><span class="line">        LinkedHashSet&lt;FreqNode&lt;K, V&gt;&gt; freqNodeLinkedHashSet = freqMap.get(frequency);</span><br><span class="line">        freqNodeLinkedHashSet.remove(removeNode);</span><br><span class="line">        <span class="comment">//更新min</span></span><br><span class="line">        <span class="keyword">if</span>(freqNodeLinkedHashSet.isEmpty() &amp;&amp; minFreq == frequency)&#123;</span><br><span class="line">            minFreq--;</span><br><span class="line">            log.debug(<span class="string">&quot;minFreq 减少为：&#123;&#125;&quot;</span>, minFreq);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="clock">Clock</h3><h4 id="实现-6">实现</h4><p>思路：对于每一个缓存数据，定义中都带有一个accessFlag标识位，初始为0，表示该数据进入缓存以后到目前为止未被访问过。</p><p>数据结构的实现：</p><p>环形双向链表 + lru</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LruMapCircleList</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ILruMap</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CircleListNode&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CircleListNode&lt;K,V&gt; pre;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,CircleListNode&lt;K,V&gt;&gt; indexMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LruMapCircleList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">CircleListNode</span>&lt;&gt;(<span class="literal">null</span>);</span><br><span class="line">        indexMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        pre = head;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.head.next(<span class="built_in">this</span>.head);</span><br><span class="line">        <span class="built_in">this</span>.head.pre(<span class="built_in">this</span>.head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICacheEntry&lt;K, V&gt; <span class="title function_">removeOldest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line">            log.error(<span class="string">&quot;当前列表为空，无法进行删除&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;不可删除头结点!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        CircleListNode&lt;K, V&gt; cur = <span class="built_in">this</span>.pre;</span><br><span class="line">        <span class="keyword">while</span> (cur.next() != head)&#123;</span><br><span class="line">            cur = cur.next();</span><br><span class="line">            <span class="keyword">if</span>(cur.accessFlag())&#123;</span><br><span class="line">                cur.accessFlag(<span class="literal">false</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                removeKey(cur.key());</span><br><span class="line">                <span class="keyword">return</span> CacheEntry.of(cur.key(), cur.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//循环一圈都没找到，降级为FIFO</span></span><br><span class="line">        pre = head;</span><br><span class="line">        CircleListNode&lt;K,V&gt; firstNode = <span class="built_in">this</span>.head.next();</span><br><span class="line">        removeKey(head.next().key());</span><br><span class="line">        <span class="keyword">return</span> CacheEntry.of(firstNode.key(), firstNode.value());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        CircleListNode&lt;K, V&gt; node = indexMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isNotEmpty(node)) &#123;</span><br><span class="line">            node.accessFlag(<span class="literal">true</span>);</span><br><span class="line">            log.debug(<span class="string">&quot;节点已存在，设置节点访问标识为 true, key: &#123;&#125;&quot;</span>, key);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            node = <span class="keyword">new</span> <span class="title class_">CircleListNode</span>&lt;&gt;(key);</span><br><span class="line">            CircleListNode&lt;K, V&gt; tail = head.pre();</span><br><span class="line">            node.next(head);</span><br><span class="line">            node.pre(tail);</span><br><span class="line">            tail.next(node);</span><br><span class="line">            head.pre(node);</span><br><span class="line">            indexMap.put(key, node);</span><br><span class="line">            log.debug(<span class="string">&quot;节点不存在，新增节点到链表中：&#123;&#125;&quot;</span>, key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        CircleListNode&lt;K, V&gt; removeNode = indexMap.get(key);</span><br><span class="line">        <span class="keyword">if</span>(ObjectUtils.isEmpty(removeNode)) &#123;</span><br><span class="line">            log.warn(<span class="string">&quot;对应的删除信息不存在：&#123;&#125;&quot;</span>, key);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CircleListNode&lt;K, V&gt; pre = removeNode.pre();</span><br><span class="line">        CircleListNode&lt;K, V&gt; next = removeNode.next();</span><br><span class="line"></span><br><span class="line">        pre.next(next);</span><br><span class="line">        next.pre(pre);</span><br><span class="line">        indexMap.remove(key);</span><br><span class="line">        log.debug(<span class="string">&quot;Key: &#123;&#125; 从循环链表中移除&quot;</span>, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexMap.containsKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> indexMap.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictClock</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LruMapCircleList&lt;K,V&gt; circleList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictClock</span><span class="params">()</span> &#123;</span><br><span class="line">        circleList = <span class="keyword">new</span> <span class="title class_">LruMapCircleList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> ICacheEntry&lt;K, V&gt; <span class="title function_">doEvict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        CacheEntry&lt;K,V&gt; result = <span class="literal">null</span>;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit()) &#123;</span><br><span class="line">            result = (CacheEntry&lt;K, V&gt;) circleList.removeOldest();</span><br><span class="line">            <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> cache.remove(result.key());</span><br><span class="line">            log.debug(<span class="string">&quot;基于 clock 算法淘汰 key：&#123;&#125;, value: &#123;&#125;&quot;</span>, result.key(), removeValue);</span><br><span class="line">            result.value(removeValue);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        circleList.removeKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        circleList.updateKey(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="监听器">监听器</h1><h2 id="删除监听器">删除监听器</h2><p>应用场景：</p><ul><li>evict驱逐场景</li><li>expire过期场景</li></ul><h3 id="接口定义-5">接口定义</h3><p><strong>ICacheRemoveListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 监听器删除接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/6 20:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheRemoveListener</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 监听动作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/6 20:19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ICacheRemoveListenerContext&lt;K,V&gt; removeListenerContext)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ICacheRemoveListenerContext</strong></p><p>监听所需要的信息都存储在这个上下文中，由上下文传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 监听器上下文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/6 20:21</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheRemoveListenerContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 返回淘汰或者清空的key</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    K <span class="title function_">key</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    V <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 清空类型: 过期淘汰 or 内存满了的淘汰</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">type</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-7">实现</h3><h4 id="cacheremovelistener">CacheRemoveListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheRemoveListener</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheRemoveListener</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> removeListenerContext</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 监听动作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/6 20:19</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ICacheRemoveListenerContext&lt;K, V&gt; removeListenerContext)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;Remove key: &#123;&#125;, value: &#123;&#125;, type: &#123;&#125;, timeAt: &#123;&#125;&quot;</span>,</span><br><span class="line">                removeListenerContext.key(),</span><br><span class="line">                removeListenerContext.value(),</span><br><span class="line">                removeListenerContext.type(),</span><br><span class="line">                formatter.format(System.currentTimeMillis()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cacheremovelistenercontext">CacheRemoveListenerContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheRemoveListenerContext</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheRemoveListenerContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; CacheRemoveListenerContext&lt;K,V&gt; <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheRemoveListenerContext</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">key</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheRemoveListenerContext&lt;K,V&gt; <span class="title function_">setKey</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheRemoveListenerContext&lt;K,V&gt; <span class="title function_">setValue</span><span class="params">(V value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">type</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheRemoveListenerContext&lt;K,V&gt; <span class="title function_">setType</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cacheremovelisteners">CacheRemoveListeners</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheRemoveListeners</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheRemoveListeners</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  &lt;K,V&gt; List&lt;ICacheRemoveListener&lt;K,V&gt;&gt; <span class="title function_">defaults</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;ICacheRemoveListener&lt;K,V&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">CacheRemoveListener</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="慢操作监听器">慢操作监听器</h2><p>redis 中会存储慢操作的相关日志信息，日志主要是由两个参数构成：</p><ul><li>slowlog-log-slower-than预设阈值,它的单位是毫秒(1秒=1000000微秒)默认值是10000、</li><li>slowlog-max-len 最多存储多少条的慢日志记录</li></ul><p>作用：打印出每个对缓存的操作的操作时间，这个时间有个阈值由用户来设置，比如超过100ms，用户可以选择输出 warn 日志；超过1s，可能影响到业务了，可以直接接入报警系统。</p><h3 id="接口定义-6">接口定义</h3><p><strong>ICacheSlowListener</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheSlowListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ICacheSlowListenerContext context)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 慢日志触发阈值</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">slowerThanMills</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>那它要打印哪些东西呢？ 由上下文对象带给他</p></li><li><p>没用泛型的原因：因为打印的东西不需要具体的缓存内容，KeyValue不需要，所以不需要定义K,V</p></li></ul><p><strong>ICacheSlowListenerContext</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheSlowListenerContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 方法/操作 名</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">methodName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 方法参数</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] params();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 方法返回值</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">result</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">startTimeMills</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">endTimeMills</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">costTimeMills</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-8">实现</h3><h4 id="cacheslowlistener"><strong>CacheSlowListener</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheSlowListener</span> <span class="keyword">implements</span> <span class="title class_">ICacheSlowListener</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">(ICacheSlowListenerContext context)</span> &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;[Slow] methodName: &#123;&#125;, params: &#123;&#125;, cost time: &#123;&#125;&quot;</span>,</span><br><span class="line">                context.methodName(), JSON.toJSON(context.params()), context.costTimeMills());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">slowerThanMills</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//超过1s就打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cacheslowlistenercontext">CacheSlowListenerContext</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheSlowListenerContext</span> <span class="keyword">implements</span> <span class="title class_">ICacheSlowListenerContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> startTimeMills;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> endTimeMills;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> costTimeMills;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">methodName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> methodName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheSlowListenerContext <span class="title function_">setMethodName</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodName = methodName;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] params() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheSlowListenerContext <span class="title function_">setParams</span><span class="params">(Object[] params)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.params = params;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">result</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheSlowListenerContext <span class="title function_">setResult</span><span class="params">(Object result)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.result = result;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">startTimeMills</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startTimeMills;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheSlowListenerContext <span class="title function_">setStartTimeMills</span><span class="params">(<span class="type">long</span> startTimeMills)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startTimeMills = startTimeMills;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">endTimeMills</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endTimeMills;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheSlowListenerContext <span class="title function_">setEndTimeMills</span><span class="params">(<span class="type">long</span> endTimeMills)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endTimeMills = endTimeMills;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">costTimeMills</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> costTimeMills;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheSlowListenerContext <span class="title function_">setCostTimeMills</span><span class="params">(<span class="type">long</span> costTimeMills)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.costTimeMills = costTimeMills;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="cacheslowlisteners">CacheSlowListeners</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CacheSlowListeners</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheSlowListeners</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 监听类列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 0.0.9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ICacheSlowListener&gt; <span class="title function_">none</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 默认</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 0.0.9</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ICacheSlowListener <span class="title function_">defaults</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheSlowListener</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="耗时拦截器">耗时拦截器</h3><p>这个拦截器是获取方法执行的时间的，专门服务于slow日志操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheInterceptorCost</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheInterceptor</span>&lt;K,V&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;Cost start, method: &#123;&#125;&quot;</span>, context.method().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(ICacheInterceptorContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">costMills</span> <span class="operator">=</span> context.endMills() - context.startMills();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> context.method().getName();</span><br><span class="line">        log.debug(<span class="string">&quot;Cost end, method: &#123;&#125;, cost: &#123;&#125;ms&quot;</span>, methodName, costMills);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加慢日志操作</span></span><br><span class="line">        List&lt;ICacheSlowListener&gt; slowListeners = context.cache().slowListeners();</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isNotEmpty(slowListeners))&#123;</span><br><span class="line">            <span class="type">CacheSlowListenerContext</span> <span class="variable">slowListenerContext</span> <span class="operator">=</span> CacheSlowListenerContext.newInstance()</span><br><span class="line">                    .setCostTimeMills(costMills)</span><br><span class="line">                    .setEndTimeMills(context.endMills())</span><br><span class="line">                    .setStartTimeMills(context.startMills())</span><br><span class="line">                    .setMethodName(methodName)</span><br><span class="line">                    .setParams(context.params())</span><br><span class="line">                    .setResult(context.result());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ICacheSlowListener slowListener : slowListeners) &#123;</span><br><span class="line">                <span class="comment">//根据设置的阈值</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">slowerThanMills</span> <span class="operator">=</span> slowListener.slowerThanMills();</span><br><span class="line">                <span class="keyword">if</span>(costMills &gt; slowerThanMills)&#123;</span><br><span class="line">                    slowListener.listen(slowListenerContext);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>交给代理类去整合增强即可</p><h2 id="实体类cacheentry优化">实体类CacheEntry优化</h2><p>因为监听器需要获取删除元素的Key和Value，之前我们定义的方法返回值都是void，优化一下：</p><p>ICacheEntry接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheEntry</span>&lt;K,V&gt; &#123;</span><br><span class="line">    K <span class="title function_">key</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    V <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEntry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheEntry</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEntry</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; ICacheEntry&lt;K,V&gt; <span class="title function_">of</span><span class="params">(K key, V value)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheEntry</span>&lt;&gt;(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">key</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">value</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CacheEntry &#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;key=&quot;</span> + key +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用">应用</h3><h4 id="evict">evict</h4><p><code>ICacheEvict</code>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ICacheEntry&lt;K,V&gt; <span class="title function_">evict</span><span class="params">(ICacheEvictContext&lt;K,V&gt; context)</span>;</span><br></pre></td></tr></table></figure><h2id="cache缓存内部导入使用删除监听器">Cache缓存内部导入使用删除监听器</h2><ol type="1"><li><p>接口定义get()方法 构建者模式命名</p></li><li><p>添加成员变量</p></li><li><p>添加set()方法 构建者模式命名</p></li><li><p>在指定的方法添加</p><ol type="1"><li><p>删除监听器：加在evict位置或者expire位置</p><p>cache类put方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 尝试淘汰内存,初始化一个CacheEvictContext 服务于策略</span></span><br><span class="line">    CacheEvictContext&lt;K, V&gt; context = <span class="keyword">new</span> <span class="title class_">CacheEvictContext</span>&lt;&gt;();</span><br><span class="line">    context.key(key).sizeLimit(sizeLimit).cache(<span class="built_in">this</span>);</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//添加拦截器</span></span><br><span class="line">    ICacheEntry&lt;K, V&gt; evictEntry = cacheEvict.evict(context);</span><br><span class="line">    <span class="keyword">if</span>(ObjectUtils.isNotEmpty(evictEntry))&#123;</span><br><span class="line">        CacheRemoveListenerContext&lt;K, V&gt; cacheRemoveListenerContext = CacheRemoveListenerContext.&lt;K, V&gt;newInstance()</span><br><span class="line">                .setKey(evictEntry.key())</span><br><span class="line">                .setValue(evictEntry.value())</span><br><span class="line">                .setType(CacheRemoveType.EVICT.getCode());</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> (ICacheRemoveListener&lt;K, V&gt; removeListener : <span class="built_in">this</span>.removeListeners) &#123;</span><br><span class="line">            removeListener.listen(cacheRemoveListenerContext);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//2. 淘汰后判断能否添加</span></span><br><span class="line">    <span class="keyword">if</span>(isSizeLimited())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;当前缓存已满，数据添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CacheExpire类cleanExpireKey方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanExpireKey</span><span class="params">(K key)</span>&#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">expireAtMs</span> <span class="operator">=</span> expireMap.get(key);</span><br><span class="line">      </span><br><span class="line">    <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span>(currentTimeMillis &gt;= expireAtMs)&#123;</span><br><span class="line">        log.debug(<span class="string">&quot;删除的缓存key为&#123;&#125;&quot;</span>, key);</span><br><span class="line">        expireMap.remove(key);</span><br><span class="line">        <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> cache.remove(key);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//过期监听器</span></span><br><span class="line">        CacheRemoveListenerContext&lt;K, V&gt; cacheRemoveListenerContext = CacheRemoveListenerContext.&lt;K, V&gt;newInstance()</span><br><span class="line">                .setKey(key)</span><br><span class="line">                .setValue(removeValue)</span><br><span class="line">                .setType(CacheRemoveType.EXPIRE.getCode());</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">for</span> (ICacheRemoveListener&lt;K, V&gt; removeListener : cache.removeListeners()) &#123;</span><br><span class="line">            removeListener.listen(cacheRemoveListenerContext);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="代理">代理</h1><p>通过代理类去创建我们的缓存对象。</p><h2 id="代理如何使用拦截器">*代理如何使用拦截器</h2><p>拦截器组件实现完成以后：</p><figure><img src="image-20231208174917994.png" alt="image-20231208174917994" /><figcaption aria-hidden="true">image-20231208174917994</figcaption></figure><p>这只是一个组件，然后由CacheInterceptors，作为对外提供的工具类。</p><p>而代理，不仅要代理这个方法，还要对这个方法进行增强，那他就需要一个代理Guide上下文，去获取方法的全部信息。</p><p>随后核心实现类<code>CacheProxyGuide</code>：整合了代理Guide上下文和<code>CacheInterceptors</code>的拦截器，两者结合使用，达到外部代理增强方法的一个作用。</p><h2 id="接口-1">接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheProxy</span> &#123;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">proxy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理的策略也有多种，定义一个接口规范，提供proxy接口，这个方法会返回具体的代理对象。</p><p>像之前的慢日志、aof拦截器都可以在代理中增强，由代理去增强之前的代码</p><h2 id="实现-9">实现</h2><h3 id="无代理">无代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoneProxy</span> <span class="keyword">implements</span> <span class="title class_">ICacheProxy</span>, InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoneProxy</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">proxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(proxy, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cglib代理">CGLIB代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> <span class="keyword">implements</span> <span class="title class_">ICacheProxy</span>, MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ICache target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CglibProxy</span><span class="params">(ICache target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">proxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//要代理的目标对象</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line"></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] params, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">CacheProxyGuideContext</span> <span class="variable">context</span> <span class="operator">=</span> CacheProxyGuideContext.newInstance()</span><br><span class="line">                .setMethod(method).setParams(params).target(<span class="built_in">this</span>.target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CacheProxyGuide.newInstance().setContext(context).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="jdk动态代理">JDK动态代理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxy</span> <span class="keyword">implements</span> <span class="title class_">ICacheProxy</span>, InvocationHandler &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ICache target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxy</span><span class="params">(ICache target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">proxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 我们要代理哪个真实对象，就将该对象传进去，最后是通过该真实对象来调用其方法的</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicProxy</span>(target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance</span><br><span class="line">                (invocationHandler.getClass().getClassLoader(), target.getClass().getInterfaces(), invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">CacheProxyGuideContext</span> <span class="variable">context</span> <span class="operator">=</span> CacheProxyGuideContext.newInstance()</span><br><span class="line">                .setMethod(method).setParams(args).target(<span class="built_in">this</span>.target);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CacheProxyGuide.newInstance().setContext(context).execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="guideproxy">*GuideProxy</h2><h3 id="icacheproxyguidecontext">ICacheProxyGuideContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheProxyGuideContext</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 代理的对象</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICache <span class="title function_">target</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    CacheInterceptor <span class="title function_">interceptor</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 代理对象的代理增强类</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICacheProxyGuideContext <span class="title function_">target</span><span class="params">(ICache cache)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Object[] params();</span><br><span class="line"></span><br><span class="line">    Method <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">invoke</span><span class="params">()</span> <span class="keyword">throws</span> Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含了被增强方法的一切属性：方法参数、结果、注解等等</p><h3 id="cacheproxyguidecontext">CacheProxyGuideContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheProxyGuideContext</span> <span class="keyword">implements</span> <span class="title class_">ICacheProxyGuideContext</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] params;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Method method;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CacheInterceptor interceptor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CacheProxyGuideContext <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheProxyGuideContext</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICache <span class="title function_">target</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheProxyGuideContext <span class="title function_">setTarget</span><span class="params">(ICache target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheInterceptor <span class="title function_">interceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheProxyGuideContext <span class="title function_">target</span><span class="params">(ICache cache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = cache;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] params() &#123;</span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheProxyGuideContext <span class="title function_">setParams</span><span class="params">(Object[] params)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.params = params;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Method <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheProxyGuideContext <span class="title function_">setMethod</span><span class="params">(Method method)</span> &#123;</span><br><span class="line">        <span class="comment">//这里的method，是那些被增强的方法，所以Interceptor的set方法在这set</span></span><br><span class="line">        <span class="built_in">this</span>.method = method;</span><br><span class="line">        <span class="built_in">this</span>.interceptor = method.getAnnotation(CacheInterceptor.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：这里invoke()；是单独执行未增强的方法，真正增强了的实现是在下面这个类，融合了两者以后的执行，所以要用下面这个类的execute方法去执行。</p><h3 id="cacheproxyguide">CacheProxyGuide</h3><p>拦截器的具体功能启用都在该类定义实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheProxyGuide</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheProxyGuide</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheProxyGuideContext context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheProxyGuide <span class="title function_">setContext</span><span class="params">(ICacheProxyGuideContext context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CacheProxyGuide <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheProxyGuide</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持久化拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 0.0.10</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ICacheInterceptor</span> <span class="variable">persistInterceptors</span> <span class="operator">=</span> CacheInterceptors.aof();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 启动代理增强   这里其实就是拦截器增强的流程  before -&gt; 方法 -&gt; after</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return 代理的方法的执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startMills</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">ICache</span> <span class="variable">cache</span> <span class="operator">=</span> context.target();</span><br><span class="line">        <span class="type">CacheInterceptorContext</span> <span class="variable">interceptorContext</span> <span class="operator">=</span> CacheInterceptorContext.newInstance()</span><br><span class="line">                .setStartMills(startMills)</span><br><span class="line">                .setMethod(context.method())</span><br><span class="line">                .setParams(context.params())</span><br><span class="line">                .setCache(cache);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取刷新注解信息</span></span><br><span class="line">        <span class="type">CacheInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> context.interceptor();</span><br><span class="line">        <span class="comment">//先执行拦截器的before</span></span><br><span class="line">        <span class="built_in">this</span>.interceptorHandler(interceptor, interceptorContext, cache, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加了注解的方法的执行   真正执行方法的是代理，不可能是拦截器，所以不要调用CacheInterceptorContext.result</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> context.invoke();</span><br><span class="line">        <span class="type">long</span> <span class="variable">endMills</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把剩余信息提供给拦截器</span></span><br><span class="line">        interceptorContext.setEndMills(endMills).setResult(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再执行拦截器的after</span></span><br><span class="line">        <span class="built_in">this</span>.interceptorHandler(interceptor, interceptorContext, cache, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interceptorHandler</span><span class="params">(CacheInterceptor interceptor,</span></span><br><span class="line"><span class="params">                                    CacheInterceptorContext interceptorContext,</span></span><br><span class="line"><span class="params">                                    ICache cache,</span></span><br><span class="line"><span class="params">                                    <span class="type">boolean</span> before)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(interceptor != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//aof追加</span></span><br><span class="line">            <span class="type">ICachePersist</span> <span class="variable">persist</span> <span class="operator">=</span> cache.persist();</span><br><span class="line">            <span class="keyword">if</span>(interceptor.aof() &amp;&amp; (persist <span class="keyword">instanceof</span> CachePersistAof))&#123;</span><br><span class="line">                <span class="keyword">if</span>(before)&#123;</span><br><span class="line">                    persistInterceptors.before(interceptorContext);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    persistInterceptors.after(interceptorContext);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cost统计方法时长</span></span><br><span class="line">            <span class="keyword">if</span>(interceptor.common())&#123;</span><br><span class="line">                <span class="keyword">for</span> (ICacheInterceptor costInterceptor : costInterceptors) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(before)&#123;</span><br><span class="line">                        costInterceptor.before(interceptorContext);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        costInterceptor.after(interceptorContext);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="手写hashmap">手写HashMap</h1><p>这是初版自定义hashmap，仿照redis的在后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProgressiveRehashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">factor</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">debugMode</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">reduceFactor</span> <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_CAPACITY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultEntry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        ProgressiveRehashMap.DefaultEntry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        DefaultEntry(<span class="type">int</span> hash, K key, V value, ProgressiveRehashMap.DefaultEntry&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DefaultEntry(K key, V value, <span class="type">int</span> hash) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>         &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                        Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> +key +</span><br><span class="line">                    <span class="string">&quot;: &quot;</span> + value +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressiveRehashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressiveRehashMap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(capacity, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressiveRehashMap</span><span class="params">(<span class="type">int</span> capacity, <span class="type">boolean</span> debugMode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; MIN_CAPACITY) &#123;</span><br><span class="line">            capacity = MIN_CAPACITY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            table.add(i, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Entry&lt;K,V&gt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.debugMode = debugMode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line"></span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(idx);</span><br><span class="line">        <span class="comment">//遍历链表，查看key是否已存在</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">entryKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(key, entryKey)</span><br><span class="line">            || key.equals(entryKey)) &#123;</span><br><span class="line">                entry.setValue(value);</span><br><span class="line">                <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;put 为替换元素，table 信息为：&quot;</span>);</span><br><span class="line">                    printTable();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        createNewEntry(hash, idx, key, value);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;put 为新增元素，table 信息为：&quot;</span>);</span><br><span class="line">            printTable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createNewEntry</span><span class="params">(<span class="type">int</span> hash, <span class="type">int</span> idx, K key, V value)</span> &#123;</span><br><span class="line">        Entry&lt;K, V&gt; entry = <span class="keyword">new</span> <span class="title class_">DefaultEntry</span>&lt;&gt;(key, value, hash);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断扩容</span></span><br><span class="line">        <span class="keyword">if</span>(isNeedSpand()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.capacity = capacity * <span class="number">2</span>;</span><br><span class="line">            rehash(capacity);</span><br><span class="line">            <span class="comment">//更新新的下标</span></span><br><span class="line">            idx = (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(idx);</span><br><span class="line">        entries.add(entry);</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;Key: &#123;&#125; 对应的 tableIndex: &#123;&#125;&quot;</span>, key, idx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.table.set(idx, entries);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNeedSpand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (size * <span class="number">1.0</span> / capacity) &gt;= factor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Entry&lt;K, V&gt;&gt; list : <span class="built_in">this</span>.table) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Entry&lt;K,V&gt; entry : list) &#123;</span><br><span class="line">                System.out.print(entry + <span class="string">&quot; &quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 初始化</span></span><br><span class="line">        List&lt;List&lt;Entry&lt;K, V&gt;&gt;&gt; newTable = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(newCapacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newCapacity; i++) &#123;</span><br><span class="line">            newTable.add(i,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历原来元素</span></span><br><span class="line">        <span class="keyword">for</span>(List&lt;Entry&lt;K, V&gt;&gt; list : table) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Entry&lt;K, V&gt; entry : list) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(entry);</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (newCapacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line">                <span class="comment">//  添加元素</span></span><br><span class="line">                <span class="comment">// 获取列表，避免数组越界</span></span><br><span class="line">                List&lt;Entry&lt;K,V&gt;&gt; newList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="keyword">if</span>(index &lt; newTable.size()) &#123;</span><br><span class="line">                    newList = newTable.get(index);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 添加元素到列表</span></span><br><span class="line">                <span class="comment">// 元素不存在重复，所以不需要考虑更新</span></span><br><span class="line">                newList.add(entry);</span><br><span class="line">                newTable.set(index, newList);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.table = newTable;</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;rehash 新容量: &#123;&#125; 完成，table 内容为：&quot;</span>, newCapacity);</span><br><span class="line">            printTable();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Entry&lt;K, V&gt;&gt; <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        Set&lt;Entry&lt;K, V&gt;&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(table)) &#123;</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Entry&lt;K, V&gt;&gt; entries : table) &#123;</span><br><span class="line">            <span class="keyword">if</span>(CollectionUtil.isNotEmpty(entries)) &#123;</span><br><span class="line">                set.addAll(entries);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line"></span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(idx);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(entries)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;[ProgressiveRehashMap] 哈希桶为空，要删除的元素不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">entryKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(key, entryKey) || key.equals(entryKey)) &#123;</span><br><span class="line">                entries.remove(entry);</span><br><span class="line">                removeValue = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;移除元素，table 信息为：&#123;&#125;&quot;</span>, entry);</span><br><span class="line">                    printTable();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(isNeedReduce()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (debugMode) &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;触发缩容操作&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    capacity = capacity &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                    rehash(capacity);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> removeValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNeedReduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (size * <span class="number">1.0</span> / capacity) &lt;= reduceFactor &amp;&amp; (capacity &gt;= MIN_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>rehash流程</strong></p><ol type="1"><li>创建新table，大小为原来的两倍，并且初始化</li><li>遍历原来的元素，重新 hash 计算下标之后，放到新的 table 中</li><li>将 table 赋值为新的 table 信息。</li></ol><h1 id="扩容缩容rehash">扩容缩容rehash</h1><p>rehash：扩容时，重新计算容量，并将之前的元素，重新计算哈希值并且重新找到新的位置。</p><h2 id="redis扩容缩容机制">redis扩容缩容机制</h2><p>redis 的 rehash 动作并不是一次性、集中式地完成的，而是<strong>分多次、渐进式地完成的</strong>。</p><h3 id="渐进式rehash">渐进式rehash</h3><p>redis内部维护两个hashtable，ht[0]、ht[1]，hash[0]是正在使用的。具体rehash步骤如下：</p><ol type="1"><li>为ht[1] 分配空间，让字典同时持有 ht[0] 和ht[1] 两个哈希表</li><li>在字典中维持一个索引计数器变量 <code>rehashidx</code>，初始为0，表示rehash工作正式开始</li><li>rehash期间，程序进行CRUD时，除了完成指定的操作以外，还要将 ht[0]哈希表在 <code>rehashidx</code> 索引上的键值对 rehash 到ht[1]，当 rehash工作完成之后， 程序将 rehashidx 属性的值增1。</li><li>随着字典操作的不断执行， 最终在某个时间点上， ht[0]的所有键值对都会被 rehash 至 ht[1] ， 这时程序将 <code>rehashidx</code>属性的值设为 -1 ， 表示 rehash 操作已完成。</li></ol><p>渐进式 rehash 的好处在于它采取<strong>分而治之</strong>的方式， 将rehash键值对所需的计算工作均滩到对字典的每个添加、删除、查找和更新操作上，从而避免了集中式 rehash 而带来的庞大计算量。</p><p>那我基本的CRUD怎么兼容，两个表如何选择？</p><ol type="1"><li>对于get：两个表都去查询</li><li>对于put：新数据添加到ht[1]</li><li>对于update：旧表新表同步更新，可能旧表的key已经迁移到新表，所以两个表都要更新，旧表更新完就等着被rehash即可</li></ol><h4 id="图解流程">图解流程</h4><p>1）准备 rehash</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/72ylNdFOwKCLKrhOedGTUaiaq4S1PEX2RcdIKbDibHw5DTlia8vnnavyzj2upxqJlYMft5oAwKRAaN8JWicbicMibBIg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片" style="zoom: 67%;" /></p><p>（2）rehash index=0</p><p><img src="640-17027982657691.png" alt="图片" style="zoom:67%;" /></p><p>（3）rehash index=1</p><p><img src="640-17027982657692.png" alt="图片" style="zoom:67%;" /></p><p>（4）rehash index=2</p><p><img src="640-17027982657693.png" alt="图片" style="zoom:67%;" /></p><p>（5）rehash index=3</p><p><img src="640-17027982657694.png" alt="图片" style="zoom:67%;" /></p><p>（6）rehash 完成</p><p><img src="640-17027982657695.png" alt="图片" style="zoom:67%;" /></p><h4 id="扩容条件">扩容条件</h4><p>哈希表的负载因子超过某个值</p><p>扩容的大小：原来的两倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Expand the hash table if needed */</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">_dictExpandIfNeeded</span><span class="params">(dict *d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Incremental rehashing already in progress. Return. */</span></span><br><span class="line">    <span class="comment">// 如果正在进行渐进式扩容，则返回OK</span></span><br><span class="line">    <span class="keyword">if</span> (dictIsRehashing(d)) <span class="keyword">return</span> DICT_OK;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If the hash table is empty expand it to the initial size. */</span></span><br><span class="line">    <span class="comment">// 如果哈希表ht[0]的大小为0，则初始化字典</span></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;ht[<span class="number">0</span>].size == <span class="number">0</span>) <span class="keyword">return</span> dictExpand(d, DICT_HT_INITIAL_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If we reached the 1:1 ratio, and we are allowed to resize the hash</span></span><br><span class="line"><span class="comment">     * table (global setting) or we should avoid it but the ratio between</span></span><br><span class="line"><span class="comment">     * elements/buckets is over the &quot;safe&quot; threshold, we resize doubling</span></span><br><span class="line"><span class="comment">     * the number of buckets. */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 如果哈希表ht[0]中保存的key个数与哈希表大小的比例已经达到1:1，即保存的节点数已经大于哈希表大小</span></span><br><span class="line"><span class="comment">     * 且redis服务当前允许执行rehash，或者保存的节点数与哈希表大小的比例超过了安全阈值（默认值为5）</span></span><br><span class="line"><span class="comment">     * 则将哈希表大小扩容为原来的两倍</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (d-&gt;ht[<span class="number">0</span>].used &gt;= d-&gt;ht[<span class="number">0</span>].size &amp;&amp;</span><br><span class="line">        (dict_can_resize ||</span><br><span class="line">         d-&gt;ht[<span class="number">0</span>].used/d-&gt;ht[<span class="number">0</span>].size &gt; dict_force_resize_ratio))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> dictExpand(d, d-&gt;ht[<span class="number">0</span>].used*<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DICT_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（1）服务器目前没有在执行 BGSAVE/BGREWRITEAOF 命令，并且哈希表的负载因子大于等于 1；</p><p>（2）服务器目前正在执行 BGSAVE/BGREWRITEAOF 命令，并且哈希表的负载因子大于等于 5；</p><p>这里其实体现了作者的一种设计思想：如果负载因子超过5，说明信息已经很多了，管你在不在保存，都要执行扩容，优先保证服务可用性。如果没那么高，那就等持久化完成再做rehash。</p><h4 id="缩容条件">缩容条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* If the percentage of used slots in the HT reaches HASHTABLE_MIN_FILL</span></span><br><span class="line"><span class="comment"> * we resize the hash table to save memory */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tryResizeHashTables</span><span class="params">(<span class="type">int</span> dbid)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (htNeedsResize(server.db[dbid].dict))</span><br><span class="line">        dictResize(server.db[dbid].dict);</span><br><span class="line">    <span class="keyword">if</span> (htNeedsResize(server.db[dbid].expires))</span><br><span class="line">        dictResize(server.db[dbid].expires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Hash table parameters */</span></span><br><span class="line">#define HASHTABLE_MIN_FILL        <span class="number">10</span>      <span class="comment">/* Minimal hash table fill 10% */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">htNeedsResize</span><span class="params">(dict *dict)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> size, used;</span><br><span class="line"></span><br><span class="line">    size = dictSlots(dict);</span><br><span class="line">    used = dictSize(dict);</span><br><span class="line">    <span class="keyword">return</span> (size &gt; DICT_HT_INITIAL_SIZE &amp;&amp;</span><br><span class="line">            (used*<span class="number">100</span>/size &lt; HASHTABLE_MIN_FILL));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Resize the table to the minimal size that contains all the elements,</span></span><br><span class="line"><span class="comment"> * but with the invariant of a USED/BUCKETS ratio near to &lt;= 1 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">dictResize</span><span class="params">(dict *d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> minimal;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!dict_can_resize || dictIsRehashing(d)) <span class="keyword">return</span> DICT_ERR;</span><br><span class="line">    minimal = d-&gt;ht[<span class="number">0</span>].used;</span><br><span class="line">    <span class="keyword">if</span> (minimal &lt; DICT_HT_INITIAL_SIZE)</span><br><span class="line">        minimal = DICT_HT_INITIAL_SIZE;</span><br><span class="line">    <span class="keyword">return</span> dictExpand(d, minimal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缩容到多少？</p><p><strong>缩容后的大小为第一个大于等于当前key数量的2的n次方。</strong></p><h2 id="实现-10">实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProgressiveRehashMap</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">factor</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; rehashTable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rehashIdx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处于 rehash 状态的  新哈希表容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> rehashCapacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">debugMode</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">reduceFactor</span> <span class="operator">=</span> <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">MIN_CAPACITY</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultEntry</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        ProgressiveRehashMap.DefaultEntry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">        DefaultEntry(<span class="type">int</span> hash, K key, V value, ProgressiveRehashMap.DefaultEntry&lt;K,V&gt; next) &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DefaultEntry(K key, V value, <span class="type">int</span> hash) &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> K <span class="title function_">getKey</span><span class="params">()</span>         &#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">getValue</span><span class="params">()</span>      &#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> V <span class="title function_">setValue</span><span class="params">(V newValue)</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> value;</span><br><span class="line">            value = newValue;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(value = &quot;all&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">                Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">                <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                        Objects.equals(value, e.getValue()))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;&quot;</span> +key +</span><br><span class="line">                    <span class="string">&quot;: &quot;</span> + value +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressiveRehashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressiveRehashMap</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(capacity, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProgressiveRehashMap</span><span class="params">(<span class="type">int</span> capacity, <span class="type">boolean</span> debugMode)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(capacity &lt; MIN_CAPACITY) &#123;</span><br><span class="line">            capacity = MIN_CAPACITY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(capacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            table.add(i, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Entry&lt;K,V&gt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.debugMode = debugMode;</span><br><span class="line"></span><br><span class="line">        rehashIdx = -<span class="number">1</span>;</span><br><span class="line">        rehashCapacity = -<span class="number">1</span>;</span><br><span class="line">        rehashTable = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否需要更新</span></span><br><span class="line">        <span class="keyword">if</span>(isInRehash()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;当前处于渐进式 rehash 阶段，额外执行一次渐进式 rehash 的动作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rehashToNewTable();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//原table更新</span></span><br><span class="line">            Pair&lt;Boolean, V&gt; pair1 = update(key, value, table, capacity);</span><br><span class="line">            <span class="keyword">if</span>(pair1.getValueOne()) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> pair1.getValueTwo();</span><br><span class="line">                <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;此次为更新 table 操作。key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">                    printTable(<span class="built_in">this</span>.table);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> oldVal;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//新table更新</span></span><br><span class="line">            Pair&lt;Boolean, V&gt; pair2 = update(key, value, rehashTable, rehashCapacity);</span><br><span class="line">            <span class="keyword">if</span>(pair2.getValueOne()) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> pair2.getValueTwo();</span><br><span class="line">                <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;此次为更新 rehashTable 操作。key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">                    printTable(<span class="built_in">this</span>.table);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> oldVal;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//原table更新</span></span><br><span class="line">            Pair&lt;Boolean, V&gt; pair1 = update(key, value, table, capacity);</span><br><span class="line">            <span class="keyword">if</span>(pair1.getValueOne()) &#123;</span><br><span class="line">                <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> pair1.getValueTwo();</span><br><span class="line">                <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;此次为更新 table 操作。key: &#123;&#125;, value: &#123;&#125;&quot;</span>, key, value);</span><br><span class="line">                    printTable(<span class="built_in">this</span>.table);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> oldVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createNewEntry(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return  Pair二元组  1. 为true就是更新操作，否则就是新增操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Pair&lt;Boolean, V&gt; <span class="title function_">update</span><span class="params">(K key, V value, List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line"></span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(idx);</span><br><span class="line">        <span class="comment">//遍历链表，查看key是否已存在</span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">entryKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(key, entryKey)</span><br><span class="line">                    || key.equals(entryKey)) &#123;</span><br><span class="line">                entry.setValue(value);</span><br><span class="line">                <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;put 为替换元素，table 信息为：&quot;</span>);</span><br><span class="line">                    printTable(table);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Pair.of(<span class="literal">true</span>, oldValue);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Pair.of(<span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isInRehash</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rehashIdx != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param  新增结点到map中</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> V <span class="title function_">createNewEntry</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(key);</span><br><span class="line">        Entry&lt;K, V&gt; entry = <span class="keyword">new</span> <span class="title class_">DefaultEntry</span>&lt;&gt;(key, value, hash);</span><br><span class="line">        <span class="keyword">if</span>(isInRehash()) &#123;</span><br><span class="line">            <span class="comment">//新结点添加到新table</span></span><br><span class="line">            addNewEntryToRehashTable(hash,  entry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不在rehash阶段</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(isNeedExpand()) &#123;</span><br><span class="line">            <span class="comment">//旧的table已经不够了</span></span><br><span class="line">            rehash(capacity &lt;&lt; <span class="number">1</span>);</span><br><span class="line">            addNewEntryToRehashTable(hash, entry);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            addNewEntryToTable(hash, entry);</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addNewEntryToTable</span><span class="params">(<span class="type">int</span> hash, Entry&lt;K,V&gt; entry)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(idx);</span><br><span class="line">        entries.add(entry );</span><br><span class="line">        <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;目前不处于 rehash 中，元素直接插入到 table 中。&quot;</span>);</span><br><span class="line">            printTable(<span class="built_in">this</span>.table);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addNewEntryToRehashTable</span><span class="params">(<span class="type">int</span> hash, Entry&lt;K, V&gt; entry)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (rehashCapacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = rehashTable.get(idx);</span><br><span class="line">        entries.add(entry);</span><br><span class="line">        <span class="keyword">if</span> (debugMode) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;目前处于 rehash 中，元素直接插入到 rehashTable 中。&quot;</span>);</span><br><span class="line">            printTable(<span class="built_in">this</span>.rehashTable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNeedExpand</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (size * <span class="number">1.0</span> / capacity) &gt;= factor &amp;&amp; !isInRehash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printTable</span><span class="params">(List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Entry&lt;K, V&gt;&gt; list : table) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Entry&lt;K,V&gt; entry : list) &#123;</span><br><span class="line">                System.out.print(entry + <span class="string">&quot; &quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">printAllTable</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;[printAllTable] 打印table -----------------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Entry&lt;K, V&gt;&gt; list : <span class="built_in">this</span>.table) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Entry&lt;K,V&gt; entry : list) &#123;</span><br><span class="line">                System.out.print(entry + <span class="string">&quot; &quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;[printAllTable] 打印rehashTable -----------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(List&lt;Entry&lt;K, V&gt;&gt; list : <span class="built_in">this</span>.rehashTable) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Entry&lt;K,V&gt; entry : list) &#123;</span><br><span class="line">                System.out.print(entry + <span class="string">&quot; &quot;</span>) ;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehash</span><span class="params">(<span class="type">int</span> rehashCapacity)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 判断是否处于rehash阶段  处于，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(isInRehash()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;当前处于渐进式 rehash 阶段，不能重复进行 rehash!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 创建新的rehashtable</span></span><br><span class="line">        <span class="built_in">this</span>.rehashCapacity = rehashCapacity;</span><br><span class="line">        rehashTable = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.rehashCapacity);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; rehashCapacity; i++) &#123;</span><br><span class="line">            rehashTable.add(i,<span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 先将table[0]的数据  rehash到 新表中   然后table[0]设置为空</span></span><br><span class="line">        rehashToNewTable();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">rehashToNewTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!isInRehash()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加到新table</span></span><br><span class="line">        rehashIdx++;</span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(rehashIdx);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(entry.getKey());</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> hash &amp; (rehashCapacity - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            List&lt;Entry&lt;K, V&gt;&gt; entryList = rehashTable.get(idx);</span><br><span class="line">            entryList.add(entry);</span><br><span class="line">            rehashTable.set(idx, entryList);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//清空旧table</span></span><br><span class="line">        table.remove(rehashIdx);</span><br><span class="line">        <span class="comment">//判断是否结束rehash</span></span><br><span class="line">        <span class="keyword">if</span>(rehashIdx == table.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.capacity = <span class="built_in">this</span>.rehashCapacity;</span><br><span class="line">            <span class="built_in">this</span>.rehashCapacity = -<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>.rehashIdx = -<span class="number">1</span>;</span><br><span class="line">            <span class="built_in">this</span>.table = rehashTable;</span><br><span class="line">            <span class="built_in">this</span>.rehashTable = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;渐进式 rehash 已经完成。&quot;</span>);</span><br><span class="line">                printTable(<span class="built_in">this</span>.table);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;渐进式 rehash 处理中, 目前 index：&#123;&#125; 已完成&quot;</span>, rehashIdx);</span><br><span class="line">                printAllTable();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Entry&lt;K, V&gt;&gt; <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isInRehash()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;调用entrySet，rehash中......&quot;</span>);</span><br><span class="line">            rehashToNewTable();</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;Entry&lt;K, V&gt;&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(table) &amp;&amp; CollectionUtil.isEmpty(rehashTable)) &#123;</span><br><span class="line">            <span class="keyword">return</span> set;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Entry&lt;K, V&gt;&gt; entries : table) &#123;</span><br><span class="line">            <span class="keyword">if</span>(CollectionUtil.isNotEmpty(entries)) &#123;</span><br><span class="line">                set.addAll(entries);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Entry&lt;K, V&gt;&gt; entries : rehashTable) &#123;</span><br><span class="line">            <span class="keyword">if</span>(CollectionUtil.isNotEmpty(entries)) &#123;</span><br><span class="line">                set.addAll(entries);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isInRehash()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;当前处于渐进式 rehash 状态，额外执行一次操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rehashToNewTable();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第一个table找</span></span><br><span class="line">        <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> getValue((K) key, table, capacity);</span><br><span class="line">        <span class="keyword">if</span>(value != <span class="literal">null</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[get] 从table中找到对应的key : &#123;&#125;，返回value : &#123;&#125;&quot;</span>, key,value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从rehashtable找</span></span><br><span class="line">        <span class="keyword">if</span> (isInRehash()) &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">value1</span> <span class="operator">=</span> getValue((K) key, rehashTable, rehashCapacity);</span><br><span class="line">            <span class="keyword">if</span>(value1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[get] 从rehashTable中找到对应的key : &#123;&#125;，返回value : &#123;&#125;&quot;</span>, key,value1);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V <span class="title function_">getValue</span><span class="params">(K key, List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx1</span> <span class="operator">=</span> (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entryList = table.get(idx1);</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entryList) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">entryKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(key, entryKey) || key.equals(entryKey)) &#123;</span><br><span class="line">                <span class="keyword">return</span> entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(isInRehash()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;当前处于渐进式 rehash 状态，额外执行一次操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rehashToNewTable();</span><br><span class="line"></span><br><span class="line">            <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> removeFromTable((K) key, table, capacity);</span><br><span class="line">            <span class="keyword">if</span>(removeValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[remove] 从table中找到对应的key : &#123;&#125;，删除value : &#123;&#125;&quot;</span>, key,removeValue);</span><br><span class="line">                <span class="keyword">return</span> removeValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            removeValue = removeFromTable((K) key, rehashTable, rehashCapacity);</span><br><span class="line">            <span class="keyword">if</span>(removeValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[remove] 从rehashTable中找到对应的key : &#123;&#125;，删除value : &#123;&#125;&quot;</span>, key,removeValue);</span><br><span class="line">                <span class="keyword">return</span> removeValue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(isNeedReduce()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (debugMode) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;触发缩容操作&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            capacity = capacity &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            rehash(capacity);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> removeFromTable((K) key, table, capacity);</span><br><span class="line">            <span class="keyword">if</span>(removeValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;[remove] 从table中找到对应的key : &#123;&#125;，删除value : &#123;&#125;&quot;</span>, key,removeValue);</span><br><span class="line">                <span class="keyword">return</span> removeValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> V <span class="title function_">removeFromTable</span><span class="params">(K key, List&lt;List&lt;Entry&lt;K,V&gt;&gt;&gt; table, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> HashUtils.hash(key);</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> (capacity - <span class="number">1</span>) &amp; hash;</span><br><span class="line"></span><br><span class="line">        List&lt;Entry&lt;K, V&gt;&gt; entries = table.get(idx);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(entries)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;[remove] 哈希桶为空，要删除的元素不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">V</span> <span class="variable">removeValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">entryKey</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>(ObjectUtils.isNull(key, entryKey) || key.equals(entryKey)) &#123;</span><br><span class="line">                entries.remove(entry);</span><br><span class="line">                removeValue = entry.getValue();</span><br><span class="line">                <span class="keyword">if</span> (debugMode) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;移除元素，table 信息为：&#123;&#125;&quot;</span>, entry);</span><br><span class="line">                    printTable(table);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> removeValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isNeedReduce</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (size * <span class="number">1.0</span> / capacity) &lt;= reduceFactor &amp;&amp; (capacity &gt;= MIN_CAPACITY) &amp;&amp; !isInRehash();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="测试">测试</h1><h2 id="固定大小缓存">固定大小缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小指定测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.0.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloTest</span><span class="params">()</span> &#123;</span><br><span class="line">    ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">            .sizeLimit(<span class="number">2</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="expire">expire</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.0.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expireTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">            .sizeLimit(<span class="number">3</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cache.expire(<span class="string">&quot;1&quot;</span>, <span class="number">50</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line"></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">    Assert.assertEquals(<span class="number">1</span>, cache.size());</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久化-1">持久化</h2><h3 id="rdb-1">RDB</h3><p>自定义加载类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//真正实现的时候，要把泛型具体化</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCacheLoad</span> <span class="keyword">implements</span> <span class="title class_">ICacheLoad</span>&lt;String,String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ICache&lt;String, String&gt; cache)</span> &#123;</span><br><span class="line">        cache.put(<span class="string">&quot;mhd&quot;</span>, <span class="string">&quot;mhd&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;cml&quot;</span>, <span class="string">&quot;cml&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cache设置初始化方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.cacheExpire = <span class="keyword">new</span> <span class="title class_">CacheExpire</span>&lt;&gt;(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.load.load(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.persist != <span class="literal">null</span> &amp;&amp; !(<span class="built_in">this</span>.persist <span class="keyword">instanceof</span> CachePersistNone))&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InnerCachePersist</span>(<span class="built_in">this</span>, persist);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rdbTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ICache&lt;String, String&gt; cache = CacheGuide.&lt;String, String&gt;newInstance()</span><br><span class="line">            .load(<span class="keyword">new</span> <span class="title class_">MyCacheLoad</span>())</span><br><span class="line">            .persist(CachePersists.&lt;String, String&gt;fileJson(<span class="string">&quot;test1.rdb&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">120</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试bug">测试bug</h4><h5 id="创建文件失败">创建文件失败</h5><p>原因：</p><figure><img src="image-20231206164045568.png" alt="image-20231206164045568" /><figcaption aria-hidden="true">image-20231206164045568</figcaption></figure><p>这个dir为空，后面无法进行。</p><p>本质原因：filePath设置的是单独的文件名，可能无法解析</p><p>解决方式：</p><figure><img src="image-20231206165254938.png" alt="image-20231206165254938" /><figcaption aria-hidden="true">image-20231206165254938</figcaption></figure><p>把创建文件夹注释掉，因为默认输入单独的文件名会生成在项目文件夹下</p><h3 id="aof-1">AOF</h3><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">aofTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">            .persist(CachePersists.&lt;String, String&gt;aof(<span class="string">&quot;1.aof&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    cache.expireAt(<span class="string">&quot;1&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    cache.remove(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="evict-1">evict</h2><h3 id="lru策略">LRU策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lruTest</span><span class="params">()</span> &#123;</span><br><span class="line">        ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">                .sizeLimit(<span class="number">3</span>)</span><br><span class="line">                .evict(CacheEvicts.&lt;String, String&gt;lru())</span><br><span class="line">                .build();</span><br><span class="line">        cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">        cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(cache.keySet());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试bug-1">测试bug</h4><h5 id="lru的list不会自动清除淘汰key">lru的list不会自动清除淘汰key</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lruTest</span><span class="params">()</span> &#123;</span><br><span class="line">        ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">                .sizeLimit(<span class="number">3</span>)</span><br><span class="line">                .evict(CacheEvicts.&lt;String, String&gt;lru())</span><br><span class="line">                .build();</span><br><span class="line">        cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;FIFO&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问一次A</span></span><br><span class="line">        cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        System.out.println(cache.keySet());</span><br><span class="line">        cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;E&quot;</span>, <span class="string">&quot;LRU&quot;</span>);</span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line"></span><br><span class="line">        System.out.println(cache.keySet());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>具体错误：添加E的时候，报出了无法添加异常。</p><p>具体原因是，lru里的list，再添加完D之后，还存在B这个key，也就是说，添加D的时候，没有走下面这个逻辑：</p><figure><img src="image-20231210170743556.png" alt="image-20231210170743556" /><figcaption aria-hidden="true">image-20231210170743556</figcaption></figure><p>本质就是拦截器没触发：</p><figure><img src="image-20231210170818025.png" alt="image-20231210170818025" /><figcaption aria-hidden="true">image-20231210170818025</figcaption></figure><p>拦截器不起作用，原因只有一个，代理失效，为什么代理失效，就是执行remove方法的cache：</p><figure><img src="image-20231210170855247.png" alt="image-20231210170855247" /><figcaption aria-hidden="true">image-20231210170855247</figcaption></figure><p>其实不是代理对象，就是本来的cache对象。</p><p>暂时没有关于代理的修正方案</p><p>我的改正方案：</p><figure><img src="image-20231210173330630.png" alt="image-20231210173330630" /><figcaption aria-hidden="true">image-20231210173330630</figcaption></figure><h2 id="淘汰策略-1">淘汰策略</h2><h3 id="lfu-1">lfu</h3><p>测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lfuTest</span><span class="params">()</span> &#123;</span><br><span class="line">        ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">                .sizeLimit(<span class="number">3</span>)</span><br><span class="line">                .evict(CacheEvicts.&lt;String, String&gt;lfu())</span><br><span class="line">                .build();</span><br><span class="line">        cache.put(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        cache.get(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;B&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">        cache.get(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;C&quot;</span>, <span class="string">&quot;bug&quot;</span>);</span><br><span class="line">        cache.put(<span class="string">&quot;D&quot;</span>, <span class="string">&quot;bug&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        cache.put(&quot;C&quot;, &quot;FIFO&quot;);</span></span><br><span class="line"><span class="comment">//// 访问一次A</span></span><br><span class="line"><span class="comment">//        cache.get(&quot;A&quot;);</span></span><br><span class="line"><span class="comment">//        cache.put(&quot;D&quot;, &quot;LRU&quot;);</span></span><br><span class="line"><span class="comment">//        cache.put(&quot;E&quot;, &quot;LRU&quot;);</span></span><br><span class="line"><span class="comment">//        cache.put(&quot;F&quot;, &quot;LRU&quot;);</span></span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="number">3</span>, cache.size());</span><br><span class="line">        System.out.println(cache.keySet());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试bug-2">测试bug</h4><h5 id="lfu集合内存冗余">lfu集合内存冗余</h5><p>问题描述：</p><p>第二次<code>get("A")</code>以后，在lru的数据结构中，两个map需要更新，freqmap则是无法清除上一个集合的数据结点。</p><p>造成，freqMap频率为2 的列表和频率为3的列表，都包含<code>&#123;FreqNode@1235&#125; "FreqNode&#123;key=A, value=null, frequency=3&#125;</code>这一数据对象，也就是之前的<code>&#123;FreqNode@1235&#125; "FreqNode&#123;key=A, value=null, frequency=2&#125;</code>数据没删掉，分析原因，发现是freqNode类重写了hash方法，造成两个对象计算的哈希值不一致（时间戳问题？），删除失败，因此我们取消掉重写的hash方法即可。</p><h2 id="打包发布">打包发布</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">:: 用于 release 当前项目(windows)</span><br><span class="line">:: author: houbb</span><br><span class="line">:: LastUpdateTime:  <span class="number">2018</span>-<span class="number">1</span>-<span class="number">22</span> 09:08:<span class="number">52</span></span><br><span class="line">:: 用法：双击运行，或者当前路径 cmd 直接输入 release.bat</span><br><span class="line"></span><br><span class="line">:: 关闭回显</span><br><span class="line"><span class="meta">@echo</span> OFF</span><br><span class="line"></span><br><span class="line">ECHO <span class="string">&quot;============================= RELEASE START...&quot;</span></span><br><span class="line"></span><br><span class="line">:: 版本号信息(需要手动指定)</span><br><span class="line">:::: 旧版本名称</span><br><span class="line">SET version=<span class="number">0.0</span><span class="number">.9</span></span><br><span class="line">:::: 新版本名</span><br><span class="line">SET newVersion=<span class="number">0.0</span>。<span class="number">10</span></span><br><span class="line">:::: 组织名称</span><br><span class="line">SET groupName=com.vls</span><br><span class="line">:::: 项目名称</span><br><span class="line">SET projectName=vedis</span><br><span class="line"></span><br><span class="line">:: release 项目版本</span><br><span class="line">:::: snapshot 版本号</span><br><span class="line">SET snapshot_version=%version%<span class="string">&quot;-SNAPSHOT&quot;</span></span><br><span class="line">:::: 新的版本号</span><br><span class="line">SET release_version=%version%</span><br><span class="line"></span><br><span class="line">call mvn versions:set -DgroupId=%groupName% -DartifactId=%projectName% -DoldVersion=%snapshot_version% -DnewVersion=%release_version%</span><br><span class="line">call mvn -N versions:update-child-modules</span><br><span class="line">call mvn versions:commit</span><br><span class="line">call echo <span class="string">&quot;1. RELEASE %snapshot_version% TO %release_version% DONE.&quot;</span></span><br><span class="line"></span><br><span class="line">:: 发布到 mvn 中央仓库</span><br><span class="line">mvn clean deploy -P release</span><br><span class="line"></span><br><span class="line">ECHO <span class="string">&quot;2. PUSH TO MAVEN CENTER DONE.&quot;</span></span><br><span class="line"></span><br><span class="line">:: 合并到 master 分支</span><br><span class="line">:::: 分支名称</span><br><span class="line">::SET branchName=<span class="string">&quot;release_&quot;</span>%version%</span><br><span class="line">::git checkout master</span><br><span class="line">::git pull</span><br><span class="line">::git checkout %branchName%</span><br><span class="line">::git rebase master</span><br><span class="line">::git checkout master</span><br><span class="line">::git merge %branchName%</span><br><span class="line">::git push</span><br><span class="line">::</span><br><span class="line">::ECHO <span class="string">&quot;3. MERGE TO MASTER DONE.&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:::: 拉取新的分支</span><br><span class="line">::SET newBranchName=<span class="string">&quot;release_&quot;</span>%newVersion%</span><br><span class="line">::git branch %newBranchName%</span><br><span class="line">::git checkout %newBranchName%</span><br><span class="line">::git push --set-upstream origin %newBranchName%</span><br><span class="line">::</span><br><span class="line">::ECHO <span class="string">&quot;4. NEW BRANCH DONE.&quot;</span></span><br><span class="line">::</span><br><span class="line">:::: 修改新分支的版本号</span><br><span class="line">::SET snapshot_new_version=%newVersion%<span class="string">&quot;-SNAPSHOT&quot;</span></span><br><span class="line">::call mvn versions:set -DgroupId=%groupName% -DartifactId=%projectName% -DoldVersion=%release_version% -DnewVersion=%snapshot_new_version%</span><br><span class="line">::call mvn -N versions:update-child-modules</span><br><span class="line">::call mvn versions:commit</span><br><span class="line">::</span><br><span class="line">::git add .</span><br><span class="line">::git commit -m <span class="string">&quot;modify branch %release_version% TO %snapshot_new_version%&quot;</span></span><br><span class="line">::git push</span><br><span class="line">::git status</span><br><span class="line">::ECHO <span class="string">&quot;5. MODIFY %release_version% TO %snapshot_new_version% DONE.&quot;</span></span><br><span class="line">::</span><br><span class="line">::ECHO <span class="string">&quot;============================= RELEASE END...&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前暂未发布</p><h1 id="工具类">工具类</h1><h2 id="文件">文件</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">createFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(filePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exists(filePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line"><span class="comment">//            File dir = file.getParentFile();</span></span><br><span class="line"><span class="comment">//            if (notExists(dir)) &#123;</span></span><br><span class="line"><span class="comment">//                boolean mkdirResult = dir.mkdirs();</span></span><br><span class="line"><span class="comment">//                if (!mkdirResult) &#123;</span></span><br><span class="line"><span class="comment">//                    return false;</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> file.createNewFile();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CommonRuntimeException</span>(var4);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">exists</span><span class="params">(String filePath, LinkOption... options)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.isEmpty(filePath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(filePath);</span><br><span class="line">            <span class="keyword">return</span> Files.exists(path, options);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">truncateFile</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="面试">面试</h1><h2 id="项目整体介绍">项目整体介绍</h2><p>项目是自己用Java语言写的一个小demo，项目背景就是，在日常开发中，像redis在使用的时候需要配置、并且开启一个进程等等，为了省去配置，我想实现一个这种KV形式的存储，然后在Java应用程序中直接调用，类似maven导包那种。底层的数据结构直接复用java的hashmap，但是对于Java的hashmap，他有几个缺点，首先，没有内存淘汰的策略，虽然有扩容机制，但是会占用大量内存空间；然后，作为缓存工具，不支持定时删除；也不支持持久化；扩容的时候也不支持渐进式扩容，hashmap是一次性的；所以我在hashmap的基础上封装了一层，增加了这些功能。</p><h2 id="过期特性">过期特性</h2><p>过期的定义：我的cache中，有两个方法，expire和expireAt，expire方法最后也是调用expireAt方法，含义就是在某一时刻过期。精确到毫秒级别。</p><h3 id="定时">定时</h3><p>用到了线程池，有个ScheduledExecutorService，有个方法叫scheduleAtFixedRate，开启额外的一个线程去定期执行这个任务。</p><p>具体的任务呢，就是Runnable接口：对于设置了过期时间的数据，我会额外把它放到另一个集合，也就是expireMap，这个RunnableTask就会遍历这个集合，判断某个key是否过期，如果过期，就把他从expireMap以及cache中移除。</p><h4 id="排序集合优化">排序集合优化</h4><p>在expireMap的基础上，添加了一种新的集合sortedExpireMap，借助了TreeMap。以时间戳为Key，value是同一过期时间段key集合，这样runnable的task任务可以优化为，从map的第一个元素开始遍历（因为是从小到大排序嘛），按照时间戳递增的顺序搜索，判断每个时间段是否过期，过期了就把这个时间戳对应的集合中的key全部清除。</p><h3 id="惰性删除">惰性删除</h3><p>当调用缓存的get方法的时候，会顺带进行惰性删除，也就是</p><h3 id="随机key删除">随机key删除</h3><p>大致的实现跟前几个策略相同，采用了策略模式嘛，实现的细节略有不同</p><p>线程依旧是单线程，只不过频率是10ms一次，既然要随机key，那就需要写几个获取随机key的方法，提供了有获取单个key、获取批量key的方法。</p><p>单个key就很简单，就是取一个随机数，然后获取map的key集合进行遍历，这里遍历也分两种实现，一种是转成arraylist然后直接用get方法取，另一种就是利用keyset的迭代器去遍历。</p><p>多个key呢，设置了集合的上限，就是过期的key如果达到了50个，就停止继续向下查找，因为我额外的清除线程是每10ms运行一次，那一次清理过多可能影响下一次的运行，所以批量清除每次清除上限就是50个。</p><h2 id="内存驱逐策略">内存驱逐策略</h2><p>对于驱逐，就是缓存空间满了，对于新进来的缓存数据的一种处理策略。</p><h3 id="lru">LRU</h3><p>采用双向链表 + hash表</p><p>对于get、update这种方法就要对具体的key做一个迁移操作，把key移动到链表前端。</p><p>基本的LRU存在缓存污染问题，比如说：某一时刻我一次性加入很多数据到缓存，这些数据可能就读取一次，但我本来的热点数据被这些新的数据挤掉了，因此不太合理。所以优化如下</p><h4 id="lru-2优化">LRU-2优化</h4><p>LRU-K算法的延伸，就是一个数据被访问K次才会进行一个迁移操作，目前最佳实践是LRU-2，就是访问两次，进行一个迁移操作处理。</p><p>具体实现：采用两个LRUmap，第一次访问的放到第一层，第二次访问的放到第二层。当进行淘汰时，优先淘汰第一层的数据，第二层的数据要淘汰就放到第一层去</p><h4 id="lru2q优化">LRU2Q优化</h4><p>不采用两个lrumap，而采用一个fifo队列 +一个lrumap，新进来的数据放到fifo队列，随后再次被访问就放入真正的lrumap中。</p><p>上面两个算法的优化，都是采用额外空间缓冲的手段，为了让数据不那么快消失</p><h3 id="lfu-2">LFU</h3><p>首先，LFU的结点定义与LRU不同的地方在于，结点定义了一个属性叫频率。</p><p>定义了两个Map结构：一个是查询map，根据key获得对应的结点随后取到对应的值；一个是专门存放频率的map，Key是频次，value对应的是处于这个频次的结点集合。</p><h3 id="clock-1">CLOCK</h3><p>clock更是对lru -K的一个升级处理，这个算法来源于操作系统中页面置换算法。</p><p>具体实现就是，数据结构采用一个循环队列，选择一个指针，当队列没有放满的时候，就是正常访问数据将数据放置在缓存内部，指针前移。然后当队列满了也就是缓存满了，这个时候会根据每个元素的访问标志位去判断，刚放进去的数据访问标志肯定是已访问，当队列满了之后，指针会轮询，直到遇到访问标志位为未访问的元素，然后将其替换下来。</p><p>这个算法感觉就是LRU的变体，因为队列满了以后，所有的元素的访问标志位肯定都是1，这时候指针按照顺时针或逆时针，把每个元素的访问标志位都变成0，大部分时间，循环一定时间都能遇到标志位为0的数据也就是最近一段时间没有访问的数据，替换出去。</p><p>如果是热点数据，那在缓存的get方法以后，是会将其访问标识符标志为1。</p><p>也存在一些缺陷，当缓存中都是热点数据，但这时候恰巧有一个没加入缓存的元素频繁被访问，这时候clock就无法再运行，指针就是空轮询的一个效果。这时候我对算法进行优化，循环的时候，因为是环形队列，可以判断当前循环到头节点没，也就是循环一圈，循环一圈以后都没找到那个标志位为0的元素，那就降级为FIFO队列，就是从head开始，移除队头元素，替换新元素。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h1&gt;
&lt;h2 id=&quot;git命令封装&quot;&gt;git命令封装&lt;/h2&gt;
&lt;p&gt;提交当前变更：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="项目" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="redis" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>手写springMVC</title>
    <link href="https://vlsmhd.github.io/2023/11/27/%E6%89%8B%E5%86%99springMVC/"/>
    <id>https://vlsmhd.github.io/2023/11/27/%E6%89%8B%E5%86%99springMVC/</id>
    <published>2023-11-27T11:36:12.156Z</published>
    <updated>2023-11-28T12:48:01.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置准备">前置准备</h1><h2 id="搭建idea开发环境">搭建idea开发环境</h2><p>tomcat安装，下载源码</p><p><ahref="https://gitee.com/link?target=https%3A%2F%2Ftomcat.apache.org%2Fdownload-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><img src="手写springMVC/1697774725337.jpg" alt="输入图片说明" style="zoom: 67%;" /></p><p>依赖准备：</p><p>包文件夹没有pom.xml，创建一个即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat9<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>tomcat-9.0.44<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>tomcat-9.0.44<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>biz.aQute.bnd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>biz.aQute.bndlib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant-apache-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant-commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.rpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.xml.rpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除不必要文件：</p><figure><img src="手写springMVC/image-20231127193851926.png"alt="image-20231127193851926" /><figcaption aria-hidden="true">image-20231127193851926</figcaption></figure><h3 id="测试tomcat">测试tomcat</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;        </span><br><span class="line"><span class="built_in">super</span>.doGet(req, resp);    </span><br><span class="line">    </span><br><span class="line">    &#125;    </span><br><span class="line"><span class="meta">@Override</span>    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;       </span><br><span class="line"> <span class="built_in">super</span>.doPost(req, resp);    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;`</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="bug">bug</h4><p>1、版本不匹配</p><figure><img src="手写springMVC/image-20231127194757948.png"alt="image-20231127194757948" /><figcaption aria-hidden="true">image-20231127194757948</figcaption></figure><p>解决：<ahref="https://blog.csdn.net/yangchao1125/article/details/121771244">IDEA使用过程中报错: java: -source 1.5 中不支持 lambda 表达式 (请使用 -source8 或更高版本以启用 lambda 表达式)-CSDN博客</a></p><p>2、maven爆红</p><p>点到什么switch什么玩意，直接好了</p><h3 id="搭建开发环境">搭建开发环境</h3><p>创建新项目：</p><p>编码依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>xhy-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="架构设计">架构设计</h2><p>MVC核心组件：</p><figure><img src="手写springMVC/image-20231127213942940.png"alt="image-20231127213942940" /><figcaption aria-hidden="true">image-20231127213942940</figcaption></figure><p>应用架构：</p><figure><img src="手写springMVC/image-20231127214952065.png"alt="image-20231127214952065" /><figcaption aria-hidden="true">image-20231127214952065</figcaption></figure><p>注意：tomcat留有一个拓展点 ：<code>ServletContainerInitializer</code>。在SCI中有@HandlesTypes注解可以获取感兴趣的类，因此我们在这个地方进行ioc初始化以及后续的DispatcherServlet 初始化</p><h1 id="webioc容器开发">webIOC容器开发</h1><p>在应用程序需要有一个容器管理，可以基于spring的规范去管理。设计一个自己的web容器</p><p>官方ioc设计规范：</p><p>1.WebApplicationContext：web ioc顶级接口</p><p>2.ConfigurableWebApplicationContext: 存放servlet context 定义规范</p><p>3.AbstractRefreshableWebApplicationContext：容器刷新接入点，接入行为</p><p>4.AnnotationConfigWebApplicationContext web ioc实现：注解版</p><figure><img src="手写springMVC/1697774875945.jpg" alt="输入图片说明" /><figcaption aria-hidden="true">输入图片说明</figcaption></figure><h2 id="ioc设计与实现">ioc设计与实现</h2><p><strong>顶层web ioc根接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class="operator">=</span> WebApplicationContext.class.getName() + <span class="string">&quot;.ROOT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">CHILD_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class="operator">=</span> WebApplicationContext.class.getName() + <span class="string">&quot;.CHILD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可配置的web ioc接口ConfigurableWebApplicationContext</strong></p><p>作用：存放servletConfig、servletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">WebApplicationContext</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(<span class="meta">@Nullable</span> ServletContext servletContext)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletConfig</span><span class="params">(<span class="meta">@Nullable</span> ServletConfig servletConfig)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AbstractRefreshableWebApplicationContext</strong></p><p>application应用上下文体系：</p><p><img src="手写springMVC/image-20231128200314794.png" alt="image-20231128200314794" style="zoom:67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRefreshableWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractRefreshableConfigApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableWebApplicationContext</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(ServletContext servletContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletContext = servletContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServletConfig</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.servletContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加servle bean 后置处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ServletBeanPostProcessor</span>(servletContext, servletConfig));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略掉接口的set方法，这样可以用用户自己的set方法，防止set重复调用</span></span><br><span class="line">        beanFactory.ignoreDependencyInterface(ServletContextAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ServletConfigAware.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ServletBeanPostProcessor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServletBeanPostProcessor</span><span class="params">(ServletContext servletContext, ServletConfig servletConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletContext = servletContext;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当容器创建的时候，这两个成员变量会set进AbstractRefreshableWebApplicationContext类里</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span>(bean != <span class="literal">null</span> &amp;&amp; bean <span class="keyword">instanceof</span> ServletConfigAware)&#123;</span><br><span class="line">            ((ServletConfigAware)bean).setServletConfig(<span class="built_in">this</span>.servletConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bean != <span class="literal">null</span> &amp;&amp; bean <span class="keyword">instanceof</span> ServletContextAware)&#123;</span><br><span class="line">            ((ServletContextAware)bean).setServletContext(<span class="built_in">this</span>.servletContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletConfig属性赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletConfigAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletConfig</span><span class="params">(ServletConfig servletConfig)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletContext属性赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletContextAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(ServletContext servletContext)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AnnotationConfigWebApplicationContext</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationConfigWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractRefreshableWebApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">AnnotationConfigRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanNameGenerator beanNameGenerator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScopeMetadataResolver scopeMetadataResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; componentClasses = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; basePackages = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制粘贴即可</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">        <span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> getAnnotatedBeanDefinitionReader(beanFactory);</span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> getClassPathBeanDefinitionScanner(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanNameGenerator</span> <span class="variable">beanNameGenerator</span> <span class="operator">=</span> getBeanNameGenerator();</span><br><span class="line">        <span class="keyword">if</span> (beanNameGenerator != <span class="literal">null</span>) &#123;</span><br><span class="line">            reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">            scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">            beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ScopeMetadataResolver</span> <span class="variable">scopeMetadataResolver</span> <span class="operator">=</span> getScopeMetadataResolver();</span><br><span class="line">        <span class="keyword">if</span> (scopeMetadataResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">            reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">            scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.componentClasses.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Registering component classes: [&quot;</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="built_in">this</span>.componentClasses) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.register(ClassUtils.toClassArray(<span class="built_in">this</span>.componentClasses));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.basePackages.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Scanning base packages: [&quot;</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="built_in">this</span>.basePackages) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            scanner.scan(StringUtils.toStringArray(<span class="built_in">this</span>.basePackages));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] configLocations = getConfigLocations();</span><br><span class="line">        <span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String configLocation : configLocations) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Class&lt;?&gt; clazz = ClassUtils.forName(configLocation, getClassLoader());</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                        logger.trace(<span class="string">&quot;Registering [&quot;</span> + configLocation + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    reader.register(clazz);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                        logger.trace(<span class="string">&quot;Could not load class for config location [&quot;</span> + configLocation +</span><br><span class="line">                                <span class="string">&quot;] - trying package scan. &quot;</span> + ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> scanner.scan(configLocation);</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span> &amp;&amp; logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;No component classes found for specified class/package [&quot;</span> + configLocation + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AnnotatedBeanDefinitionReader <span class="title function_">getAnnotatedBeanDefinitionReader</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(beanFactory, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ClassPathBeanDefinitionScanner <span class="title function_">getClassPathBeanDefinitionScanner</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(beanFactory, <span class="literal">true</span>, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BeanNameGenerator <span class="title function_">getBeanNameGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanNameGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ScopeMetadataResolver <span class="title function_">getScopeMetadataResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.scopeMetadataResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> &#123;</span><br><span class="line">        Assert.notEmpty(componentClasses, <span class="string">&quot;At least one component class must be specified&quot;</span>);</span><br><span class="line">        Collections.addAll(<span class="built_in">this</span>.componentClasses, componentClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">        Collections.addAll(<span class="built_in">this</span>.basePackages, basePackages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ioc的初始化">ioc的初始化</h2><h1 id="对接servlet-spi">对接Servlet SPI</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置准备&quot;&gt;前置准备&lt;/h1&gt;
&lt;h2 id=&quot;搭建idea开发环境&quot;&gt;搭建idea开发环境&lt;/h2&gt;
&lt;p&gt;tomcat安装，下载源码&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://gitee.com/link?target=https%3A%2F%2</summary>
      
    
    
    
    <category term="项目" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="spring" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/spring/"/>
    
    
  </entry>
  
</feed>
