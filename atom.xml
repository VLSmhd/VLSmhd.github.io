<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VLS_Blog</title>
  
  <subtitle>starry sky</subtitle>
  <link href="https://vlsmhd.github.io/atom.xml" rel="self"/>
  
  <link href="https://vlsmhd.github.io/"/>
  <updated>2023-12-05T14:05:56.345Z</updated>
  <id>https://vlsmhd.github.io/</id>
  
  <author>
    <name>Vlong_shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渐进式redis缓存工具Vedis</title>
    <link href="https://vlsmhd.github.io/2023/11/29/%E6%B8%90%E8%BF%9B%E5%BC%8Fredis%E7%BC%93%E5%AD%98%E5%B7%A5%E5%85%B7Vedis/"/>
    <id>https://vlsmhd.github.io/2023/11/29/%E6%B8%90%E8%BF%9B%E5%BC%8Fredis%E7%BC%93%E5%AD%98%E5%B7%A5%E5%85%B7Vedis/</id>
    <published>2023-11-29T13:45:19.032Z</published>
    <updated>2023-12-05T14:05:56.345Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭建">环境搭建</h1><h2 id="git命令封装">git命令封装</h2><p>提交当前变更：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;[Feature] add for new&quot;</span></span><br><span class="line">git push</span><br><span class="line">git status</span><br></pre></td></tr></table></figure><h2 id="项目格式搭建">项目格式搭建</h2><figure><img src="渐进式redis缓存工具Vedis/image-20231204145729602.png"alt="image-20231204145729602" /><figcaption aria-hidden="true">image-20231204145729602</figcaption></figure><ul><li>Vedis-api：</li><li>Vedis-core</li><li>Vedis-test：测试项目模块</li></ul><p>总项目pom文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Vedis-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>Vedis-test<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--============================== All Plugins START ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.compiler.version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">plugin.compiler.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.compiler.version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">plugin.compiler.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.surefire.version</span>&gt;</span>2.18.1<span class="tag">&lt;/<span class="name">plugin.surefire.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.surefire.skip-it</span>&gt;</span>false<span class="tag">&lt;/<span class="name">plugin.surefire.skip-it</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.surefire.ignore-failure</span>&gt;</span>false<span class="tag">&lt;/<span class="name">plugin.surefire.ignore-failure</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.maven-source-plugin.version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">plugin.maven-source-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.maven-javadoc-plugin.version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="name">plugin.maven-javadoc-plugin.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.maven-gpg-plugin.version</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">plugin.maven-gpg-plugin.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.coveralls.version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">plugin.coveralls.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin.cobertura.version</span>&gt;</span>2.7<span class="tag">&lt;/<span class="name">plugin.cobertura.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--============================== MAIN ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.compiler.level</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">project.compiler.level</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--============================== INTER ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heaven.version</span>&gt;</span>0.1.115<span class="tag">&lt;/<span class="name">heaven.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">test.version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">test.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--============================== OTHER ==============================--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--============================== SELF ==============================--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--============================== INTER ==============================--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.houbb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heaven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;heaven.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.houbb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>test-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;test.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--============================== OTHER ==============================--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--compiler plugin --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.compiler.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;project.compiler.level&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;project.compiler.level&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgument</span>&gt;</span>-proc:none<span class="tag">&lt;/<span class="name">compilerArgument</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--============================== ADD For sonatype START ==============================--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>cache<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>cache is a java bean copy tool.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonatype.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>oss-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>The Apache Software License, Version 2.0<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.apache.org/licenses/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://github.com/houbb/cache<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span>https://github.com/houbb/cache.git<span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span>https://houbb.github.io/<span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>houbb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>houbinbin.echo@gmail.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://houbb.github.io/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--============================== ADD For sonatype END ==============================--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mvn clean deploy -P release -Darguments=&quot;gpg.passphrase=设置gpg设置密钥时候输入的Passphrase&quot;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>release<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Source --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-source-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar-no-fork<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- Javadoc --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-javadoc-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-javadoc-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- GPG --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-gpg-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.maven-gpg-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sign<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!--=================================== coveralls START ===================================--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--mvn cobertura:cobertura coveralls:report -DrepoToken=yourcoverallsprojectrepositorytoken--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eluder.coveralls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>coveralls-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.coveralls.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cobertura-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;plugin.cobertura.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">format</span>&gt;</span>xml<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">maxmem</span>&gt;</span>256m<span class="tag">&lt;/<span class="name">maxmem</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- aggregated reports for multi-module projects --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">aggregate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">aggregate</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">instrumentation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*Test.class<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">instrumentation</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--=================================== coveralls END ===================================--&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/service/local/staging/deploy/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目pom文件：</p><p>api：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>core：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.vls<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Vedis-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基础固定大小缓存">基础固定大小缓存</h1><h2 id="接口定义">接口定义</h2><p>ICache：缓存接口，供使用的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定义最基本的map接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 15:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICache</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ICacheContext：缓存上下文对象，核心容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 17:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *  获取容器</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;K,V&gt; <span class="title function_">map</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取容器大小限制</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 淘汰策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICacheEvict&lt;K,V&gt; <span class="title function_">cahceEvict</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="核心实现">核心实现</h2><h3 id="全局异常"><strong>全局异常</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheRuntimeException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheRuntimeException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cache">Cache</h3><p><strong>成员变量和构造方法</strong></p><p>cache类由上下文创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, V&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> sizeLimit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ICacheEvict&lt;K,V&gt; cacheEvict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cache</span><span class="params">(ICacheContext&lt;K,V&gt; context)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.map = context.map();</span><br><span class="line">    <span class="built_in">this</span>.sizeLimit = context.sizeLimit();</span><br><span class="line">    cacheEvict = context.cahceEvict();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>成员变量从上下文中获取得到初始化</li><li>final：这些变量只能在context中修改，cache只能使用，不能更改引用</li></ul><p><strong>put方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 尝试淘汰内存,初始化一个CacheEvictContext</span></span><br><span class="line">    CacheEvictContext&lt;K, V&gt; context = <span class="keyword">new</span> <span class="title class_">CacheEvictContext</span>&lt;&gt;();</span><br><span class="line">    context.key(key).sizeLimit(sizeLimit).cache(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    cacheEvict.evict(context);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 淘汰后判断能否添加</span></span><br><span class="line">    <span class="keyword">if</span>(isSizeLimited())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CacheRuntimeException</span>(<span class="string">&quot;当前缓存已满，数据添加失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isSizeLimited</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">curSize</span> <span class="operator">=</span> <span class="built_in">this</span>.size();<span class="comment">//加final防止并发</span></span><br><span class="line">    <span class="keyword">return</span> curSize &gt;= sizeLimit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其它方法都是map封装好的，略</p><p><strong>获取当前缓存的元素个数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 当前缓存中存储元素的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/4 17:50</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cachecontext">CacheContext</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 缓存上下文信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheContext</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K, V&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sizeLimit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheEvict&lt;K,V&gt; cacheEvict;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;K,V&gt; <span class="title function_">map</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheContext&lt;K, V&gt; <span class="title function_">map</span><span class="params">(Map&lt;K, V&gt; map)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 获取容器大小限制</span></span><br><span class="line"><span class="comment">    * @param</span></span><br><span class="line"><span class="comment">    * @return</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sizeLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheContext&lt;K, V&gt; <span class="title function_">sizeLimit</span><span class="params">(<span class="type">int</span> sizeLimit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeLimit = sizeLimit;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 淘汰策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICacheEvict&lt;K,V&gt; <span class="title function_">cahceEvict</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cacheEvict;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheContext&lt;K, V&gt; <span class="title function_">cacheEvict</span><span class="params">(ICacheEvict&lt;K, V&gt; cacheEvict)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cacheEvict = cacheEvict;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>流式编程：把成员变量的set抽象成单独的方法，返回值就是这个类的对象。采用建造者模式，这样构建这个对象就会有流式体验</li></ul><h3 id="引导类">引导类</h3><p>位于guide包下，便于用户使用。</p><p>会给缓存中每一个变量赋初值，用户也可以自定义，采用建造者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 指导类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CacheGuide</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存变量, 真正创建map的地方</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;K,V&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">sizeLimit</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICacheEvict&lt;K,V&gt; cacheEvict = <span class="keyword">new</span> <span class="title class_">CacheEvictFIFO</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheGuide</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 单例创建对象实例</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; CacheGuide&lt;K,V&gt; <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheGuide</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 建造者模式，流式编程</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CacheGuide&lt;K,V&gt; <span class="title function_">map</span><span class="params">(Map&lt;K,V&gt; map)</span>&#123;</span><br><span class="line">        ArgUtil.notNull(map, <span class="string">&quot;map&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.map = map;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> CacheGuide&lt;K,V&gt; <span class="title function_">sizeLimit</span><span class="params">(<span class="type">int</span> sizeLimit)</span>&#123;</span><br><span class="line">        ArgUtil.notNegative(sizeLimit, <span class="string">&quot;sizeLimit&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.sizeLimit = sizeLimit;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ICache&lt;K,V&gt; <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建缓存上下文</span></span><br><span class="line">        CacheContext&lt;K, V&gt; context = <span class="keyword">new</span> <span class="title class_">CacheContext</span>&lt;&gt;();</span><br><span class="line">        context.map(map);</span><br><span class="line">        context.cacheEvict(cacheEvict);</span><br><span class="line">        context.sizeLimit(sizeLimit);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cache</span>&lt;&gt;(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="过期删除">过期删除</h1><h2 id="接口定义-1">接口定义</h2><p>ICache：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICache</span>&lt;K,V&gt; <span class="keyword">extends</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    ICache&lt;K,V&gt; <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> timeout, TimeUnit unit)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ICache&lt;K,V&gt; <span class="title function_">expireAt</span><span class="params">(K key, <span class="type">long</span> timeoutAt)</span>;</span><br><span class="line"></span><br><span class="line">    ICacheExpire&lt;K,V&gt; <span class="title function_">expire</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ICacheExpire</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheExpire</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 设置过期函数</span></span><br><span class="line"><span class="comment">     * @param expireAt: 在什么时候过期</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 惰性删除策略</span></span><br><span class="line"><span class="comment">     * @param 需要处理的key集合</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keys)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存过期expire实现">缓存过期expire实现</h2><p>实现思路：利用定时任务，每一分钟、每一秒做一次轮询检查，<strong>开启额外线程</strong>执行。也需要把过期信息持久化，清理真正缓存中的数据</p><h3 id="cache-1">Cache</h3><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 多少时间后过期</span></span><br><span class="line"><span class="comment"> * @param</span></span><br><span class="line"><span class="comment"> * @return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">mills</span> <span class="operator">=</span> unit.toMillis(timeout);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">timeoutAt</span> <span class="operator">=</span> System.currentTimeMillis() + mills;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.expireAt(key, timeoutAt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title function_">expireAt</span><span class="params">(K key, <span class="type">long</span> timeoutAt)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cacheExpire.expire(key, timeoutAt);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过期信息存储">过期信息存储</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储设置了过期时间的缓存信息</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;K,Long&gt; expireMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span> &#123;</span><br><span class="line">       expireMap.put(key, expireAt);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="定期轮询清理清空缓存任务">定期轮询清理&amp;清空缓存任务</h3><p>利用JDK原生的<code>ScheduledExecutorService</code> 线程池来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化轮询任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">ExpireThread</span>(),<span class="number">100</span>, <span class="number">100</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        CLEAN_LIMIT = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 定义执行清理任务的单线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/5 16:07</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ExpireThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(expireMap == <span class="literal">null</span> || expireMap.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (K key : expireMap.keySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span>(count &gt;= CLEAN_LIMIT)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cleanExpireKey(key);</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanExpireKey</span><span class="params">(K key)</span>&#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expireAtMs</span> <span class="operator">=</span> expireMap.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentTimeMillis &gt;= expireAtMs)&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;要清除的缓存key = &#123;&#125;&quot;</span>, key);</span><br><span class="line">            expireMap.remove(key);</span><br><span class="line">            cache.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="清空缓存任务-优化">清空缓存任务-优化</h3><p>过期的应用场景不多，那么经常轮训的意义实际不大。比如我们的任务 99%都是在凌晨清空数据，白天无论怎么轮询，纯粹是浪费资源。</p><p>相比于之前轮询访问每个缓存的key，比较耗时，我们需要快速判断需要处理的缓存才行</p><h4 id="排序map">排序Map</h4><p>最直观的方法就是将key排序处理，将key升序排列放到容器中，过期时间相同的key放到同一列表中处理</p><p>实现：利用java中TreeMap实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheExpireSort</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheExpire</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="comment">//存储设置了过期时间的缓存信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Long, List&lt;K&gt;&gt; sortedExpireMap;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//便于获取key的过期时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;K, Long&gt; expireMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每次清除的个数限制</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> CLEAN_LIMIT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheExpireSort</span><span class="params">(ICache&lt;K,V&gt; cache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sortedExpireMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;((o1, o2) -&gt; (<span class="type">int</span>)(o1 - o2));</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">EXECUTOR_SERVICE</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化轮询任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">ExpireThread</span>(),<span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        CLEAN_LIMIT = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 定义执行清理任务的单线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2023/12/5 16:07</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">ExpireThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(sortedExpireMap == <span class="literal">null</span> || sortedExpireMap.size() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Long, List&lt;K&gt;&gt; entry : sortedExpireMap.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">expireAt</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">                List&lt;K&gt; keys = entry.getValue();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(CollectionUtil.isEmpty(keys))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(count &gt; CLEAN_LIMIT)&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">long</span> <span class="variable">currentTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(currentTimeMillis &gt;= expireAt)&#123;</span><br><span class="line">                    Iterator&lt;K&gt; keysIterator = keys.iterator();</span><br><span class="line">                    <span class="keyword">while</span> (keysIterator.hasNext())&#123;</span><br><span class="line">                        <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> keysIterator.next();</span><br><span class="line">                        log.debug(<span class="string">&quot;删除的缓存key为&#123;&#125;&quot;</span>, key);</span><br><span class="line">                        keysIterator.remove();</span><br><span class="line">                        expireMap.remove(key);</span><br><span class="line"></span><br><span class="line">                        cache.remove(key);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//剪枝操作，因为是有序遍历，当遍历到过期时间在未来的集合，直接返回，因为下面的过期时间只会更久远</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expire</span><span class="params">(K key, <span class="type">long</span> expireAt)</span> &#123;</span><br><span class="line">        List&lt;K&gt; keys = sortedExpireMap.get(expireAt);</span><br><span class="line">        <span class="keyword">if</span>(keys == <span class="literal">null</span>)&#123;</span><br><span class="line">            keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        keys.add(key);</span><br><span class="line">        sortedExpireMap.put(expireAt, keys);</span><br><span class="line">        expireMap.put(key, expireAt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">expireTime</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expireMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺陷：无法配合惰性删除</p><h2 id="惰性删除">惰性删除</h2><p>使用原因：</p><ol type="1"><li>CPU友好，不会占用CPU资源</li><li>数据一致性比较好</li></ol><p>思路：不主动删除过期键，每次从数据库访问 key 时，都检测 key是否过期，如果过期则删除该 key。</p><ul><li>也就是说要在get方法处添加</li></ul><p>惰性删除实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lazyRefresh</span><span class="params">(Collection&lt;K&gt; keys)</span> &#123;</span><br><span class="line">    <span class="comment">//要清理两个集合，一个是传入的key，另一个是当前expireMap</span></span><br><span class="line">    <span class="keyword">if</span>(CollectionUtil.isEmpty(keys))&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(keys.size() &lt;= expireMap.size())&#123;</span><br><span class="line">        <span class="keyword">for</span> (K key : keys) &#123;</span><br><span class="line">            cleanExpireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (K key : expireMap.keySet()) &#123;</span><br><span class="line">            cleanExpireKey(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>惰性删除应用</p><p>Cache类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">K</span> <span class="variable">genericKey</span> <span class="operator">=</span> (K) key;</span><br><span class="line">    <span class="built_in">this</span>.cacheExpire.lazyRefresh( Collections.singletonList(genericKey));</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">    refreshExpireAllKeys();</span><br><span class="line">    <span class="keyword">return</span> map.keySet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span> &#123;</span><br><span class="line">    refreshExpireAllKeys();</span><br><span class="line">    <span class="keyword">return</span> map.values();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;Entry&lt;K, V&gt;&gt; <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    refreshExpireAllKeys();</span><br><span class="line">    <span class="keyword">return</span> map.entrySet();</span><br><span class="line">&#125;</span><br><span class="line">。。。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="持久化">持久化</h1><h2 id="rdb">RDB</h2><h3 id="接口定义-2">接口定义</h3><p>ICache接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ICacheLoad&lt;K,V&gt; <span class="title function_">load</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">ICachePersist&lt;K,V&gt; <span class="title function_">persist</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="加载接口">加载接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheLoad</span>&lt;K, V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 加载上次关机前的缓存信息</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ICache&lt;K,V&gt; cache)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>持久化策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 持久化策略接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 20:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="json字符串形式持久化">JSON字符串形式持久化</h3><h4id="持久化实现类cachepersistfilejson">持久化实现类CachePersistFileJson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: JSON形式 RDB持久化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 20:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CachePersistFileJson</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CachePersistFileJson</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">persist</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        Set&lt;Map.Entry&lt;K, V&gt;&gt; entries = cache.entrySet();</span><br><span class="line"></span><br><span class="line">        FileUtil.createFile(filePath);</span><br><span class="line">        <span class="comment">//清空文件内容</span></span><br><span class="line">        truncateFile(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">expireTime</span> <span class="operator">=</span> cache.expire().expireTime(key);</span><br><span class="line">            PersistRdbEntry&lt;K,V&gt; rdbEntry = <span class="keyword">new</span> <span class="title class_">PersistRdbEntry</span>&lt;&gt;();</span><br><span class="line">            rdbEntry.setKey(key);</span><br><span class="line">            rdbEntry.setValue(entry.getValue());</span><br><span class="line">            rdbEntry.setExpire(expireTime);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> JSON.toJSONString(rdbEntry);</span><br><span class="line">            FileUtil.write(filePath, line, StandardOpenOption.APPEND);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">truncateFile</span><span class="params">(String filePath)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filePath);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">fileWriter</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">FileWriter</span>(file);</span><br><span class="line">            fileWriter.write(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            fileWriter.flush();</span><br><span class="line">            fileWriter.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加载实现类cacheloadfilejson">加载实现类CacheLoadFileJson</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: JSON持久化加载实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 21:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheLoadFileJson</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheLoad</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheLoadFileJson</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">load</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        List&lt;String&gt; lines = FileUtil.readAllLines(filePath);</span><br><span class="line">        log.debug(<span class="string">&quot;[load] 开始加载处理 path: &#123;&#125;&quot;</span>, filePath);</span><br><span class="line">        <span class="keyword">if</span>(CollectionUtil.isEmpty(lines)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;[load] path: &#123;&#125; 文件内容为空，直接返回&quot;</span>, filePath);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String line : lines) &#123;</span><br><span class="line">            <span class="keyword">if</span>(StringUtil.isEmpty(line))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            PersistRdbEntry&lt;K,V&gt; rdbEntry = JSONObject.parseObject(line, PersistRdbEntry.class);</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> rdbEntry.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> rdbEntry.getValue();</span><br><span class="line">            <span class="type">Long</span> <span class="variable">expire</span> <span class="operator">=</span> rdbEntry.getExpire();</span><br><span class="line"></span><br><span class="line">            cache.put(key, value);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(expire != <span class="literal">null</span>)&#123;</span><br><span class="line">                cache.expireAt(key, expire);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="定时rdb持久化任务实现">定时RDB持久化任务实现</h3><h4 id="innercachepersist">InnerCachePersist</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 定时执行持久化策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/5 21:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerCachePersist</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICachePersist&lt;K,V&gt; cachePersist;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ScheduledExecutorService</span> <span class="variable">EXECUTOR_SERVICE</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 初始化轮询任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        EXECUTOR_SERVICE.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;开始持久化......  time : &#123;&#125;&quot;</span>, formatter.format(System.currentTimeMillis()));</span><br><span class="line">                cachePersist.persist(cache);</span><br><span class="line">                log.debug(<span class="string">&quot;完成持久化......  time : &#123;&#125;&quot;</span>, formatter.format(System.currentTimeMillis()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">1</span>, TimeUnit.MINUTES);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引导类使用">引导类使用</h3><h1 id="淘汰策略类">淘汰策略类</h1><p>采用<strong>策略模式</strong>，策略类的顶层接口是<code>ICacheEvict</code>，核心方法是<code>void evict(ICacheEvictContext&lt;K,V&gt; context);</code></p><p>以下是具体的实现类，context是<code>ICacheEvictContext</code>，内部含有缓存基础信息，包括新添加的key，专门服务于<code>CacheEvic</code>接口，负责运行时选择具体的策略。同时也减少了<code>CacheContext</code>的职责。</p><h2 id="接口定义-3">接口定义</h2><h3 id="icacheevict">ICacheEvict</h3><p>ICacheEvict：内存驱逐/淘汰策略</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 17:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 定义  驱逐淘汰方法</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">(ICacheEvictContext&lt;K,V&gt; context)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="icacheevictcontext">ICacheEvictContext</h3><p>ICacheEvictContext：内存驱逐/淘汰策略 上下文</p><p>功能：负责<strong>传递缓存上下文</strong>以及新元素key的作用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 17:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICacheEvictContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新加的 key，为具体缓存策略提供key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    K <span class="title function_">key</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cache 实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ICache&lt;K, V&gt; <span class="title function_">cache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取大小限制</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="策略工具类">策略工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 策略工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">CacheEvicts</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CacheEvicts</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 无策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return  具体策略实现类CacheEvict</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; ICacheEvict&lt;K,V&gt; <span class="title function_">none</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheEvictNone</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 无策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return  具体策略实现类CacheEvict</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; ICacheEvict&lt;K,V&gt; <span class="title function_">fifo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheEvictFIFO</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="cacheevictcontext">CacheEvictContext</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictContext</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheEvictContext</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> K key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICache&lt;K,V&gt; cache;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sizeLimit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新加的 key</span></span><br><span class="line"><span class="comment">     *  后跟set方法，返回值保证流式编程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> K <span class="title function_">key</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="title function_">key</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cache 实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ICache&lt;K, V&gt; <span class="title function_">cache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="title function_">cache</span><span class="params">(ICache&lt;K, V&gt; cache)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cache = cache;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取大小</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sizeLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sizeLimit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CacheEvictContext&lt;K, V&gt; <span class="title function_">sizeLimit</span><span class="params">(<span class="type">int</span> sizeLimit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sizeLimit = sizeLimit;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="无策略">无策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 无淘汰策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 20:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictNone</span> <span class="keyword">implements</span> <span class="title class_">ICacheEvict</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">(ICacheEvictContext context)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fifo">FIFO</h2><p>先进先出的思想，具体采用链表实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: FIFO淘汰策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> VLS</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/4 20:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheEvictFIFO</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">ICacheEvict</span>&lt;K,V&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;K&gt; queue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheEvictFIFO</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evict</span><span class="params">(ICacheEvictContext&lt;K, V&gt; context)</span> &#123;</span><br><span class="line">        ICache&lt;K, V&gt; cache = context.cache();</span><br><span class="line">        <span class="keyword">if</span>(cache.size() &gt;= context.sizeLimit())&#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">removeKey</span> <span class="operator">=</span> queue.remove();</span><br><span class="line">            cache.remove(removeKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这种final可加可不加，这是提高可读性的一种方式</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> context.key();</span><br><span class="line">        queue.add(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试">测试</h1><h2 id="固定大小缓存">固定大小缓存</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小指定测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.0.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloTest</span><span class="params">()</span> &#123;</span><br><span class="line">    ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">            .sizeLimit(<span class="number">2</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="expire">expire</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 过期测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 0.0.3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">expireTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    ICache&lt;String, String&gt; cache = CacheGuide.&lt;String,String&gt;newInstance()</span><br><span class="line">            .sizeLimit(<span class="number">3</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    cache.put(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    cache.put(<span class="string">&quot;2&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    cache.expire(<span class="string">&quot;1&quot;</span>, <span class="number">50</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">    Assert.assertEquals(<span class="number">2</span>, cache.size());</span><br><span class="line"></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">    Assert.assertEquals(<span class="number">1</span>, cache.size());</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持久化-1">持久化</h2><h3 id="rdb-1">RDB</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;环境搭建&quot;&gt;环境搭建&lt;/h1&gt;
&lt;h2 id=&quot;git命令封装&quot;&gt;git命令封装&lt;/h2&gt;
&lt;p&gt;提交当前变更：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="项目" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="redis" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/redis/"/>
    
    
  </entry>
  
  <entry>
    <title>手写springMVC</title>
    <link href="https://vlsmhd.github.io/2023/11/27/%E6%89%8B%E5%86%99springMVC/"/>
    <id>https://vlsmhd.github.io/2023/11/27/%E6%89%8B%E5%86%99springMVC/</id>
    <published>2023-11-27T11:36:12.156Z</published>
    <updated>2023-11-28T12:48:01.340Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前置准备">前置准备</h1><h2 id="搭建idea开发环境">搭建idea开发环境</h2><p>tomcat安装，下载源码</p><p><ahref="https://gitee.com/link?target=https%3A%2F%2Ftomcat.apache.org%2Fdownload-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><img src="手写springMVC/1697774725337.jpg" alt="输入图片说明" style="zoom: 67%;" /></p><p>依赖准备：</p><p>包文件夹没有pom.xml，创建一个即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat9<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>tomcat-9.0.44<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.44<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>tomcat-9.0.44<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>biz.aQute.bnd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>biz.aQute.bndlib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant-apache-log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant-commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.rpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.xml.rpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除不必要文件：</p><figure><img src="手写springMVC/image-20231127193851926.png"alt="image-20231127193851926" /><figcaption aria-hidden="true">image-20231127193851926</figcaption></figure><h3 id="测试tomcat">测试tomcat</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;    </span><br><span class="line"><span class="meta">@Override</span>    </span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;        </span><br><span class="line"><span class="built_in">super</span>.doGet(req, resp);    </span><br><span class="line">    </span><br><span class="line">    &#125;    </span><br><span class="line"><span class="meta">@Override</span>    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;       </span><br><span class="line"> <span class="built_in">super</span>.doPost(req, resp);    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;`</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="bug">bug</h4><p>1、版本不匹配</p><figure><img src="手写springMVC/image-20231127194757948.png"alt="image-20231127194757948" /><figcaption aria-hidden="true">image-20231127194757948</figcaption></figure><p>解决：<ahref="https://blog.csdn.net/yangchao1125/article/details/121771244">IDEA使用过程中报错: java: -source 1.5 中不支持 lambda 表达式 (请使用 -source8 或更高版本以启用 lambda 表达式)-CSDN博客</a></p><p>2、maven爆红</p><p>点到什么switch什么玩意，直接好了</p><h3 id="搭建开发环境">搭建开发环境</h3><p>创建新项目：</p><p>编码依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>xhy-web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-parameters<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">compilerArgs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="架构设计">架构设计</h2><p>MVC核心组件：</p><figure><img src="手写springMVC/image-20231127213942940.png"alt="image-20231127213942940" /><figcaption aria-hidden="true">image-20231127213942940</figcaption></figure><p>应用架构：</p><figure><img src="手写springMVC/image-20231127214952065.png"alt="image-20231127214952065" /><figcaption aria-hidden="true">image-20231127214952065</figcaption></figure><p>注意：tomcat留有一个拓展点 ：<code>ServletContainerInitializer</code>。在SCI中有@HandlesTypes注解可以获取感兴趣的类，因此我们在这个地方进行ioc初始化以及后续的DispatcherServlet 初始化</p><h1 id="webioc容器开发">webIOC容器开发</h1><p>在应用程序需要有一个容器管理，可以基于spring的规范去管理。设计一个自己的web容器</p><p>官方ioc设计规范：</p><p>1.WebApplicationContext：web ioc顶级接口</p><p>2.ConfigurableWebApplicationContext: 存放servlet context 定义规范</p><p>3.AbstractRefreshableWebApplicationContext：容器刷新接入点，接入行为</p><p>4.AnnotationConfigWebApplicationContext web ioc实现：注解版</p><figure><img src="手写springMVC/1697774875945.jpg" alt="输入图片说明" /><figcaption aria-hidden="true">输入图片说明</figcaption></figure><h2 id="ioc设计与实现">ioc设计与实现</h2><p><strong>顶层web ioc根接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class="operator">=</span> WebApplicationContext.class.getName() + <span class="string">&quot;.ROOT&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">CHILD_WEB_APPLICATION_CONTEXT_ATTRIBUTE</span> <span class="operator">=</span> WebApplicationContext.class.getName() + <span class="string">&quot;.CHILD&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可配置的web ioc接口ConfigurableWebApplicationContext</strong></p><p>作用：存放servletConfig、servletContext</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">WebApplicationContext</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(<span class="meta">@Nullable</span> ServletContext servletContext)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletConfig</span><span class="params">(<span class="meta">@Nullable</span> ServletConfig servletConfig)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AbstractRefreshableWebApplicationContext</strong></p><p>application应用上下文体系：</p><p><img src="手写springMVC/image-20231128200314794.png" alt="image-20231128200314794" style="zoom:67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRefreshableWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractRefreshableConfigApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ConfigurableWebApplicationContext</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(ServletContext servletContext)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletContext = servletContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setServletConfig</span><span class="params">(ServletConfig servletConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.servletContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加servle bean 后置处理器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">ServletBeanPostProcessor</span>(servletContext, servletConfig));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略掉接口的set方法，这样可以用用户自己的set方法，防止set重复调用</span></span><br><span class="line">        beanFactory.ignoreDependencyInterface(ServletContextAware.class);</span><br><span class="line">        beanFactory.ignoreDependencyInterface(ServletConfigAware.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ServletBeanPostProcessor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServletBeanPostProcessor</span><span class="params">(ServletContext servletContext, ServletConfig servletConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.servletContext = servletContext;</span><br><span class="line">        <span class="built_in">this</span>.servletConfig = servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ServletContext <span class="title function_">getServletContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> servletContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当容器创建的时候，这两个成员变量会set进AbstractRefreshableWebApplicationContext类里</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="keyword">if</span>(bean != <span class="literal">null</span> &amp;&amp; bean <span class="keyword">instanceof</span> ServletConfigAware)&#123;</span><br><span class="line">            ((ServletConfigAware)bean).setServletConfig(<span class="built_in">this</span>.servletConfig);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(bean != <span class="literal">null</span> &amp;&amp; bean <span class="keyword">instanceof</span> ServletContextAware)&#123;</span><br><span class="line">            ((ServletContextAware)bean).setServletContext(<span class="built_in">this</span>.servletContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletConfig属性赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletConfigAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletConfig</span><span class="params">(ServletConfig servletConfig)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ServletContext属性赋值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ServletContextAware</span> <span class="keyword">extends</span> <span class="title class_">Aware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setServletContext</span><span class="params">(ServletContext servletContext)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>AnnotationConfigWebApplicationContext</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationConfigWebApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractRefreshableWebApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">AnnotationConfigRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanNameGenerator beanNameGenerator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ScopeMetadataResolver scopeMetadataResolver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Class&lt;?&gt;&gt; componentClasses = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; basePackages = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制粘贴即可</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">        <span class="type">AnnotatedBeanDefinitionReader</span> <span class="variable">reader</span> <span class="operator">=</span> getAnnotatedBeanDefinitionReader(beanFactory);</span><br><span class="line">        <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> getClassPathBeanDefinitionScanner(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanNameGenerator</span> <span class="variable">beanNameGenerator</span> <span class="operator">=</span> getBeanNameGenerator();</span><br><span class="line">        <span class="keyword">if</span> (beanNameGenerator != <span class="literal">null</span>) &#123;</span><br><span class="line">            reader.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">            scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">            beanFactory.registerSingleton(AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR, beanNameGenerator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ScopeMetadataResolver</span> <span class="variable">scopeMetadataResolver</span> <span class="operator">=</span> getScopeMetadataResolver();</span><br><span class="line">        <span class="keyword">if</span> (scopeMetadataResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">            reader.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">            scanner.setScopeMetadataResolver(scopeMetadataResolver);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.componentClasses.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Registering component classes: [&quot;</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="built_in">this</span>.componentClasses) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.register(ClassUtils.toClassArray(<span class="built_in">this</span>.componentClasses));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.basePackages.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">&quot;Scanning base packages: [&quot;</span> +</span><br><span class="line">                        StringUtils.collectionToCommaDelimitedString(<span class="built_in">this</span>.basePackages) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            scanner.scan(StringUtils.toStringArray(<span class="built_in">this</span>.basePackages));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] configLocations = getConfigLocations();</span><br><span class="line">        <span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String configLocation : configLocations) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Class&lt;?&gt; clazz = ClassUtils.forName(configLocation, getClassLoader());</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                        logger.trace(<span class="string">&quot;Registering [&quot;</span> + configLocation + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    reader.register(clazz);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">                        logger.trace(<span class="string">&quot;Could not load class for config location [&quot;</span> + configLocation +</span><br><span class="line">                                <span class="string">&quot;] - trying package scan. &quot;</span> + ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> scanner.scan(configLocation);</span><br><span class="line">                    <span class="keyword">if</span> (count == <span class="number">0</span> &amp;&amp; logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;No component classes found for specified class/package [&quot;</span> + configLocation + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> AnnotatedBeanDefinitionReader <span class="title function_">getAnnotatedBeanDefinitionReader</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AnnotatedBeanDefinitionReader</span>(beanFactory, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ClassPathBeanDefinitionScanner <span class="title function_">getClassPathBeanDefinitionScanner</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(beanFactory, <span class="literal">true</span>, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BeanNameGenerator <span class="title function_">getBeanNameGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.beanNameGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ScopeMetadataResolver <span class="title function_">getScopeMetadataResolver</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.scopeMetadataResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Class&lt;?&gt;... componentClasses)</span> &#123;</span><br><span class="line">        Assert.notEmpty(componentClasses, <span class="string">&quot;At least one component class must be specified&quot;</span>);</span><br><span class="line">        Collections.addAll(<span class="built_in">this</span>.componentClasses, componentClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scan</span><span class="params">(String... basePackages)</span> &#123;</span><br><span class="line">        Assert.notEmpty(basePackages, <span class="string">&quot;At least one base package must be specified&quot;</span>);</span><br><span class="line">        Collections.addAll(<span class="built_in">this</span>.basePackages, basePackages);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ioc的初始化">ioc的初始化</h2><h1 id="对接servlet-spi">对接Servlet SPI</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前置准备&quot;&gt;前置准备&lt;/h1&gt;
&lt;h2 id=&quot;搭建idea开发环境&quot;&gt;搭建idea开发环境&lt;/h2&gt;
&lt;p&gt;tomcat安装，下载源码&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://gitee.com/link?target=https%3A%2F%2</summary>
      
    
    
    
    <category term="项目" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="spring" scheme="https://vlsmhd.github.io/categories/%E9%A1%B9%E7%9B%AE/spring/"/>
    
    
  </entry>
  
  <entry>
    <title>LCR题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/11/17/LCR%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/11/17/LCR%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-11-17T02:01:30.758Z</published>
    <updated>2023-12-05T14:14:03.134Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整数">整数</h1><h2 id="简单">简单</h2><h3 id="lcr-001.-两数相除"><ahref="https://leetcode.cn/problems/xoh6Oh/">LCR 001. 两数相除</a></h3><p>给定两个整数 <code>a</code> 和 <code>b</code> ，求它们的除法的商<code>a/b</code> ，要求不得使用乘号 <code>'*'</code>、除号<code>'/'</code> 以及求余符号 <code>'%'</code> 。</p><p><strong>注意：</strong></p><ul><li>整数除法的结果应当截去（<code>truncate</code>）其小数部分，例如：<code>truncate(8.345) = 8</code>以及 <code>truncate(-2.7335) = -2</code></li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是<code>[−231, 231−1]</code>。本题中，如果除法结果溢出，则返回<code>231 − 1</code></li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 15, b = 2</span><br><span class="line">输出：7</span><br><span class="line">解释：15/2 = truncate(7.5) = 7</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 7, b = -3</span><br><span class="line">输出：-2</span><br><span class="line">解释：7/-3 = truncate(-2.33333..) = -2</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 0, b = 1</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 1, b = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h4 id="算法分析">算法分析</h4><h5 id="快速乘-二分">快速乘 + 二分</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a == Integer.MIN_VALUE)&#123;</span><br><span class="line">            <span class="keyword">if</span>(b == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(b == -<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(b == Integer.MIN_VALUE)&#123;</span><br><span class="line">            <span class="keyword">return</span> a == Integer.MIN_VALUE ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取反</span></span><br><span class="line">        <span class="comment">// 一般情况，使用二分查找</span></span><br><span class="line">        <span class="comment">// 将所有的正数取相反数，这样就只需要考虑一种情况</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">rev</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            a = -a;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            b = -b;</span><br><span class="line">            rev = !rev;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>, right = Integer.MAX_VALUE, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">            <span class="comment">// 注意溢出，并且不能使用除法</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">check</span> <span class="operator">=</span> quickAdd(b, mid, a);</span><br><span class="line">            <span class="keyword">if</span> (check) &#123;</span><br><span class="line">                ans = mid;</span><br><span class="line">                <span class="comment">// 注意溢出</span></span><br><span class="line">                <span class="keyword">if</span> (mid == Integer.MAX_VALUE) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                right = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> rev ? -ans : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 快速乘</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> y 加数</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> z 加的次数</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> x 目标数</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">quickAdd</span><span class="params">(<span class="type">int</span> y, <span class="type">int</span> z, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> y;</span><br><span class="line">        <span class="comment">//判断 z * y 是否 》= x</span></span><br><span class="line">        <span class="keyword">while</span>(z != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>((z &amp; <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(result &lt; x - add)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                result += add;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(z != <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(add &lt; x - add)&#123;</span><br><span class="line">                    <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                add += add;</span><br><span class="line">            &#125;</span><br><span class="line">            z &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-002.-二进制求和"><ahref="https://leetcode.cn/problems/JFETK5/">LCR 002. 二进制求和</a></h3><p>给定两个 01 字符串 <code>a</code> 和 <code>b</code>，请计算它们的和，并以二进制字符串的形式输出。</p><p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和<code>0</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;11&quot;, b = &quot;10&quot;</span><br><span class="line">输出: &quot;101&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">输出: &quot;10101&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个字符串仅由字符 <code>'0'</code> 或 <code>'1'</code> 组成。</li><li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li><li>字符串如果不是 <code>"0"</code> ，就都不含前导零。</li></ul><h4 id="算法分析-1">算法分析</h4><h5 id="模拟加">模拟加</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Math.max(a.length(), b.length());</span><br><span class="line">            <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//正常模拟加法，从低位往高位加，但是存储的时候逆序存储</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                carry += i &lt; a.length() ? (a.charAt(a.length() - <span class="number">1</span> - i) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">                carry += i &lt; b.length() ? (b.charAt(b.length() - <span class="number">1</span> - i) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">                ans.append((<span class="type">char</span>)(carry % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">                carry /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后一位计算，carry有可能还会进位</span></span><br><span class="line">            <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                ans.append((<span class="type">char</span>)(carry % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans.reverse().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-003.-比特位计数"><ahref="https://leetcode.cn/problems/w3tCBm/">LCR 003. 比特位计数</a></h3><p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code>中的每个 <code>i</code> ，计算其二进制表示中 <strong><code>1</code>的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组<code>ans</code> 作为答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：[0,1,1]</span><br><span class="line">解释：</span><br><span class="line">0 --&gt; 0</span><br><span class="line">1 --&gt; 1</span><br><span class="line">2 --&gt; 10</span><br></pre></td></tr></table></figure><h4 id="算法分析-2">算法分析</h4><h5 id="简单循环与运算">简单循环与运算</h5><p>传统的处理数的方式：拿当前的数和1进行&amp;判断最后一位是不是1，然后二进制右移一下，判断下一位...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span>(cur &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((cur &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                    ans[i]++;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                cur &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="性能">性能</h6><figure><img src="image-20230828100829993.png" alt="image-20230828100829993" /><figcaption aria-hidden="true">image-20230828100829993</figcaption></figure><h5 id="动态规划-最高有效位">动态规划-最高有效位</h5><p>一个整数 i 如果是2的n次幂，那他只有最高位为1。那我们把 <spanclass="math inline">\([2^n , 2^{n+1}]\)</span>里的数x，减去$ 2 ^ n$，这样退阶到子问题阶层，然后实际1的个数比这个子问题多一（因为最高位基于$ 2 ^ n$)</p><p>判断整数是否为2的n次幂的方法： <code>i &amp; (i - 1) == 0</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以2的n次方的数的高位为基准</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">highBit</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((i &amp; (i-<span class="number">1</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                highBit = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每次的i处于一个  [highBit, 下一个highBit] 之间，减去highBit退回前一维度</span></span><br><span class="line">            ans[i] = ans[i - highBit] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-006.-两数之和-ii---输入有序数组"><ahref="https://leetcode.cn/problems/kLl5u1/">LCR 006. 两数之和 II -输入有序数组</a></h3><p>给定一个已按照 <strong>升序排列</strong> 的整数数组<code>numbers</code> ，请你从数组中找出两个数满足相加之和等于目标数<code>target</code> 。</p><p>函数应该以长度为 <code>2</code>的整数数组的形式返回这两个数的下标值<em>。</em><code>numbers</code>的下标 <strong>从 0 开始计数</strong> ，所以答案数组应当满足<code>0 &lt;= answer[0] &lt; answer[1] &lt; numbers.length</code> 。</p><p>假设数组中存在且只存在一对符合条件的数字，同时一个数字不能使用两次。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [1,2,4,6,10], target = 8</span><br><span class="line">输出：[1,3]</span><br><span class="line">解释：2 与 6 之和等于目标数 8 。因此 index1 = 1, index2 = 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,3,4], target = 6</span><br><span class="line">输出：[0,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [-1,0], target = -1</span><br><span class="line">输出：[0,1]</span><br></pre></td></tr></table></figure><h4 id="双指针">双指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[left] + numbers[right] &gt; target)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[left] + numbers[right] &lt; target)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left, right&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等">中等</h2><h3 id="lcr-004.-只出现一次的数字-ii"><ahref="https://leetcode.cn/problems/WGki4K/">LCR 004. 只出现一次的数字II</a></h3><p>给你一个整数数组 <code>nums</code> ，除某个元素仅出现<strong>一次</strong> 外，其余每个元素都恰出现 <strong>三次。</strong>请你找出并返回那个只出现了一次的元素。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,3,2]</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,0,1,0,1,100]</span><br><span class="line">输出：100</span><br></pre></td></tr></table></figure><h4 id="确定每一个二进制位">确定每一个二进制位</h4><p>如果数字出现三次，它的全部二进制位置于0，忽略不计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">                val += ((num &gt;&gt; i) &amp; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//表明有数字出现次数不为3</span></span><br><span class="line">            <span class="keyword">if</span>(val % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                ans |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lcr-005.-最大单词长度乘积"><ahref="https://leetcode.cn/problems/aseY1I/">LCR 005.最大单词长度乘积</a></h3><p>给定一个字符串数组 <code>words</code>，请计算当两个字符串<code>words[i]</code> 和 <code>words[j]</code>不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回0。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: words = [&quot;abcw&quot;,&quot;baz&quot;,&quot;foo&quot;,&quot;bar&quot;,&quot;fxyz&quot;,&quot;abcdef&quot;]</span><br><span class="line">输出: 16 </span><br><span class="line">解释: 这两个单词为 &quot;abcw&quot;, &quot;fxyz&quot;。它们不包含相同字符，且长度的乘积最大。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: words = [&quot;a&quot;,&quot;ab&quot;,&quot;abc&quot;,&quot;d&quot;,&quot;cd&quot;,&quot;bcd&quot;,&quot;abcd&quot;]</span><br><span class="line">输出: 4 </span><br><span class="line">解释: 这两个单词为 &quot;ab&quot;, &quot;cd&quot;。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: words = [&quot;a&quot;,&quot;aa&quot;,&quot;aaa&quot;,&quot;aaaa&quot;]</span><br><span class="line">输出: 0 </span><br><span class="line">解释: 不存在这样的两个单词。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= words.length &lt;= 1000</code></li><li><code>1 &lt;= words[i].length &lt;= 1000</code></li><li><code>words[i]</code> 仅包含小写字母</li></ul><h4 id="位运算压缩存储">位运算压缩存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProduct</span><span class="params">(String[] words)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> words.length;</span><br><span class="line">    <span class="comment">//26个字母，需要26个二进制位压缩存储,int类型足够</span></span><br><span class="line">    <span class="comment">// 1 表示  存在字符  0 表示不存在字符</span></span><br><span class="line">    <span class="type">int</span>[] masks = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> words[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">wordLength</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; wordLength; j++) &#123;</span><br><span class="line">            masks[i] |= <span class="number">1</span> &lt;&lt; (word.charAt(j) - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">//说明两个字符的字母以位存储不相交</span></span><br><span class="line">            <span class="keyword">if</span>((masks[i] &amp; masks[j]) == <span class="number">0</span>)&#123;</span><br><span class="line">                ans = Math.max(ans, words[i].length() * words[j].length());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数组">数组</h1><h2 id="简单-1">简单</h2><h3 id="lcr-012.-寻找数组的中心下标"><ahref="https://leetcode.cn/problems/tvdfij/">LCR 012.寻找数组的中心下标</a></h3><p>给你一个整数数组 <code>nums</code> ，请计算数组的<strong>中心下标</strong> 。</p><p>数组 <strong>中心下标</strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code>，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong>的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,7,3,6,5,6]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">中心下标是 3 。</span><br><span class="line">左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，</span><br><span class="line">右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1, 2, 3]</span><br><span class="line">输出：-1</span><br><span class="line">解释：</span><br><span class="line">数组中不存在满足此条件的中心下标。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2, 1, -1]</span><br><span class="line">输出：0</span><br><span class="line">解释：</span><br><span class="line">中心下标是 0 。</span><br><span class="line">左侧数之和 sum = 0 ，（下标 0 左侧不存在元素），</span><br><span class="line">右侧数之和 sum = nums[1] + nums[2] = 1 + -1 = 0 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^4</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li></ul><h4 id="算法分析-3">算法分析</h4><h5 id="前缀和">前缀和</h5><p>但是不用前缀和数组，只需前半段的和即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> Arrays.stream(nums).sum();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//左边sum之和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//整个数组的和：左边元素和 + 当前元素 + 右边元素和</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="number">2</span> * sum + nums[i] == total)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-1">中等</h2><h3 id="lcr-007.-三数之和"><ahref="https://leetcode.cn/problems/1fGaJU/">LCR 007. 三数之和</a></h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组<code>[nums[i], nums[j], nums[k]]</code> 满足<code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><h4 id="算法分析-4">算法分析</h4><h5 id="对向指针">对向指针</h5><p>这题注意去重，排序过后，对于相同的相邻元素的处理：直接跳过即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//去重</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">//去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-008.-长度最小的子数组"><ahref="https://leetcode.cn/problems/2VG8Kg/">LCR 008.长度最小的子数组</a></h3><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数<code>target</code> <strong>。</strong></p><p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的<strong>连续子数组</strong><code>[numsl, numsl+1, ..., numsr-1, numsr]</code>，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回<code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h4 id="算法分析-5">算法分析</h4><p>本题最直观解法就是以每一个元素为起点，利用第二重循环去找sum之和，一旦比target大（或者相等）就记录这次窗口的大小，继续循环...</p><p>后续可以优化为滑动窗口</p><h5 id="暴力">暴力</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="comment">//二轮循环统计</span></span><br><span class="line">            <span class="keyword">while</span>(++j &lt; n &amp;&amp; sum &lt; target)&#123;</span><br><span class="line">                sum += nums[j++];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum &gt;= target)&#123;</span><br><span class="line">                ans = Math.min(ans, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE ? <span class="number">0</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="滑动窗口">滑动窗口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>,end = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end &lt; n)&#123;</span><br><span class="line">            sum += nums[end];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">                ans = Math.min(ans, end - start + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//窗口缩小,要缩小到 &lt; target</span></span><br><span class="line">                sum -= nums[start++];</span><br><span class="line">            &#125;</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE ? <span class="number">0</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀和-二分查找">前缀和 + 二分查找</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span>  <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span>[] sums = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建前缀和数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; (n + <span class="number">1</span>); i++) &#123;</span><br><span class="line">            sums[i] = sums[i-<span class="number">1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//前缀和数组一定有序，利用二分查找</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="comment">//要找的子数组区间[i, n]   要找到目标数idx  满足sums[idx] &gt;= target + sums[i-1]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">targetBinary</span> <span class="operator">=</span> target + sums[i-<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> Arrays.binarySearch(sums, targetBinary);</span><br><span class="line">            <span class="keyword">if</span>(idx &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                idx = -idx -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//此时找到了idx，满足sums[idx] - sums[i-1] &gt;= target</span></span><br><span class="line">            <span class="keyword">if</span>(idx &gt;= <span class="number">0</span> &amp;&amp; idx &lt;= n)&#123;</span><br><span class="line">                ans = Math.min(idx - (i-<span class="number">1</span>), ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE ? <span class="number">0</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-009.-乘积小于-k-的子数组"><ahref="https://leetcode.cn/problems/ZVAVXX/">LCR 009. 乘积小于 K的子数组</a></h3><p>给定一个正整数数组 <code>nums</code>和整数 <code>k</code>，请找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [10,5,2,6], k = 100</span><br><span class="line">输出: 8</span><br><span class="line">解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。</span><br><span class="line">需要注意的是 [10,5,2] 并不是乘积小于100的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [1,2,3], k = 0</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><h4 id="算法分析-6">算法分析</h4><h5 id="滑动窗口-1">滑动窗口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSubarrayProductLessThanK</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">multi</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(end &lt; n)&#123;</span><br><span class="line">            multi *= nums[end];</span><br><span class="line">            <span class="keyword">while</span>(start &lt;= end &amp;&amp; multi &gt;= k)&#123;</span><br><span class="line">                multi /= nums[start++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//去重</span></span><br><span class="line">            ans += end - start + <span class="number">1</span>;</span><br><span class="line">            end++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>去重</strong>： 假如数组是[1,2,3,4,5] k = 10。</p><ol type="1"><li>滑动窗口大小为1，乘积是1，1 &lt; 10，因此需要加入结果集，res += end- start + 1 = 0 - 0 + 1 = 1 [1];</li><li>滑动窗口大小为2，乘积是2，2 &lt; 10，因此需要加入结果集，res += end- start + 1 = 1 - 0 + 1 = 2 [1,2] [2];</li><li>滑动窗口大小为3，乘积是6，6 &lt; 10，因此需要加入结果集，res += end- start + 1 = 2 - 0 + 1 = 3 [1,2,3] [2,3] [3];</li></ol><blockquote><p>​关于为什么子数组数目为j-1+1。我们采用滑动窗口的思路其实是枚举子数组的右端点，然后来找到满足条件的最小左端点。也即当得到满足条件的窗口时，就意味着得到了<strong>以j作为右端点时满足条件的左端点的下标最小值</strong>。那么此时满足条件的子数组个数当然就等于窗口能所有能作为左端点的位置个数，即j-i+1。</p></blockquote><h3 id="lcr-010.-和为-k-的子数组"><ahref="https://leetcode.cn/problems/QTMn0o/">LCR 010. 和为 K的子数组</a><a id="LCR010"></a></h3><p>给定一个整数数组和一个整数 <code>k</code><strong>，</strong>请找到该数组中和为 <code>k</code>的连续子数组的个数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:nums = [1,1,1], k = 2</span><br><span class="line">输出: 2</span><br><span class="line">解释: 此题 [1,1] 与 [1,1] 为两种不同的情况</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:nums = [1,2,3], k = 3</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><h4 id="算法分析-7">算法分析</h4><p>本题存在负数，如果使用滑动窗口，会出现越滑越少的情况，不满足滑动窗口使用的特性</p><h5 id="暴力法">暴力法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; start &lt; n; start++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> start; end &gt; <span class="number">0</span>; end--) &#123;</span><br><span class="line">                sum += nums[end];</span><br><span class="line">                <span class="keyword">if</span>(sum == k)&#123;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀和哈希表">前缀和+哈希表</h5><p>假设已知前缀和数组pre，那么<strong>[j...i]中子数组和为K的个数</strong> 转化为<strong><code>pre[i] - pre[j - 1] == k</code></strong>也就是<code>pre[j-1] == pre[i] - k</code>。</p><p>考虑以 i 结尾的和为 k 的连续子数组个数时只要统计有多少个前缀和为pre[i] - k 的 pre[j-1] 也就是j-1的个数也就是j的个数。</p><p>借助哈希表，以pre和为键，出现次数为值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subarraySum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//初始化：和为0的子数组有一个，那就是0个元素</span></span><br><span class="line">        map.put(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            pre += nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pre - k))&#123;</span><br><span class="line">                res += map.get(pre - k);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(pre, map.getOrDefault(pre, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-011.-连续数组"><ahref="https://leetcode.cn/problems/A1NYOS/">LCR 011. 连续数组</a></h3><p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的<code>0</code> 和 <code>1</code>的最长连续子数组，并返回该子数组的长度。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1]</span><br><span class="line">输出: 2</span><br><span class="line">说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0]</span><br><span class="line">输出: 2</span><br><span class="line">说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 10^5</code></li><li><code>nums[i]</code> 不是 <code>0</code> 就是 <code>1</code></li></ul><h4 id="算法分析-8">算法分析</h4><p>如果把0视作-1，那就是求<strong>和为0的子数组的最大长度</strong>，题目瞬间回到<a href="#LCR010">LCR010</a></p><h5 id="哈希表前缀和">哈希表+前缀和</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//初始化哈希表   空数组的前缀和</span></span><br><span class="line">        map.put(pre, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] == <span class="number">1</span>)&#123;</span><br><span class="line">                pre++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                pre--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//只要前面某下标j处有前缀和为pre，那[j...i]这段子数组中，和必为0</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(pre))&#123;</span><br><span class="line">                res = Math.max(res, i - map.get(pre));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                map.put(pre, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-013.-二维区域和检索---矩阵不可变"><ahref="https://leetcode.cn/problems/O4NDxx/">LCR 013. 二维区域和检索 -矩阵不可变</a></h3><p>给定一个二维矩阵 <code>matrix</code>，以下类型的多个请求：</p><ul><li>计算其子矩形范围内元素的总和，该子矩阵的左上角为<code>(row1, col1)</code> ，右下角为 <code>(row2, col2)</code> 。</li></ul><p>实现 <code>NumMatrix</code> 类：</p><ul><li><code>NumMatrix(int[][] matrix)</code> 给定整数矩阵<code>matrix</code> 进行初始化</li><li><code>int sumRegion(int row1, int col1, int row2, int col2)</code>返回左上角 <code>(row1, col1)</code> 、右下角 <code>(row2, col2)</code>的子矩阵的元素总和。</li></ul><p><strong>示例 1：</strong></p><figure><img src="1626332422-wUpUHT-image.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">[&quot;NumMatrix&quot;,&quot;sumRegion&quot;,&quot;sumRegion&quot;,&quot;sumRegion&quot;]</span><br><span class="line">[[[[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]],[2,1,4,3],[1,1,2,2],[1,2,2,4]]</span><br><span class="line">输出: </span><br><span class="line">[null, 8, 11, 12]</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">NumMatrix numMatrix = new NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]]);</span><br><span class="line">numMatrix.sumRegion(2, 1, 4, 3); // return 8 (红色矩形框的元素总和)</span><br><span class="line">numMatrix.sumRegion(1, 1, 2, 2); // return 11 (绿色矩形框的元素总和)</span><br><span class="line">numMatrix.sumRegion(1, 2, 2, 4); // return 12 (蓝色矩形框的元素总和)</span><br></pre></td></tr></table></figure><h4 id="算法分析-9">算法分析</h4><h5 id="一维前缀和">一维前缀和</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumMatrix</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[][] sums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumMatrix</span><span class="params">(<span class="type">int</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> matrix.length;</span><br><span class="line">        <span class="keyword">if</span>(m &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length;</span><br><span class="line">            sums = <span class="keyword">new</span> <span class="title class_">int</span>[m][n + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                    <span class="comment">//对每一行求前缀和</span></span><br><span class="line">                    sums[i][j + <span class="number">1</span>] = sums[i][j] + matrix[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRegion</span><span class="params">(<span class="type">int</span> row1, <span class="type">int</span> col1, <span class="type">int</span> row2, <span class="type">int</span> col2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row1; i &lt;= row2; i++) &#123;</span><br><span class="line">            sum += sums[i][col2 + <span class="number">1</span>] - sums[i][col1];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="字符串">字符串</h1><h2 id="简单-2">简单</h2><h3 id="lcr-018.-验证回文串"><ahref="https://leetcode.cn/problems/XltzEq/">LCR 018. 验证回文串</a></h3><p>给定一个字符串 <code>s</code> ，验证 <code>s</code> 是否是<strong>回文串</strong>，只考虑字母和数字字符，可以忽略字母的大小写。</p><p>本题中，将空字符串定义为有效的 <strong>回文串</strong> 。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;race a car&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释：&quot;raceacar&quot; 不是回文串</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 2 * 10^5</code></li><li>字符串 <code>s</code> 由 ASCII 字符组成</li></ul><h4 id="算法分析-10">算法分析</h4><p>很明显是双指针的题目，可以事先对字符串进行最小化处理，但是也可以不用，这样空间复杂度就来到了O(1)</p><h5 id="双指针-原地判断">双指针 + 原地判断</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(left))) left++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(left &lt; right &amp;&amp; !Character.isLetterOrDigit(s.charAt(right)))right--;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(Character.toLowerCase(s.charAt(left)) != Character.toLowerCase(s.charAt(right)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-019.-验证回文串-ii"><ahref="https://leetcode.cn/problems/RQku0D/">LCR 019. 验证回文串II</a></h3><p>给定一个非空字符串 <code>s</code>，请判断如果 <strong>最多</strong>从字符串中删除一个字符能否得到一个回文字符串。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;aba&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abca&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释: 可以删除 &quot;c&quot; 字符 或者 &quot;b&quot; 字符</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abc&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h4 id="算法分析-11">算法分析</h4><h5 id="贪心">贪心</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = s.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(low &lt; high)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> s.charAt(low);</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> s.charAt(high);</span><br><span class="line">            <span class="comment">//先看原串是不是</span></span><br><span class="line">            <span class="keyword">if</span>(c1 == c2)&#123;</span><br><span class="line">                low++;</span><br><span class="line">                high--;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//再看删掉一个字符是不是</span></span><br><span class="line">                <span class="keyword">return</span> validPalindrome(s,low + <span class="number">1</span>, high) || validPalindrome(s,low,high - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 判断字符串在长度区间[low,high]内是否是回文串</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> low</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> high</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validPalindrome</span><span class="params">(String s, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> low, j = high; i &lt; j; ++i, --j) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> s.charAt(i), c2 = s.charAt(j);</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-2">中等</h2><h3 id="lcr-014.-字符串的排列"><ahref="https://leetcode.cn/problems/MPnaiL/">LCR 014.字符串的排列</a></h3><p>给定两个字符串 <code>s1</code> 和 <code>s2</code>，写一个函数来判断<code>s2</code> 是否包含 <code>s1</code> 的某个变位词。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的<strong>子串</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s1 = &quot;ab&quot; s2 = &quot;eidbaooo&quot;</span><br><span class="line">输出: True</span><br><span class="line">解释: s2 包含 s1 的排列之一 (&quot;ba&quot;).</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s1= &quot;ab&quot; s2 = &quot;eidboaoo&quot;</span><br><span class="line">输出: False</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s1.length, s2.length &lt;= 10^4</code></li><li><code>s1</code> 和 <code>s2</code> 仅包含小写字母</li></ul><h4 id="算法分析-12">算法分析</h4><h5 id="固定长度滑动窗口-hash表">固定长度滑动窗口 + hash表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkInclusion</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s2.length();</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] hash1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span>[] hash2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">//初始化滑动窗口第一轮次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            hash1[s1.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            hash2[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Arrays.equals(hash1, hash2)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &lt; m; i++) &#123;</span><br><span class="line">            hash2[s2.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            hash2[s2.charAt(i - n) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(Arrays.equals(hash1, hash2))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-015.-找到字符串中所有字母异位词"><ahref="https://leetcode.cn/problems/VabMRr/">LCR 015.找到字符串中所有字母异位词</a></h3><p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code>中所有 <code>p</code> 的 <strong>变位词</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p><p><strong>变位词</strong> 指字母相同，但排列不同的字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class="line">输出: [0,6]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的变位词。</span><br><span class="line">起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的变位词。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class="line">输出: [0,1,2]</span><br><span class="line">解释:</span><br><span class="line">起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的变位词。</span><br><span class="line">起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的变位词。</span><br><span class="line">起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的变位词。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, p.length &lt;= 3 * 10^4</code></li><li><code>s</code> 和 <code>p</code> 仅包含小写字母</li></ul><h4 id="算法分析-13">算法分析</h4><p>涉及到字母异位词，字符串排列匹配子串的，大多都是滑动窗口 +哈希表解决</p><h5 id="固定长度滑动窗口-hash表-1">固定长度滑动窗口 + hash表</h5><p>一个哈希表足以，相同的字符，s有就++，p有就--，为0表示s与p匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findAnagrams</span><span class="params">(String s, String p)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> p.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            hash[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            hash[p.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//变量优化: differ表示不同的字符的个数，这样就可以采用单哈希表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">differ</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                differ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(differ == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[s.charAt(i - n) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)&#123;<span class="comment">//s与p匹配的字符被滑掉</span></span><br><span class="line">                differ++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(hash[s.charAt(i - n) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)&#123;<span class="comment">//s与p不匹配(s多一个) 的字符被滑掉</span></span><br><span class="line">                differ--;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[s.charAt(i - n) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hash[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == -<span class="number">1</span>)&#123;</span><br><span class="line">                differ--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(hash[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">0</span>)&#123;</span><br><span class="line">                differ++;</span><br><span class="line">            &#125;</span><br><span class="line">            hash[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(differ == <span class="number">0</span>)&#123;</span><br><span class="line">                res.add(i - n + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-016.-无重复字符的最长子串"><ahref="https://leetcode.cn/problems/wtcaE1/">LCR 016.无重复字符的最长子串</a></h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长连续子字符串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子字符串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子字符串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10^4</code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul><h4 id="算法分析-14">算法分析</h4><h5 id="滑动窗口-哈希表">滑动窗口 + 哈希表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录字符上一次出现的下标，方便指针回退</span></span><br><span class="line">        Map&lt;Character, Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right &amp;&amp; right &lt; n)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span>(right &lt; n &amp;&amp; !hash.containsKey(s.charAt(right)))&#123;</span><br><span class="line">                hash.put(s.charAt(right), right);</span><br><span class="line">                right++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, right - left);</span><br><span class="line">            <span class="keyword">if</span>(right &gt;= n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//把前面的字符忽略掉，重新定位left</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">lastIdx</span> <span class="operator">=</span> hash.get(s.charAt(right));</span><br><span class="line">            <span class="keyword">while</span>(left &lt; lastIdx + <span class="number">1</span>)&#123;</span><br><span class="line">                hash.remove(s.charAt(left++));</span><br><span class="line">            &#125;</span><br><span class="line">            hash.put(s.charAt(right), right);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="滑动窗口-哈希表优化">滑动窗口 + 哈希表(优化)</h5><p>上面写的时候有点模拟的味道了，内嵌循环可以取消的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录字符上一次出现的下标，方便指针回退</span></span><br><span class="line">        Map&lt;Character, Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (right &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!hash.containsKey(s.charAt(right)))&#123;</span><br><span class="line">                hash.put(s.charAt(right), right);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//left不能回退到当前left之前的位置</span></span><br><span class="line">                left = Math.max(left, hash.get(s.charAt(right)) + <span class="number">1</span>);</span><br><span class="line">                hash.put(s.charAt(right), right);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-020.-回文子串"><ahref="https://leetcode.cn/problems/a7VOhD/">LCR 020. 回文子串</a></h3><p>给定一个字符串 <code>s</code>，请计算这个字符串中有多少个回文子字符串。</p><p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abc&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：三个回文子串: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aaa&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：6个回文子串: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 由小写英文字母组成</li></ul><h4 id="算法分析-15">算法分析</h4><h5 id="二维动态规划">二维动态规划</h5><p><code>dp[i][j]</code>表示子串[i,j]是否是回文子串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">boolean</span> [][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span> [n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(s.charAt(i) == s.charAt(j) &amp;&amp; (j ==i+<span class="number">1</span> || dp[i + <span class="number">1</span>][j - <span class="number">1</span>]))&#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    res++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难">困难</h2><h3 id="lcr-017.-最小覆盖子串"><ahref="https://leetcode.cn/problems/M1oyTv/">LCR 017.最小覆盖子串</a></h3><p>给定两个字符串 <code>s</code> 和 <code>t</code> 。返回 <code>s</code>中包含 <code>t</code> 的所有字符的最短子字符串。如果 <code>s</code>中不存在符合条件的子字符串，则返回空字符串 <code>""</code> 。</p><p>如果 <code>s</code> 中存在多个符合条件的子字符串，返回任意一个。</p><p><strong>注意：</strong> 对于 <code>t</code>中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code>中该字符数量。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot; </span><br><span class="line">解释：最短子字符串 &quot;BANC&quot; 包含了字符串 t 的所有字符 &#x27;A&#x27;、&#x27;B&#x27;、&#x27;C&#x27;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 10^5</code></li><li><code>s</code> 和 <code>t</code> 由英文字母组成</li></ul><h4 id="算法分析-16">算法分析</h4><h5 id="哈希表滑动窗口">哈希表+滑动窗口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> t.length();</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] needHash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            needHash[t.charAt(i)]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">needCnt</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">beginIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; m)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span>(needHash[c] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                needCnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            needHash[c]--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(needCnt == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//去掉不满足条件前缀字符,目的是让left指向第一个需要的字符           此时满足needCnt的情况下，hash表值只可能有2种：负数，0</span></span><br><span class="line">                <span class="keyword">while</span> (left &lt; right &amp;&amp; needHash[s.charAt(left)] &lt; <span class="number">0</span>) needHash[s.charAt(left++)]++;</span><br><span class="line">                <span class="keyword">if</span>(size &gt; right - left + <span class="number">1</span>)&#123;</span><br><span class="line">                    size = right - left + <span class="number">1</span>;</span><br><span class="line">                    beginIndex = left;</span><br><span class="line">                &#125;</span><br><span class="line">                needCnt++;</span><br><span class="line">                needHash[s.charAt(left++)]++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size == Integer.MAX_VALUE? <span class="string">&quot;&quot;</span> : s.substring(beginIndex, size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="链表">链表</h1><h2 id="简单-3">简单</h2><h3 id="lcr-023.-相交链表"><ahref="https://leetcode.cn/problems/3u1WK4/">LCR 023. 相交链表</a></h3><p>给定两个单链表的头节点 <code>headA</code> 和 <code>headB</code>，请找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回<code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交<strong>：</strong></p><p><ahref="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/160_statement.png"><imgsrc="160_statement.png" alt="img" /></a></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须<strong>保持其原始结构</strong> 。</p><p><strong>示例 1：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_1.png"><imgsrc="160_example_1.png" alt="img" /></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Intersected at &#x27;8&#x27;</span><br><span class="line">解释：相交节点的值为 8 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。</span><br><span class="line">在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_2.png"><imgsrc="160_example_2.png" alt="img" /></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Intersected at &#x27;2&#x27;</span><br><span class="line">解释：相交节点的值为 2 （注意，如果两个链表相交则不能为 0）。</span><br><span class="line">从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。</span><br><span class="line">在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><ahref="https://assets.leetcode.com/uploads/2018/12/13/160_example_3.png"><imgsrc="160_example_3.png" alt="img" /></a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。</span><br><span class="line">由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">这两个链表不相交，因此返回 null 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>listA</code> 中节点数目为 <code>m</code></li><li><code>listB</code> 中节点数目为 <code>n</code></li><li><code>0 &lt;= m, n &lt;= 3 * 10^4</code></li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li><li><code>0 &lt;= skipA &lt;= m</code></li><li><code>0 &lt;= skipB &lt;= n</code></li><li>如果 <code>listA</code> 和 <code>listB</code>没有交点，<code>intersectVal</code> 为 <code>0</code></li><li>如果 <code>listA</code> 和 <code>listB</code>有交点，<code>intersectVal == listA[skipA + 1] == listB[skipB + 1]</code></li></ul><h4 id="算法分析-17">算法分析</h4><h5 id="双指针-数学">双指针 + 数学</h5><p>数学思路：</p><p>两个指针p、q分别指向headA、headB，同时遍历，如果p || q到达各自链表终点，则把指针置为另一个链表的头结点继续运行。</p><p>证明：</p><p>假设链表A长度为m，链表B长度为n</p><ol type="1"><li>假如两个链表相交：设相交部分链表长度为c，A不相交部分为a，b不相交部分为b，那按照遍历思路：<ol type="1"><li>如果a == b：那两个指针会同时指向相交结点，循环结束，返回p || q</li><li>如果a ！= b：p指针会走： a + c + b距离 q指针会走 b + c +a距离，两者走的距离相同，因此（第二次交叉遍历）会到达相交结点</li></ol></li><li>假如两个链表不相交：设相交部分链表长度为c，A不相交部分为a，b不相交部分为b，那按照遍历思路：<ol type="1"><li>a == b：同时走到null，返回</li><li>a ！= b：交叉后，会同时走 m + n个距离，走向null，返回</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(headA == <span class="literal">null</span> || headB == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(p != q)&#123;</span><br><span class="line">            p = p == <span class="literal">null</span> ? headB : p.next;</span><br><span class="line">            q = q == <span class="literal">null</span> ? headA : q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-024.-反转链表"><ahref="https://leetcode.cn/problems/UHnkqh/">LCR 024. 反转链表</a></h3><p>给定单链表的头节点 <code>head</code>，请反转链表，并返回反转后的链表的头节点。</p><p><strong>示例 1：</strong></p><figure><img src="rev1ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5]</span><br><span class="line">输出：[5,4,3,2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="rev1ex2.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2]</span><br><span class="line">输出：[2,1]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围是 <code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><h4 id="算法分析-18">算法分析</h4><h5 id="头插法">头插法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> p;</span><br><span class="line">    <span class="keyword">while</span> (next != <span class="literal">null</span>)&#123;</span><br><span class="line">        next = p.next;</span><br><span class="line"></span><br><span class="line">        p.next = dummy.next;</span><br><span class="line">        dummy.next = p;</span><br><span class="line">        p = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-027.-回文链表"><ahref="https://leetcode.cn/problems/aMhZSa/">LCR 027. 回文链表</a></h3><p>给定一个链表的 <strong>头节点</strong> <code>head</code><strong>，</strong>请判断其是否为回文链表。</p><p>如果一个链表是回文，那么链表节点序列从前往后看和从后往前看是相同的。</p><p><strong>示例 1：</strong></p><p><strong><img src="1626421737-LjXceN-image.png"alt="img" /></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [1,2,3,3,2,1]</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><strong><img src="1626422231-wgvnWh-image.png"alt="img" /></strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [1,2]</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表 L 的长度范围为 <code>[1, 10^5]</code></li><li><code>0 &lt;= node.val &lt;= 9</code></li></ul><h4 id="算法分析-19">算法分析</h4><p>涉及到回文类的题目，值都是123321的，对于链表，反转链表就是不错的思路</p><p>也可以用栈这种数据结构</p><h5 id="寻找中点-翻转链表">寻找中点 + 翻转链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">middle</span> <span class="operator">=</span> findMiddle(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> middle.next;</span><br><span class="line">        q = reverse(q);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val != q.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">findMiddle</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-3">中等</h2><h3 id="lcr-021.-删除链表的倒数第-n-个结点"><ahref="https://leetcode.cn/problems/SLwz0R/">LCR 021. 删除链表的倒数第 N个结点</a></h3><p>给定一个链表，删除链表的倒数第 <code>n</code>个结点，并且返回链表的头结点。</p><p><strong>示例 1：</strong></p><figure><img src="remove_ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><h4 id="算法分析-20">算法分析</h4><h5 id="统计结点个数">统计结点个数</h5><p>最直接的思路（两趟遍历）：遍历统计链表结点个数，随后减去n就是顺序第几个元素，再次遍历到要删除结点的位置删掉即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">null</span>)&#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    p = head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count - n; i++) &#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next = p.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双指针快慢指针">双指针（快慢指针）</h5><p>还有一个规律，快慢指针。快指针位于慢指针前面n个结点，随后一同到达终点，最终慢指针停的地方就是要删除的结点。</p><p>当然如果算上哨兵结点，那就慢指针最后停到要删除结点的前一个结点位置处即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(-<span class="number">1</span>, head);</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> dummy;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(n-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">        p = p.next;</span><br><span class="line">        pre = pre.next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre.next = pre.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-022.-环形链表-ii"><ahref="https://leetcode.cn/problems/c32eOV/">LCR 022. 环形链表II</a></h3><p>给定一个链表，返回链表开始入环的第一个节点。 从链表的头节点开始沿着<code>next</code>指针进入环的第一个节点为环的入口节点。如果链表无环，则返回<code>null</code>。</p><p>为了表示给定链表中的环，我们使用整数 <code>pos</code>来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 <code>pos</code>是 <code>-1</code>，则在该链表中没有环。<strong>注意，<code>pos</code>仅仅是用于标识环的情况，并不会作为参数传递到函数中。</strong></p><p><strong>说明：</strong>不允许修改给定的链表。</p><p><strong>示例 1：</strong></p><figure><img src="circularlinkedlist.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,2,0,-4], pos = 1</span><br><span class="line">输出：返回索引为 1 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第二个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="circularlinkedlist_test2.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], pos = 0</span><br><span class="line">输出：返回索引为 0 的链表节点</span><br><span class="line">解释：链表中有一个环，其尾部连接到第一个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure><img src="circularlinkedlist_test3.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], pos = -1</span><br><span class="line">输出：返回 null</span><br><span class="line">解释：链表中没有环。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表中节点的数目范围在范围 <code>[0, 10^4]</code> 内</li><li><code>-10^5 &lt;= Node.val &lt;= 10^5</code></li><li><code>pos</code> 的值为 <code>-1</code>或者链表中的一个有效索引</li></ul><h4 id="算法分析-21">算法分析</h4><h5 id="快慢指针">快慢指针</h5><p><img src="image-20231124105349953.png" alt="image-20231124105349953" style="zoom:50%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">detectCycle</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            <span class="keyword">if</span>(fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">                fast = fast.next.next;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fast == slow)&#123;</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">                <span class="keyword">while</span> (p != slow)&#123;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(p == slow)&#123;</span><br><span class="line">                    <span class="keyword">return</span> p;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-025.-两数相加-ii"><ahref="https://leetcode.cn/problems/lMSNwu/">LCR 025. 两数相加II</a></h3><p>给定两个 <strong>非空链表</strong> <code>l1</code>和 <code>l2</code>来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><p><strong>示例1：</strong></p><figure><img src="1626420025-fZfzMX-image.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [7,2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[7,8,0,7]</span><br></pre></td></tr></table></figure><p><strong>示例2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [2,4,3], l2 = [5,6,4]</span><br><span class="line">输出：[8,0,7]</span><br></pre></td></tr></table></figure><p><strong>示例3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：l1 = [0], l2 = [0]</span><br><span class="line">输出：[0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表的长度范围为<code>[1, 100]</code></li><li><code>0 &lt;= node.val &lt;= 9</code></li><li>输入数据保证链表代表的数字无前导 0</li></ul><h4 id="算法分析-22">算法分析</h4><p>题目中的加法，相对于正常加法计算来说是反的。</p><p>那可以利用数据结构：栈的特性来处理；也可以用递归的方式；最次也可以用翻转链表</p><h5 id="栈">栈</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        Deque&lt;Integer&gt; stack1 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; stack2 = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">while</span>(l1 != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack1.push(l1.val);</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(l2 != <span class="literal">null</span>)&#123;</span><br><span class="line">            stack2.push(l2.val);</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!stack1.isEmpty() || !stack2.isEmpty() || carry != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> stack1.isEmpty()? <span class="number">0</span> : stack1.pop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> stack2.isEmpty()? <span class="number">0</span> : stack2.pop();</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> a + b + carry;</span><br><span class="line">            carry = cur /<span class="number">10</span>;</span><br><span class="line">            cur %= <span class="number">10</span>;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">curNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(cur);</span><br><span class="line">            curNode.next = ans;</span><br><span class="line">            ans = curNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="递归">递归</h5><p>参考<ahref="https://leetcode.cn/problems/lMSNwu/solutions/2447630/o1kong-jian-fu-za-du-1ms-bu-fan-zhuan-li-zsji/?envType=study-plan-v2&amp;envId=coding-interviews-special">LCR025. 两数相加 II - 力扣（LeetCode）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="comment">//虚拟头节点 ,保存结果</span></span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class="line">        <span class="comment">//计算两个链表的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">le1</span> <span class="operator">=</span> <span class="number">0</span>, le2 = <span class="number">0</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> l1, p2 = l2;</span><br><span class="line">        <span class="keyword">while</span> (p1 != <span class="literal">null</span> || p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p1 != <span class="literal">null</span>) &#123;</span><br><span class="line">                le1++;</span><br><span class="line">                p1 = p1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                le2++;</span><br><span class="line">                p2 = p2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//l1 长度保证大于  l2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> dfs(le1 &gt;= le2 ? l1 : l2, le1 &gt;= le2 ? l2 : l1, Math.abs(le1 - le2));</span><br><span class="line">        <span class="comment">//处理进位</span></span><br><span class="line">        <span class="keyword">if</span> (cur &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(cur);</span><br><span class="line">            node.next = dummy.next;</span><br><span class="line">            dummy.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> differ</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值是进位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(ListNode l1, ListNode l2, <span class="type">int</span> differ)</span> &#123;</span><br><span class="line">        <span class="comment">//终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(l1.next == <span class="literal">null</span> &amp;&amp; l2.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> l1.val + l2.val;</span><br><span class="line">            dummy.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(cur % <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">return</span> cur / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果大链表还没遍历到和小链表同位置，小链表原地打转,求和不带上小链表</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> dfs(l1.next, differ &lt;= <span class="number">0</span> ? l2.next : l2, differ - <span class="number">1</span>);</span><br><span class="line">        cur = l1.val + (differ &lt;= <span class="number">0</span>? l2.val : <span class="number">0</span>) + cur;</span><br><span class="line">        <span class="comment">//头插法</span></span><br><span class="line">        dummy.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(cur % <span class="number">10</span>, dummy.next);</span><br><span class="line">        <span class="keyword">return</span> cur / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-026.-重排链表"><ahref="https://leetcode.cn/problems/LGjMqU/">LCR 026. 重排链表</a></h3><p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表<code>L</code> 表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L0 → L1 → … → Ln-1 → Ln</span><br></pre></td></tr></table></figure><p>请将其重新排列后变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L0 → Ln → L1 → Ln-1 → L2 → Ln-2 → …</span><br></pre></td></tr></table></figure><p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p><strong>示例 1:</strong></p><figure><img src="1626420311-PkUiGI-image.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [1,2,3,4]</span><br><span class="line">输出: [1,4,2,3]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure><img src="1626420320-YUiulT-image.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: head = [1,2,3,4,5]</span><br><span class="line">输出: [1,5,2,4,3]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>链表的长度范围为 <code>[1, 5 * 10^4]</code></li><li><code>1 &lt;= node.val &lt;= 1000</code></li></ul><h4 id="算法分析-23">算法分析</h4><p>既然链表下标不好计算，把它放到线性表中，就可以随机访问了</p><h5 id="线性表">线性表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">//作为链表数组</span></span><br><span class="line">        List&lt;ListNode&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span>)&#123;</span><br><span class="line">            list.add(p);</span><br><span class="line">            p = p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; ) &#123;</span><br><span class="line">            list.get(i).next = list.get(n);</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">if</span>(i == n)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            list.get(n).next = list.get(i);</span><br><span class="line">            n--;</span><br><span class="line">        &#125;</span><br><span class="line">        list.get(n).next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="寻找中点-翻转链表-合并链表">寻找中点 + 翻转链表 + 合并链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reorderList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">middle</span> <span class="operator">=</span> findMiddle(head);</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l1</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">l2</span> <span class="operator">=</span> middle.next;</span><br><span class="line">        middle.next = <span class="literal">null</span>;</span><br><span class="line">        l2 = reverse(l2);</span><br><span class="line">        mergeList(l1, l2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">findMiddle</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode head)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mergeList</span><span class="params">(ListNode l1, ListNode l2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">p</span> <span class="operator">=</span> l1;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">q</span> <span class="operator">=</span> l2;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">null</span> &amp;&amp; q != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">p_temp</span> <span class="operator">=</span> p.next;</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">q_temp</span> <span class="operator">=</span> q.next;</span><br><span class="line"></span><br><span class="line">            p.next = q;</span><br><span class="line">            p = p_temp;</span><br><span class="line">            q.next = p;</span><br><span class="line">            q = q_temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-028.-扁平化多级双向链表"><ahref="https://leetcode.cn/problems/Qv1Da2/">LCR 028.扁平化多级双向链表</a></h3><p>多级双向链表中，除了指向下一个节点和前一个节点指针之外，它还有一个子链表指针，可能指向单独的双向链表。这些子列表也可能会有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p><p>给定位于列表第一级的头节点，请扁平化列表，即将这样的多级双向链表展平成普通的双向链表，使所有结点出现在单级双链表中。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</span><br><span class="line">输出：[1,2,3,7,8,11,12,9,10,4,5,6]</span><br><span class="line">解释：</span><br></pre></td></tr></table></figure><p>输入的多级列表如下图所示：</p><figure><img src="multilevellinkedlist.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>扁平化后的链表如下图：</p><figure><img src="multilevellinkedlistflattened.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,null,3]</span><br><span class="line">输出：[1,3,2]</span><br><span class="line">解释：</span><br><span class="line"></span><br><span class="line">输入的多级列表如下图所示：</span><br><span class="line"></span><br><span class="line">  1---2---NULL</span><br><span class="line">  |</span><br><span class="line">  3---NULL</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p><strong>如何表示测试用例中的多级链表？</strong></p><p>以 <strong>示例 1</strong> 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1---2---3---4---5---6--NULL</span><br><span class="line">        |</span><br><span class="line">        7---8---9---10--NULL</span><br><span class="line">            |</span><br><span class="line">            11--12--NULL</span><br></pre></td></tr></table></figure><p>序列化其中的每一级之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5,6,null]</span><br><span class="line">[7,8,9,10,null]</span><br><span class="line">[11,12,null]</span><br></pre></td></tr></table></figure><p>为了将每一级都序列化到一起，我们需要每一级中添加值为 null的元素，以表示没有节点连接到上一级的上级节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5,6,null]</span><br><span class="line">[null,null,7,8,9,10,null]</span><br><span class="line">[null,11,12,null]</span><br></pre></td></tr></table></figure><p>合并所有序列化结果，并去除末尾的 null 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>节点数目不超过 <code>1000</code></li><li><code>1 &lt;= Node.val &lt;= 10^5</code></li></ul><h4 id="算法分析-24">算法分析</h4><p>一眼看上去就可以用递归的思路解决，那对于这题可以用<strong>深度优先搜索</strong></p><h5 id="深度优先搜索">深度优先搜索</h5><p>遍历链表，遇到child不为null的结点，直接递归去处理子节点，当递归到最深处的时候，回溯的过程中，开始处理链表之间的拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">flatten</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        dfs(head);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> head</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回当前层级链表的最后一个结点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">dfs</span><span class="params">(Node head)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">last</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">next</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            <span class="comment">//链表扁平化操作</span></span><br><span class="line">            <span class="keyword">if</span>(cur.child != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">Node</span> <span class="variable">childLast</span> <span class="operator">=</span> dfs(cur.child);</span><br><span class="line">                cur.next = cur.child;</span><br><span class="line">                cur.child.prev = cur;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(next != <span class="literal">null</span>)&#123;</span><br><span class="line">                    childLast.next = next;</span><br><span class="line">                    next.prev = childLast;</span><br><span class="line">                &#125;</span><br><span class="line">                cur.child = <span class="literal">null</span>;</span><br><span class="line">                last = childLast;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果整条链表child都是null，那就必须记录last位置</span></span><br><span class="line">                last = cur;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-029.-循环有序列表的插入"><ahref="https://leetcode.cn/problems/4ueAj6/">LCR 029.循环有序列表的插入</a></h3><p>给定<strong>循环单调非递减列表</strong>中的一个点，写一个函数向这个列表中插入一个新元素<code>insertVal</code> ，使这个列表仍然是循环升序的。</p><p>给定的可以是这个列表中任意一个顶点的指针，并不一定是这个列表中最小元素的指针。</p><p>如果有多个满足条件的插入位置，可以选择任意一个位置插入新的值，插入后整个列表仍然保持有序。</p><p>如果列表为空（给定的节点是<code>null</code>），需要创建一个循环有序列表并返回这个节点。否则。请返回原先给定的节点。</p><p><strong>示例 1：</strong></p><figure><imgsrc="https://assets.leetcode.com/uploads/2019/01/19/example_1_before_65p.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [3,4,1], insertVal = 2</span><br><span class="line">输出：[3,4,1,2]</span><br><span class="line">解释：在上图中，有一个包含三个元素的循环有序列表，你获得值为 3 的节点的指针，我们需要向表中插入元素 2 。新插入的节点应该在 1 和 3 之间，插入之后，整个列表如上图所示，最后返回节点 3 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], insertVal = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：列表为空（给定的节点是 null），创建一个循环有序列表并返回这个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], insertVal = 0</span><br><span class="line">输出：[1,0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>0 &lt;= Number of Nodes &lt;= 5 * 10^4</code></li><li><code>-10^6 &lt;= Node.val &lt;= 10^6</code></li><li><code>-10^6 &lt;= insertVal &lt;= 10^6</code></li></ul><h4 id="算法分析-25">算法分析</h4><h5 id="模拟寻找插入点">模拟寻找插入点</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">insert</span><span class="params">(Node head, <span class="type">int</span> insertVal)</span> &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(insertVal);</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>)&#123;</span><br><span class="line">            node.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(head.next == head)&#123;</span><br><span class="line">            head.next = node;</span><br><span class="line">            node.next = head;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> head, q = head.next;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">min</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//寻找插入点</span></span><br><span class="line">        <span class="keyword">while</span>(q != head)&#123;</span><br><span class="line">            <span class="keyword">if</span>(insertVal &gt;= p.val &amp;&amp; insertVal &lt;= q.val)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//递减阶段（下一轮增循环开始）</span></span><br><span class="line">            <span class="keyword">if</span>(p.val &gt; q.val)&#123;</span><br><span class="line">                <span class="keyword">if</span>(insertVal &lt; q.val || insertVal &gt; p.val)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        p.next = node;</span><br><span class="line">        node.next = q;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="哈希表">哈希表</h1><h2 id="简单-4">简单</h2><h3 id="lcr-032.-有效的字母异位词"><ahref="https://leetcode.cn/problems/dKk3P7/">LCR 032.有效的字母异位词</a></h3><p>给定两个字符串 <code>s</code> 和 <code>t</code>，编写一个函数来判断它们是不是一组变位词（字母异位词）。</p><p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code>中每个字符出现的次数都相同且<strong>字符顺序不完全相同</strong>，则称<code>*s*</code> 和 <code>*t*</code> 互为变位词（字母异位词）。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li><li><code>s</code> and <code>t</code> 仅包含小写字母</li></ul><p><strong>进阶:</strong> 如果输入字符串包含 unicode字符怎么办？你能否调整你的解法来应对这种情况？</p><h4 id="算法分析-26">算法分析</h4><h5 id="哈希表-1">哈希表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(t) || s.length() != t.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            hash[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            hash[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-034.-验证外星语词典"><ahref="https://leetcode.cn/problems/lwyVBB/">LCR 034.验证外星语词典</a></h3><p>某种外星语也使用英文小写字母，但可能顺序 <code>order</code>不同。字母表的顺序（<code>order</code>）是一些小写字母的排列。</p><p>给定一组用外星语书写的单词 <code>words</code>，以及其字母表的顺序<code>order</code>，只有当给定的单词在这种外星语中按字典序排列时，返回<code>true</code>；否则，返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [&quot;hello&quot;,&quot;leetcode&quot;], order = &quot;hlabcdefgijkmnopqrstuvwxyz&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：在该语言的字母表中，&#x27;h&#x27; 位于 &#x27;l&#x27; 之前，所以单词序列是按字典序排列的。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [&quot;word&quot;,&quot;world&quot;,&quot;row&quot;], order = &quot;worldabcefghijkmnpqstuvxyz&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：在该语言的字母表中，&#x27;d&#x27; 位于 &#x27;l&#x27; 之后，那么 words[0] &gt; words[1]，因此单词序列不是按字典序排列的。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：words = [&quot;apple&quot;,&quot;app&quot;], order = &quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：当前三个字符 &quot;app&quot; 匹配时，第二个字符串相对短一些，然后根据词典编纂规则 &quot;apple&quot; &gt; &quot;app&quot;，因为 &#x27;l&#x27; &gt; &#x27;∅&#x27;，其中 &#x27;∅&#x27; 是空白字符，定义为比任何其他字符都小（更多信息）。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= words.length &lt;= 100</code></li><li><code>1 &lt;= words[i].length &lt;= 20</code></li><li><code>order.length == 26</code></li><li>在 <code>words[i]</code> 和 <code>order</code>中的所有字符都是英文小写字母。</li></ul><h4 id="算法分析-27">算法分析</h4><p>本题中，单词是按照外星文写的，那每个单词的字母之间是满足条件的，那只要判断字典中相邻单词之间的字母满足字母表即可。</p><h5 id="一趟遍历-hash表">一趟遍历 + hash表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAlienSorted</span><span class="params">(String[] words, String order)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="type">char</span>[] chars = order.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        hash[chars[i] - <span class="string">&#x27;a&#x27;</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; words.length; i++) &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//每次比较相邻两个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; words[i-<span class="number">1</span>].length() &amp;&amp; j &lt; words[i].length(); j++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> hash[words[i-<span class="number">1</span>].charAt(j) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">curr</span> <span class="operator">=</span> hash[words[i].charAt(j) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="keyword">if</span>(prev &gt; curr)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prev &lt; curr)&#123;<span class="comment">//剪枝</span></span><br><span class="line">                valid = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">            <span class="keyword">if</span>(words[i].length() &lt; words[i-<span class="number">1</span>].length())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等-4">中等</h2><h3 id="lcr-030.-o1-时间插入删除和获取随机元素"><ahref="https://leetcode.cn/problems/FortPu/">LCR 030. O(1)时间插入、删除和获取随机元素</a></h3><p>设计一个支持在<em>平均</em> 时间复杂度 <strong>O(1)</strong>下，执行以下操作的数据结构：</p><ul><li><code>insert(val)</code>：当元素 <code>val</code> 不存在时返回<code>true</code> ，并向集合中插入该项，否则返回 <code>false</code>。</li><li><code>remove(val)</code>：当元素 <code>val</code> 存在时返回<code>true</code> ，并从集合中移除该项，否则返回 <code>false</code>。</li><li><code>getRandom</code>：随机返回现有集合中的一项。每个元素应该有<strong>相同的概率</strong> 被返回。</li></ul><p><strong>示例 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">输入: inputs = [&quot;RandomizedSet&quot;, &quot;insert&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;, &quot;remove&quot;, &quot;insert&quot;, &quot;getRandom&quot;]</span><br><span class="line">[[], [1], [2], [2], [], [1], [2], []]</span><br><span class="line">输出: [null, true, false, true, 2, true, false, 2]</span><br><span class="line">解释:</span><br><span class="line">RandomizedSet randomSet = new RandomizedSet();  // 初始化一个空的集合</span><br><span class="line">randomSet.insert(1); // 向集合中插入 1 ， 返回 true 表示 1 被成功地插入</span><br><span class="line"></span><br><span class="line">randomSet.remove(2); // 返回 false，表示集合中不存在 2 </span><br><span class="line"></span><br><span class="line">randomSet.insert(2); // 向集合中插入 2 返回 true ，集合现在包含 [1,2] </span><br><span class="line"></span><br><span class="line">randomSet.getRandom(); // getRandom 应随机返回 1 或 2 </span><br><span class="line">  </span><br><span class="line">randomSet.remove(1); // 从集合中移除 1 返回 true 。集合现在包含 [2] </span><br><span class="line"></span><br><span class="line">randomSet.insert(2); // 2 已在集合中，所以返回 false </span><br><span class="line"></span><br><span class="line">randomSet.getRandom(); // 由于 2 是集合中唯一的数字，getRandom 总是返回 2 </span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>-2^31 &lt;= val &lt;= 2^31 - 1</code></li><li>最多进行<code>2 * 10^5</code> 次 <code>insert</code> ，<code>remove</code> 和 <code>getRandom</code> 方法调用</li><li>当调用 <code>getRandom</code> 方法时，集合中至少有一个元素</li></ul><h4 id="算法分析-28">算法分析</h4><p>本题中，既然需要随机访问，数组是再适合不过的数据结构，但又要保证O(1)的插入删除效率，hash表是必须要的：</p><ul><li>插入：在数组尾部添加元素即可</li><li>删除：删除对于数组而言，耗性能的是删除后的移动元素，那我可以不让他移动，具体做法就是将要删除元素放到集合末尾（与集合尾部元素交换），随后直接删除尾部元素即可</li></ul><h5 id="变长数组-哈希表">变长数组 + 哈希表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RandomizedSet</span> &#123;</span><br><span class="line"></span><br><span class="line">    Random random;</span><br><span class="line"></span><br><span class="line">    List&lt;Integer&gt; lists;</span><br><span class="line"></span><br><span class="line">    Map&lt;Integer, Integer&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RandomizedSet</span><span class="params">()</span> &#123;</span><br><span class="line">        random = <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> lists.size();</span><br><span class="line">        lists.add(val);</span><br><span class="line">        map.put(val, idx);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Removes a value from the set. Returns true if the set contained the specified element. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!map.containsKey(val))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">idx</span> <span class="operator">=</span> map.get(val);</span><br><span class="line"><span class="comment">//        lists.remove(idx);   --  不能直接remove，是O(n)的时间复杂度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastIdx</span> <span class="operator">=</span> lists.size() - <span class="number">1</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">last</span> <span class="operator">=</span> lists.get(lastIdx);</span><br><span class="line">        lists.set(idx, last);</span><br><span class="line">        <span class="comment">//更新map</span></span><br><span class="line">        map.put(last, idx);</span><br><span class="line">        <span class="comment">//将val从map移除：这里map要置于put后面，预防当集合只有一个元素的时候，map删除失败</span></span><br><span class="line">        map.remove(val);</span><br><span class="line">        lists.remove(lastIdx);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Get a random element from the set. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getRandom</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> random.nextInt(lists.size());</span><br><span class="line">        <span class="keyword">return</span> lists.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-031.-lru-缓存"><ahref="https://leetcode.cn/problems/OrIXps/">LCR 031. LRU 缓存</a></h3><p>运用所掌握的数据结构，设计和实现一个 <ahref="https://baike.baidu.com/item/LRU">LRU (Least RecentlyUsed，最近最少使用) 缓存机制</a> 。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以正整数作为容量<code>capacity</code> 初始化 LRU 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code>存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code>如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;LRUCache&quot;, &quot;put&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;put&quot;, &quot;get&quot;, &quot;get&quot;, &quot;get&quot;]</span><br><span class="line">[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]</span><br><span class="line">输出</span><br><span class="line">[null, null, null, 1, null, -1, null, -1, 3, 4]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">LRUCache lRUCache = new LRUCache(2);</span><br><span class="line">lRUCache.put(1, 1); // 缓存是 &#123;1=1&#125;</span><br><span class="line">lRUCache.put(2, 2); // 缓存是 &#123;1=1, 2=2&#125;</span><br><span class="line">lRUCache.get(1);    // 返回 1</span><br><span class="line">lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 &#123;1=1, 3=3&#125;</span><br><span class="line">lRUCache.get(2);    // 返回 -1 (未找到)</span><br><span class="line">lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 &#123;4=4, 3=3&#125;</span><br><span class="line">lRUCache.get(1);    // 返回 -1 (未找到)</span><br><span class="line">lRUCache.get(3);    // 返回 3</span><br><span class="line">lRUCache.get(4);    // 返回 4</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= capacity &lt;= 3000</code></li><li><code>0 &lt;= key &lt;= 10000</code></li><li><code>0 &lt;= value &lt;= 10^5</code></li><li>最多调用 <code>2 * 10^5</code> 次 <code>get</code> 和<code>put</code></li></ul><h4 id="算法分析-29">算法分析</h4><h5 id="哈希表自定义双向链表">哈希表+自定义双向链表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">DLinkedNode</span>&#123;</span><br><span class="line">        <span class="type">int</span> key;</span><br><span class="line">        <span class="type">int</span> value;</span><br><span class="line">        DLinkedNode prev;</span><br><span class="line">        DLinkedNode next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">DLinkedNode</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//作用：快速得到某个缓存的关键字</span></span><br><span class="line">    Map&lt;Integer, DLinkedNode&gt; hash ;</span><br><span class="line"></span><br><span class="line">    DLinkedNode head, tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line"></span><br><span class="line">        hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        tail = <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>();</span><br><span class="line">        head.next = tail;</span><br><span class="line">        tail.prev = head;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">dLinkedNode</span> <span class="operator">=</span> hash.get(key);</span><br><span class="line">        <span class="keyword">if</span>(dLinkedNode != <span class="literal">null</span>)&#123;</span><br><span class="line">            moveToHead(dLinkedNode);</span><br><span class="line">            <span class="keyword">return</span> dLinkedNode.value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(hash.containsKey(key))&#123;</span><br><span class="line">            <span class="type">DLinkedNode</span> <span class="variable">node</span> <span class="operator">=</span> hash.get(key);</span><br><span class="line">            node.value = value;</span><br><span class="line">            <span class="comment">//更新也要移动到头部</span></span><br><span class="line">            moveToHead(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">addNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DLinkedNode</span>(key, value);</span><br><span class="line">        addToHead(addNode);</span><br><span class="line">        hash.put(key, addNode);</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; capacity) &#123;</span><br><span class="line">            <span class="type">DLinkedNode</span> <span class="variable">tailNode</span> <span class="operator">=</span> removeTail();</span><br><span class="line">            hash.remove(tailNode.key);</span><br><span class="line">            size--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveToHead</span><span class="params">(DLinkedNode node)</span>&#123;</span><br><span class="line">        removeNode(node);</span><br><span class="line">        addToHead(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素的头插</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToHead</span><span class="params">(DLinkedNode node)</span>&#123;</span><br><span class="line">        node.next = head.next;</span><br><span class="line">        node.prev = head;</span><br><span class="line"></span><br><span class="line">        head.next.prev = node;</span><br><span class="line">        head.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(DLinkedNode node)</span>&#123;</span><br><span class="line">        node.prev.next = node.next;</span><br><span class="line">        node.next.prev = node.prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> DLinkedNode <span class="title function_">removeTail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DLinkedNode</span> <span class="variable">remove</span> <span class="operator">=</span> tail.prev;</span><br><span class="line">        removeNode(remove);</span><br><span class="line">        <span class="keyword">return</span> remove;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-033.-字母异位词分组"><ahref="https://leetcode.cn/problems/sfvd7V/">LCR 033.字母异位词分组</a></h3><p>给定一个字符串数组 <code>strs</code> ，将 <strong>变位词</strong>组合在一起。 可以按任意顺序返回结果列表。</p><p><strong>注意：</strong>若两个字符串中每个字符出现的次数都相同，则称它们互为变位词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 10^4</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅包含小写字母</li></ul><h4 id="算法分析-30">算法分析</h4><h5 id="哈希表-排序">哈希表 + 排序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; hash = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">char</span>[] chars = str.toCharArray();</span><br><span class="line">            Arrays.sort(chars);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sortStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(hash.containsKey(sortStr))&#123;</span><br><span class="line">                List&lt;String&gt; containslist = hash.get(sortStr);</span><br><span class="line">                containslist.add(str);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                list.add(str);</span><br><span class="line">                hash.put(sortStr, list);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; listEntry : hash.entrySet()) &#123;</span><br><span class="line">            ans.add(listEntry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-035.-最小时间差"><ahref="https://leetcode.cn/problems/569nqc/">LCR 035. 最小时间差</a></h3><p>给定一个 24 小时制（小时:分钟<strong>"HH:MM"</strong>）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：timePoints = [&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：timePoints = [&quot;00:00&quot;,&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= timePoints.length &lt;= 2 * 10^4</code></li><li><code>timePoints[i]</code> 格式为 <strong>"HH:MM"</strong></li></ul><h4 id="算法分析-31">算法分析</h4><p>本题，最直观的解决办法就是排序，然后顺序遍历，结果一定存在于两个相邻时间之间。</p><h5 id="排序">排序</h5><p>注意：</p><ol type="1"><li>首尾时间可能差距很小，要考虑在内</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> &#123;</span><br><span class="line">        Collections.sort(timePoints);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">t0TimeMinutes</span> <span class="operator">=</span> toMinute(timePoints.get(<span class="number">0</span>));</span><br><span class="line">        <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> t0TimeMinutes;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; timePoints.size(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> toMinute(timePoints.get(i));</span><br><span class="line">            ans = Math.min(ans, cur - pre);</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首尾时间差</span></span><br><span class="line">        ans = Math.min(ans, t0TimeMinutes + <span class="number">1440</span> - toMinute(timePoints.get(timePoints.size() - <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">toMinute</span><span class="params">(String time)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((time.charAt(<span class="number">0</span>) - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (time.charAt(<span class="number">1</span>) - <span class="string">&#x27;0&#x27;</span>)) * <span class="number">60</span> + ((time.charAt(<span class="number">3</span>) - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (time.charAt(<span class="number">4</span>) - <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="鸽巢原理优化">鸽巢原理优化</h5><p><strong>鸽巢原理</strong>（the pigeonholeprinciple），又称为鸽笼原理、<strong>抽屉原理</strong>（the drawerprinciple）。常被用于证明<strong>存在性证明</strong>，和<strong>求最坏情况下的解</strong>。</p><p>结果有1440种情况，那给定集合如果有超过1440个元素，那必然存在时间冲突的数据，直接返回0即可。在代码前加入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> &#123;</span><br><span class="line">    <span class="comment">//鸽巢原理</span></span><br><span class="line">    <span class="keyword">if</span>(timePoints.size() &gt; <span class="number">1440</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.sort(timePoints);</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">t0TimeMinutes</span> <span class="operator">=</span> toMinute(timePoints.get(<span class="number">0</span>));</span><br><span class="line">    <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> t0TimeMinutes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; timePoints.size(); i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> toMinute(timePoints.get(i));</span><br><span class="line">        ans = Math.min(ans, cur - pre);</span><br><span class="line">        pre = cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//首尾时间差</span></span><br><span class="line">    ans = Math.min(ans, t0TimeMinutes + <span class="number">1440</span> - toMinute(timePoints.get(timePoints.size() - <span class="number">1</span>)));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="栈-1">栈</h1><h2 id="中等-5">中等</h2><h3 id="lcr-036.-逆波兰表达式求值"><ahref="https://leetcode.cn/problems/8Zf90G/">LCR 036.逆波兰表达式求值</a></h3><p>根据<ahref="https://baike.baidu.com/item/逆波兰式/128437">逆波兰表示法</a>，求该后缀表达式的计算结果。</p><p>有效的算符包括<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p><strong>说明：</strong></p><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为0 的情况。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]</span><br><span class="line">输出：6</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br><span class="line">输出：22</span><br><span class="line">解释：</span><br><span class="line">该算式转化为常见的中缀算术表达式为：</span><br><span class="line">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">= ((10 * 0) + 17) + 5</span><br><span class="line">= (0 + 17) + 5</span><br><span class="line">= 17 + 5</span><br><span class="line">= 22</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= tokens.length &lt;= 10^4</code></li><li><code>tokens[i]</code>要么是一个算符（<code>"+"</code>、<code>"-"</code>、<code>"*"</code> 或<code>"/"</code>），要么是一个在范围 <code>[-200, 200]</code>内的整数</li></ul><p><strong>逆波兰表达式：</strong></p><p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p><ul><li>平常使用的算式则是一种中缀表达式，如<code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li><li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code>。</li></ul><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，上式即便写成<code>1 2 + 3 4 + *</code>也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中。</li></ul><h4 id="算法分析-32">算法分析</h4><p>这种运算式子、波兰表达式、后缀等等题，都可用栈这个数据结构进行辅助操作，保证一个先入后出的特性：</p><h5 id="辅助栈">辅助栈</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (token)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;+&quot;</span> -&gt;&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    stack.push(a + b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;-&quot;</span> -&gt;&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="comment">//减法保证运算顺序</span></span><br><span class="line">                    stack.push(b - a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;*&quot;</span> -&gt;&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    stack.push(a * b);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;/&quot;</span> -&gt;&#123;</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    <span class="comment">//除法保证运算顺序</span></span><br><span class="line">                    stack.push(b / a);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">default</span> -&gt;  stack.push(Integer.parseInt(token));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.pop();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-037.-行星碰撞"><ahref="https://leetcode.cn/problems/XagZNi/">LCR 037. 行星碰撞</a></h3><p>给定一个整数数组 <code>asteroids</code>，表示在同一行的小行星。</p><p>对于数组中的每一个元素，其绝对值表示小行星的大小，正负表示小行星的移动方向（正表示向右移动，负表示向左移动）。每一颗小行星以相同的速度移动。</p><p>找出碰撞后剩下的所有小行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：asteroids = [5,10,-5]</span><br><span class="line">输出：[5,10]</span><br><span class="line">解释：10 和 -5 碰撞后只剩下 10 。 5 和 10 永远不会发生碰撞。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：asteroids = [8,-8]</span><br><span class="line">输出：[]</span><br><span class="line">解释：8 和 -8 碰撞后，两者都发生爆炸。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：asteroids = [10,2,-5]</span><br><span class="line">输出：[10]</span><br><span class="line">解释：2 和 -5 发生碰撞后剩下 -5 。10 和 -5 发生碰撞后剩下 10 。</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：asteroids = [-2,-1,1,2]</span><br><span class="line">输出：[-2,-1,1,2]</span><br><span class="line">解释：-2 和 -1 向左移动，而 1 和 2 向右移动。 由于移动方向相同的行星不会发生碰撞，所以最终没有行星发生碰撞。 </span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= asteroids.length &lt;= 10^4</code></li><li><code>-1000 &lt;= asteroids[i] &lt;= 1000</code></li><li><code>asteroids[i] != 0</code></li></ul><h4 id="算法分析-33">算法分析</h4><h5 id="辅助栈-1">辅助栈</h5><p>模拟碰撞条件：默认栈头元素 &gt; 0 往右移动，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] asteroidCollision(<span class="type">int</span>[] asteroids) &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; asteroids.length; i++) &#123;</span><br><span class="line">            <span class="comment">//因为不能忽略没有撞到往右去的行星的往左去的行星</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">alive</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//满足碰撞的条件</span></span><br><span class="line">            <span class="keyword">while</span>(alive &amp;&amp; asteroids[i] &lt; <span class="number">0</span> &amp;&amp; !stack.isEmpty() &amp;&amp; stack.peek() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                alive = stack.peek() &lt; -asteroids[i];</span><br><span class="line">                <span class="keyword">if</span>(stack.peek() &lt;= -asteroids[i])&#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(alive)&#123;</span><br><span class="line">                stack.push(asteroids[i]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[stack.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> stack.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            ans[i] = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lcr-038.-每日温度"><ahref="https://leetcode.cn/problems/iIQa4I/">LCR 038. 每日温度</a></h3><p>请根据每日 <code>气温</code> 列表 <code>temperatures</code>，重新生成一个列表，要求其对应位置的输出为：要想观测到更高的气温，至少需要等待的天数。如果气温在这之后都不会升高，请在该位置用<code>0</code> 来代替。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class="line">输出: [1,1,4,2,1,1,0,0]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [30,40,50,60]</span><br><span class="line">输出: [1,1,1,0]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [30,60,90]</span><br><span class="line">输出: [1,1,0]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= temperatures.length &lt;= 10^5</code></li><li><code>30 &lt;= temperatures[i] &lt;= 100</code></li></ul><h4 id="算法分析-34">算法分析</h4><p>用栈模拟可行。栈内存放下标，方便计算</p><h5 id="单调栈">单调栈</h5><p>如何单调：保证栈内元素单调递减即可，最终栈内留存的都是后续没有比他们更高的温度了</p><p>单调递减栈保证：栈内元素都是递减，且遇到比栈内元素大的元素，可以直接出栈，并且出栈元素所要遇到下一个比出栈元素大的元素就是当前遇到的元素，栈内记录下标，即可计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[length];</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt; temperatures[i])&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                ans[pop] = i - pop;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难-1">困难</h2><h3 id="lcr-039.-柱状图中最大的矩形"><ahref="https://leetcode.cn/problems/0ynMMM/">*LCR 039.柱状图中最大的矩形</a></h3><p>给定非负整数数组 <code>heights</code>，数组中的数字用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为<code>1</code> 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例 1:</strong></p><figure><img src="histogram.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：heights = [2,1,5,6,2,3]</span><br><span class="line">输出：10</span><br><span class="line">解释：最大的矩形为图中红色区域，面积为 10</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure><img src="histogram-1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入： heights = [2,4]</span><br><span class="line">输出： 4</span><br></pre></td></tr></table></figure><h4 id="算法分析-35">算法分析</h4><p>从暴力解法上，可以循环针对每一个高度h，向左向右找到它能延伸的最大宽度，然后计算结果即可。</p><p>那我们利用空间换时间的思想，采用单调栈，栈内单调递增，存储高度的下标，这样遇到低高度的直接让栈内元素出栈</p><p>思路借鉴：</p><figure><img src="image-20231205095452462.png" alt="image-20231205095452462" /><figcaption aria-hidden="true">image-20231205095452462</figcaption></figure><figure><img src="image-20231205095508641.png" alt="image-20231205095508641" /><figcaption aria-hidden="true">image-20231205095508641</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> heights.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">    stack.push(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">//模拟出栈，对栈内每个元素取右边界进行计算</span></span><br><span class="line">        <span class="keyword">while</span>(stack.peek() != -<span class="number">1</span> &amp;&amp; heights[stack.peek()] &gt;= heights[i])&#123;</span><br><span class="line">            area = Math.max(area, heights[stack.pop()] * (i - stack.peek() - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stack.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理剩余元素（处理后面都是递增的情况）     右边界就是length</span></span><br><span class="line">    <span class="keyword">while</span> (stack.peek() != -<span class="number">1</span>)&#123;</span><br><span class="line">        area = Math.max(area, heights[stack.pop()] * (length - stack.peek() - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;整数&quot;&gt;整数&lt;/h1&gt;
&lt;h2 id=&quot;简单&quot;&gt;简单&lt;/h2&gt;
&lt;h3 id=&quot;lcr-001.-两数相除&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/problems/xoh6Oh/&quot;&gt;LCR 001. 两数相除&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="LCR" scheme="https://vlsmhd.github.io/categories/leetcode/LCR/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode数学题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/11/08/leetcode%E6%95%B0%E5%AD%A6%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/11/08/leetcode%E6%95%B0%E5%AD%A6%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-11-08T01:18:07.132Z</published>
    <updated>2023-11-17T02:34:31.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目">题目</h1><h2 id="模拟加法">模拟加法</h2><p>加法有二进制加法、十进制加法等等，本质都是一样，每一位由加数、进位数组成。</p><h3 id="lcr-002.-二进制求和"><ahref="https://leetcode.cn/problems/JFETK5/">LCR 002. 二进制求和</a></h3><p>给定两个 01 字符串 <code>a</code> 和 <code>b</code>，请计算它们的和，并以二进制字符串的形式输出。</p><p>输入为 <strong>非空</strong> 字符串且只包含数字 <code>1</code> 和<code>0</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;11&quot;, b = &quot;10&quot;</span><br><span class="line">输出: &quot;101&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">输出: &quot;10101&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>每个字符串仅由字符 <code>'0'</code> 或 <code>'1'</code> 组成。</li><li><code>1 &lt;= a.length, b.length &lt;= 10^4</code></li><li>字符串如果不是 <code>"0"</code> ，就都不含前导零。</li></ul><h4 id="算法分析">算法分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">addBinary</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Math.max(a.length(), b.length());</span><br><span class="line">            <span class="type">int</span> <span class="variable">carry</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//正常模拟加法，从低位往高位加，但是存储的时候逆序存储</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                carry += i &lt; a.length() ? (a.charAt(a.length() - <span class="number">1</span> - i) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">                carry += i &lt; b.length() ? (b.charAt(b.length() - <span class="number">1</span> - i) - <span class="string">&#x27;0&#x27;</span>) : <span class="number">0</span>;</span><br><span class="line">                ans.append((<span class="type">char</span>)(carry % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">                carry /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//最后一位计算，carry有可能还会进位</span></span><br><span class="line">            <span class="keyword">if</span>(carry &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                ans.append((<span class="type">char</span>)(carry % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ans.reverse().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="其它简单">其它简单</h2><h2 id="其它中等">其它中等</h2><h3 id="阶乘后的零"><ahref="https://leetcode.cn/problems/factorial-trailing-zeroes/">172.阶乘后的零</a></h3><p>给定一个整数 <code>n</code> ，返回 <code>n!</code>结果中尾随零的数量。</p><p>提示 <code>n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1</code></p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：0</span><br><span class="line">解释：3! = 6 ，不含尾随 0</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：1</span><br><span class="line">解释：5! = 120 ，有一个尾随 0</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 0</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h4 id="数学推导优化">数学推导优化</h4><p><img src="leetcode数学题目专项训练/image-20231108092055781.png" alt="image-20231108092055781" style="zoom:67%;" /></p><p><img src="leetcode数学题目专项训练/image-20231108092041159.png" alt="image-20231108092041159" style="zoom:67%;" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trailingZeroes</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>)&#123;</span><br><span class="line">            n /= <span class="number">5</span>;</span><br><span class="line">            ans += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="powx-n"><a href="https://leetcode.cn/problems/powx-n/">50.Pow(x, n)</a></h3><p>实现 <ahref="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>,<em>n</em>)</a> ，即计算 <code>x</code> 的整数 <code>n</code>次幂函数（即，<code>xn</code> ）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.00000, n = 10</span><br><span class="line">输出：1024.00000</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.10000, n = 3</span><br><span class="line">输出：9.26100</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure><img src="leetcode数学题目专项训练/image-20231108093907240.png"alt="image-20231108093907240" /><figcaption aria-hidden="true">image-20231108093907240</figcaption></figure><h4 id="快速幂">快速幂</h4><h5 id="递归">递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">myPow</span><span class="params">(<span class="type">double</span> x, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">N</span> <span class="operator">=</span> n;</span><br><span class="line">        <span class="keyword">return</span> n &gt;= <span class="number">0</span> ? quickMul(x, N) : <span class="number">1.0</span> / quickMul(x, -N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">quickMul</span><span class="params">(<span class="type">double</span> x, <span class="type">long</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> quickMul(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? y*y : y*y*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其它困难">其它困难</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;h2 id=&quot;模拟加法&quot;&gt;模拟加法&lt;/h2&gt;
&lt;p&gt;加法有二进制加法、十进制加法等等，本质都是一样，每一位由加数、进位数组成。&lt;/p&gt;
&lt;h3 id=&quot;lcr-002.-二进制求和&quot;&gt;&lt;a
href=&quot;https://leetco</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="数学" scheme="https://vlsmhd.github.io/categories/leetcode/%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode字符串题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/11/06/leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/11/06/leetcode%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-11-06T03:35:20.394Z</published>
    <updated>2023-11-06T07:05:18.470Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串匹配">字符串匹配</h1><h2 id="kmp算法">KMP算法</h2><p>文章采集自宫水三叶大佬：<ahref="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/solutions/575568/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/?envType=study-plan-v2&amp;envId=top-interview-150">28.找出字符串中第一个匹配项的下标 - 力扣（LeetCode）</a></p><p>前缀后缀概念：</p><ul><li><p>前缀：对于字符串 <code>abcxxxxefg</code>，我们称 <code>abc</code>属于 <code>abcxxxxefg</code> 的某个前缀。</p></li><li><p>后缀：对于字符串 <code>abcxxxxefg</code>，我们称 <code>efg</code>属于 <code>abcxxxxefg</code> 的某个后缀。</p></li></ul><h3 id="匹配过程分析">匹配过程分析</h3><p>首先在「原串」和「匹配串」分别各自有一个指针指向当前匹配的位置。</p><p>首次匹配的「发起点」是第一个字符 a。显然，后面的 abeab都是匹配的，两个指针会同时往右移动（黑标）。</p><p>在都能匹配上 abeab 的部分，「朴素匹配」和「KMP」并无不同。</p><p>直到出现第一个不同的位置（红标）：</p><p><img src="leetcode字符串题目专项训练/1618741727-pqXsfg-image.png" alt="image.png" style="zoom:25%;" /></p><h4 id="普通匹配逻辑">普通匹配逻辑</h4><ol type="1"><li><p>将原串的指针移动至本次「发起点」的下一个位置（b字符处）；<strong>匹配串的指针移动至起始位置。</strong></p></li><li><p>尝试匹配，发现对不上，原串的指针会一直往后移动，直到能够与匹配串对上位置。</p></li></ol><p><img src="leetcode字符串题目专项训练/1618742678-lTXSgV-image.png" alt="image.png" style="zoom:25%;" /></p><p>对于「朴素匹配」而言，一旦匹配失败，将会<strong>将原串指针调整至下一个「发起点」</strong>，匹配串的指针调整至起始位置，然后重新尝试匹配。</p><p>复杂度：O(m * n)</p><h4 id="kmp逻辑">KMP逻辑</h4><ol type="1"><li>首先对于匹配串，会检查之前已经匹配成功的部分中里是否存在<strong>相同的「前缀」和「后缀」</strong>。如果存在，则跳转到「前缀」的下一个位置继续往下匹配：</li></ol><p><img src="leetcode字符串题目专项训练/1618845342-ydYJRp-9364346F937803F03CD1A0AE645EA0F1.jpg" alt="9364346F937803F03CD1A0AE645EA0F1.jpg" style="zoom:25%;" /></p><ol start="2" type="1"><li>跳转到下一匹配位置后，尝试匹配，发现两个指针的字符对不上，并且<strong>此时匹配串指针前面不存在相同的「前缀」和「后缀」</strong>，这时候只能回到匹配串的起始位置重新开始：</li></ol><p><img src="leetcode字符串题目专项训练/1618755191-ddejks-image.png" alt="image.png" style="zoom:25%;" /></p><p>为什么KMP更快：</p><ul><li><p>因为 KMP利用已匹配部分中相同的「前缀」和「后缀」来加速下一次的匹配。</p></li><li><p>因为 KMP的原串指针不会进行回溯（没有朴素匹配中回到下一个「发起点」的过程）。</p></li></ul><h3 id="next数组构建">next数组构建</h3><p>接下来，我们看看 next 数组是如何在 O(m)的复杂度内被预处理出来的。</p><p>假设有匹配串 aaabbab，next数组构建过程：</p><p><img src="leetcode字符串题目专项训练/1618846927-xFAEXE-010FD8AE2B79FFE03DC3735ACD224A6A.png" alt="010FD8AE2B79FFE03DC3735ACD224A6A.png" style="zoom: 25%;" /></p><p><img src="leetcode字符串题目专项训练/1618847960-lkVIDM-B9497542844478144BED83E9ADA0C12F.png" alt="B9497542844478144BED83E9ADA0C12F.png" style="zoom:25%;" /></p><p><img src="leetcode字符串题目专项训练/1618847981-wncoqJ-161584A2D930A7B91092A2C3872D9DE5.png" alt="161584A2D930A7B91092A2C3872D9DE5.png" style="zoom:25%;" /></p><p>注意：</p><ul><li>next数组只与要匹配的字符串有关联。</li></ul><p>这就是整个 next 数组的构建过程，时空复杂度均为 O(m)。至此整个 KMP匹配过程复杂度是 O(m + n) 的。</p><h1 id="题目">题目</h1><h2 id="字符串匹配-1">字符串匹配</h2><h3 id="找出字符串中第一个匹配项的下标"><ahref="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28.找出字符串中第一个匹配项的下标</a></h3><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在<code>haystack</code> 字符串中找出 <code>needle</code>字符串的第一个匹配项的下标（下标从 0 开始）。如果 <code>needle</code>不是 <code>haystack</code> 的一部分，则返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;sadbutsad&quot;, needle = &quot;sad&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：&quot;sad&quot; 在下标 0 和 6 处匹配。</span><br><span class="line">第一个匹配项的下标是 0 ，所以返回 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：haystack = &quot;leetcode&quot;, needle = &quot;leeto&quot;</span><br><span class="line">输出：-1</span><br><span class="line">解释：&quot;leeto&quot; 没有在 &quot;leetcode&quot; 中出现，所以返回 -1 。</span><br></pre></td></tr></table></figure><h4 id="kmp算法-1">KMP算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String ss, String pp)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(pp.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ss.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> pp.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 原串和匹配串前面都加空格，使其下标从 1 开始</span></span><br><span class="line">        ss = <span class="string">&quot; &quot;</span> + ss;</span><br><span class="line">        pp = <span class="string">&quot; &quot;</span> + pp;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] s = ss.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] p = pp.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建next数组</span></span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">            <span class="comment">//更新next</span></span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匹配过程 ， i = 1， j = 0开始， i小于等于原串长度 【匹配 i 从 1 开始】</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j  = next[j];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(s[i] == p[j + <span class="number">1</span>])&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == m) <span class="keyword">return</span> i - m;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字符串匹配&quot;&gt;字符串匹配&lt;/h1&gt;
&lt;h2 id=&quot;kmp算法&quot;&gt;KMP算法&lt;/h2&gt;
&lt;p&gt;文章采集自宫水三叶大佬：&lt;a
href=&quot;https://leetcode.cn/problems/find-the-index-of-the-first-occu</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="字符串" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    
  </entry>
  
  <entry>
    <title>并发编程设计模式</title>
    <link href="https://vlsmhd.github.io/2023/11/04/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://vlsmhd.github.io/2023/11/04/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2023-11-04T07:19:35.683Z</published>
    <updated>2023-12-04T03:07:30.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="同步模式">同步模式</h1><h2 id="保护性暂停">保护性暂停</h2><p>全称GuardedSuspension，用在<strong>一个线程等待另一个线程的执行结果</strong>。</p><p>模型：</p><p><img src="并发编程设计模式/image-20231115163223128.png" alt="image-20231115163223128" style="zoom:67%;" /></p><ul><li><p>俩线程需要<strong>关联同一个对象</strong></p></li><li><p>消息队列思想：如果有结果不断从一个线程发送消息到另一个线程，可以使用消息队列。</p></li><li><p>线程要借助中间对象进行通信，核心代码都在于中间对象</p></li></ul><p>应用：</p><ul><li>JDK 中，join 的实现、Future 的实现，采用的就是此模式</li></ul><h3 id="实现">实现</h3><h4 id="初步实现">初步实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GuardedObject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="keyword">while</span>(response == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(Object response)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="built_in">this</span>.response = response;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带有超时时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.GuardedObject&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GuardedObject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">timePassed</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//已经经过的时间</span></span><br><span class="line">            <span class="keyword">while</span>(response == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//剩余等待时间</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> System.currentTimeMillis() - timePassed;</span><br><span class="line">                log.debug(<span class="string">&quot;waitTime: &#123;&#125;&quot;</span>, waitTime);</span><br><span class="line">                <span class="keyword">if</span>(waitTime &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;break...&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait(waitTime);<span class="comment">//等待剩余时间，能防止假唤醒</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//已经过时间</span></span><br><span class="line">                timePassed = System.currentTimeMillis() - start;</span><br><span class="line">                log.debug(<span class="string">&quot;timePassed: &#123;&#125;, object is null &#123;&#125;&quot;</span>,</span><br><span class="line">                        timePassed, response == <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(Object response)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="built_in">this</span>.response = response;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多任务解耦实现">多任务解耦实现</h4><p>模型图：</p><p><img src="并发编程设计模式/image-20231115201009213.png" alt="image-20231115201009213" style="zoom:80%;" /></p><ul><li>集中管理了GuardedObject对象在一个容器内</li><li>发送消息的和等待结果的依旧是一 一绑定</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务相关类：发送消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Postman</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String mail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Postman</span><span class="params">(<span class="type">int</span> id, String mail)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.mail = mail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">GuardedObject</span> <span class="variable">guardedObject</span> <span class="operator">=</span> MailBoxes.getGuardedObject(id);</span><br><span class="line">        log.debug(<span class="string">&quot;送信 id:&#123;&#125;, 内容:&#123;&#125;&quot;</span>, id, mail);</span><br><span class="line">        guardedObject.complete(mail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务相关类：接收消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 收信</span></span><br><span class="line">        <span class="type">GuardedObject</span> <span class="variable">guardedObject</span> <span class="operator">=</span> MailBoxes.createGuardedObject();</span><br><span class="line">        log.debug(<span class="string">&quot;开始收信 id:&#123;&#125;&quot;</span>, guardedObject.getId());</span><br><span class="line">        <span class="type">Object</span> <span class="variable">mail</span> <span class="operator">=</span> guardedObject.get(<span class="number">5000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;收到信 id:&#123;&#125;, 内容:&#123;&#125;&quot;</span>, guardedObject.getId(), mail);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集中化容器,解耦类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MailBoxes</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, GuardedObject&gt; boxes = <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">long</span> <span class="title function_">genId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GuardedObject <span class="title function_">getGuardedObject</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> boxes.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GuardedObject <span class="title function_">createGuardedObject</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">GuardedObject</span> <span class="variable">guardedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GuardedObject</span>(genId());</span><br><span class="line">        boxes.put(guardedObject.getId(), guardedObject);</span><br><span class="line">        <span class="keyword">return</span> guardedObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;Long&gt; <span class="title function_">getIds</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> boxes.keySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.GuardedObject&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GuardedObject</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识 Guarded Object</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object response;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GuardedObject</span><span class="params">(<span class="type">long</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(<span class="type">long</span> timeout)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">long</span> <span class="variable">timePassed</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//已经经过的时间</span></span><br><span class="line">            <span class="keyword">while</span>(response == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//剩余等待时间</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">waitTime</span> <span class="operator">=</span> System.currentTimeMillis() - timePassed;</span><br><span class="line">                log.debug(<span class="string">&quot;waitTime: &#123;&#125;&quot;</span>, waitTime);</span><br><span class="line">                <span class="keyword">if</span>(waitTime &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;break...&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait(waitTime);<span class="comment">//等待剩余时间，能防止假唤醒</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//已经过时间</span></span><br><span class="line">                timePassed = System.currentTimeMillis() - start;</span><br><span class="line">                log.debug(<span class="string">&quot;timePassed: &#123;&#125;, object is null &#123;&#125;&quot;</span>,</span><br><span class="line">                        timePassed, response == <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">complete</span><span class="params">(Object response)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            <span class="built_in">this</span>.response = response;</span><br><span class="line">            lock.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用">应用</h3><h4 id="join原理">join原理</h4><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millis)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//刚进入join的方法的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">//已经经过时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">now</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;timeout value is negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (millis == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                wait(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (isAlive()) &#123;</span><br><span class="line">                <span class="comment">//剩余等待时间</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">delay</span> <span class="operator">=</span> millis - now;</span><br><span class="line">                <span class="keyword">if</span> (delay &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                wait(delay);</span><br><span class="line">                now = System.currentTimeMillis() - base;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>这个方法是让别的线程（在别的线程代码块执行）阻塞</li></ul><h2 id="顺序控制">顺序控制</h2><h3 id="固定运行顺序">固定运行顺序</h3><p>wait-notify初步实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeqExec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">//创建条件变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">t2Runned</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!t2Runned)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">                t2Runned = <span class="literal">true</span>;</span><br><span class="line">                lock.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;T2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>park优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123; Thread.sleep(<span class="number">1000</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">    <span class="comment">// 当没有『许可』时，当前线程暂停运行；有『许可』时，用掉这个『许可』，当前线程恢复运行</span></span><br><span class="line">    LockSupport.park();</span><br><span class="line">    System.out.println(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="comment">// 给线程 t1 发放『许可』（多次连续调用 unpark 只会发放一个『许可』）</span></span><br><span class="line">    LockSupport.unpark(t1);</span><br><span class="line">&#125;);</span><br><span class="line">t1.start();</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h3 id="交替输出">交替输出</h3><p>wait-notify实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alternate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WaitNotify</span> <span class="variable">wn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaitNotify</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="number">3</span>, <span class="number">1</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaitNotify</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> flag;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WaitNotify</span><span class="params">(<span class="type">int</span> flag, <span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">( <span class="type">int</span> curFlag, <span class="type">int</span> nextFlag,String str)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">this</span>.flag != curFlag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                flag = nextFlag;</span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lock条件变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alternate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AwaitSignal</span> <span class="variable">as</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AwaitSignal</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">aWaitSet</span> <span class="operator">=</span> as.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">bWaitSet</span> <span class="operator">=</span> as.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">cWaitSet</span> <span class="operator">=</span> as.newCondition();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            as.print(<span class="string">&quot;a&quot;</span>, aWaitSet, bWaitSet);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            as.print(<span class="string">&quot;b&quot;</span>, bWaitSet, cWaitSet);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            as.print(<span class="string">&quot;c&quot;</span>, cWaitSet, aWaitSet);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        as.start(aWaitSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AwaitSignal&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AwaitSignal</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwaitSignal</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Condition first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">            first.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, Condition current, Condition next)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.await();</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>park()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alternate</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParkUnpark</span> <span class="variable">syncPark</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParkUnpark</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncPark.print(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncPark.print(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncPark.print(<span class="string">&quot;c\n&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        syncPark.setThreads(t1, t2, t3);</span><br><span class="line">        syncPark.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParkUnpark</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread[] threads;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParkUnpark</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThreads</span><span class="params">(Thread  ... threads)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.threads = threads;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        LockSupport.unpark(threads[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line"></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            LockSupport.unpark(nextThread());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread <span class="title function_">nextThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(threads[i] == current) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; threads.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> threads[index+<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> threads[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AwaitSignal&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AwaitSignal</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwaitSignal</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Condition first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">            first.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, Condition current, Condition next)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.await();</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="balking犹豫模式">Balking犹豫模式</h2><p>定义：一个线程发现另一个线程或本线程已经做了某一件相同的事，那么本线程就无需再做了，直接结束返回</p><h3 id="案例">案例</h3><h4 id="监控案例"><a href= "#监控">监控案例</a></h4><p>SpringBoot中监控线程创建一个足以，而Tomcat里是多线程执行前台请求，那为了防止多线程创建多个监控服务对象，代码优化如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonitorService</span> &#123;</span><br><span class="line">    <span class="comment">// 用来表示是否已经有线程已经在执行启动了</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> starting;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;尝试启动监控线程...&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (starting) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            starting = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 真正启动监控线程...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单例">单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INSTANCE;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异步模式">异步模式</h1><h2 id="生产者与消费者">生产者与消费者</h2><figure><img src="并发编程设计模式/image-20231116143845220.png"alt="生产者消费者模型" /><figcaption aria-hidden="true">生产者消费者模型</figcaption></figure><ul><li>不需要产生结果的线程和等待结果的线程一一对应</li><li>利用消息队列平衡生产和消费的资源</li></ul><h3 id="实现-1">实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MessageQueue</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Message&gt; queue ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MessageQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (queue)&#123;</span><br><span class="line">            <span class="keyword">while</span>(queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//唤醒消费者线程</span></span><br><span class="line">            queue.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> queue.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (queue)&#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//唤醒生产者线程来获取</span></span><br><span class="line">            queue.addLast(message);</span><br><span class="line">            queue.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(<span class="type">int</span> id, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="终止模式">终止模式</h1><h2 id="两阶段终止">两阶段终止</h2><p>应用场景：在一个线程 T1 中如何<strong>优雅</strong>终止线程 T2？</p><ul><li>这里的优雅指的是给 T2 一个料理后事的机会。</li></ul><h3 id="错误思路">错误思路</h3><ol type="1"><li>使用线程对象的 stop() 方法停止线程<ul><li>stop方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁</li></ul></li><li>使用 System.exit(int) 方法停止线程<ul><li>目的仅是停止一个线程，但这种做法会让整个程序都停止</li></ul></li></ol><h3 id="案例-1">案例</h3><h4 id="监控">监控<a id= "监控"></a></h4><h5 id="interrupt实现">interrupt实现</h5><p>日志检测系统，日志每隔2s进行一次监控，期间如果有其它线程打断这个线程，那就会料理后事，随后结束日志监控进程。</p><p>流程图：</p><p><img src="并发编程设计模式/image-20231104155453613.png" alt="image-20231104155453613" style="zoom:67%;" /></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoPhaseTermination</span> &#123;</span><br><span class="line">    <span class="comment">//监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">currentThread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="keyword">if</span>(currentThread.isInterrupted())&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;处理后事...&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//心跳机制  进行监控</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;监控ing&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    <span class="comment">//二阶段终止：因为在sleep过程中打断该线程，会抛出异常并且刷新本线程打断状态为false，上面的if条件并不会成立</span></span><br><span class="line">                    currentThread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span> );</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        monitor.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TwoPhaseTermination</span> <span class="variable">twoPhaseTermination</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwoPhaseTermination</span>();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="并发编程设计模式/image-20231104160841161.png" alt="image-20231104160841161" style="zoom:67%;" /></p><p>不加第二阶段打断的运行结果：</p><p><img src="并发编程设计模式/image-20231104161007620.png" alt="image-20231104161007620" style="zoom:67%;" /></p><p>打断后不会停下来，有误。</p><h5 id="volatile实现">volatile实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TwoPhaseTermination</span> &#123;</span><br><span class="line">    <span class="comment">//监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitor;</span><br><span class="line">    <span class="comment">//可见性变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        monitor = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt;&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(stop)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;处理后事...&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//心跳机制  进行监控</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;监控ing&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span> );</span><br><span class="line">        monitor.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>&#123;</span><br><span class="line">        stop = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TwoPhaseTermination</span> <span class="variable">twoPhaseTermination</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwoPhaseTermination</span>();</span><br><span class="line">        twoPhaseTermination.start();</span><br><span class="line">        Thread.sleep(<span class="number">6000</span>);</span><br><span class="line">        twoPhaseTermination.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="享元模式">享元模式</h1><p>英文名称：Flyweight pattern. 属于构建型的一种</p><p>作用：重用数量有限的同一类对象</p><h2 id="实现案例">实现案例</h2><h3 id="包装类">包装类</h3><p>在JDK中 Boolean，Byte，Short，Integer，Long，Character 等包装类提供了valueOf 方法，会缓存一定范围内使用频率高的数</p><ul><li>Long 的valueOf 会缓存 -128~127 之间的 Long对象，在这个范围之间会重用对象，大于这个范围，才会新建 Long 对象</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></span><br><span class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="type">int</span>)l + offset];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Long</span>(l);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Byte, Short, Long 缓存的范围都是 -128~127</li><li>Character 缓存的范围是 0~127</li><li>Integer的默认范围是 -128~127<ul><li>最小值不能变</li><li>但最大值可以通过调整虚拟机参数<code>-Djava.lang.Integer.IntegerCache.high</code> 来改变</li></ul></li><li>Boolean 缓存了 TRUE 和 FALSE</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;同步模式&quot;&gt;同步模式&lt;/h1&gt;
&lt;h2 id=&quot;保护性暂停&quot;&gt;保护性暂停&lt;/h2&gt;
&lt;p&gt;全称Guarded
Suspension，用在&lt;strong&gt;一个线程等待另一个线程的执行结果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;模型：&lt;/p&gt;
&lt;p&gt;&lt;img s</summary>
      
    
    
    
    <category term="设计模式" scheme="https://vlsmhd.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="并发编程" scheme="https://vlsmhd.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    <category term="设计模式" scheme="https://vlsmhd.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JUC并发编程应用场景</title>
    <link href="https://vlsmhd.github.io/2023/11/04/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://vlsmhd.github.io/2023/11/04/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2023-11-04T06:48:15.410Z</published>
    <updated>2023-12-04T03:07:37.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="效率">效率</h1><h1 id="限制">限制</h1><h2 id="限制对cpu的占用">限制对CPU的占用</h2><p>CPU高占用情况：如果代码块设置有while(true)这样的死循环，那对CPU的占用率会高达90%多，这样其它进程就会出现饥饿现象。</p><h3 id="sleep实现">sleep实现</h3><p>在没有利用 cpu 来计算时，不要让 while(true) 空转浪费cpu，这时可以使用 yield 或 sleep 来让出 cpu 的使用权给其他程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sleep适用于无需 <strong>加锁</strong> 同步的场景</li></ul><h2 id="单例模式">单例模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题1：为什么加 final</span></span><br><span class="line"><span class="comment">// 问题2：如果实现了序列化接口, 还要做什么来防止反序列化破坏单例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">// 问题3：为什么设置为私有? 是否能防止反射创建新的实例?</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 问题4：这样初始化是否能保证单例对象创建时的线程安全?</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    <span class="comment">// 问题5：为什么提供静态方法而不是直接将 INSTANCE 设置为 public, 说出你知道的理由</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>防止子类篡改</li><li>提前重写readResolve() 方法，返回单例实例</li><li>私有构造函数防止别的类访问创建，但是并不能防止反射</li><li>可以的</li><li>在外界可以新建对象篡改、可以支持泛型</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 问题1：枚举单例是如何限制实例个数的</span></span><br><span class="line"><span class="comment">// 问题2：枚举单例在创建时是否有并发问题</span></span><br><span class="line"><span class="comment">// 问题3：枚举单例能否被反射破坏单例</span></span><br><span class="line"><span class="comment">// 问题4：枚举单例能否被反序列化破坏单例</span></span><br><span class="line"><span class="comment">// 问题5：枚举单例属于懒汉式还是饿汉式</span></span><br><span class="line"><span class="comment">// 问题6：枚举单例如果希望加入一些单例创建时的初始化逻辑该如何做</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123; </span><br><span class="line"> INSTANCE; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>本质是静态成员变量</li><li>没</li><li>不能</li><li>不能</li><li>饿汉</li><li>书写构造函数</li></ol><h1 id="互斥">互斥</h1><h1 id="同步">同步</h1><h2 id="join实现">join实现</h2><h3 id="主线程等待一个线程">主线程等待一个线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    result = <span class="number">10</span>;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t1.join();<span class="comment">//这个方法在哪个线程的task内调用，哪个线程就阻塞等待同步</span></span><br><span class="line">    log.debug(<span class="string">&quot;结果为:&#123;&#125;&quot;</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主线程等待多个线程">主线程等待多个线程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">test2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        r1 = <span class="number">10</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        r2 = <span class="number">20</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    log.debug(<span class="string">&quot;r1: &#123;&#125; r2: &#123;&#125; cost: &#123;&#125;&quot;</span>, r1, r2, end - start);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20:45:43.239 [main] c.TestJoin - r1: 10 r2: 20 cost: 2005</span><br></pre></td></tr></table></figure><p>t1与t2的join顺序颠倒对比：</p><p><img src="JUC并发编程应用场景/image-20231104151129578.png" alt="image-20231104151129578" style="zoom:67%;" /></p><p>总时间来说不变，只不过内部涉及：并行与同步。</p><h2 id="犹豫模式">犹豫模式</h2><p>希望 doInit() 方法仅被调用一次，下面的实现是否有问题，为什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestVolatile</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">initialized</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialized) &#123; </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; </span><br><span class="line">        doInit();</span><br><span class="line">        initialized = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doInit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="keyword">synchronized</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (initialized) &#123; </span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    doInit();</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交替打印">交替打印</h2><h3 id="wait-notify实现">wait-notify实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alternate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">WaitNotify</span> <span class="variable">wn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WaitNotify</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            wn.print(<span class="number">3</span>, <span class="number">1</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WaitNotify</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> flag;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WaitNotify</span><span class="params">(<span class="type">int</span> flag, <span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">( <span class="type">int</span> curFlag, <span class="type">int</span> nextFlag,String str)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">this</span>.flag != curFlag)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="built_in">this</span>.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                flag = nextFlag;</span><br><span class="line">                <span class="built_in">this</span>.notifyAll();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lock条件变量">Lock条件变量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alternate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AwaitSignal</span> <span class="variable">as</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AwaitSignal</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">aWaitSet</span> <span class="operator">=</span> as.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">bWaitSet</span> <span class="operator">=</span> as.newCondition();</span><br><span class="line">        <span class="type">Condition</span> <span class="variable">cWaitSet</span> <span class="operator">=</span> as.newCondition();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            as.print(<span class="string">&quot;a&quot;</span>, aWaitSet, bWaitSet);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            as.print(<span class="string">&quot;b&quot;</span>, bWaitSet, cWaitSet);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            as.print(<span class="string">&quot;c&quot;</span>, cWaitSet, aWaitSet);</span><br><span class="line">        &#125;).start();</span><br><span class="line">        as.start(aWaitSet);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AwaitSignal&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AwaitSignal</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwaitSignal</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Condition first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">            first.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, Condition current, Condition next)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.await();</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>park()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Alternate</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ParkUnpark</span> <span class="variable">syncPark</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParkUnpark</span>(<span class="number">5</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncPark.print(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncPark.print(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            syncPark.print(<span class="string">&quot;c\n&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        syncPark.setThreads(t1, t2, t3);</span><br><span class="line">        syncPark.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParkUnpark</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread[] threads;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ParkUnpark</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setThreads</span><span class="params">(Thread  ... threads)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.threads = threads;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">        LockSupport.unpark(threads[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line"></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.print(str);</span><br><span class="line">            LockSupport.unpark(nextThread());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Thread <span class="title function_">nextThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; threads.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(threads[i] == current) &#123;</span><br><span class="line">                index = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; threads.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> threads[index+<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> threads[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.AwaitSignal&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AwaitSignal</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> loopNumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AwaitSignal</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.loopNumber = loopNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">(Condition first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lock();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">            first.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String str, Condition current, Condition next)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                current.await();</span><br><span class="line">                System.out.print(str);</span><br><span class="line">                next.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异步">异步</h1><h2 id="生产者消费者">生产者消费者</h2><figure><img src="JUC并发编程应用场景/image-20231116143845220.png"alt="生产者消费者模型" /><figcaption aria-hidden="true">生产者消费者模型</figcaption></figure><ul><li>不需要产生结果的线程和等待结果的线程一一对应</li><li>利用消息队列平衡生产和消费的资源</li></ul><h3 id="实现">实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MessageQueue</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedList&lt;Message&gt; queue ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MessageQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Message <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (queue)&#123;</span><br><span class="line">            <span class="keyword">while</span>(queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//唤醒消费者线程</span></span><br><span class="line">            queue.notifyAll();</span><br><span class="line">            <span class="keyword">return</span> queue.removeFirst();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(Message message)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (queue)&#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    queue.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//唤醒生产者线程来获取</span></span><br><span class="line">            queue.addLast(message);</span><br><span class="line">            queue.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message</span><span class="params">(<span class="type">int</span> id, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缓存">缓存</h1><h2 id="连接池">连接池</h2><h3 id="实现-1">实现</h3><p>一个线上商城应用，QPS达到数千，如果每次都重新创建和关闭数据库连接，性能会受到极大影响。这时预先创建好一批连接，放入连接池。一次请求到达后，从连接池获取连接，使用完毕后再还回连接池，这样既节约了连接的创建和关闭时间，也实现了连接的重用，不至于让庞大的连接数压垮数据库。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> poolSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Connection[] connections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicIntegerArray states;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pool</span><span class="params">(<span class="type">int</span> poolSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.poolSize = poolSize;</span><br><span class="line">        connections = <span class="keyword">new</span> <span class="title class_">Connection</span>[poolSize];</span><br><span class="line">        states = <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(<span class="keyword">new</span> <span class="title class_">int</span>[poolSize]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            connections[i] = <span class="keyword">new</span> <span class="title class_">Mock</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConn</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(states.get(i) == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span> (states.compareAndSet(i, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;borrow &#123;&#125;&quot;</span>, connections[i]);</span><br><span class="line">                        <span class="keyword">return</span> connections[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//预防CPU空转浪费资源</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;wait...&quot;</span>);</span><br><span class="line">                    wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">free</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; poolSize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(connections[i] == conn)&#123;</span><br><span class="line">                states.set(i,<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;free &#123;&#125;&quot;</span>, conn);</span><br><span class="line">                    <span class="built_in">this</span>.notifyAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mock</span> <span class="keyword">implements</span> <span class="title class_">Connection</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="分治">分治</h1><h1 id="统筹">统筹</h1><h2 id="烧水泡茶">烧水泡茶</h2><blockquote><p>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复杂的科研项目的组织与管理中，都可以应用。</p><p>怎样应用呢？主要是把工序安排好。</p><p>比如，想泡壶茶喝。当时的情况是：</p><ol type="1"><li>开水没有；</li><li>水壶要洗，茶壶、茶杯要洗；</li><li>火已生了，茶叶也有了。</li></ol><p>提出的方法：</p><ul><li>办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。</li><li>办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡茶喝。</li><li>办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡茶喝。</li></ul><p>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。</p><p>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。</p><p>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：</p><figure><imgsrc="JUC并发编程应用场景/image-20231104164105606-16990872689701-16990872693563.png"alt="image-20231104164105606" /><figcaption aria-hidden="true">image-20231104164105606</figcaption></figure><p>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作效率，应当<strong>主要抓烧开水这个环节</strong>，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大可利用“等水开”的时间来做。</p><p>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。</p><p>洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：</p><figure><img src="JUC并发编程应用场景/image-20231104164148014.png"alt="image-20231104164148014" /><figcaption aria-hidden="true">image-20231104164148014</figcaption></figure><p>看来这是“小题大做”，但在工作环节太多的时候，这样做就非常必要了。</p><p>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接解决所有问题，但是，我们利用这种方法来考虑问题，也是不无裨益的。</p></blockquote><p>根据华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案</p><ul><li>参考图二，用两个线程（两个人协作）模拟烧水泡茶过程<ul><li>文中办法 乙、丙都相当于任务串行</li></ul></li><li>而图一相当于启动了 4 个线程，有点浪费<ul><li>用 sleep(n) 模拟洗茶壶、洗水壶等耗费的时间</li></ul></li></ul><h3 id="join实现-1">join实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.PaoCha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaoCha</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;刷水壶&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                log.debug(<span class="string">&quot;烧水&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="string">&quot;老王&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;洗茶壶&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">                log.debug(<span class="string">&quot;洗茶杯&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">                log.debug(<span class="string">&quot;拿茶叶&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="comment">//等老王烧完水，这是同步关键</span></span><br><span class="line">                t1.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">&quot;泡茶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure><img src="JUC并发编程应用场景/image-20231104211129056.png"alt="image-20231104211129056" /><figcaption aria-hidden="true">image-20231104211129056</figcaption></figure><p>缺陷：</p><ul><li>上面模拟的是小王等老王的水烧开了，小王泡茶，如果反过来要实现老王等小王的茶叶拿来了，老王泡茶呢？代码最好能适应两种情况</li><li>上面的两个线程其实是各执行各的，如果要模拟老王把水壶交给小王泡茶，或模拟小王把茶叶交给老王泡茶呢</li></ul><h1 id="定时">定时</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;效率&quot;&gt;效率&lt;/h1&gt;
&lt;h1 id=&quot;限制&quot;&gt;限制&lt;/h1&gt;
&lt;h2 id=&quot;限制对cpu的占用&quot;&gt;限制对CPU的占用&lt;/h2&gt;
&lt;p&gt;CPU高占用情况：如果代码块设置有while(true)
这样的死循环，那对CPU的占用率会高达
90%多，这样其它</summary>
      
    
    
    
    <category term="Java" scheme="https://vlsmhd.github.io/categories/Java/"/>
    
    <category term="并发编程" scheme="https://vlsmhd.github.io/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="并发编程" scheme="https://vlsmhd.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode贪心题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/10/29/leetcode%E8%B4%AA%E5%BF%83%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/10/29/leetcode%E8%B4%AA%E5%BF%83%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-10-29T09:43:44.750Z</published>
    <updated>2023-11-05T03:17:46.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心思想">贪心思想</h1><p>局部最优 -&gt; 全局最优</p><h1 id="题目">题目</h1><h2 id="简单">简单</h2><h3 id="最后一个单词的长度"><ahref="https://leetcode.cn/problems/length-of-last-word/">58.最后一个单词的长度</a></h3><p>给你一个字符串<code>s</code>，由若干单词组成，单词前后用一些空格字符隔开。返回字符串中<strong>最后一个</strong> 单词的长度。</p><p><strong>单词</strong>是指仅由字母组成、不包含任何空格字符的最大子字符串。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;Hello World&quot;</span><br><span class="line">输出：5</span><br><span class="line">解释：最后一个单词是“World”，长度为5。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;   fly me   to   the moon  &quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最后一个单词是“moon”，长度为4。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;luffy is still joyboy&quot;</span><br><span class="line">输出：6</span><br><span class="line">解释：最后一个单词是长度为6的“joyboy”。</span><br></pre></td></tr></table></figure><h4 id="倒序贪心">倒序贪心</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLastWord</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(r &gt;= <span class="number">0</span> &amp;&amp; s.charAt(r) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">            r --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - r - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共前缀"><ahref="https://leetcode.cn/problems/longest-common-prefix/">14.最长公共前缀</a></h3><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 <code>""</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">输出：&quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">输出：&quot;&quot;</span><br><span class="line">解释：输入不存在公共前缀。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> 仅由小写英文字母组成</li></ul><h4 id="贪心">贪心</h4><p>一个个比对每一个字符，每个字符看能与ans相同几个字符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">longestCommonPrefix</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        ans.append(strs[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(String str : strs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(str.length() == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((i &lt; str.length() &amp;&amp; i &lt; ans.length()) &amp;&amp; str.charAt(i) == ans.charAt(i))&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= ans.length() - <span class="number">1</span>)&#123;</span><br><span class="line">                ans.delete(i, ans.length());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等">中等</h2><h3 id="跳跃游戏"><a href="https://leetcode.cn/problems/jump-game/">55.跳跃游戏</a></h3><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的<strong>第一个下标</strong>。数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标，如果可以，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,3,1,1,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,1,0,4]</span><br><span class="line">输出：false</span><br><span class="line">解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 105</code></li></ul><h4 id="算法分析">算法分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//从当下出发，看当下能走的范围能否覆盖掉整个数组长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= len ;i++)&#123;</span><br><span class="line">            len = Math.max(len, nums[i] + i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(len &gt;= nums.length - <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳跃游戏-ii"><ahref="https://leetcode.cn/problems/jump-game-ii/">45. 跳跃游戏II</a></h3><p>给定一个长度为 <code>n</code> 的 <strong>0 索引</strong>整数数组<code>nums</code>。初始位置为 <code>nums[0]</code>。</p><p>每个元素 <code>nums[i]</code> 表示从索引 <code>i</code>向前跳转的最大长度。换句话说，如果你在 <code>nums[i]</code>处，你可以跳转到任意 <code>nums[i + j]</code> 处:</p><ul><li><code>0 &lt;= j &lt;= nums[i]</code></li><li><code>i + j &lt; n</code></li></ul><p>返回到达 <code>nums[n - 1]</code>的最小跳跃次数。生成的测试用例可以到达 <code>nums[n - 1]</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,1,1,4]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 跳到最后一个位置的最小跳跃数是 2。</span><br><span class="line">     从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [2,3,0,1,4]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li>题目保证可以到达 <code>nums[n-1]</code></li></ul><h4 id="算法分析-1">算法分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">curLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">nextLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//每一步都确定下一步能走的最大路途（和当前能走的距离比）</span></span><br><span class="line">            nextLen = Math.max(nums[i] + i, nextLen);</span><br><span class="line">            <span class="keyword">if</span>(i == curLen)&#123;</span><br><span class="line">                <span class="keyword">if</span>(curLen != nums.length - <span class="number">1</span>)&#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                    curLen = nextLen;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="h-指数"><a href="https://leetcode.cn/problems/h-index/">274. H指数</a></h3><p>给你一个整数数组 <code>citations</code> ，其中<code>citations[i]</code> 表示研究者的第 <code>i</code>篇论文被引用的次数。计算并返回该研究者的 <strong><code>h</code>指数</strong>。</p><p>根据维基百科上 <ahref="https://baike.baidu.com/item/h-index/3991452?fr=aladdin">h指数的定义</a>：<code>h</code> 代表“高引用次数” ，一名科研人员的<code>h</code> <strong>指数</strong> 是指他（她）至少发表了<code>h</code> 篇论文，并且每篇论文 <strong>至少</strong> 被引用<code>h</code> 次。如果 <code>h</code>有多种可能的值，<strong><code>h</code> 指数</strong>是其中最大的那个。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：citations = [3,0,6,1,5]</span><br><span class="line">输出：3 </span><br><span class="line">解释：给定数组表示研究者总共有 5 篇论文，每篇论文相应的被引用了 3, 0, 6, 1, 5 次。</span><br><span class="line">     由于研究者有 3 篇论文每篇 至少 被引用了 3 次，其余两篇论文每篇被引用 不多于 3 次，所以她的 h 指数是 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：citations = [1,3,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>n == citations.length</code></li><li><code>1 &lt;= n &lt;= 5000</code></li><li><code>0 &lt;= citations[i] &lt;= 1000</code></li></ul><h4 id="排序">排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hIndex</span><span class="params">(<span class="type">int</span>[] citations)</span> &#123;</span><br><span class="line">        Arrays.sort(citations);</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> citations.length;</span><br><span class="line">        <span class="comment">//倒序遍历，从引用量高的文章遍历，有一篇文章比h大，h就可以++</span></span><br><span class="line">        <span class="keyword">while</span>(--n &gt;= <span class="number">0</span> &amp;&amp; citations[n] &gt; h)&#123;</span><br><span class="line">            h++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加油站"><a href="https://leetcode.cn/problems/gas-station/">134.加油站</a></h3><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code>个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第<code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code>升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code>，如果你可以按顺序绕环路行驶一周，则返回出发时加油站的编号，否则返回<code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是<strong>唯一</strong> 的。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]</span><br><span class="line">输出: 3</span><br><span class="line">解释:</span><br><span class="line">从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油</span><br><span class="line">开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油</span><br><span class="line">开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油</span><br><span class="line">开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油</span><br><span class="line">开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油</span><br><span class="line">开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。</span><br><span class="line">因此，3 可为起始索引。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: gas = [2,3,4], cost = [3,4,3]</span><br><span class="line">输出: -1</span><br><span class="line">解释:</span><br><span class="line">你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。</span><br><span class="line">我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油</span><br><span class="line">开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油</span><br><span class="line">开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油</span><br><span class="line">你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。</span><br><span class="line">因此，无论怎样，你都不可能绕环路行驶一周。</span><br></pre></td></tr></table></figure><h4 id="暴力解法">暴力解法</h4><p>以每个结点为起始，判断能否绕一圈，会带有很多重复计算，会超时。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> gas.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">//从每一个点出发</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">remain</span> <span class="operator">=</span> gas[i];</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="keyword">while</span>(remain - cost[j] &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            remain = remain - cost[j] + gas[(j + <span class="number">1</span>) % n];</span><br><span class="line"></span><br><span class="line">            j = (j + <span class="number">1</span>) % n;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//回到起点</span></span><br><span class="line">            <span class="keyword">if</span>(j == i)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="贪心-1">贪心</h4><p>其实只要总的油量（总可获得油量 - 总消耗油量） &gt;0，那就能保证能跑一圈（必定有一个位置油量很足，这是贪心的核心，我们就是要找这个位置）。我们只需要找到一个起点，能刚好从起点出发，并且在到达数组末尾之前，如果没有出现当前油量为负数的情况，直接确定答案。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//贪心</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">totalOil</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">curOil</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gas.length; i++) &#123;</span><br><span class="line">        totalOil += gas[i] - cost[i];</span><br><span class="line">        <span class="comment">//以下步骤是为了找起点，起点不能走不了</span></span><br><span class="line">        curOil += gas[i] - cost[i];</span><br><span class="line">        <span class="keyword">if</span>(curOil &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            res = (i + <span class="number">1</span>) % gas.length;</span><br><span class="line">            curOil = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最后如果总油量 &gt; 0 必然能跑一圈   总油量：每一波剩余油量 -  消耗油量</span></span><br><span class="line">    <span class="keyword">if</span>(totalOil &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整数转罗马数字"><ahref="https://leetcode.cn/problems/integer-to-roman/">12.整数转罗马数字</a></h3><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>，<code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和<code>M</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做<code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做<code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> +<code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10)的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100)的左边，来表示 40 和 90。</li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code>(1000) 的左边，来表示 400 和 900。</li></ul><p>给你一个整数，将其转为罗马数字。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: num = 3</span><br><span class="line">输出: &quot;III&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: num = 4</span><br><span class="line">输出: &quot;IV&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: num = 9</span><br><span class="line">输出: &quot;IX&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: num = 58</span><br><span class="line">输出: &quot;LVIII&quot;</span><br><span class="line">解释: L = 50, V = 5, III = 3.</span><br></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: num = 1994</span><br><span class="line">输出: &quot;MCMXCIV&quot;</span><br><span class="line">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></pre></td></tr></table></figure><h4 id="贪心-简单hash">贪心 + 简单hash</h4><p>优先选择大数进行转化</p><p>把哈希表初始化倒序排列，这样顺序遍历就是从大数开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] values = &#123;<span class="number">1000</span>, <span class="number">900</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    String[] symbols = &#123;<span class="string">&quot;M&quot;</span>, <span class="string">&quot;CM&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;CD&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;XC&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;XL&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;IX&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;IV&quot;</span>, <span class="string">&quot;I&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">intToRoman</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">roman</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> values[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">symbol</span> <span class="operator">=</span> symbols[i];</span><br><span class="line">            <span class="comment">//大数择优</span></span><br><span class="line">            <span class="keyword">while</span> (num &gt;= value) &#123;</span><br><span class="line">                num -= value;</span><br><span class="line">                roman.append(symbol);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> roman.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="困难">困难</h2><h3 id="分发糖果"><a href="https://leetcode.cn/problems/candy/">135.分发糖果</a></h3><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code>表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><ul><li>每个孩子至少分配到 <code>1</code> 个糖果。</li><li>相邻两个孩子评分更高的孩子会获得更多的糖果。</li></ul><p>请你给每个孩子分发糖果，计算并返回需要准备的<strong>最少糖果数目</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：ratings = [1,0,2]</span><br><span class="line">输出：5</span><br><span class="line">解释：你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：ratings = [1,2,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。</span><br><span class="line">     第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。</span><br></pre></td></tr></table></figure><h4 id="双遍历">双遍历</h4><p>第一趟遍历：左规则满足</p><p>第二趟遍历：右规则满足，取两个规则的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> ratings.length;</span><br><span class="line">        <span class="type">int</span>[] candyNums = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        candyNums[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//先跟左边的比,满足左规则   并先为每一个孩子分配一个糖果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            candyNums[i] = (ratings[i] &gt; ratings[i-<span class="number">1</span>])? candyNums[i - <span class="number">1</span>] + <span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ratings[i] &gt; ratings[i + <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//贪心，同时满足左规则右规则</span></span><br><span class="line">                candyNums[i] = Math.max(candyNums[i], candyNums[i + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> candyNum : candyNums) &#123;</span><br><span class="line">            sum += candyNum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文本左右对齐"><ahref="https://leetcode.cn/problems/text-justification/">68.文本左右对齐</a></h3><p>给定一个单词数组 <code>words</code> 和一个长度 <code>maxWidth</code>，重新排版单词，使其成为每行恰好有 <code>maxWidth</code>个字符，且左右两端对齐的文本。</p><p>你应该使用 “<strong>贪心算法</strong>”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格<code>' '</code> 填充，使得每行恰好有 <em>maxWidth</em> 个字符。</p><p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p><p>文本的最后一行应为左对齐，且单词之间不插入<strong>额外的</strong>空格。</p><p><strong>注意:</strong></p><ul><li>单词是指由非空格字符组成的字符序列。</li><li>每个单词的长度大于 0，小于等于 <em>maxWidth</em>。</li><li>输入单词数组 <code>words</code> 至少包含一个单词。</li></ul><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: words = [&quot;This&quot;, &quot;is&quot;, &quot;an&quot;, &quot;example&quot;, &quot;of&quot;, &quot;text&quot;, &quot;justification.&quot;], maxWidth = 16</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">   &quot;This    is    an&quot;,</span><br><span class="line">   &quot;example  of text&quot;,</span><br><span class="line">   &quot;justification.  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入:words = [&quot;What&quot;,&quot;must&quot;,&quot;be&quot;,&quot;acknowledgment&quot;,&quot;shall&quot;,&quot;be&quot;], maxWidth = 16</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;What   must   be&quot;,</span><br><span class="line">  &quot;acknowledgment  &quot;,</span><br><span class="line">  &quot;shall be        &quot;</span><br><span class="line">]</span><br><span class="line">解释: 注意最后一行的格式应为 &quot;shall be    &quot; 而不是 &quot;shall     be&quot;,</span><br><span class="line">     因为最后一行应为左对齐，而不是左右两端对齐。       </span><br><span class="line">     第二行同样为左对齐，这是因为这行只包含一个单词。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入:words = [&quot;Science&quot;,&quot;is&quot;,&quot;what&quot;,&quot;we&quot;,&quot;understand&quot;,&quot;well&quot;,&quot;enough&quot;,&quot;to&quot;,&quot;explain&quot;,&quot;to&quot;,&quot;a&quot;,&quot;computer.&quot;,&quot;Art&quot;,&quot;is&quot;,&quot;everything&quot;,&quot;else&quot;,&quot;we&quot;,&quot;do&quot;]，maxWidth = 20</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  &quot;Science  is  what we&quot;,</span><br><span class="line">  &quot;understand      well&quot;,</span><br><span class="line">  &quot;enough to explain to&quot;,</span><br><span class="line">  &quot;a  computer.  Art is&quot;,</span><br><span class="line">  &quot;everything  else  we&quot;,</span><br><span class="line">  &quot;do                  &quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= words.length &lt;= 300</code></li><li><code>1 &lt;= words[i].length &lt;= 20</code></li><li><code>words[i]</code> 由小写英文字母和符号组成</li><li><code>1 &lt;= maxWidth &lt;= 100</code></li><li><code>words[i].length &lt;= maxWidth</code></li></ul><h4 id="模拟贪心">模拟贪心</h4><p>本题告诉你怎么贪，按照题目模拟即可。</p><p>每一行统计对应的单词长度、单词范围</p><p>然后分情况考虑：</p><ul><li>当前行是最后一行</li><li>当前行不是最后一行<ul><li>当前行就一个单词</li><li>当前行不止一个单词<ul><li>当前行空格分布均匀</li><li>当前行空格分布不均匀</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">fullJustify</span><span class="params">(String[] words, <span class="type">int</span> maxWidth)</span> &#123;</span><br><span class="line">        List&lt;String&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//right : 当前行的最后一个单词在words的位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>, n = words.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不确定多少行，选择while(true)</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//当前行的第一个单词在words的位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> right;</span><br><span class="line">            <span class="comment">//统计这一行单词长度之和</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//统计这一行放多少单词       当前长度 + 当前最右端单词长度  + 空格个数</span></span><br><span class="line">            <span class="keyword">while</span>(right &lt; n &amp;&amp; len + words[right].length() + right - left &lt;= maxWidth )&#123;</span><br><span class="line">                len += words[right++].length();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前行是最后一行</span></span><br><span class="line">            <span class="keyword">if</span>(right == n)&#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                sb.append(join(left, right, words, <span class="string">&quot; &quot;</span>));</span><br><span class="line">                sb.append(blank(maxWidth - sb.length()));</span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">                <span class="keyword">return</span> ans;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前行不是最后一行，统计单词个数</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">wordsNum</span> <span class="operator">=</span> right - left;</span><br><span class="line">            <span class="comment">//单词间隔的总空格长度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">spaceLen</span> <span class="operator">=</span> maxWidth - len;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前行就一个单词</span></span><br><span class="line">            <span class="keyword">if</span>(wordsNum == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(words[left]);</span><br><span class="line">                sb.append(blank(spaceLen));</span><br><span class="line">                ans.add(sb.toString());</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前行不止一个单词</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">avgSpace</span> <span class="operator">=</span> spaceLen / (wordsNum - <span class="number">1</span>);<span class="comment">//平均间隔空格长度</span></span><br><span class="line">            <span class="comment">//不能均匀分配的情况下</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">extraSpace</span> <span class="operator">=</span> spaceLen % (wordsNum - <span class="number">1</span>);<span class="comment">//多出来的空格长度</span></span><br><span class="line">            <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">            <span class="comment">//由于不能均匀分配，先把多出来的额外空格加到左边的几个单词之间</span></span><br><span class="line">            sb.append(join(left, left + extraSpace + <span class="number">1</span>, words, blank(avgSpace + <span class="number">1</span>)));</span><br><span class="line">            sb.append(blank(avgSpace));</span><br><span class="line">            sb.append(join(left + extraSpace + <span class="number">1</span>, right, words, blank(avgSpace)));</span><br><span class="line">            ans.add(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  返回长度为n的空格字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> len</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">blank</span><span class="params">(<span class="type">int</span> len)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            sb.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用 seg 拼接 [left, right) 范围内的 words 组成的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> words</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seg 分隔符，单词之间定义的空格长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">join</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right, String[] words, String seg)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(words[left]);  <span class="comment">//这里初始化是便于不在最后一个单词末尾添加多余的seg</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left + <span class="number">1</span>; i &lt; right; i++) &#123;</span><br><span class="line">            sb.append(seg);</span><br><span class="line">            sb.append(words[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心思想&quot;&gt;贪心思想&lt;/h1&gt;
&lt;p&gt;局部最优 -&amp;gt; 全局最优&lt;/p&gt;
&lt;h1 id=&quot;题目&quot;&gt;题目&lt;/h1&gt;
&lt;h2 id=&quot;简单&quot;&gt;简单&lt;/h2&gt;
&lt;h3 id=&quot;最后一个单词的长度&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="贪心" scheme="https://vlsmhd.github.io/categories/leetcode/%E8%B4%AA%E5%BF%83/"/>
    
    
  </entry>
  
  <entry>
    <title>JUC并发编程</title>
    <link href="https://vlsmhd.github.io/2023/10/27/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    <id>https://vlsmhd.github.io/2023/10/27/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</id>
    <published>2023-10-27T07:19:10.631Z</published>
    <updated>2023-12-05T14:23:40.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="进程与线程">进程与线程</h1><h2 id="查看进程命令">查看进程命令</h2><h3 id="windows">windows</h3><p>任务管理器可以查看进程和线程数，也可以用来杀死进程</p><p><code>tasklist</code> 查看进程</p><p><code>taskkill</code> 杀死进程</p><h3 id="linux">linux</h3><p>ps -fe 查看所有进程</p><p><code>ps -fT -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</p><p>kill 杀死进程</p><p>top 按大写 H 切换是否显示线程</p><p><code>top -H -p &lt;PID&gt;</code> 查看某个进程（PID）的所有线程</p><h3 id="java程序">java程序</h3><ul><li><code>jps</code> 命令查看所有 Java 进程</li><li><code>jstack &lt;PID&gt;</code> 查看某个 Java进程（PID）的所有线程状态</li><li><code>jconsole</code> 来查看某个 Java进程中线程的运行情况（图形界面）</li></ul><p><strong>jconsole 远程监控配置</strong></p><p>jconsole打开：</p><figure><img src="JUC并发编程/image-20231031225805207.png"alt="image-20231031225805207" /><figcaption aria-hidden="true">image-20231031225805207</figcaption></figure><p>需要以如下方式在服务器（可以是虚拟机）运行java 类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -</span><br><span class="line">Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -</span><br><span class="line">Dcom.sun.management.jmxremote.authenticate=是否认证 j</span><br></pre></td></tr></table></figure><p>本地连接过去即可：</p><p><img src="JUC并发编程/image-20231031225854979.png" alt="image-20231031225854979" style="zoom:67%;" /></p><h2 id="java线程">Java线程</h2><h3 id="创建线程的方法">创建线程的方法</h3><h4 id="继承thread">继承Thread</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="comment">// 要执行的任务</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><h4 id="实现runnable接口">实现runnable接口</h4><p>把【线程】和【任务】（要执行的代码）分开</p><ul><li>Thread 代表线程</li><li>Runnable 可运行的任务（线程要执行的代码）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="comment">// 要执行的任务</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>( runnable );</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">t.start();</span><br></pre></td></tr></table></figure><p>使用 lambda 精简代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line"><span class="type">Runnable</span> <span class="variable">task2</span> <span class="operator">=</span> () -&gt; log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(task2, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">t2.start();</span><br></pre></td></tr></table></figure><h4 id="thread-与-runnable的关系">Thread 与 Runnable的关系</h4><p>分析源码：</p><p>Thread类内部<strong>组合</strong>了Runnable接口对象，组合 &gt;继承，灵活度更高。</p><p><img src="JUC并发编程/image-20231031225205717.png" alt="image-20231031225205717" style="zoom:67%;" /></p><p>用 Runnable 更容易与线程池等高级 API 配合</p><p>用 Runnable 让任务类脱离了 Thread继承体系，更<strong>灵活</strong></p><h4id="实现callable接口futuretask">实现callable接口——<strong>FutureTask</strong></h4><p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line">FutureTask&lt;Integer&gt; task3 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(() -&gt; &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task3, <span class="string">&quot;t3&quot;</span>).start();</span><br><span class="line"><span class="comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> task3.get();</span><br><span class="line">log.debug(<span class="string">&quot;结果是:&#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure><h3 id="线程运行">线程运行</h3><p>多线程运行方式：交替运行。</p><h4 id="栈与栈帧">栈与栈帧</h4><p>JVM中由堆、栈、方法区所组成，其中栈内存就是给线程使用，<strong>每个线程启动后，虚拟机就会为其分配一块栈内存。</strong></p><ul><li>每个栈由多个<strong>栈帧（Frame）</strong>组成，<strong>栈帧对应着每次方法调用时所占用的内存</strong></li><li><strong>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</strong></li></ul><p>代码如下：</p><p><img src="JUC并发编程/image-20231031230046098.png" alt="image-20231031230046098" style="zoom:67%;" /></p><p>执行以上代码分析：</p><h5 id="栈帧debug">栈帧debug</h5><p>控制台观察：</p><p><img src="JUC并发编程/image-20231031230137468.png" alt="image-20231031230137468" style="zoom:67%;" /></p><p>每调用一个方法，左边就会像栈一样显示调用信息</p><h5 id="栈帧图解">栈帧图解</h5><ol type="1"><li><p>刚运行时，进行类加载，内存的分配状况如下：</p><p><img src="JUC并发编程/image-20231031230258718.png" alt="image-20231031230258718" style="zoom: 50%;" /></p><p>整个类的方法会被写入到方法区。</p></li><li><p>main方法作为入口，为main分配栈帧，CPU切换到main线程栈执行</p><p><img src="JUC并发编程/image-20231101154739870.png" alt="image-20231101154739870" style="zoom: 67%;" /></p><ul><li>程序计数器：记录当前代码执行到哪一行了，方便下次发生线程上下文切换让CPU定位代码执行位置。</li></ul></li><li><p>main函数加载参数，对中创建对象，方法的栈帧中的局部变量表中的引用类型字段引用堆中对象</p><p><img src="JUC并发编程/image-20231101155100733.png" alt="image-20231101155100733" style="zoom: 67%;" /></p></li><li><p>main方法执行，开始调用<code>method1</code>方法，程序计数器指向<code>method1(10)</code>这一行，随后main线程栈内创建该方法的栈帧，提前为方法内出现的参数预留空间，并进行参数引用，把方法的返回地址给引用（引用至调用该方法的位置处）。</p><p><img src="JUC并发编程/image-20231101155850754.png" alt="image-20231101155850754" style="zoom:67%;" /></p></li><li><p>普通变量参数赋值以后，<code>method1</code>方法里执行到<code>method2</code>位置。再次创建<code>method2</code>的栈帧，将栈帧信息配置初始化</p><p><img src="JUC并发编程/image-20231101161006484.png" alt="image-20231101161006484" style="zoom:67%;" /></p></li><li><p>method2方法执行，创建新的对象n并返回，返回值要返回到调用method2的方法行里的m参数，因此m要引用新创建的（newObject）。</p><p><img src="JUC并发编程/image-20231101161356349.png" alt="image-20231101161356349" style="zoom:67%;" /></p><p>随后method2方法执行完毕，栈帧移除，局部变量消除：</p><p><img src="JUC并发编程/image-20231101161707176.png" alt="image-20231101161707176" style="zoom:67%;" /></p></li><li><p>method1方法也执行完毕，随后主方法内页没有可执行的代码了，执行完毕。</p><p><img src="JUC并发编程/image-20231101161837436.png" alt="image-20231101161837436" style="zoom:67%;" /></p></li></ol><h6 id="多线程图解">多线程图解</h6><p>上下文切换的瞬间：</p><p><img src="JUC并发编程/image-20231101162211427.png" alt="image-20231101162211427" style="zoom:67%;" /></p><p>main线程保留其现场的所有信息，等待下次CPU为其分配时间片的时候再次执行。</p><h3 id="thread常见方法">Thread常见方法</h3><table style="width:100%;"><colgroup><col style="width: 10%" /><col style="width: 6%" /><col style="width: 41%" /><col style="width: 41%" /></colgroup><thead><tr class="header"><th>方法名</th><th>是否static</th><th>功能</th><th>注意</th></tr></thead><tbody><tr class="odd"><td>start()</td><td>否</td><td>启动一个新线程，在新的线程运行 run 方法 中的代码</td><td>start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU的时间片还没分给它）。<strong>每个线程对象的start方法只能调用一次</strong>，如果调用了多次会出现IllegalThreadStateException</td></tr><tr class="even"><td>run()</td><td>否</td><td>新线程启动后会调用的方法</td><td>如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread的子类对象，来覆盖默认行为，<br />直接调用run方法无意义</td></tr><tr class="odd"><td>join()</td><td>否</td><td>等待线程运行结束</td><td></td></tr><tr class="even"><td>join(long n)</td><td>否</td><td>等待线程运行结束,最多等待 n 毫秒</td><td></td></tr><tr class="odd"><td>getId()</td><td>否</td><td>获取线程长整型的 id</td><td></td></tr><tr class="even"><td>getName()</td><td>否</td><td>获取线程名</td><td></td></tr><tr class="odd"><td>setName(String)</td><td>否</td><td>修改线程名</td><td></td></tr><tr class="even"><td>getPriority()</td><td>否</td><td>获取线程优先级</td><td>java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU调度的机率</td></tr><tr class="odd"><td>setPriority(int)</td><td>否</td><td>修改线程优先级</td><td></td></tr><tr class="even"><td>getState()</td><td>否</td><td>获取线程状态</td><td>Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED,WAITING, TIMED_WAITING, TERMINATED</td></tr><tr class="odd"><td>isInterrupted()</td><td>否</td><td>判断是否被打断</td><td>不会清除 <strong>打断标记</strong></td></tr><tr class="even"><td>isAlive()</td><td>否</td><td>线程是否存活（还没有运行完毕）</td><td></td></tr><tr class="odd"><td>interrupt()</td><td>否</td><td>打断线程（运行态）</td><td>如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出异常InterruptedException，并清除 打断标记；<br />如果打断的正在运行的线程，则会设置 <strong>打断标记</strong>；<br />park 的线程被打断，也会设置 打断标记</td></tr><tr class="even"><td>interrupted()</td><td>是</td><td>判断当前线程是否被打断</td><td>会清除 <strong>打断标记</strong></td></tr><tr class="odd"><td>currentThread()</td><td>是</td><td>获取当前正在执行的线程</td><td></td></tr><tr class="even"><td>sleep(long n)</td><td>是</td><td>让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程</td><td></td></tr><tr class="odd"><td>yield()</td><td>是</td><td>提示线程调度器（CPU里的）让出当前线程对CPU的使用</td><td>主要是为了测试和调试</td></tr></tbody></table><h4 id="sleep与yield">sleep与yield</h4><p>sleep特征：</p><ol type="1"><li><p>会把线程从Running 变成 Timed Waiting 阻塞状态</p></li><li><p>sleep结束的线程也不会立刻就执行</p></li><li><p>正在sleep的线程可以被interrupt，此时sleep方法抛出InterruptedException异常</p></li><li><p>建议用 TimeUnit类 的 sleep 代替 Thread 的 sleep来获得更好的可读性</p><p>指定时间单位：</p><figure><img src="JUC并发编程/image-20231103222631793.png"alt="image-20231103222631793" /><figcaption aria-hidden="true">image-20231103222631793</figcaption></figure></li></ol><p>yield特征：</p><ol type="1"><li>会把线程从Running 变成 Runnable 阻塞状态</li><li>底层实现依赖于 操作系统的任务调度器</li></ol><h4 id="interrupt">interrupt</h4><h5 id="打断运行线程">打断运行线程</h5><p>打断正在运行的线程，并不会立即让这个线程停止，而是会加上打断标记。如果想让这个线程停下来，可以在线程实现的run方法内设置逻辑，判断当前线程的打断标记即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TestInterrupt&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestInterrupt</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                    <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> Thread.currentThread().isInterrupted();</span><br><span class="line">                    <span class="keyword">if</span>(interrupted)&#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;被打断...&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        t1.interrupt();</span><br><span class="line">        log.debug(<span class="string">&quot;打断...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二阶段打断">二阶段打断</h5><p>查看 <a href="">并发编程设计模式</a>篇</p><h5 id="打断park">打断park</h5><p>情况一：</p><p>不interrupt()，调用park()的线程一直卡住，a、b两行代码不会执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);<span class="comment">// a</span></span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted()); <span class="comment">// b</span></span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="JUC并发编程/image-20231104162418476.png"alt="image-20231104162418476" /><figcaption aria-hidden="true">image-20231104162418476</figcaption></figure><p>情况二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);<span class="comment">// a</span></span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted()); <span class="comment">// b</span></span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="JUC并发编程/image-20231104162430515.png"alt="image-20231104162430515" /><figcaption aria-hidden="true">image-20231104162430515</figcaption></figure><p>情况三：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);<span class="comment">// a</span></span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted()); <span class="comment">// b</span></span><br><span class="line">        </span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);<span class="comment">// c</span></span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure><img src="JUC并发编程/image-20231104162537027.png"alt="image-20231104162537027" /><figcaption aria-hidden="true">image-20231104162537027</figcaption></figure><p>park（）方法在interrupted为true的时候，就不会阻塞了，直接执行完释放线程</p><p>情况四：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;park...&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);<span class="comment">// a</span></span><br><span class="line">        log.debug(<span class="string">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.interrupted()); <span class="comment">// b</span></span><br><span class="line">        </span><br><span class="line">        LockSupport.park();</span><br><span class="line">        log.debug(<span class="string">&quot;unpark...&quot;</span>);<span class="comment">// c</span></span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b处调用静态方法，改变打断状态，于是park()方法在打断状态为false的情况下，继续阻塞线程：</p><figure><img src="JUC并发编程/image-20231104162719504.png"alt="image-20231104162719504" /><figcaption aria-hidden="true">image-20231104162719504</figcaption></figure><h3 id="守护线程">守护线程</h3><p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。</p><p>有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，<strong>即使守护线程的代码没有执行完，也会强制结束。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">log.debug(<span class="string">&quot;开始运行...&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始运行...&quot;</span>);</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;运行结束...&quot;</span>);</span><br><span class="line">&#125;, <span class="string">&quot;daemon&quot;</span>);</span><br><span class="line"><span class="comment">// 设置该线程为守护线程</span></span><br><span class="line">t1.setDaemon(<span class="literal">true</span>);</span><br><span class="line">t1.start();</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line">log.debug(<span class="string">&quot;运行结束...&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure><img src="JUC并发编程/image-20231104163142667.png"alt="image-20231104163142667" /><figcaption aria-hidden="true">image-20231104163142667</figcaption></figure><p><strong>守护线程案例</strong></p><ul><li>垃圾回收器线程就是一种守护线程</li><li>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到shutdown 命令后，不会等待它们处理完当前请求</li></ul><h3 id="线程状态">线程状态</h3><h4 id="操作系统五种状态">操作系统五种状态</h4><figure><img src="JUC并发编程/image-20231104163410197.png"alt="image-20231104163410197" /><figcaption aria-hidden="true">image-20231104163410197</figcaption></figure><ul><li><p>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</p></li><li><p>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由CPU 调度执行</p></li><li><p>【运行状态】指获取了 CPU 时间片运行中的状态</p><ul><li>当 CPU时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li></ul></li><li><p>【阻塞状态】</p><ul><li><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到CPU，会导致线程上下文切换，进入【阻塞状态】</p></li><li><p>等 BIO操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</p></li><li><p>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p></li></ul></li><li><p>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p></li></ul><h4 id="java六种状态">Java六种状态</h4><p><img src="JUC并发编程/image-20231104163516406.png" alt="image-20231104163516406" style="zoom: 67%;" /></p><ul><li><p><strong>NEW</strong> 线程刚被创建，但是还没有调用 start()方法</p></li><li><p><strong>RUNNABLE</strong> 当调用了 start()方法之后，注意，<strong>Java API</strong> 层面的 RUNNABLE 状态涵盖了<strong>操作系统</strong>层面的【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</p></li><li><p><strong>BLOCKED</strong> ：阻塞状态</p></li><li><p><strong>WAITING</strong> ， <strong>TIMED_WAITING</strong>：等待态</p></li><li><p><strong>TERMINATED</strong> 当线程代码运行结束</p></li></ul><h5 id="状态转换">状态转换</h5><p><strong>NEW -&gt; RUNNABLE</strong></p><ol type="1"><li>当调用 <code>t.start()</code> 方法时，t由 NEW --&gt; RUNNABLE</li></ol><p><strong>RUNNABLE &lt;----&gt; WAITING</strong></p><ol start="2" type="1"><li><p><strong>t</strong> <strong>线程</strong>用 synchronized(obj)获取了对象锁后</p><ul><li><p>调用 obj.wait() 方法时，<strong>t</strong><strong>线程</strong>从 RUNNABLE --&gt; WAITING</p></li><li><p>调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时</p><ul><li><p>竞争锁成功，<strong>t</strong> <strong>线程</strong>从 WAITING--&gt; RUNNABLE</p></li><li><p>竞争锁失败，<strong>t</strong> <strong>线程</strong>从 WAITING--&gt; BLOCKED</p></li></ul></li></ul></li><li><p>线程相互等待——join</p><ul><li><strong>当前线程</strong>调用 t.join()方法时，<strong>当前线程</strong>从 RUNNABLE --&gt; WAITING</li><li><strong>t</strong><strong>线程</strong>运行结束，或调用了<strong>当前线程</strong>的interrupt() 时，<strong>当前线程</strong>从 WAITING --&gt; RUNNABLE</li></ul></li><li><p>park</p><ul><li><p>当前线程调用 LockSupport.park() 方法会让当前线程从 RUNNABLE--&gt; WAITING</p></li><li><p>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt()，会让目标线程从 WAITING --&gt; RUNNABLE</p></li></ul></li></ol><p>RUNNABLE &lt;---&gt; TIMED_WAITING</p><ol start="5" type="1"><li><p><strong>t</strong> <strong>线程</strong>用 synchronized(obj)获取了对象锁后</p><ul><li><p>调用 obj.wait(long n) 方法时，<strong>t</strong><strong>线程</strong>从 RUNNABLE --&gt; TIMED_WAITING</p></li><li><p><strong>t</strong> <strong>线程</strong>等待时间超过了 n毫秒，或调用 obj.notify() ， obj.notifyAll() ， t.interrupt() 时</p><ul><li><p>竞争锁成功，<strong>t</strong> <strong>线程</strong>从TIMED_WAITING --&gt; RUNNABLE</p></li><li><p>竞争锁失败，<strong>t</strong> <strong>线程</strong>从TIMED_WAITING --&gt; BLOCKED</p></li></ul></li></ul></li><li><p>join</p><ul><li><p><strong>当前线程</strong>调用 t.join(long n)方法时，<strong>当前线程</strong>从 RUNNABLE --&gt;TIMED_WAITING</p></li><li><p><strong>当前线程</strong>等待时间超过了 n毫秒，或<strong>t</strong><strong>线程</strong>运行结束，或调用了<strong>当前线程</strong>的interrupt() 时，<strong>当前线程</strong>从TIMED_WAITING --&gt;RUNNABLE</p></li></ul></li><li><p>sleep</p><ul><li><p>当前线程调用 Thread.sleep(long n) ，当前线程从 RUNNABLE --&gt;TIMED_WAITING</p></li><li><p><strong>当前线程</strong>等待时间超过了 n毫秒，<strong>当前线程</strong>从 TIMED_WAITING --&gt; RUNNABLE</p></li></ul></li><li><p>park</p><ul><li><p>当前线程调用 LockSupport.parkNanos(long nanos) 或LockSupport.parkUntil(long millis) 时，<strong>当前线程</strong>从RUNNABLE --&gt; TIMED_WAITING</p></li><li><p>调用 LockSupport.unpark(目标线程) 或调用了线程 的 interrupt()，或是等待超时，会让目标线程从TIMED_WAITING--&gt; RUNNABLE</p></li></ul></li></ol><p>RUNNABLE &lt;---&gt; BLOCKED</p><ol start="9" type="1"><li><p>争抢锁的过程</p><ul><li><p><strong>t</strong> <strong>线程</strong>用 synchronized(obj)获取了对象锁时如果竞争失败，从 RUNNABLE --&gt; BLOCKED</p></li><li><p>持 obj 锁线程的同步代码块执行完毕，会唤醒该对象上所有 BLOCKED的线程重新竞争，如果其中 <strong>t</strong><strong>线程</strong>竞争成功，从 BLOCKED --&gt; RUNNABLE，其它失败的线程仍然 BLOCKED</p></li></ul></li></ol><p>RUNNABLE &lt;---&gt; TERMINATED</p><ol start="10" type="1"><li>当前线程所有代码运行完毕，进入 TERMINATED</li></ol><h1 id="共享模型管程monitor">共享模型——管程Monitor</h1><h2 id="共享并发问题">共享并发问题</h2><h3 id="案例">案例</h3><p>java操作共享变量：</p><p>两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000次，结果是 0 吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            counter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            counter--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><ul><li>可能&gt;0</li><li>可能&lt;0</li><li>极低概率为0</li></ul><h4 id="字节码分析">字节码分析</h4><p>出现多种结果的原因：Java 中对静态变量的自增，自减并不是原子操作。</p><p>i++底层字节码指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getstatic i // 获取静态变量i的值</span><br><span class="line">iconst_1 // 准备常量1</span><br><span class="line">iadd // 自增</span><br><span class="line">putstatic i // 将修改后的值存入静态变量i</span><br></pre></td></tr></table></figure><p>i--底层字节码指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getstatic i // 获取静态变量i的值</span><br><span class="line">iconst_1 // 准备常量1</span><br><span class="line">isub // 自减</span><br><span class="line">putstatic i // 将修改后的值存入静态变量i</span><br></pre></td></tr></table></figure><p>java对此操作的内存模型如下：</p><p><img src="JUC并发编程/image-20231105153528733.png" alt="image-20231105153528733" style="zoom: 80%;" /></p><p>如果以上指令<strong>按照顺序</strong>，<strong>串行执行</strong>，不会出现问题：</p><p><img src="JUC并发编程/image-20231105153652143.png" alt="指令串行执行" style="zoom:80%;" /></p><h5 id="指令重排序">指令重排序</h5><figure><img src="JUC并发编程/image-20231105153733380.png"alt="指令重排序——出现负数的情况" /><figcaption aria-hidden="true">指令重排序——出现负数的情况</figcaption></figure><p>出现正数的情况也就是先加法，然后在上下文切换的过程中执行减法，随后加法覆盖减法的结果。</p><h4 id="临界区">临界区</h4><p>一个程序运行多个线程本身是没有问题的，问题出在多个线程访问<strong>共享资源</strong>，多个线程读<strong>共享资源</strong>其实也没有问题，在多个线程对<strong>共享资源</strong>读写操作时发生指令交错，就会出现问题。</p><p>定义：一段<strong>代码块</strong>内如果存在对<strong>共享资源</strong>的<strong>多线程读写操作</strong>，称这段代码块为<strong>临界区</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> </span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#123; </span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> </span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#123; </span><br><span class="line">    counter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="竞态条件">竞态条件</h4><p>多个线程在临界区内执行，由于代码的<strong>执行序列不同</strong>而导致结果无法预测，称之为发生了<strong>竞态条件</strong></p><ul><li>其实就是发生上下文切换</li></ul><h2 id="synchronized使用"><strong>synchronized</strong>使用</h2><h3 id="基础语法">基础语法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) <span class="comment">// 线程1， 线程2(blocked)</span></span><br><span class="line">&#123;</span><br><span class="line">    临界区</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决上述案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                counter++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">                counter--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    log.debug(<span class="string">&quot;&#123;&#125;&quot;</span>,counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类比理解">类比理解</h3><p><img src="JUC并发编程/image-20231105154712054.png" alt="image-20231105154712054" style="zoom:80%;" /></p><ul><li><p>synchronized(对象)中的对象，可以想象为一个房间（room），有唯一入口（门）房间只能一次进入一人进行计算，线程t1，t2 想象成两个人</p></li><li><p>当线程 t1 执行到 synchronized(room) 时就好比 t1进入了这个房间，并锁住了门拿走了钥匙，在门内执行count++ 代码</p></li><li><p>这时候如果 t2 也运行到了 synchronized(room)时，它发现门被锁住了，只能在门外等待，发生了上下文切换，阻塞住了</p></li><li><p>这中间<strong>即使 t1 的 cpu时间片不幸用完</strong>，被踢出了门外（不要错误理解为锁住了对象就能一直执行下去哦），这时<strong>门还是锁住的</strong>，t1仍拿着钥匙，t2 线程还在阻塞状态进不来，<strong>只有下次轮到 t1自己再次获得时间片时才能开门进入</strong></p></li><li><p>当 t1 执行完 synchronized{} 块内的代码，这时候才会从 obj房间出来并解开门上的锁，唤醒 t2 线程把钥匙给他。t2 线程这时才可以进入obj 房间，锁住了门拿上钥匙，执行它的 count-- 代码</p></li></ul><h4 id="代码流程">代码流程</h4><figure><img src="JUC并发编程/image-20231105155138289.png"alt="image-20231105155138289" /><figcaption aria-hidden="true">image-20231105155138289</figcaption></figure><h3 id="不同位置的synchronized">不同位置的synchronized</h3><p>如果把 synchronized(obj) 放在 for 循环的外面，如何理解？-- 原子性</p><p>那就是一次性执行完整个for循环。</p><p>如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？--锁对象</p><p>锁的对象要单一，针对同一共享变量，仅能设置一把对象锁。</p><p>Java中，万物皆对象，锁也不例外。</p><p>如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？--锁对象</p><p>不加锁的线程，都是可以通过CPU切换上下文进行插队操作的。</p><h4 id="加在方法上">加在方法上</h4><p>成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">等价于</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Test.class) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面向对象优化代码">面向对象优化代码</h3><p>把需要保护的共享变量放入一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Room</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            value++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decrement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            value--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Room</span> <span class="variable">room</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Room</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5000</span>; j++) &#123;</span><br><span class="line">                room.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">5000</span>; j++) &#123;</span><br><span class="line">                room.decrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span> , room.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程八锁">线程八锁</h3><p>情况一：输出12 或 21</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>谁先获得锁，谁先执行</li></ul><p>情况二：1s后12，或 2 1s后 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>谁先获得锁，谁先执行</li></ul><p>情况三：</p><p>结果：</p><ul><li>3 1s后 12</li><li>32 1s后 1</li><li>23 1s后 1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">c</span><span class="params">()</span> &#123;</span><br><span class="line"> log.debug(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.b(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.c(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>谁先获得锁，谁先执行</li><li>c方法没加锁，无需等</li></ul><p>情况4：</p><p>结果： 2 1s后 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>并行，两把锁互不影响</li></ul><p>情况5：</p><p>结果： 2 1s后 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;&#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>锁不同的对象，互不影响</li></ul><p>情况6：</p><p>结果： 1s后 12 | 2 1s后1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;&#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>锁相同的类对象，看谁先抢到锁</li></ul><p>情况7：</p><p>结果： 2 1s后 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;&#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>锁的对象不同，不影响</li></ul><p>情况8：</p><p>结果： 1s后 12 | 2 1s后1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.Number&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Number</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;&#123;</span><br><span class="line">        sleep(1s);</span><br><span class="line">        log.debug(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="type">Number</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n1.a(); &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; n2.b(); &#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>即使number对象不同，但锁加在了静态方法，锁的是这个类</li></ul><h2 id="变量的线程安全">变量的线程安全</h2><p>看一个变量是否线程安全的核心：</p><ul><li>这个变量会不会被共享</li><li>共享后是不是只读</li><li>这个变量是不是引用类型</li><li>引用的对象属性可以被修改？</li></ul><h3 id="成员变量静态变量">成员变量&amp;静态变量</h3><ul><li>如果它们没有<strong>共享</strong>，则线程安全</li><li>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况<ul><li>如果只有读操作，则线程安全</li><li>如果有读写操作，则这段代码是临界区，需要考虑线程安全</li></ul></li></ul><h4 id="案例分析">案例分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadUnsafe</span> &#123;</span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="comment">// &#123; 临界区, 会产生竞态条件</span></span><br><span class="line">            method2();</span><br><span class="line">            method3();</span><br><span class="line">            <span class="comment">// &#125; 临界区</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_NUMBER</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOOP_NUMBER</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ThreadUnsafe</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadUnsafe</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            test.method1(LOOP_NUMBER);</span><br><span class="line">        &#125;, <span class="string">&quot;Thread&quot;</span> + i).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>线程安全问题：如果线程1没来得及add，线程2先一步执行remove，就会抛异常。<ul><li>基于list不是线程安全的集合</li></ul></li></ul><p><img src="JUC并发编程/image-20231106210901142.png" alt="image-20231106210901142" style="zoom:67%;" /></p><h3 id="局部变量">局部变量</h3><ul><li><p>局部变量（基础类型）是线程安全的</p></li><li><p>但局部变量引用的对象则未必</p><ul><li><p>如果该对象没有<strong>逃离方法的作用访问</strong>，它是线程安全的</p></li><li><p>如果该对象逃离方法的作用范围，需要考虑线程安全</p></li></ul></li></ul><h4 id="案例分析-1">案例分析</h4><p><strong>例一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程调用 test1() 方法时，对于局部变量i，会在<strong>每个线程的栈帧内存中被创建</strong>，因此不存在共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>;</span><br><span class="line">descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">        Code:</span><br><span class="line">stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">0</span></span><br><span class="line">    <span class="number">0</span>: bipush <span class="number">10</span></span><br><span class="line">        <span class="number">2</span>: istore_0</span><br><span class="line">            <span class="number">3</span>: iinc <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">                <span class="number">6</span>: <span class="keyword">return</span></span><br><span class="line">        LineNumberTable:</span><br><span class="line">line <span class="number">10</span>: <span class="number">0</span></span><br><span class="line">    line <span class="number">11</span>: <span class="number">3</span></span><br><span class="line">        line <span class="number">12</span>: <span class="number">6</span></span><br><span class="line">        LocalVariableTable:</span><br><span class="line">Start Length Slot Name Signature</span><br><span class="line">    <span class="number">3</span> <span class="number">4</span> <span class="number">0</span> i I</span><br></pre></td></tr></table></figure><p><img src="JUC并发编程/image-20231106203602875.png" alt="image-20231106203602875" style="zoom:67%;" /></p><p><strong>例二：</strong></p><p>将成员变量的例子，改为局部变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadUnsafe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            <span class="comment">// &#123; 临界区, 会产生竞态条件</span></span><br><span class="line">            method2(list);</span><br><span class="line">            method3(list);</span><br><span class="line">            <span class="comment">// &#125; 临界区</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_NUMBER</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LOOP_NUMBER</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ThreadUnsafe</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadUnsafe</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            test.method1(LOOP_NUMBER);</span><br><span class="line">        &#125;, <span class="string">&quot;Thread&quot;</span> + i).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量的JMM模型：</p><p><img src="JUC并发编程/image-20231106211738659.png" alt="image-20231106211738659" style="zoom: 67%;" /></p><h4 id="方法修饰符保证线程安全">方法修饰符保证线程安全</h4><p>如果把 method2 和 method3 的方法修改为 public会不会代理线程安全问题？</p><p>情况1：有其它线程调用 method2 和 method3</p><p>情况2：在 情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2或 method3 方法，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafe</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(<span class="type">int</span> loopNumber)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class="line">            method2(list);</span><br><span class="line">            method3(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        list.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果method3或者method2方法是public修饰，就可以被子类重写覆盖，那就有父子类共享list变量这一现象出现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadSafeSubClass</span> <span class="keyword">extends</span> <span class="title class_">ThreadSafe</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            list.remove(<span class="number">0</span>);</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见线程安全类">常见线程安全类</h3><ul><li>String</li><li>Integer</li><li>StringBuffer</li><li>Random</li><li>Vector</li><li>Hashtable</li><li>java.util.concurrent 包下的类</li></ul><p>线程安全在哪？</p><ul><li>多个线程调用它们<strong>同一个实例</strong>的<strong>某个方法</strong>时，是线程安全的。</li></ul><h4 id="类方法不同组合导致线程安全">类方法不同组合导致线程安全</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"><span class="comment">// 线程1，线程2</span></span><br><span class="line"><span class="keyword">if</span>( table.get(<span class="string">&quot;key&quot;</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">    table.put(<span class="string">&quot;key&quot;</span>, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="JUC并发编程/image-20231106212619666.png" alt="image-20231106212619666" style="zoom: 80%;" /></p><ul><li>即使，get、put方法都加了synchronized锁，但是方法之间不是原子性的，每个方法算一个指令，那多线程情况下会出现指令错乱现象。</li></ul><h4 id="string类的线程安全">String类的线程安全</h4><p>String 有 replace，substring等方法【可以】改变值，但实际上是新创建了String对象在常量池，原引用不改变，那原引用指向的字符串还是不变的。</p><p>String类定义了final属性，可以保证不被任何子类继承，从而避免了子类重写父类的这些方法而产生并发安全问题。</p><h3 id="典例">典例</h3><h4 id="servlet">Servlet</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？  否</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 是否安全？  是</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">S1</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="comment">// 是否安全？  是 </span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">S2</span> <span class="operator">=</span> <span class="string">&quot;...&quot;</span>;</span><br><span class="line">    <span class="comment">// 是否安全？ 否</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">D1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 是否安全？  否 ，内部属性可能会更改</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Date</span> <span class="variable">D2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用上述变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？ 否， 单例， 会被共享</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="comment">// 记录调用次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全   否</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        userService.update(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全  否</span></span><br><span class="line">    <span class="type">private</span> <span class="variable">Connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update user set password = ? where username = ?&quot;</span>;</span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><h4 id="aop">aop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    <span class="comment">// 是否安全？ 否， 类是单例，会被共享</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">        start = System.nanoTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;cost time:&quot;</span> + (end-start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改进：</p><p>采用环绕通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义切点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* Educoder.BlogService.service*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">My</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* *(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy.MM.dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> sdf.parse(startStr).getTime();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            point.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> sdf.parse(endStr).getTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;程序a执行耗时&quot;</span> + (end - start));</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="继承">继承</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 是否安全</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        foo(sdf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title function_">foo</span><span class="params">(SimpleDateFormat sdf)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test</span>().bar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类重写，变成外星方法，导致sdf共享</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">(SimpleDateFormat sdf)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">dateStr</span> <span class="operator">=</span> <span class="string">&quot;1999-10-11 00:00:00&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sdf.parse(dateStr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="买票卖票">买票卖票</h4><p>测试下面代码是否存在线程安全问题，并尝试改正</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExerciseSell</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TicketWindow</span> <span class="variable">ticketWindow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TicketWindow</span>(<span class="number">2000</span>);</span><br><span class="line">        List&lt;Thread&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 用来存储买出去多少张票</span></span><br><span class="line">        List&lt;Integer&gt; sellCount = <span class="keyword">new</span> <span class="title class_">Vector</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="comment">// 分析这里的竞态条件</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ticketWindow.sell(randomAmount());<span class="comment">//不安全，因为ticketWindow对象被多线程共享</span></span><br><span class="line">                sellCount.add(count);<span class="comment">//单个的方法是线程安全的，因为Vector</span></span><br><span class="line">            &#125;);</span><br><span class="line">            list.add(t);<span class="comment">//安全，因为不在多线程竞态代码块里，只是主线程单个线程进行操作</span></span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//主线程等待其它线程执行完毕</span></span><br><span class="line">        list.forEach((t) -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 买出去的票求和</span></span><br><span class="line">        log.debug(<span class="string">&quot;selled count:&#123;&#125;&quot;</span>,sellCount.stream().mapToInt(c -&gt; c).sum());</span><br><span class="line">        <span class="comment">// 剩余票数</span></span><br><span class="line">        log.debug(<span class="string">&quot;remainder count:&#123;&#125;&quot;</span>, ticketWindow.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Random 为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="comment">// 随机 1~5，表示买票的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">randomAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">5</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TicketWindow</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TicketWindow</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sell</span><span class="params">(<span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.count &gt;= amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.count -= amount;</span><br><span class="line">            <span class="keyword">return</span> amount;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改正：</p><figure><img src="JUC并发编程/image-20231106221247791.png"alt="image-20231106221247791" /><figcaption aria-hidden="true">image-20231106221247791</figcaption></figure><h5 id="测试技巧">测试技巧</h5><p>测试脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /L %n in (1,1,10) do java -cp &quot;.;C:\Users\manyh\.m2\repository\ch\qos\logback\logbackclassic\1.2.3\logback-classic-1.2.3.jar;C:\Users\manyh\.m2\repository\ch\qos\logback\logbackcore\1.2.3\logback-core-1.2.3.jar;C:\Users\manyh\.m2\repository\org\slf4j\slf4japi\1.7.25\slf4j-api-1.7.25.jar&quot; ExerciseSell</span><br></pre></td></tr></table></figure><ul><li>for：循环，</li><li>/L ：根据后面范围循环</li><li>%n：循环临时变量</li></ul><p>优势：能体现线程安全问题</p><h4 id="转账">转账</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExerciseTransfer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Account</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Account</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                a.transfer(b, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                b.transfer(a, randomAmount());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line">        <span class="comment">// 查看转账2000次后的总金额</span></span><br><span class="line">        log.debug(<span class="string">&quot;total:&#123;&#125;&quot;</span>,(a.getMoney() + b.getMoney()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Random 为线程安全</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">    <span class="comment">// 随机 1~100</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">randomAmount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> random.nextInt(<span class="number">100</span>) +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> money;<span class="comment">//是共享变量，需要保护</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMoney</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMoney</span><span class="params">(<span class="type">int</span> money)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.money = money;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//给别人转钱</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(Account target, <span class="type">int</span> amount)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.money &gt; amount) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setMoney(<span class="built_in">this</span>.getMoney() - amount);</span><br><span class="line">            target.setMoney(target.getMoney() + amount);<span class="comment">//b的余额也是共享变量需要保护</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这题共享变量有两个：a的余额，b的余额。因此给transfer方法单独加上synchronized锁没用，因为锁的是this，只能锁住某一个的余额</li></ul><p>修正方案一：</p><p>锁住这个类即可</p><figure><img src="JUC并发编程/image-20231106222127920.png"alt="image-20231106222127920" /><figcaption aria-hidden="true">image-20231106222127920</figcaption></figure><p>缺陷：效率低</p><h2 id="monitor">Monitor</h2><p>最关键的作用：保护<strong>临界区</strong>代码的<strong>原子性</strong></p><h3 id="java对象头">Java对象头</h3><p>普通对象 8 字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|--------------------------------------------------------------|</span><br><span class="line">| Object <span class="title function_">Header</span> <span class="params">(<span class="number">64</span> bits)</span> |</span><br><span class="line">|------------------------------------|-------------------------|</span><br><span class="line">| Mark <span class="title function_">Word</span> <span class="params">(<span class="number">32</span> bits)</span> | Klass <span class="title function_">Word</span> <span class="params">(<span class="number">32</span> bits)</span> |</span><br><span class="line">|------------------------------------|-------------------------|</span><br></pre></td></tr></table></figure><p>数组对象 12 字节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|---------------------------------------------------------------------------------|</span><br><span class="line">| Object <span class="title function_">Header</span> <span class="params">(<span class="number">96</span> bits)</span> |</span><br><span class="line">|--------------------------------|-----------------------|------------------------|</span><br><span class="line">| Mark <span class="title function_">Word</span><span class="params">(32bits)</span> | Klass <span class="title function_">Word</span><span class="params">(32bits)</span> | array <span class="title function_">length</span><span class="params">(32bits)</span> |</span><br><span class="line">|--------------------------------|-----------------------|------------------------|</span><br></pre></td></tr></table></figure><p>32位虚拟机Mark Word 结构为</p><figure><img src="JUC并发编程/image-20231107154049150.png"alt="image-20231107154049150" /><figcaption aria-hidden="true">image-20231107154049150</figcaption></figure><ul><li>hashcode：</li><li>biased：加偏向锁后，状态表</li></ul><p>64 位虚拟机 Mark Word：</p><figure><img src="JUC并发编程/image-20231107154116073.png"alt="image-20231107154116073" /><figcaption aria-hidden="true">image-20231107154116073</figcaption></figure><h3 id="monitor原理">*Monitor原理</h3><p>Monitor称为监视器或管程，每个对象可以关联一个Monitor对象，使用synchronized 给对象上锁（重量级）之后，该对象头的Mark Word中就被设置指向 Monitor 对象的指针</p><p><img src="JUC并发编程/image-20231107154916095.png" alt="image-20231107154916095" style="zoom: 67%;" /></p><ol type="1"><li>初始，Monitor中Owner字段为null</li><li>线程二执行<code>synchronized(this)</code>代码，获得该对象的锁，于是owner指针指向Thread-2，表示锁当前有线程在使用</li><li>其它如3、4、5线程执行<code>synchronized(this)</code>代码，会进入EntryList BLOCKED状态</li><li>WAITING状态内的线程，是属于之前获得过锁，但条件不满足进入 WAITING状态的线程</li></ol><h3 id="synchronized原理">*Synchronized原理</h3><p>故事角色</p><ul><li><p>老王 - JVM</p></li><li><p>小南 - 线程</p></li><li><p>小女 - 线程</p></li><li><p>房间 - 对象</p></li><li><p>房间门上 - 防盗锁 - Monitor</p></li><li><p>房间门上 - 小南书包 - 轻量级锁</p></li><li><p>房间门上 - 刻上小南大名 - 偏向锁</p></li><li><p>批量重刻名 - 一个类的偏向锁撤销到达 20 阈值</p></li><li><p>不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向</p></li></ul><p>小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，即使他离开了，别人也进不了门，他的工作就是安全的。</p><p>但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女晚上用。每次上锁太麻烦了，有没有更简单的办法呢？</p><p>小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是自己的，那么就在门外等，并通知对方下次用锁门的方式。</p><p>后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍然觉得麻烦。</p><p>于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦掉，升级为挂书包的方式。</p><p>同学们都放假回老家了，小南就膨胀了，在 20个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(java.lang.String[])</span>;</span><br><span class="line">descriptor: ([Ljava/lang/String;)V；</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC;</span><br><span class="line">     Code:</span><br><span class="line">         stack=<span class="number">2</span>, locals=<span class="number">3</span>, args_size=<span class="number">1</span></span><br><span class="line">             <span class="number">0</span>: getstatic #<span class="number">2</span> <span class="comment">// &lt;- lock引用 （synchronized开始）</span></span><br><span class="line">             <span class="number">3</span>: dup</span><br><span class="line">             <span class="number">4</span>: astore_1 <span class="comment">// lock引用 -&gt; slot 1</span></span><br><span class="line">             <span class="number">5</span>: monitorenter <span class="comment">// 将 lock对象 MarkWord 置为 Monitor 指针</span></span><br><span class="line">             <span class="number">6</span>: getstatic #<span class="number">3</span> <span class="comment">// &lt;- i</span></span><br><span class="line">             <span class="number">9</span>: iconst_1 <span class="comment">// 准备常数 1</span></span><br><span class="line">             <span class="number">10</span>: iadd <span class="comment">// +1</span></span><br><span class="line">             <span class="number">11</span>: putstatic #<span class="number">3</span> <span class="comment">// -&gt; i</span></span><br><span class="line">             <span class="number">14</span>: aload_1 <span class="comment">// &lt;- lock引用</span></span><br><span class="line">             <span class="number">15</span>: monitorexit <span class="comment">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class="line">             <span class="number">16</span>: goto <span class="number">24</span></span><br><span class="line">             <span class="number">19</span>: astore_2 <span class="comment">// e -&gt; slot 2 </span></span><br><span class="line">             <span class="number">20</span>: aload_1 <span class="comment">// &lt;- lock引用</span></span><br><span class="line">             <span class="number">21</span>: monitorexit <span class="comment">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class="line">             <span class="number">22</span>: aload_2 <span class="comment">// &lt;- slot 2 (e)</span></span><br><span class="line">             <span class="number">23</span>: athrow <span class="comment">// throw e</span></span><br><span class="line">             <span class="number">24</span>: <span class="keyword">return</span></span><br><span class="line">         Exception table:</span><br><span class="line">             from to target type</span><br><span class="line">             <span class="number">6</span> <span class="number">16</span> <span class="number">19</span>   any</span><br><span class="line">               <span class="number">19</span> <span class="number">22</span> <span class="number">19</span> any</span><br><span class="line">         LineNumberTable:</span><br><span class="line">         line <span class="number">8</span>: <span class="number">0</span></span><br><span class="line">         line <span class="number">9</span>: <span class="number">6</span></span><br><span class="line">         line <span class="number">10</span>: <span class="number">14</span></span><br><span class="line">         line <span class="number">11</span>: <span class="number">24</span></span><br><span class="line">         LocalVariableTable:</span><br><span class="line">         Start Length Slot Name Signature</span><br><span class="line">         <span class="number">0</span>   <span class="number">25</span>    <span class="number">0</span> args [Ljava/lang/String;</span><br><span class="line">         StackMapTable: number_of_entries = <span class="number">2</span></span><br><span class="line">         frame_type = <span class="number">255</span> <span class="comment">/* full_frame */</span></span><br><span class="line">         offset_delta = <span class="number">19</span></span><br><span class="line">         locals = [ class <span class="string">&quot;[Ljava/lang/String;&quot;</span>, <span class="keyword">class</span> <span class="title class_">java</span>/lang/Object ]</span><br><span class="line">         stack = [ <span class="keyword">class</span> <span class="title class_">java</span>/lang/Throwable ]</span><br><span class="line">         frame_type = <span class="number">250</span> <span class="comment">/* chop */</span></span><br><span class="line">         offset_delta = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>优化方向：</p><p>偏向 -&gt; 轻量 -&gt; 重量</p><h4 id="轻量级锁">轻量级锁</h4><p>使用场景：一个对象要在多线程情况下被共享访问，需要加锁，但是线程加锁的时间是错开的（没有竞争），那可以用轻量级锁优化。</p><p>语法：不变</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li><p>方法1开始加锁创建锁记录（LockRecord）对象，<strong>每个线程都的栈帧都会包含一个锁记录的结构</strong>，内部可以存储锁定对象的MarkWord</p><p><img src="JUC并发编程/image-20231108155239525.png" alt="image-20231108155239525" style="zoom:50%;" /></p></li><li><p>让锁记录中 Object reference 指向锁对象，利用cas替换object的MarkWorld，将mark world的值存入锁记录</p><p><img src="JUC并发编程/image-20231108155800284.png" alt="image-20231108155800284" style="zoom:50%;" /></p></li><li><p>cas替换成功，对象mark world状态改变，变成轻量锁状态，</p><p><img src="JUC并发编程/image-20231108155905448.png" alt="image-20231108155905448" style="zoom:50%;" /></p><ul><li>lock record里，记录了对象未加锁前的信息</li></ul></li><li><p>如果cas失败：</p><ul><li><p>如果是<strong>其它线程</strong>已经持有了该 Object的轻量级锁，这时表明有竞争，进入锁膨胀过程</p></li><li><p>如果是<strong>自己</strong>执行了 synchronized<strong>锁重入</strong>，那么再添加一条 Lock Record 作为重入的计数</p><p><img src="JUC并发编程/image-20231108160252520.png" alt="image-20231108160252520" style="zoom:50%;" /></p><p>当退出 synchronized 代码块（解锁时）如果有取值为 null的锁记录，表示有重入，这时<strong>重置锁记录，表示重入计数减一</strong></p></li></ul></li><li><p>完全退出synchronized块，线程里的锁记录不为null，这时使用 cas 将Mark Word 的值恢复给对象头</p><ul><li>成功：解锁成功，对象进入无锁状态</li><li>失败：说明轻量级锁已经升级为重量级锁，进入重量级解锁流程</li></ul></li></ol><h4 id="锁膨胀升级">锁膨胀（升级）</h4><p>如果在尝试加轻量级锁的过程中，CAS操作无法成功，这时一种情况就是<strong>有其它线程为此对象加上了轻量级锁（有竞争）</strong>，这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li><p>当 Thread-1 进行轻量级加锁时，Thread-0已经对该对象加了轻量级锁</p><p><img src="JUC并发编程/image-20231108160907138.png" alt="image-20231108160907138" style="zoom:50%;" /></p></li><li><p>这时候线程1加锁失败，需要阻塞，但轻量级锁是不会阻塞，因此锁会升级成重量锁</p><ul><li>即为 Object 对象申请 Monitor 锁，让 Object 指向重量级锁地址</li><li>然后自己进入 Monitor 的 EntryList BLOCKED</li></ul><p><img src="JUC并发编程/image-20231108161754686.png" alt="image-20231108161754686" style="zoom:50%;" /></p><p>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED线程</p></li></ol><h4 id="自旋优化">自旋优化</h4><p>自旋概念：对于重量级锁，如果当前线程未抢到锁，那就会重试几次</p><p>自旋成功：</p><p><img src="JUC并发编程/image-20231108162222704.png" alt="image-20231108162222704" style="zoom:50%;" /></p><p>自旋失败</p><p><img src="JUC并发编程/image-20231108162236762.png" alt="image-20231108162236762" style="zoom:50%;" /></p><p>应用场景：</p><ol type="1"><li>多核CPU</li></ol><h4 id="偏向锁">偏向锁</h4><p>优化原因：轻量级锁在没有竞争的时候，当前线程进行重入的时候，每一次重入都需要进行一次cas比较，然后在线程的栈帧里增加一条lockrecord记录。每一次cas都会消耗性能。</p><p>优化原理：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 A</span></span><br><span class="line">        m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 B</span></span><br><span class="line">        m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>( obj ) &#123;</span><br><span class="line">        <span class="comment">// 同步块 C</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>轻量级锁加锁过程：</p><p><img src="JUC并发编程/image-20231108163925621.png" alt="image-20231108163925621" style="zoom:50%;" /></p></li><li><p>偏向锁加锁过程：</p><p><img src="JUC并发编程/image-20231108163949938.png" alt="image-20231108163949938" style="zoom:50%;" /></p></li></ul><h5 id="偏向状态">偏向状态</h5><p>一个对象创建时：</p><ul><li>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05即最后 3 位为 101，这时它的thread、epoch、age 都为 0</li><li>偏向锁是默认是<strong>延迟</strong>的，不会在程序启动时立即生效，如果想避免延迟，可以加VM 参数 -XX:BiasedLockingStartupDelay=0 来禁用延迟</li><li>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</li></ul><h5 id="撤销">撤销</h5><ol type="1"><li>调用对象的hashcode，偏向锁的对象 MarkWord 中<strong>存储的是线程id</strong>，如果调用 hashCode 会导致偏向锁被撤销<ul><li>轻量级锁会在锁记录中记录 hashCode</li><li>重量级锁会在 Monitor 中记录 hashCode</li></ul></li><li>其它线程使用该对象，会将该对象升级为轻量级锁</li><li>调用 <code>wait / notify</code>，直接升级为重量锁</li></ol><h5 id="批量重偏向">批量重偏向</h5><p>对象虽然被多个线程访问，但<strong>没有竞争</strong>，偏向T1的线程有可能会偏向T2，重置线程ID为T2的ID。</p><p>触发条件：撤销偏向锁20次以后，jvm会在给这些对象加锁时重新偏向至加锁线程</p><h5 id="批量撤销">批量撤销</h5><p>撤销偏向锁达到阈值40次，jvm会将偏向锁升级为轻量级锁，并且，整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的。</p><blockquote><p><strong>参考资料</strong></p><p>https://github.com/farmerjohngit/myblog/issues/12</p><p>https://www.cnblogs.com/LemonFive/p/11246086.html</p><p>https://www.cnblogs.com/LemonFive/p/11248248.html</p><p>偏向锁论文</p></blockquote><h4 id="锁消除">锁消除</h4><p>本质上是一种JIT优化，会对加锁的对象进行逃逸分析，判断某个变量是否超出了方法等作用范围，随后优化一些加锁的代码块使其变成非阻塞模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class="line"><span class="meta">@Warmup(iterations=3)</span></span><br><span class="line"><span class="meta">@Measurement(iterations=5)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBenchmark</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//不会逃离方法作用范围</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="keyword">synchronized</span> (o) &#123;<span class="comment">//优化为不加锁</span></span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="waitnotify">wait&amp;notify</h2><h3 id="api">API</h3><ul><li><code>obj.wait()</code> 让进入 object 监视器的线程到 waitSet等待</li><li><code>obj.wait(long m)</code> 让进入 object 监视器的线程到 waitSet等待m毫秒</li><li><code>obj.notify()</code> 在 object 上正在 waitSet等待的线程中<strong>随机</strong>唤醒一个</li><li><code>obj.notifyAll()</code> 让 object 上正在 waitSet等待的线程<strong>全部</strong>唤醒</li></ul><p>保证线程之间进行协作，属于Object类的方法，所以每个对象都有。并且这些方法是基于对象使用的，使用前都需要锁对象。</p><h3 id="与sleep的区别">与sleep的区别</h3><ol type="1"><li>sleep 是 Thread 方法，而 wait 是 Object 的方法</li><li>wait必须强制配合synchronized使用</li><li>sleep睡眠时不会释放对象锁，但是wait会</li></ol><h3 id="原理">原理</h3><figure><img src="JUC并发编程/image-20231114224457374.png"alt="image-20231114224457374" /><figcaption aria-hidden="true">image-20231114224457374</figcaption></figure><figure><img src="JUC并发编程/image-20231114224413887.png"alt="image-20231114224413887" /><figcaption aria-hidden="true">image-20231114224413887</figcaption></figure><ul><li>获取到锁的线程，被OWNER引用以后，发现执行条件（比如while循环内判断条件）不满足，调用wait进入WaitSet集合中去等待</li><li>BLOCKED 和 WAITING 的线程都处于阻塞状态，不占用 CPU 时间片</li><li>BLOCKED 线程会在 Owner 线程释放锁时唤醒</li><li>WAITING 线程会在 Owner 线程调用 notify 或 notifyAll时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入EntryList 重新竞争</li></ul><h3 id="最佳实践">最佳实践</h3><h4 id="虚假唤醒">虚假唤醒</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">        <span class="keyword">if</span> (!hasCigarette) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;没烟，先歇会！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                room.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;有烟没？[&#123;&#125;]&quot;</span>, hasCigarette);</span><br><span class="line">        <span class="keyword">if</span> (hasCigarette) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;没干成活...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;小南&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        log.debug(<span class="string">&quot;外卖送到没？[&#123;&#125;]&quot;</span>, hasTakeout);</span><br><span class="line">        <span class="keyword">if</span> (!hasTakeout) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;没外卖，先歇会！&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                room.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.debug(<span class="string">&quot;外卖送到没？[&#123;&#125;]&quot;</span>, hasTakeout);</span><br><span class="line">        <span class="keyword">if</span> (hasTakeout) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;可以开始干活了&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;没干成活...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;小女&quot;</span>).start();</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (room) &#123;</span><br><span class="line">        hasTakeout = <span class="literal">true</span>;</span><br><span class="line">        log.debug(<span class="string">&quot;外卖到了噢！&quot;</span>);</span><br><span class="line">        room.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;送外卖的&quot;</span>).start();</span><br></pre></td></tr></table></figure><ul><li>notify 只能随机唤醒一个 WaitSet中的线程，这时如果有其它线程也在等待，那么就可能唤醒不了正确的线程，称之为<strong>虚假唤醒</strong></li></ul><h4 id="使用模板">使用模板</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程A</span></span><br><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    <span class="keyword">while</span>(条件不成立)&#123;</span><br><span class="line">       lock.wait(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//... 线程B...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程N</span></span><br><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    lock.notifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="parkunpark">Park&amp;Unpark</h2><h3 id="使用">使用</h3><p>它们是 LockSupport 类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暂停当前线程</span></span><br><span class="line">LockSupport.park(); </span><br><span class="line"><span class="comment">// 恢复某个线程的运行</span></span><br><span class="line">LockSupport.unpark(暂停线程对象)</span><br></pre></td></tr></table></figure><p>特点：</p><ul><li>wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而park，unpark 不必</li><li>park &amp; unpark 是以线程为单位来【阻塞】和【唤醒】线程，而 notify只能随机唤醒一个等待线程，notifyAll是唤醒所有等待线程，就不那么【精确】</li><li>park &amp; unpark 可以先 unpark，而 wait &amp; notify 不能先notify</li></ul><h3 id="工作原理">工作原理</h3><p>每个线程都有自己的一个 Parker 对象，由三部分组成 _counter ， _cond 和_mutex</p><ul><li><p>线程就像一个旅人，Parker就像他随身携带的背包，条件变量就好比背包中的帐篷。_counter就好比背包中的备用干粮（0 为耗尽，1 为充足）</p></li><li><p>调用 park 就是要看需不需要停下来歇息</p><ul><li><p>如果备用干粮耗尽，那么钻进帐篷歇息</p></li><li><p>如果备用干粮充足，那么不需停留，继续前进</p></li></ul></li><li><p>调用 unpark，就好比令干粮充足</p><ul><li><p>如果这时线程还在帐篷，就唤醒让他继续前进</p></li><li><p>如果这时线程还在运行，那么下次他调用 park时，仅是消耗掉备用干粮，不需停留继续前进</p><ul><li>因为背包空间有限，多次调用 unpark 仅会补充一份备用干粮</li></ul></li></ul></li></ul><p>先park（） 后unpark（）：</p><p><img src="JUC并发编程/image-20231116153842384.png" alt="park" style="zoom:67%;" /></p><p><img src="JUC并发编程/image-20231116153852471.png" alt="unpark" style="zoom: 67%;" /></p><p>先unpark后park：<img src="JUC并发编程/image-20231116153908532.png" alt="先unpark后park" style="zoom:67%;" /></p><h2 id="多把锁">多把锁</h2><p>假如一个大对象资源里有多个小资源，这些小资源互不干扰互不影响，一个线程需要一个小资源，另一个线程需要另一个小资源，线程之间没必要阻塞，可以并发运行，这时如果锁住大对象，那这锁粒度过大，影响程序运行效率。</p><p>那就可以采用多个对象锁的方式解决。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BigRoom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">studyRoom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">bedRoom</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (bedRoom) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;sleeping 2 小时&quot;</span>);</span><br><span class="line">            Sleeper.sleep(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (studyRoom) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;study 1 小时&quot;</span>);</span><br><span class="line">            Sleeper.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优点：可以增强并发度</li><li>缺点：如果一个线程需要同时获得多把锁，就容易发生死锁</li></ul><h3 id="活跃性问题">活跃性问题</h3><p>活跃性定义：线程中可执行代码是有限的，但由于某种故障，导致线程一直在运行没有停止。</p><h4 id="死锁">死锁</h4><p>现象描述：一个线程需要同时获取多把锁，这多把锁又有其它线程持有，这时就容易发生死锁</p><h5 id="死锁定位">死锁定位</h5><h6 id="jps-jstack">jps + jstack</h6><ol type="1"><li><p>命令行输入jps</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</span><br><span class="line">12320 Jps</span><br><span class="line">22816 KotlinCompileDaemon</span><br><span class="line">33200 TestDeadLock // JVM 进程</span><br><span class="line">11508 Main</span><br><span class="line">28468 Launcher</span><br></pre></td></tr></table></figure></li><li><p>找到TestDeadLock进程</p></li><li><p>执行命令 <code>jstack TestDeadLock进程号</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8</span><br><span class="line">2018-12-29 05:51:40</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.91-b14 mixed mode):</span><br><span class="line"><span class="string">&quot;DestroyJavaVM&quot;</span> <span class="comment">#13 prio=5 os_prio=0 tid=0x0000000003525000 nid=0x2f60 waiting on condition </span></span><br><span class="line">[0x0000000000000000]</span><br><span class="line"> java.lang.Thread.State: RUNNABLE</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span> <span class="comment">#12 prio=5 os_prio=0 tid=0x000000001eb69000 nid=0xd40 waiting for monitor entry </span></span><br><span class="line">[0x000000001f54f000]</span><br><span class="line"> java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line"> at thread.TestDeadLock.lambda$main<span class="variable">$1</span>(TestDeadLock.java:28)</span><br><span class="line"> - waiting to lock &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)</span><br><span class="line"> - locked &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)</span><br><span class="line"> at thread.TestDeadLock$$Lambda<span class="variable">$2</span>/883049899.run(Unknown Source)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span> <span class="comment">#11 prio=5 os_prio=0 tid=0x000000001eb68800 nid=0x1b28 waiting for monitor entry </span></span><br><span class="line">[0x000000001f44f000]</span><br><span class="line"> java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line"> at thread.TestDeadLock.lambda$main<span class="variable">$0</span>(TestDeadLock.java:15)</span><br><span class="line"> - waiting to lock &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)</span><br><span class="line"> - locked &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)</span><br><span class="line"> at thread.TestDeadLock$$Lambda<span class="variable">$1</span>/495053715.run(Unknown Source)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"> </span><br><span class="line">// 略去部分输出，这一行告诉我们死锁位置</span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line"> waiting to lock monitor 0x000000000361d378 (object 0x000000076b5bf1c0, a java.lang.Object),</span><br><span class="line"> <span class="built_in">which</span> is held by <span class="string">&quot;Thread-0&quot;</span></span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line"> waiting to lock monitor 0x000000000361e768 (object 0x000000076b5bf1d0, a java.lang.Object),</span><br><span class="line"> <span class="built_in">which</span> is held by <span class="string">&quot;Thread-1&quot;</span></span><br><span class="line">Java stack information <span class="keyword">for</span> the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line"><span class="string">&quot;Thread-1&quot;</span>:</span><br><span class="line"> at thread.TestDeadLock.lambda$main<span class="variable">$1</span>(TestDeadLock.java:28)</span><br><span class="line"> - waiting to lock &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)</span><br><span class="line"> - locked &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)</span><br><span class="line"> at thread.TestDeadLock$$Lambda<span class="variable">$2</span>/883049899.run(Unknown Source)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:745)</span><br><span class="line"><span class="string">&quot;Thread-0&quot;</span>:</span><br><span class="line"> at thread.TestDeadLock.lambda$main<span class="variable">$0</span>(TestDeadLock.java:15)</span><br><span class="line"> - waiting to lock &lt;0x000000076b5bf1d0&gt; (a java.lang.Object)</span><br><span class="line"> - locked &lt;0x000000076b5bf1c0&gt; (a java.lang.Object)</span><br><span class="line"> at thread.TestDeadLock$$Lambda<span class="variable">$1</span>/495053715.run(Unknown Source)</span><br><span class="line"> at java.lang.Thread.run(Thread.java:745)</span><br><span class="line">Found 1 deadlock.</span><br></pre></td></tr></table></figure></li></ol><h5 id="哲学家就餐">哲学家就餐</h5><p>代码复现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Chopstick</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chopstick</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;筷子&#123;&quot;</span> + name + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Philosopher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Chopstick left;</span><br><span class="line">    Chopstick right;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Philosopher</span><span class="params">(String name, Chopstick left, Chopstick right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;eating...&quot;</span>);</span><br><span class="line">        Sleeper.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 获得左手筷子</span></span><br><span class="line">            <span class="keyword">synchronized</span> (left) &#123;</span><br><span class="line">                <span class="comment">// 获得右手筷子</span></span><br><span class="line">                <span class="keyword">synchronized</span> (right) &#123;</span><br><span class="line">                    <span class="comment">// 吃饭</span></span><br><span class="line">                    eat();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 放下右手筷子</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 放下左手筷子</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="type">Chopstick</span> <span class="variable">c5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Chopstick</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;苏格拉底&quot;</span>, c1, c2).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;柏拉图&quot;</span>, c2, c3).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;亚里士多德&quot;</span>, c3, c4).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;赫拉克利特&quot;</span>, c4, c5).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Philosopher</span>(<span class="string">&quot;阿基米德&quot;</span>, c5, c1).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="活锁">活锁</h4><p>定义：两个线程互相改变对方的结束条件，最后谁也无法结束。</p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestLiveLock</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 期望减到 0 退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                sleep(<span class="number">0.2</span>);</span><br><span class="line">                count--;</span><br><span class="line">                log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 期望超过 20 退出循环</span></span><br><span class="line">            <span class="keyword">while</span> (count &lt; <span class="number">20</span>) &#123;</span><br><span class="line">                sleep(<span class="number">0.2</span>);</span><br><span class="line">                count++;</span><br><span class="line">                log.debug(<span class="string">&quot;count: &#123;&#125;&quot;</span>, count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终代码会一直运行，count的值一直徘徊在10左右</p><h4 id="饥饿">饥饿</h4><p>定义：线程始终得不到CPU调度或者线程获得不到自己需要的资源而陷入忙等。</p><p>把哲学家案例的<code>new Philosopher("阿基米德", c5, c1).start();</code>获得筷子的顺序改一下，就会避免死锁，但是会出现一种情况：某个时间段内都是一个哲学家在就餐，导致其它线程饥饿。</p><h2 id="reentrantlock"><strong>ReentrantLock</strong></h2><p>使用语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取锁</span></span><br><span class="line">reentrantLock.lock();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 释放锁</span></span><br><span class="line">    reentrantLock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可重入</strong></p><p>同一个线程如果首次获得了这把锁，那么因为它是这把锁的拥有者，因此有权利再次获取这把锁</p><h3 id="可打断">可打断</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;启动...&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//表示这个获得锁的过程是可以被打断的</span></span><br><span class="line">        lock.lockInterruptibly();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        log.debug(<span class="string">&quot;等锁的过程中被打断&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">lock.lock();</span><br><span class="line">log.debug(<span class="string">&quot;获得了锁&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    t1.interrupt();</span><br><span class="line">    log.debug(<span class="string">&quot;执行打断&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">18:02:40.520 [main] c.TestInterrupt - 获得了锁</span><br><span class="line">18:02:40.524 [t1] c.TestInterrupt - 启动... </span><br><span class="line">18:02:41.530 [main] c.TestInterrupt - 执行打断</span><br><span class="line">java.lang.InterruptedException </span><br><span class="line"> at </span><br><span class="line">java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireInterruptibly(AbstractQueuedSynchr</span><br><span class="line">onizer.java:898) </span><br><span class="line"> at </span><br><span class="line">java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireInterruptibly(AbstractQueuedSynchron</span><br><span class="line">izer.java:1222) </span><br><span class="line"> at java.util.concurrent.locks.ReentrantLock.lockInterruptibly(ReentrantLock.java:335) </span><br><span class="line"> at cn.itcast.n4.reentrant.TestInterrupt.lambda$main<span class="variable">$0</span>(TestInterrupt.java:17) </span><br><span class="line"> at java.lang.Thread.run(Thread.java:748) </span><br><span class="line">18:02:41.532 [t1] c.TestInterrupt - 等锁的过程中被打断</span><br></pre></td></tr></table></figure><h3 id="锁超时">锁超时</h3><p>常用API：</p><ul><li>tryLock()：尝试获得锁，如果锁已被占用，直接返回false</li><li>tryLock(long time， TimeUnitt)：等待一段时间以后，如果锁仍在被其它线程使用，返回false</li></ul><h4 id="解决哲学家就餐">解决哲学家就餐</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承锁类，表示该对象有锁的特征</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chopstick</span> <span class="keyword">extends</span> <span class="title class_">ReentrantLock</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Chopstick</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;筷子&#123;&quot;</span> + name + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用trylock加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Philosopher</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Chopstick left;</span><br><span class="line">    Chopstick right;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Philosopher</span><span class="params">(String name, Chopstick left, Chopstick right)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 尝试获得左手筷子</span></span><br><span class="line">            <span class="keyword">if</span> (left.tryLock()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 尝试获得右手筷子</span></span><br><span class="line">                    <span class="keyword">if</span> (right.tryLock()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            eat();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            right.unlock();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//如果没有获得右手筷子，那就会把左筷子释放</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    left.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;eating...&quot;</span>);</span><br><span class="line">        Sleeper.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>破坏了死锁的条件：不剥夺、请求与保持</li></ul><h3 id="公平锁">公平锁</h3><p>ReentrantLock默认是不公平的，如果要设置，在构造函数传入bool类型变量即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>设置为非公平之后，全部线程有机会抢到锁</li><li>公平锁：线程按照先后顺序执行，但是会降低系统的并发度</li></ul><h3 id="条件变量">条件变量</h3><p>在synchronized中，如果线程获得锁但是因为某些<strong>条件</strong>无法立即执行，会被分配到waitSet里等待。这算一个条件变量</p><p>ReentrantLock 支持多个条件变量：</p><ul><li>synchronized 是那些不满足条件的线程都在一间休息室等消息</li><li>而 ReentrantLock支持多间休息室，有专门等烟的休息室、专门等早餐的休息室、唤醒时也是按休息室来唤醒</li></ul><p>使用要点：</p><ul><li>await 前需要获得锁</li><li>await 执行后，会释放锁，进入 conditionObject 等待</li><li>await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁</li><li>竞争 lock 锁成功后，从 await 后继续执行</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestCondition</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">waitCigaretteQueue</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Condition</span> <span class="variable">waitbreakfastQueue</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">hasCigrette</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">hasBreakfast</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!hasCigrette)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        waitCigaretteQueue.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;等到了它的烟&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!hasBreakfast)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        waitbreakfastQueue.await();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                log.debug(<span class="string">&quot;等到了它的早餐&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendCigarette</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;送烟来了&quot;</span>);</span><br><span class="line">            hasCigrette = <span class="literal">true</span>;</span><br><span class="line">            waitCigaretteQueue.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendBreakfast</span><span class="params">()</span> &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;送早餐来了&quot;</span>);</span><br><span class="line">            hasBreakfast = <span class="literal">true</span>;</span><br><span class="line">            waitbreakfastQueue.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="共享模型内存">共享模型——内存</h1><p>Java内存模型：</p><p>JMM 即 Java Memory Model，它定义了主存、工作内存抽象概念，底层对应着CPU 寄存器、缓存、硬件内存、CPU 指令优化等。</p><p>JMM 体现在以下几个方面</p><ul><li>原子性 - 保证指令不会受到<strong>线程上下文切换</strong>的影响</li><li>可见性 - 保证指令不会受 <strong>cpu 缓存</strong>的影响</li><li>有序性 - 保证指令不会受 cpu 指令并行优化的影响</li></ul><h2 id="cpu缓存原理">CPU缓存原理</h2><p><strong>缓存模型图</strong><a id = "CPU缓存模型图"></a></p><p><img src="JUC并发编程/image-20231120162452633.png" alt="image-20231120162452633" style="zoom:50%;" /></p><p><strong>CPU到各位置的时间消耗</strong></p><table><thead><tr class="header"><th>目的地</th><th>需要的时钟周期</th></tr></thead><tbody><tr class="odd"><td>寄存器</td><td>1</td></tr><tr class="even"><td>L1</td><td>3~4</td></tr><tr class="odd"><td>L2</td><td>10~20</td></tr><tr class="even"><td>L3</td><td>40~45</td></tr><tr class="odd"><td>内存</td><td>120~240</td></tr></tbody></table><p>CPU获得的内存地址格式：<code>[高位组标记][低位索引][偏移量]</code></p><p><strong>CPU读缓存流程</strong></p><ol type="1"><li>低位计算索引</li><li>判断索引是否有效（根据有效位判断）<ul><li>0： 去内存读取新数据更新缓存行</li><li>1： 再对比高位组标记是否一致<ul><li>一致：根据偏移量返回缓存数据</li><li>不一致：去内存读取新数据更新缓存行</li></ul></li></ul></li></ol><p>缓存&lt;-&gt;内存寻址过程：</p><p><img src="JUC并发编程/image-20231120164338354.png" alt="image-20231120164338354" style="zoom:67%;" /></p><h3 id="cpu缓存一致性">CPU缓存一致性</h3><h4 id="mesi协议">MESI协议</h4><table><colgroup><col style="width: 18%" /><col style="width: 81%" /></colgroup><thead><tr class="header"><th>状态</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>M（Modified）</td><td>代表该缓存行中的内容被修改了，并且该缓存行只被缓存在该CPU中。这个状态的缓存行中的数据和内存中的不一样，在未来的某个时刻它会被写入到内存中（当其他CPU要读取该缓存行的内容时。或者其他CPU要修改该缓存对应的内存中的内容时</td></tr><tr class="even"><td>E（Exclusive）</td><td>代表该缓存行对应内存中的内容只被该CPU缓存，其他CPU没有缓存该缓存对应内存行中的内容。这个状态的缓存行中的内容和内存中的内容一致。该缓存可以在任何其他CPU读取该缓存对应内存中的内容时变成S状态。或者本地处理器写该缓存就会变成M状态</td></tr><tr class="odd"><td>S（Shared）</td><td>该状态意味着数据不止存在本地CPU缓存中，还存在别的CPU的缓存中。这个状态的数据和内存中的数据是一致的。当其他CPU修改该缓存行对应的内存的内容时会使该缓存行变成I 状态</td></tr><tr class="even"><td>I（Invalid）</td><td>代表该缓存行中的内容是无效的</td></tr></tbody></table><p>可以满足CPU读请求的状态行：E、S、M</p><p>E状态缓存行特性：</p><ul><li>如果对当前缓存行有写请求，将状态改为M，这时并不触发对主存的写</li><li>持续监听对该缓存行的读操作，如果有读操作，转变为状态S</li></ul><p>S状态缓存行特性：</p><ul><li>有写请求：转为M，监听读</li><li>必须监听该缓存行的失效操作，如果有，自己变为 I 状态</li></ul><p>M状态缓存行特性：</p><ul><li>持续监听该缓存行的读操作<ul><li>有读操作：先将其它缓存（S 状态）中该缓存行变成 I状态，写入主存，自己变为 S 状态</li></ul></li></ul><p>I状态缓存行特性：</p><ul><li>有读请求，必须从主存读取</li></ul><h3 id="内存屏障">内存屏障</h3><p>Memory Barrier（Memory Fence）</p><ul><li><p>可见性</p><ul><li><p>写屏障（sfence）：保证在该屏障<strong>之前</strong>的，对共享变量的改动，都同步到主存当中</p></li><li><p>而读屏障（lfence）：保证在该屏障<strong>之后</strong>，对共享变量的读取，加载的是主存中最新数据</p></li></ul></li><li><p>有序性</p><ul><li><p>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后</p></li><li><p>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</p></li></ul></li></ul><figure><img src="JUC并发编程/image-20231120173638109.png"alt="image-20231120173638109" /><figcaption aria-hidden="true">image-20231120173638109</figcaption></figure><h2 id="可见性">可见性</h2><h3 id="退不出的循环">退不出的循环</h3><p>main 线程对 run 变量的修改对于 t 线程不可见，导致了 t线程无法停止：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">run</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">while</span>(run)&#123;</span><br><span class="line">            <span class="comment">// ....</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    run = <span class="literal">false</span>; <span class="comment">// 线程t不会如预想的停下来</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从内存模型的角度进行原因分析：</p><ol type="1"><li><p>对于变量run，初始状态，线程t从<strong>主内存</strong>读取了 run的值到工作内存。</p><p><img src="JUC并发编程/image-20231120152730730.png" alt="image-20231120152730730" style="zoom:67%;" /></p></li><li><p>因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run的值缓存至自己工作内存中的高速缓存中，减少对主存中 run的访问，提高效率</p><p><img src="JUC并发编程/image-20231120152847895.png" alt="image-20231120152847895" style="zoom: 67%;" /></p></li><li><p>1 秒之后，main 线程修改了 run 的值，并同步至主存，而 t是从自己工作内存中的高速缓存中读取这个变量的值，结果永远是旧值</p></li></ol><p><img src="JUC并发编程/image-20231120152934359.png" alt="image-20231120152934359" style="zoom:67%;" /></p><p>造成上述原因就是变量run在CPU缓存的作用下，对于线程t变得不可见，要解决这个问题可以采用volatile关键字修饰run。</p><ul><li>volatile：易变</li></ul><p>带上volatile修饰的run变量，在线程读取run的值的时候就会<strong>主动到主存去读</strong>，不会发生上述问题。</p><p>适用场景：一个写线程，多个读线程。</p><blockquote><p><strong>注意</strong> synchronized语句块既可以保证代码块的原子性，也同时保证代码块内变量的可见性。但缺点是synchronized是属于重量级操作，性能相对更低</p><p>如果在前面示例的死循环中加入 System.out.println() 会发现即使不加volatile 修饰符，线程 t 也能正确看到对 run变量的修改了，想一想为什么？</p><p>在Java内存模型中，synchronized规定，线程在加锁时，先清空工作内存→在主内存中拷贝最新变量的副本到工作内存→执行完代码→将更改后的共享变量的值刷新到主内存中→释放互斥锁。</p></blockquote><h2 id="有序性">有序性</h2><h3 id="指令重排序-1">指令重排序</h3><p>JVM会在<strong>不影响正确性</strong>的前提下，可以调整代码语句的执行顺序。</p><ul><li>但是多线程下指令重排会出现并发问题</li></ul><p>指令重排的前提：重排指令<strong>不能影响结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以重排的例子</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 指令1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>; <span class="comment">// 指令2</span></span><br><span class="line">System.out.println( a + b );</span><br><span class="line"><span class="comment">// 不能重排的例子</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">// 指令1</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a - <span class="number">5</span>; <span class="comment">// 指令2   依靠指令1的结果</span></span><br></pre></td></tr></table></figure><h4 id="指令级并行">指令级并行</h4><p>相关名词：</p><ul><li><strong>Clock Cycle Time</strong>：时钟周期时间，=主频的倒数；是 CPU能够识别的最小时间单位<ul><li>比如说 4G 主频的 CPU 的 Clock Cycle Time 就是 0.25 ns</li></ul></li><li><strong>CPI（Cycles PerInstruction）</strong>：有的指令需要更多的时钟周期时间， CPI表示<strong>全部类型</strong>指令<strong>平均时钟周期数</strong></li><li><strong>IPC（Instruction Per Clock Cycle）</strong>：CPI的倒数，表示<strong>每个时钟周期能够运行的指令数</strong></li><li><strong>CPU</strong> <strong>执行时间</strong>：程序 CPU 执行时间 =<code>指令数 * CPI * Clock Cycle Time</code></li></ul><p>现代处理器会设计为一个时钟周期完成一条执行时间最长的 CPU指令，以此来提高CPU的利用率。</p><p>例如，每条指令都可以分为： 取指令 - 指令译码 - 执行指令 - 内存访问 -数据 - 写回 这 5 个阶段：</p><p><img src="JUC并发编程/image-20231121162336116.png" alt="指令分为五阶段-串行" style="zoom:80%;" /></p><ul><li>instruction fetch (IF)</li><li>instruction decode (ID)</li><li>execute (EX)</li><li>memory access (MEM)</li><li>register write back (WB)</li></ul><p>现代 CPU 支持<strong>多级指令流水线</strong>，例如支持同时执行 取指令- 指令译码 - 执行指令 - 内存访问 - 数据写回的处理器，就可以称之为<strong>五级指令流水线</strong>。这时 CPU可以在一个时钟周期内，同时运行五条指令的不同阶段（相当于一条执行时间最长的复杂指令），IPC=1，本质上，流水线技术并不能缩短单条指令的执行时间，但它变相地提高了指令的吞吐率。</p><p><img src="JUC并发编程/image-20231121162907254.png" alt="多级指令流水线" style="zoom:80%;" /></p><h3 id="案例-1">案例</h3><h4 id="诡异的结果">诡异的结果</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">ready</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 线程1 执行此方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor1</span><span class="params">(I_Result r)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 线程2 执行此方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor2</span><span class="params">(I_Result r)</span> &#123; </span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    ready = <span class="literal">true</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><ul><li>正常：<ul><li>1：线程1先把actor1方法执行完，线程2来不及更改ready</li><li>4：线程2先更改ready，随后线程1执行</li></ul></li><li>不正常：<ul><li>0：发生指令重排序，线程2先更改ready</li></ul></li></ul><p><strong>解决方法</strong></p><p>对ready加上volatile变量修饰</p><h5 id="jcstress测试">jcstress测试</h5><p>maven项目下命令行输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate -DinteractiveMode=<span class="literal">false</span> -DarchetypeGroupId=org.openjdk.jcstress -DarchetypeArtifactId=jcstress-java-test-archetype -DarchetypeVersion=0.5 -DgroupId=cn.itcast -DartifactId=ordering -Dversion=1.0</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JCStressTest</span></span><br><span class="line"><span class="meta">@Outcome(id = &#123;&quot;1&quot;, &quot;4&quot;&#125;, expect = Expect.ACCEPTABLE, desc = &quot;ok&quot;)</span></span><br><span class="line"><span class="meta">@Outcome(id = &quot;0&quot;, expect = Expect.ACCEPTABLE_INTERESTING, desc = &quot;!!!!&quot;)</span></span><br><span class="line"><span class="meta">@State</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrencyTest</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ready</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor1</span><span class="params">(I_Result r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">            r.r1 = num + num;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r.r1 = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Actor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor2</span><span class="params">(I_Result r)</span> &#123;</span><br><span class="line">        num = <span class="number">2</span>;</span><br><span class="line">        ready = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install</span><br><span class="line">java -jar target/jcstress.jar -v</span><br></pre></td></tr></table></figure><p>输出：</p><figure><img src="JUC并发编程/image-20231121174007554.png"alt="image-20231121174007554" /><figcaption aria-hidden="true">image-20231121174007554</figcaption></figure><p>可见千万级并发量，有情况出现值为0的情况。</p><h2 id="volatile原理">volatile原理</h2><p>volatile 的底层实现原理是内存屏障，Memory Barrier（Memory Fence）</p><ul><li>对 volatile 变量的<strong>写指令后</strong>会加入写屏障</li><li>对 volatile 变量的<strong>读指令前</strong>会加入读屏障</li></ul><p><img src="JUC并发编程/image-20231122154059548.png" alt="image-20231122154059548" style="zoom:67%;" /></p><h3 id="保证可见性">保证可见性</h3><p>写屏障（sfence）：保证在该屏障之前的，对共享变量的改动，都<strong>同步到主存</strong>当中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor2</span><span class="params">(I_Result r)</span> &#123;</span><br><span class="line">    num = <span class="number">2</span>;</span><br><span class="line">    ready = <span class="literal">true</span>; <span class="comment">// ready 是 volatile ，赋值带写屏障</span></span><br><span class="line">    <span class="comment">// --------写屏障</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读屏障（lfence）：保证在该屏障之后，对共享变量的读取，<strong>加载的是主存中最新数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actor1</span><span class="params">(I_Result r)</span> &#123;</span><br><span class="line">    <span class="comment">// ---------读屏障</span></span><br><span class="line">    <span class="comment">// ready 是 volatile ，读取值带读屏障</span></span><br><span class="line">    <span class="keyword">if</span>(ready) &#123;</span><br><span class="line">        r.r1 = num + num;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        r.r1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="保证有序性">保证有序性</h3><p>写屏障：会确保指令重排序时，不会将<strong>写屏障之前</strong>的代码排在写屏障之后</p><p>读屏障：会确保指令重排序时，不会将<strong>读屏障之后</strong>的代码排在读屏障之前</p><p><img src="JUC并发编程/image-20231122154043131.png" alt="image-20231122154043131" style="zoom: 67%;" /></p><h3 id="dcl问题">DCL问题</h3><p>double-checked locking 双检锁单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) &#123; <span class="comment">// t2</span></span><br><span class="line">            <span class="comment">// 首次访问会同步，而之后的使用没有 synchronized</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123; <span class="comment">// t1</span></span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的实现特点是：</p><ul><li>懒惰实例化</li><li>首次使用 getInstance() 才使用 synchronized加锁，后续使用时无需加锁</li><li>第一个 if 使用了 INSTANCE变量，是在同步块之外。也就是说INSTANCE实例并没有被synchronized完全管理</li></ul><h4 id="字节码分析-1">字节码分析</h4><p>getInstance 方法对应的字节码为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">0: getstatic <span class="comment">#2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span></span><br><span class="line">3: ifnonnull 37</span><br><span class="line">6: ldc <span class="comment">#3 // class cn/itcast/n5/Singleton</span></span><br><span class="line">8: dup</span><br><span class="line">9: astore_0</span><br><span class="line">10: monitorenter</span><br><span class="line">11: getstatic <span class="comment">#2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span></span><br><span class="line">14: ifnonnull 27</span><br><span class="line">17: new <span class="comment">#3 // class cn/itcast/n5/Singleton</span></span><br><span class="line">20: dup</span><br><span class="line">21: invokespecial <span class="comment">#4 // Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">24: putstatic <span class="comment">#2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span></span><br><span class="line">27: aload_0</span><br><span class="line">28: monitorexit</span><br><span class="line">29: goto 37</span><br><span class="line">32: astore_1</span><br><span class="line">33: aload_0</span><br><span class="line">34: monitorexit</span><br><span class="line">35: aload_1</span><br><span class="line">36: athrow</span><br><span class="line">37: getstatic <span class="comment">#2 // Field INSTANCE:Lcn/itcast/n5/Singleton;</span></span><br><span class="line">40: areturn</span><br></pre></td></tr></table></figure><ul><li>17 表示创建对象，将对象引用入栈 // new Singleton</li><li>20 表示复制一份对象引用 // 引用地址</li><li>21 表示利用一个对象引用，调用构造方法</li><li>24 表示利用一个对象引用，赋值给 static INSTANCE</li></ul><p>注意：21和24行代码可发送指令交错</p><p>关键在于 0: <strong>getstatic 这行代码在 monitor控制之外</strong>，它就像之前举例中不守规则的人，可以越过 monitor读取INSTANCE 变量的值</p><p>synchronized在一定程度上保证有序性，前提是INSTANCE对象要完全在synchronized代码块内，但是不是，因为synchronized代码块外多了一层判断。</p><p>synchronized并不会预防指令重排序，假如21和24行指令发生指令交错，如下图：</p><p><img src="JUC并发编程/image-20231122154838871.png" alt="image-20231122154838871" style="zoom:80%;" /></p><ul><li>INSTANCE对象并没有初始化完毕，就被线程2使用，空壳对象是无法使用的</li></ul><h2 id="happens-before">happens-before</h2><p>定义：规定了<strong>对共享变量的写操作对其它线程的读操作可见</strong>，</p><p>线程解锁 m 之前对变量的写，对于接下来对 m加锁的其它线程对该变量的读可见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">static</span> <span class="type">Object</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(m) &#123;</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"><span class="comment">//前提是t1先于t2执行</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(m) &#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure><p>线程对 volatile 变量的写，对接下来其它线程对该变量的读可见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure><p>线程 start 前对变量的写，对该线程开始后对该变量的读可见</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line">x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> System.out.println(x);</span><br><span class="line">&#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure><p>线程结束前对变量的写，对其它线程<strong>得知它结束后</strong>的读可见（比如其它线程调用t1.isAlive() 或 t1.join()等待它结束）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line"> x = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t1.join();</span><br><span class="line">System.out.println(x);</span><br></pre></td></tr></table></figure><p>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2被打断后对变量的读可见（通过t2.interrupted 或 t2.isInterrupted）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="string">&quot;t2&quot;</span>);</span><br><span class="line">    t2.start();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">        t2.interrupt();</span><br><span class="line">    &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    <span class="keyword">while</span>(!t2.isInterrupted()) &#123;</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对变量默认值（0，false，null）的写，对其它线程对该变量的读可见</p><p>具有传递性，如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z，配合 volatile 的防指令重排，有下面的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">int</span> x;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> y;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123; </span><br><span class="line">    y = <span class="number">10</span>;</span><br><span class="line">    x = <span class="number">20</span>;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">    <span class="comment">// x=20 对 t2 可见, 同时 y=10 也对 t2 可见</span></span><br><span class="line">    System.out.println(x); </span><br><span class="line">&#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br></pre></td></tr></table></figure><h1 id="共享模型无锁">共享模型——无锁</h1><h2 id="cas">CAS</h2><p>基于乐观锁：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试呗。</p><p>银行取款案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AccountSafe</span> <span class="keyword">implements</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="comment">//关键：原子变量</span></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger balance;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AccountSafe</span><span class="params">(Integer balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(balance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(Integer amount)</span> &#123;</span><br><span class="line">        <span class="comment">//自旋</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//修改前，变量最新值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">prev</span> <span class="operator">=</span> balance.get();</span><br><span class="line">            <span class="comment">//预期值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">next</span> <span class="operator">=</span> prev - amount;</span><br><span class="line">            <span class="keyword">if</span> (balance.compareAndSet(prev, next)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可以简化为下面的方法</span></span><br><span class="line">        <span class="comment">// balance.addAndGet(-1 * amount);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CAS：在准备修改变量的时候，去内存中获取这个变量的最新值与修改前所看到的这个值进行对比，如果不相同，说明在这期间有其它线程对其进行更改那就进行自旋操作，直到修改成功。</li><li>自旋：每次修改失败，就重新尝试</li></ul><p>CAS底层：底层是 lock cmpxchg 指令（X86 架构），在单核 CPU 和多核 CPU下都能够保证【比较-交换】的原子性</p><p><strong>cas与volatile</strong></p><p>因为修改变量前，要获取到<strong>变量最新的值</strong>，这个值只有凑够内存中获取才是最新的，因此要把对共享变量的修改都同步到内存才行。所以，为了保证该变量的可见性，需要使用volatile 修饰。</p><p><strong>无锁效率</strong></p><ul><li>重试失败的情况下，仍继续运行，而 synchronized会让线程在没有获得锁的时候，发生上下文切换，进入阻塞。cas在一定程度上减少了线程上下文开销，因此效率高</li><li>但无锁情况下，因为线程要保持运行，需要额外 CPU的支持。因此，当且仅当线程个数 &lt;总CPU核数的时候，CAS能发挥最大作用，不然线程多了，CPU不够，还是会发生线程上下文切换。</li></ul><p><strong>适用场景</strong></p><ul><li>读多写少</li><li>线程并发度低的场景</li></ul><h2 id="原子整数">原子整数</h2><p>AtomicInteger：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">AtomicInteger</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++</span></span><br><span class="line">System.out.println(i.getAndIncrement());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i</span></span><br><span class="line">System.out.println(i.incrementAndGet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i</span></span><br><span class="line">System.out.println(i.decrementAndGet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i--</span></span><br><span class="line">System.out.println(i.getAndDecrement());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并加值（i = 0, 结果 i = 5, 返回 0）</span></span><br><span class="line">System.out.println(i.getAndAdd(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加值并获取（i = 5, 结果 i = 0, 返回 0）</span></span><br><span class="line">System.out.println(i.addAndGet(-<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">System.out.println(i.getAndUpdate(p -&gt; p - <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">System.out.println(i.updateAndGet(p -&gt; p + <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line"><span class="comment">// getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的</span></span><br><span class="line"><span class="comment">// getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final</span></span><br><span class="line">System.out.println(i.getAndAccumulate(<span class="number">10</span>, (p, x) -&gt; p + x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0）</span></span><br><span class="line"><span class="comment">// 其中函数中的操作能保证原子，但函数需要无副作用</span></span><br><span class="line">System.out.println(i.accumulateAndGet(-<span class="number">10</span>, (p, x) -&gt; p + x));</span><br></pre></td></tr></table></figure><p>updateAndGet原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateAndGet</span><span class="params">(AtomicInteger i, IntUnaryOperator operator)</span>&#123;</span><br><span class="line">    <span class="type">int</span> pre, expect;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        pre = i.get();</span><br><span class="line">        expect = operator.applyAsInt(pre);</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">while</span> (!i.compareAndSet(pre, expect));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原子引用">原子引用</h2><p>针对对象类型封装的原子包：</p><ul><li>AtomicReference</li><li>AtomicMarkableReference</li><li>AtomicStampedReference</li></ul><p>AtomicReference简单使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtomicRef</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DecimalAccount</span> <span class="variable">decimalAccount</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalAccountSafeCas</span>(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;10000&quot;</span>));</span><br><span class="line">        DecimalAccount.demo(decimalAccount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DecimalAccountSafeCas</span> <span class="keyword">implements</span> <span class="title class_">DecimalAccount</span> &#123;</span><br><span class="line">    AtomicReference&lt;BigDecimal&gt; balance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DecimalAccountSafeCas</span><span class="params">(BigDecimal balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;BigDecimal&gt;(balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BigDecimal <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(BigDecimal amount)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">BigDecimal</span> <span class="variable">pre</span> <span class="operator">=</span> balance.get();</span><br><span class="line">            <span class="type">BigDecimal</span> <span class="variable">next</span> <span class="operator">=</span> pre.subtract(amount);</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> balance.compareAndSet(pre, next);</span><br><span class="line">            <span class="keyword">if</span>(b)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">DecimalAccount</span> &#123;</span><br><span class="line">    <span class="comment">// 获取余额</span></span><br><span class="line">    BigDecimal <span class="title function_">getBalance</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">// 取款</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">withdraw</span><span class="params">(BigDecimal amount)</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法内会启动 1000 个线程，每个线程做 -10 元 的操作</span></span><br><span class="line"><span class="comment">     * 如果初始余额为 10000 那么正确的结果应当是 0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">(DecimalAccount account)</span> &#123;</span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            ts.add(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                account.withdraw(BigDecimal.TEN);</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        ts.forEach(Thread::start);</span><br><span class="line">        ts.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(account.getBalance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="aba问题">ABA问题</h3><p>问题描述：cas在修改数据的时候，只是把最新的值和刚开始获取的prev值比较，但是这中间有没有做过修改，程序并不知道，也就是说变量中间经过<code>A -&gt; B -&gt; A</code>这个修改过程。</p><h4 id="版本号机制">版本号机制</h4><p>AtomicStampedReference：能获取变量的版本号的值，这个值代表这个变量在这次修改值之前被修改了多少次。</p><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> AtomicStampedReference&lt;String&gt; ref = <span class="keyword">new</span> <span class="title class_">AtomicStampedReference</span>&lt;&gt;(<span class="string">&quot;A&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;main start...&quot;</span>);</span><br><span class="line">    <span class="comment">// 获取值 A</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">prev</span> <span class="operator">=</span> ref.getReference();</span><br><span class="line">    <span class="comment">// 获取版本号</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">stamp</span> <span class="operator">=</span> ref.getStamp();</span><br><span class="line">    log.debug(<span class="string">&quot;版本 &#123;&#125;&quot;</span>, stamp);</span><br><span class="line">    <span class="comment">// 如果中间有其它线程干扰，发生了 ABA 现象</span></span><br><span class="line">    other();</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 尝试改为 C</span></span><br><span class="line">    log.debug(<span class="string">&quot;change A-&gt;C &#123;&#125;&quot;</span>, ref.compareAndSet(prev, <span class="string">&quot;C&quot;</span>, stamp, stamp + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">other</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;change A-&gt;B &#123;&#125;&quot;</span>, ref.compareAndSet(ref.getReference(), <span class="string">&quot;B&quot;</span>, </span><br><span class="line">                                                      ref.getStamp(), ref.getStamp() + <span class="number">1</span>));</span><br><span class="line">        log.debug(<span class="string">&quot;更新版本为 &#123;&#125;&quot;</span>, ref.getStamp());</span><br><span class="line">    &#125;, <span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">    sleep(<span class="number">0.5</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;change B-&gt;A &#123;&#125;&quot;</span>, ref.compareAndSet(ref.getReference(), <span class="string">&quot;A&quot;</span>, </span><br><span class="line">                                                      ref.getStamp(), ref.getStamp() + <span class="number">1</span>));</span><br><span class="line">        log.debug(<span class="string">&quot;更新版本为 &#123;&#125;&quot;</span>, ref.getStamp());</span><br><span class="line">    &#125;, <span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标记">标记</h4><p>有时候，并不关心引用变量更改了几次，只是单纯的关心<strong>是否更改过</strong>，所以就有了AtomicMarkableReference</p><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestABAAtomicMarkableReference</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">GarbageBag</span> <span class="variable">bag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GarbageBag</span>(<span class="string">&quot;装满了垃圾&quot;</span>);</span><br><span class="line">        <span class="comment">// 参数2 mark 可以看作一个标记，表示垃圾袋满了</span></span><br><span class="line">        AtomicMarkableReference&lt;GarbageBag&gt; ref = <span class="keyword">new</span> <span class="title class_">AtomicMarkableReference</span>&lt;&gt;(bag, <span class="literal">true</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;主线程 start...&quot;</span>);</span><br><span class="line">        <span class="type">GarbageBag</span> <span class="variable">prev</span> <span class="operator">=</span> ref.getReference();</span><br><span class="line">        log.debug(prev.toString());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;打扫卫生的线程 start...&quot;</span>);</span><br><span class="line">            bag.setDesc(<span class="string">&quot;空垃圾袋&quot;</span>);</span><br><span class="line">            <span class="keyword">while</span> (!ref.compareAndSet(bag, bag, <span class="literal">true</span>, <span class="literal">false</span>)) &#123;&#125;</span><br><span class="line">            log.debug(bag.toString());</span><br><span class="line">        &#125;).start();<span class="comment">//这个线程已经修改这个变量的标记为false，后续主线程是无法修改的</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;主线程想换一只新垃圾袋？&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> ref.compareAndSet(prev, <span class="keyword">new</span> <span class="title class_">GarbageBag</span>(<span class="string">&quot;空垃圾袋&quot;</span>), <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;换了么？&quot;</span> + success);</span><br><span class="line">        log.debug(ref.getReference().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原子数组">原子数组</h2><ul><li>AtomicIntegerArray</li><li>AtomicLongArray</li><li>AtomicReferenceArray</li></ul><p>保护的是数组里面的元素。</p><p>常见方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 参数1，提供数组、可以是线程不安全数组或线程安全数组</span></span><br><span class="line"><span class="comment"> 参数2，获取数组长度的方法</span></span><br><span class="line"><span class="comment"> 参数3，自增方法，回传 array, index</span></span><br><span class="line"><span class="comment"> 参数4，打印数组的方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// supplier 提供者 无中生有 ()-&gt; 结果</span></span><br><span class="line"><span class="comment">// function 函数 一个参数一个结果 (参数)-&gt;结果 , BiFunction (参数1,参数2)-&gt;结果</span></span><br><span class="line"><span class="comment">// consumer 消费者 一个参数没结果 (参数)-&gt;void, BiConsumer (参数1,参数2)-&gt;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">(</span></span><br><span class="line"><span class="params">    Supplier&lt;T&gt; arraySupplier,</span></span><br><span class="line"><span class="params">    Function&lt;T, Integer&gt; lengthFun,</span></span><br><span class="line"><span class="params">    BiConsumer&lt;T, Integer&gt; putConsumer,</span></span><br><span class="line"><span class="params">    Consumer&lt;T&gt; printConsumer )</span> &#123;</span><br><span class="line">    List&lt;Thread&gt; ts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">T</span> <span class="variable">array</span> <span class="operator">=</span> arraySupplier.get();</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> lengthFun.apply(array);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="comment">// 每个线程对数组作 10000 次操作</span></span><br><span class="line">        ts.add(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">10000</span>; j++) &#123;</span><br><span class="line">                putConsumer.accept(array, j%length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    ts.forEach(t -&gt; t.start()); <span class="comment">// 启动所有线程</span></span><br><span class="line">    ts.forEach(t -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); <span class="comment">// 等所有线程结束</span></span><br><span class="line">    printConsumer.accept(array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传参：不安全数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo(</span><br><span class="line"> ()-&gt;<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>],</span><br><span class="line"> (array)-&gt;array.length,</span><br><span class="line"> (array, index) -&gt; array[index]++,</span><br><span class="line"> array-&gt; System.out.println(Arrays.toString(array))</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>传参：安全数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">demo(</span><br><span class="line"> ()-&gt; <span class="keyword">new</span> <span class="title class_">AtomicIntegerArray</span>(<span class="number">10</span>),</span><br><span class="line"> (array) -&gt; array.length(),</span><br><span class="line"> (array, index) -&gt; array.getAndIncrement(index),</span><br><span class="line"> array -&gt; System.out.println(array)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="字段更新器">字段更新器</h2><ul><li>AtomicReferenceFieldUpdater</li><li>AtomicIntegerFieldUpdater</li><li>AtomicLongFieldUpdater</li></ul><p>利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合volatile 修饰的字段使用，否则会出现异常</p><p>使用案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> field;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AtomicIntegerFieldUpdater</span> <span class="variable">fieldUpdater</span> <span class="operator">=</span></span><br><span class="line">            AtomicIntegerFieldUpdater.newUpdater(Test5.class, <span class="string">&quot;field&quot;</span>);<span class="comment">//需要用到要修改的类的类对象、字段名称</span></span><br><span class="line">        <span class="type">Test5</span> <span class="variable">test5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test5</span>();</span><br><span class="line">        fieldUpdater.compareAndSet(test5, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 修改成功 field = 10</span></span><br><span class="line">        System.out.println(test5.field);</span><br><span class="line">        <span class="comment">// 修改成功 field = 20</span></span><br><span class="line">        fieldUpdater.compareAndSet(test5, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(test5.field);</span><br><span class="line">        <span class="comment">// 修改失败 field = 20</span></span><br><span class="line">        fieldUpdater.compareAndSet(test5, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">        System.out.println(test5.field);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原子累加器">原子累加器</h2><p>为什么要用累加器：累加器性能比原子整数累加要快</p><p>性能比较案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Compare</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            demo(() -&gt; <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(), adder -&gt; adder.getAndIncrement());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            demo(() -&gt; <span class="keyword">new</span> <span class="title class_">LongAdder</span>(), longAdder -&gt; longAdder.increment());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">demo</span><span class="params">(Supplier&lt;T&gt; adderSupplier, Consumer&lt;T&gt; action)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">adder</span> <span class="operator">=</span> adderSupplier.get();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        List&lt;Thread&gt; ts = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 4 个线程，每人累加 50 万</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            ts.add(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">500000</span>; j++) &#123;</span><br><span class="line">                    action.accept(adder);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">        ts.forEach(t -&gt; t.start());</span><br><span class="line">        ts.forEach(t -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                t.join();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(adder + <span class="string">&quot; cost:&quot;</span> + (end - start)/<span class="number">1000_000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2000000 cost:46</span><br><span class="line">2000000 cost:36</span><br><span class="line">2000000 cost:35</span><br><span class="line">2000000 cost:34</span><br><span class="line">2000000 cost:35</span><br><span class="line">2000000 cost:10</span><br><span class="line">2000000 cost:4</span><br><span class="line">2000000 cost:6</span><br><span class="line">2000000 cost:5</span><br><span class="line">2000000 cost:4</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="longadder原理">LongAdder原理</h3><p>累加器核心思想：把对某个变量的累加，分散到多个变量上去，多个变量构成一个数组，最后再把整个数组累加起来。</p><ul><li>变量的个数与CPU核心数相关，一个线程对应一个CPU，对应操作一个cell数组元素</li></ul><p>源码关键部位：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 累加单元数组, 懒惰初始化</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Cell[] cells;</span><br><span class="line"><span class="comment">// 基础值, 如果没有竞争, 则用 cas 累加这个域</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> base;</span><br><span class="line"><span class="comment">// 在 cells 创建或扩容时, 置为 1, 表示加锁</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">int</span> cellsBusy;</span><br></pre></td></tr></table></figure><h4 id="cas加锁">cas加锁</h4><p><strong>内部循环加锁流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要用于实践！！！</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockCas</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicInteger</span> <span class="variable">state</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (state.compareAndSet(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;unlock...&quot;</span>);</span><br><span class="line">        state.set(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>state相当于锁变量，0为不加锁，1为加锁；</li></ul><h4 id="伪共享问题">伪共享问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防止缓存行伪共享</span></span><br><span class="line"><span class="meta">@sun</span>.misc.Contended</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line"> <span class="keyword">volatile</span> <span class="type">long</span> value;</span><br><span class="line"> Cell(<span class="type">long</span> x) &#123; value = x; &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 最重要的方法, 用来 cas 方式进行累加, prev 表示旧值, next 表示新值</span></span><br><span class="line"> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">cas</span><span class="params">(<span class="type">long</span> prev, <span class="type">long</span> next)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> UNSAFE.compareAndSwapLong(<span class="built_in">this</span>, valueOffset, prev, next);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 省略不重要代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href = "#CPU缓存模型图">CPU缓存图</a>， CPU 与内存的速度差异很大，需要靠预读数据至缓存来提升效率；缓存以<strong>缓存行</strong>为单位，每个缓存行对应一块内存，一个缓存行大小为64byte。</p><p><strong>缓存带来的问题</strong></p><ul><li><p>数据副本的产生：即同一份数据会缓存在不同核心的缓存行中</p></li><li><p>数据不一致的问题：为了保证一致性，如果某个CPU的核心更改了变量值，那其它CPU对应的缓存行都会失效</p></li></ul><p><img src="JUC并发编程/image-20231129163643396.png" alt="缓存行失效" style="zoom:80%;" /></p><ul><li>cell以数组形式存放，在内存中是连续存储的，一个 Cell 为 24 字节（16字节的对象头和 8 字节的 value）</li><li>假设多级缓存浓缩成一级，为了凸显这个问题</li></ul><p>假如，如下情况：</p><ul><li>Core-0 要修改 Cell[0]</li><li>Core-1 要修改 Cell[1]</li></ul><p>无论谁修改成功，都会导致对方 Core 的缓存行失效，比如 Core-0 中<code>Cell[0]=6000, Cell[1]=8000</code>要累加<code>Cell[0]=6001, Cell[1]=8000</code> ，这时会让 Core-1的缓存行失效</p><p><span class="citation"data-cites="sun.misc.Contended注解解决">@sun.misc.Contended注解解决</span>：</p><p>原理：使用该注解标识的对象，会在字段前后<strong>增加128byte大小的padding</strong>，目的是让CPU将对象预读至缓存的时候<strong>占用不同的缓存行，如下图：</strong></p><p><img src="JUC并发编程/image-20231129164338291.png" alt="注解解决" style="zoom:80%;" /></p><h4 id="累加源码分析">累加源码分析</h4><p>累加调用的方法：<code>add(1L)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">long</span> x)</span> &#123;</span><br><span class="line">    <span class="comment">// as 为累加单元数组,这里搞成局部变量</span></span><br><span class="line">    <span class="comment">// b 为基础值</span></span><br><span class="line">    <span class="comment">// x 为累加值</span></span><br><span class="line">    Cell[] as; <span class="type">long</span> b, v; <span class="type">int</span> m; Cell a;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 进入 if 的两个条件</span></span><br><span class="line">    <span class="comment">// 1. as 有值, 表示已经发生过竞争, 进入 if</span></span><br><span class="line">    <span class="comment">// 2. cas 给 base 累加时失败了, 表示 base 发生了竞争, 进入 if</span></span><br><span class="line">    <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> || !casBase(b = base, b + x)) &#123;</span><br><span class="line">        <span class="comment">// uncontended 表示 cell 没有竞争   这里进入if条件内就代表着有竞争</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">uncontended</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="comment">// as 还没有创建</span></span><br><span class="line">            as == <span class="literal">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            <span class="comment">// 当前线程对应的 cell 还没有</span></span><br><span class="line">            (a = as[getProbe() &amp; m]) == <span class="literal">null</span> ||</span><br><span class="line">            <span class="comment">// cas 给当前线程的 cell 累加失败 uncontended=false ( a 为当前线程的 cell )</span></span><br><span class="line">            !(uncontended = a.cas(v = a.value, v + x))</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// 进入 cell 数组创建、cell 创建的流程</span></span><br><span class="line">            longAccumulate(x, <span class="literal">null</span>, uncontended);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>casbase：非必要情况不会采用cells数组，竞争不激烈那就一个线程执行累加就好了；cells数组一旦创建就表示已经发生竞争</li></ul><p>流程：</p><p><img src="JUC并发编程/image-20231129164817395.png" alt="image-20231129164817395" style="zoom:80%;" /></p><p>​</p><p><code>longAccumulate</code>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">longAccumulate</span><span class="params">(<span class="type">long</span> x, LongBinaryOperator fn,</span></span><br><span class="line"><span class="params">                          <span class="type">boolean</span> wasUncontended)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="comment">// 当前线程还没有对应的 cell, 需要随机生成一个 h 值用来将当前线程绑定到 cell</span></span><br><span class="line">    <span class="keyword">if</span> ((h = getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 初始化 probe</span></span><br><span class="line">        ThreadLocalRandom.current();</span><br><span class="line">        <span class="comment">// h 对应新的 probe 值, 用来对应 cell</span></span><br><span class="line">        h = getProbe();</span><br><span class="line">        wasUncontended = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// collide 为 true 表示需要扩容</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">collide</span> <span class="operator">=</span> <span class="literal">false</span>; </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Cell[] as; Cell a; <span class="type">int</span> n; <span class="type">long</span> v;</span><br><span class="line">        <span class="comment">// 已经有了 cells</span></span><br><span class="line">        <span class="keyword">if</span> ((as = cells) != <span class="literal">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 还没有 cell</span></span><br><span class="line">            <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 为 cellsBusy 加锁, 创建 cell并初始化, cell 的初始累加值为 x</span></span><br><span class="line">                <span class="comment">// 成功创建cell则 break, 否则继续 continue 循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里判断是否有竞争   有竞争, 改变线程对应的 cell 来重试 cas</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)</span><br><span class="line">                wasUncontended = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// cas 尝试累加, fn 配合 LongAccumulator 不为 null, 配合 LongAdder 为 null</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (a.cas(v = a.value, ((fn == <span class="literal">null</span>) ? v + x : fn.applyAsLong(v, x))))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 如果 cells 长度已经超过了最大长度（CPU的核心数）, 或者已经扩容, 改变线程对应的 cell 来重试 cas</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (n &gt;= NCPU || cells != as)</span><br><span class="line">                collide = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 确保 collide 为 false 进入此分支, 就不会进入下面的 else if 进行扩容了</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                collide = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">                <span class="comment">// 加锁成功, 扩容</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 改变线程对应的 cell</span></span><br><span class="line">            h = advanceProbe(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 还没有 cells, 尝试给 cellsBusy 加锁</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; cells == as &amp;&amp; casCellsBusy()) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功, 初始化 cells, 最开始长度为 2, 并填充一个 cell</span></span><br><span class="line">            <span class="comment">// 成功则 break;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上两种情况失败, 尝试给 base 累加</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (casBase(v = base, ((fn == <span class="literal">null</span>) ? v + x : fn.applyAsLong(v, x))))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>cellsBusy：0表示未加锁，1表示已加锁</li><li>casCellsBusy：就等于利用cas让线程获得锁</li></ul><p>流程图：</p><p>1、cells不存在，想方设法创建一个cells；创建不成功就想方设法直接改基础值</p><figure><img src="JUC并发编程/image-20231129165718688.png"alt="image-20231129165718688" /><figcaption aria-hidden="true">image-20231129165718688</figcaption></figure><p>2、cells创建好了，但是多线程下，每个线程得找个自己对应的槽位cell</p><figure><img src="JUC并发编程/image-20231129165734195.png"alt="image-20231129165734195" /><figcaption aria-hidden="true">image-20231129165734195</figcaption></figure><p>3、每个线程刚进入longAccumulate时，都会尝试绑定一个cell对象</p><figure><img src="JUC并发编程/image-20231129165805011.png"alt="image-20231129165805011" /><figcaption aria-hidden="true">image-20231129165805011</figcaption></figure><p>最终执行的sum汇总方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sum</span><span class="params">()</span> &#123;</span><br><span class="line">    Cell[] as = cells; Cell a;</span><br><span class="line">    <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> base;</span><br><span class="line">    <span class="keyword">if</span> (as != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[i]) != <span class="literal">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="unsafe">Unsafe</h2><p>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe对象不能直接调用，只能通过反射获得</p><p>unsafe名称含义：这个类别碰，有点不安全</p><h3 id="cas操作">CAS操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> UnsafeAccessor.getUnsafe();</span><br><span class="line"><span class="type">Field</span> <span class="variable">id</span> <span class="operator">=</span> Student.class.getDeclaredField(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> Student.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 获得成员变量的偏移量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">idOffset</span> <span class="operator">=</span> UnsafeAccessor.unsafe.objectFieldOffset(id);</span><br><span class="line"><span class="type">long</span> <span class="variable">nameOffset</span> <span class="operator">=</span> UnsafeAccessor.unsafe.objectFieldOffset(name);</span><br><span class="line"><span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"><span class="comment">// 使用 cas 方法替换成员变量的值</span></span><br><span class="line">UnsafeAccessor.unsafe.compareAndSwapInt(student, idOffset, <span class="number">0</span>, <span class="number">20</span>); <span class="comment">// 返回 true</span></span><br><span class="line">UnsafeAccessor.unsafe.compareAndSwapObject(student, nameOffset, <span class="literal">null</span>, <span class="string">&quot;张三&quot;</span>); <span class="comment">// 返回 true</span></span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><ul><li>底层直接操作操作系统</li></ul><h1 id="共享模型不可变">共享模型——不可变</h1><h2 id="不可变的设计">不可变的设计</h2><h3 id="string">String</h3><p>string类对象本身的不可变，基于以下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">    <span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> hash; <span class="comment">// Default to 0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>内部<code>value</code>数组是<code>char</code>数组，使用<code>final</code>修饰，那这个数组引用就不会变，一直指向这个数组</li><li><code>value</code>数组是用<code>private</code>修饰，且<code>string</code>类内部没有提供与之相应的构造函数，那这样外界无法修改这个<code>value</code>数组。</li><li><code>String</code>类采用<code>final</code>修饰，防止子类篡改<code>value</code>数组</li></ol><h4 id="保护性拷贝">保护性拷贝</h4><p>对于String类里一些修改字符串的方法，底层都是采用数组拷贝的形式，创建新的对象来达到修改的一种方式：</p><p>substring：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (beginIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(beginIndex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">subLen</span> <span class="operator">=</span> value.length - beginIndex;</span><br><span class="line">    <span class="keyword">if</span> (subLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(subLen);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (beginIndex == <span class="number">0</span>) ? <span class="built_in">this</span> : <span class="keyword">new</span> <span class="title class_">String</span>(value, beginIndex, subLen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//substring内调用的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">String</span><span class="params">(<span class="type">char</span> value[], <span class="type">int</span> offset, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(offset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= value.length) &#123;</span><br><span class="line">            <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (offset &gt; value.length - count) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StringIndexOutOfBoundsException</span>(offset + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最关键的一步：去copy一个数组</span></span><br><span class="line">    <span class="built_in">this</span>.value = Arrays.copyOfRange(value, offset, offset+count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为什么采用拷贝形式：构造函数传入的value可能是外部存在的Stirng的char数组，这样就会造成引用共享，外部可以修改这个char数组，进而达到修改这个string对象的效果。</li></ul><h2 id="final原理">final原理</h2><p><strong>对final对象的set</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFinal</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字节码原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: aload_0</span><br><span class="line"><span class="number">1</span>: invokespecial #<span class="number">1</span> <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line"><span class="number">4</span>: aload_0</span><br><span class="line"><span class="number">5</span>: bipush <span class="number">20</span></span><br><span class="line"><span class="number">7</span>: putfield #<span class="number">2</span> <span class="comment">// Field a:I   直接赋值</span></span><br><span class="line"> &lt;-- 写屏障  保证并发可见性</span><br><span class="line"><span class="number">10</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>对final对象的get</strong></p><p>采用直接赋值，类似copy，避免走共享内存或者去共享变量取值。</p><p>jvm对final优化的变量取值的时候底层采用LDC指令，直接赋值到get的变量中：</p><p><img src="JUC并发编程/image-20231204112248307.png" alt="image-20231204112248307" style="zoom:80%;" /></p><p>对应字节码：</p><p><img src="JUC并发编程/image-20231204112308390.png" alt="image-20231204112308390" style="zoom:80%;" /></p><h1 id="juc并发工具">JUC并发工具</h1><h2 id="线程池">线程池</h2><h3 id="自定义线程池">自定义线程池</h3><figure><img src="JUC并发编程/image-20231205104843151.png"alt="image-20231205104843151" /><figcaption aria-hidden="true">image-20231205104843151</figcaption></figure><p><strong>自定义任务队列</strong></p><ol type="1"><li>队列</li><li>队列容量限制</li><li>生产者条件变量、消费者条件变量</li><li>锁：防止并发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.BlockQueue&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlockQueue</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Deque&lt;T&gt; queue = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    消费者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">emptyWaitSet</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line">    <span class="comment">//    生产者条件变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Condition</span> <span class="variable">fullWaitSet</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BlockQueue</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">timeoutTake</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将 timeout 统一转换为 纳秒</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> unit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nanos &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    nanos = emptyWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">T</span> <span class="variable">task</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> task;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 阻塞获取任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">take</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    emptyWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">T</span> <span class="variable">task</span> <span class="operator">=</span> queue.removeFirst();</span><br><span class="line">            fullWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> task;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 添加任务</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(T task)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待加入任务队列 &#123;&#125; ...&quot;</span>, task);</span><br><span class="line">                    fullWaitSet.await();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class="line">            queue.addLast(task);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">timeoutPut</span><span class="params">(T task, <span class="type">long</span> timeout, TimeUnit timeUnit)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">nanos</span> <span class="operator">=</span> timeUnit.toNanos(timeout);</span><br><span class="line">            <span class="keyword">while</span> (queue.size() == capacity) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nanos &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    log.debug(<span class="string">&quot;等待加入任务队列 &#123;&#125; ...&quot;</span>, task);</span><br><span class="line">                    nanos = fullWaitSet.awaitNanos(nanos);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.debug(<span class="string">&quot;加入任务队列 &#123;&#125;&quot;</span>, task);</span><br><span class="line">            queue.addLast(task);</span><br><span class="line">            emptyWaitSet.signal();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 添加不上就走拒绝策略</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tryPut</span><span class="params">(RejectPolicy&lt;T&gt; rejectPolicy, T task)</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size() == capacity)&#123;</span><br><span class="line">                rejectPolicy.reject(<span class="built_in">this</span>, task);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                queue.addLast(task);</span><br><span class="line">                emptyWaitSet.signal();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 返回当前队列长度</span></span><br><span class="line"><span class="comment">     * @param</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> queue.size();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自定义线程池</strong></p><ol type="1"><li>任务队列</li><li>线程集合</li><li>核心线程数</li><li>封装的线程对象Worker</li><li>线程的存活时间</li><li>拒绝策略</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j(topic = &quot;c.ThreadPool&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BlockQueue&lt;Runnable&gt; queue ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> coreSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimeUnit unit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">Thread</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Runnable task;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(Runnable task)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.task = task;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//1. 当前task不为空执行  2. 从任务队列再蹲一个任务出来</span></span><br><span class="line">            <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = queue.timeoutTake(timeout, unit) ) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//当前任务执行完毕</span></span><br><span class="line">                    task = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//任务队列也没有任务，关闭当前线程</span></span><br><span class="line">            <span class="keyword">synchronized</span> (workers)&#123;</span><br><span class="line">                log.debug(<span class="string">&quot;worker 被移除&#123;&#125;&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">                workers.remove(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadPool</span><span class="params">(<span class="type">int</span> coreSize, <span class="type">long</span> timeout, TimeUnit unit, <span class="type">int</span> queueCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coreSize = coreSize;</span><br><span class="line">        <span class="built_in">this</span>.timeout = timeout;</span><br><span class="line">        <span class="built_in">this</span>.unit = unit;</span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">BlockQueue</span>&lt;&gt;(queueCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (workers)&#123;</span><br><span class="line">            <span class="keyword">if</span>(workers.size() &lt; coreSize)&#123;</span><br><span class="line">                <span class="type">Worker</span> <span class="variable">worker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Worker</span>(task);</span><br><span class="line">                log.debug(<span class="string">&quot;新增 worker&#123;&#125;, &#123;&#125;&quot;</span>, worker, task);</span><br><span class="line">                workers.add(worker);</span><br><span class="line">                worker.start();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                queue.put(task);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拒绝策略函数接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RejectPolicy</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reject</span><span class="params">(BlockQueue&lt;T&gt; blockQueue, T task)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;进程与线程&quot;&gt;进程与线程&lt;/h1&gt;
&lt;h2 id=&quot;查看进程命令&quot;&gt;查看进程命令&lt;/h2&gt;
&lt;h3 id=&quot;windows&quot;&gt;windows&lt;/h3&gt;
&lt;p&gt;任务管理器可以查看进程和线程数，也可以用来杀死进程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tasklist&lt;/</summary>
      
    
    
    
    <category term="Java" scheme="https://vlsmhd.github.io/categories/Java/"/>
    
    <category term="并发编程" scheme="https://vlsmhd.github.io/categories/Java/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="并发编程" scheme="https://vlsmhd.github.io/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MIT6.824学习</title>
    <link href="https://vlsmhd.github.io/2023/10/27/MIT6.824%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/10/27/MIT6.824%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-10-27T07:11:46.878Z</published>
    <updated>2023-11-23T15:11:39.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="papervideo">Paper&amp;Video</h1><h2 id="mapreduce">MapReduce</h2><p>MapReduce是一个在<strong>多台机器</strong>上并行计算<strong>大规模数据</strong>的<strong>软件架构</strong>。主要通过两个操作来实现：<code>Map</code>和 <code>Reduce</code>。</p><p>理解MP是干什么的：</p><p>来自于对Lisp语言中map/reduce原语的借鉴,经过谷歌大量重复的编写数据处理类的程序,发现所有数据处理的程序都有类似的过程:</p><blockquote><p>将一组输入的数据应用map函数返回一个k/v对的结构作为中间数据集,并将具有相同key的数据输入到一个reduce函数中执行,最终返回处理后的结果。</p></blockquote><p><img src="MIT6.824学习/image-20231117222302426.png" alt="image-20231117222302426" style="zoom:50%;" /></p><p>如上图，将输入文件拆分成多个小文件，交给每个map函数，每个map函数统计文件中每一个关键字key和其需要被统计的次数（如出现次数）value形成一个键值对，不同的key，以列为维度排列，然后将相同的key，通过reduce函数聚合计算，合并结果。</p><p>伪码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>(String key,String value):</span><br><span class="line">    <span class="comment">// key: 文档名</span></span><br><span class="line">    <span class="comment">// value: 文档内容</span></span><br><span class="line">    <span class="keyword">for</span> each word w in value:</span><br><span class="line">        EmitIntermediate(w,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">reduce(Stringkey, Iterator values):</span><br><span class="line">    <span class="comment">// key: 一个单词</span></span><br><span class="line">    <span class="comment">// value: 计数值列表</span></span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> each v in values:</span><br><span class="line">        result += ParseInt(v);</span><br><span class="line">    Emit(AsString(result));</span><br></pre></td></tr></table></figure><ul><li>emit：相当于函数输出的结果显示在你的屏幕上</li></ul><h3 id="工作流程">工作流程</h3><p><img src="MIT6.824学习/image-20231117221941391.png" alt="image-20231117221941391" style="zoom:80%;" /></p><ol type="1"><li>用户程序启动MapReduce实例，包含一个Master和多个Worker（工作结点）</li><li>由 Master 分配任务，将 <code>Map</code> 任务分配给可用的Worker；可以根据GFS里存储数量分配</li><li>将输入文件分成M个小文件（每个文件的大小大概 16M-64M），Map Worker读取文件，执行用户自定义的 map 函数，输出 key/value对，缓存在内存中；</li><li>内存中的 (key, value) 对通过 <code>partitioning function()</code>例如 <code>hash(key) mod R</code> 分为 R 个regions，然后写入磁盘。完成之后，把这些文件的地址回传给 Master，然后Master 把这些位置传给 <code>Reduce</code> Worker；</li><li><code>Reduce</code> Worker 收到数据存储位置信息后，使用 RPC 从<code>Map</code> Worker 所在的磁盘读取这些数据，根据 key进行排序，并将同一 key 的所有数据分组聚合在一起（<strong>由于许多不同的key 值会映射到相同的 Reduce任务上，因此必须进行排序。如果中间数据太大无法在内存中完成排序，那么就要在外部进行排序</strong>）；</li><li><code>Reduce</code> Worker 将分组后的值传给用户自定义的 reduce函数，输出追加到所属分区的输出文件中；</li><li>当所有的 Map 任务和 Reduce 任务都完成后，Master向用户程序返回结果；</li></ol><h3 id="应用场景">应用场景</h3><p><strong>分布式Grep：</strong>map函数在匹配到给定的pattern时输出一行。reduce函数只是将给定的中间数据复制到输出上。</p><p><strong>URL访问频次统计：</strong>map函数处理网页请求的日志，对每个URL输出〈URL,1〉。reduce函数将相同URL的所有值相加并输出〈URL, 总次数〉对。</p><p><strong>倒转Web链接图：</strong>map函数在source页面中针对每个指向target的链接都输出一个〈target,source〉对。reduce函数将与某个给定的target相关联的所有source链接合并为一个列表，并输出〈target,list(source)〉对。</p><p><strong>每个主机的关键词向量：</strong>关键词向量是对出现在一个文档或一组文档中的最重要的单词的概要，其形式为〈单词,频率〉对。map函数针对每个输入文档（其主机名可从文档URL中提取到）输出一个〈主机名,关键词向量〉对。给定主机的所有文档的关键词向量都被传递给reduce函数。reduce函数将这些关键词向量相加，去掉其中频率最低的关键词，然后输出最终的〈主机名,关键词向量〉对。</p><p><strong>倒排索引：</strong>map函数解析每个文档，并输出一系列〈单词,文档ID〉对。reduce函数接受给定单词的所有中间对，将它们按文档ID排序，再输出〈单词,list(文档ID)〉对。所有输出对的集合组成了一个简单的倒排索引。用户可以很轻松的扩展这个过程来跟踪单词的位置。</p><p><strong>分布式排序：</strong>map函数从每条记录中提取出key，并输出〈key,记录〉对。reduce函数不改变这些中间对，直接输出。</p><h1 id="lab">Lab</h1><h2 id="开发环境搭建">开发环境搭建</h2><h3 id="搭建虚拟机ubuntu">搭建虚拟机ubuntu</h3><h4 id="解决vmtools不起作用">解决vmtools不起作用</h4><p>重新安装vm-tools-desktop</p><ol type="1"><li><p>不需要卸载</p></li><li><p>命令行执行sudo apt-get install open-vm-tools-desktop</p></li><li><p>可能会提示apt-get update或者 --fix-missing</p></li><li><p>然后命令行执行 apt-get update --fix-missing</p></li><li><p>命令行再执行sudo apt-get install open-vm-tools-desktop</p></li><li><p>重启后可以使用</p></li></ol><h3 id="安装vscodego">安装VScode、Go</h3><h4 id="安装goals超时">安装goals超时</h4><p>修改代理，然后在 cmd 下面输入： go env -w GO111MODULE=on go env -wGOPROXY=https://goproxy.cn,direct</p><p>修改代理到国内的go，然后在 cmd 重新获取即可成功： go get -vgolang.org/x/tools/gopls</p><h4 id="gcc编译问题">gcc编译问题</h4><p>问题描述：</p><figure><img src="MIT6.824学习/image-20231123225316800.png"alt="image-20231123225316800" /><figcaption aria-hidden="true">image-20231123225316800</figcaption></figure><p>解决：</p><p>安装gcc</p><p>执行下面的命令，来验证<ahref="https://so.csdn.net/so/search?q=gcc&amp;spm=1001.2101.3001.7020">gcc</a>有没有安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -v </span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>看看是否安装成功，如果成功重启你的<ahref="https://so.csdn.net/so/search?q=编辑器&amp;spm=1001.2101.3001.7020">编辑器</a>重新运行就不报错了</p><p>执行下面的命令，来安装gcc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install gcc</span><br></pre></td></tr></table></figure><h2 id="distributed-big-data-framework">distributed big-dataframework</h2><h2 id="fault-tolerance-using-replication">fault tolerance usingreplication</h2><h2 id="a-simple-fault-tolerant-database">a simple fault-tolerantdatabase</h2><h2 id="scalable-database-performance-via-sharding">scalable databaseperformance via sharding</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;papervideo&quot;&gt;Paper&amp;amp;Video&lt;/h1&gt;
&lt;h2 id=&quot;mapreduce&quot;&gt;MapReduce&lt;/h2&gt;
&lt;p&gt;MapReduce
是一个在&lt;strong&gt;多台机器&lt;/strong&gt;上并行计算&lt;strong&gt;大规模数据&lt;/stro</summary>
      
    
    
    
    <category term="分布式" scheme="https://vlsmhd.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Raft算法</title>
    <link href="https://vlsmhd.github.io/2023/10/27/Raft%E7%AE%97%E6%B3%95/"/>
    <id>https://vlsmhd.github.io/2023/10/27/Raft%E7%AE%97%E6%B3%95/</id>
    <published>2023-10-27T02:07:21.520Z</published>
    <updated>2023-11-07T08:52:03.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="raft概念">raft概念</h1><h2 id="raft分布式共识算法">raft分布式共识算法</h2><p>问题引入：假设有一个客户端、一个服务端，当客户端向服务端同步消息，在服务端单节点的情况下，很容易同步消息，服务端收到啥，这个服务端就做对应处理即可，但是当服务器用多个结点，如何保证消息、或者说信息的一致性？</p><p><img src="Raft算法/image-20231027101308810.png" alt="image-20231027101308810" style="zoom:67%;" /></p><p>解决这类问题，就用到分布式共识算法，raft就是其中之一。</p><h3 id="算法流程">算法流程</h3><p>结点的状态：</p><ul><li><code>follows</code>追随者状态</li><li><code>candidate</code>候选人状态</li><li><code>leader</code>集群之首：客户端的请求优先发送到处于该状态的结点，随后同步到其它结点</li></ul><h4 id="选举leader"><strong>选举leader</strong></h4><p>大致流程：如果一个结点的状态是<code>follows</code>，并且没有监听任何一个<code>leader</code>，那这个结点可以更换状态为<code>candidate</code>。随后它向周围的结点<strong>拉票，</strong>随后周围的结点就会向这个结点2投票（赞成or 反对），当这个结点得到的票数占据大多数，就会成功选举为leader。</p><p>在raft算法中，有两个控制选举的超时设置：</p><ul><li><code>Election timeout</code>：<code>followers</code> 变成<code>candidate</code> 之前等待的时间 设置在150 - 300ms之间</li><li><code>heartbeat timeout</code>：<code>leader</code>结点发送（<em>AppendEntries</em>）的间隔时间</li></ul><p><img src="Raft算法/image-20231027104641796.png" alt="image-20231027104641796" style="zoom:50%;" /></p><p>C结点先于其它结点过完一个<code>Election timeout</code>，随后会开启一轮选举。C将投票请求发送给相邻结点，在这一轮中，没有进行过投票的结点会把票投给C，随后重置这些投票结点的<code>Election timeout</code>。</p><p>C结点获得的投票数占据大多数，选举成为leader。</p><h5 id="心跳检测"><strong>心跳检测</strong></h5><p>随后C结点向相邻结点发送（<em>AppendEntries</em>），leader发送消息（<em>AppendEntries</em>）的时候，会按照心跳超时时间间隔发送消息（<em>AppendEntries</em>），随后followers回馈消息，在followers接收到<em>AppendEntries</em>时候，刷新自己的<code>Election timeout</code>时间。</p><p>本次选举周期会持续到追随者停止心跳，变成候选人</p><p>leader挂掉的情况：</p><p>这样即使leader结点挂掉，其它结点就收不到（<em>AppendEntries</em>），这样其它结点过了<code>Election timeout</code>时间，就直接变成候选人，自己进行选举</p><p><img src="Raft算法/image-20231027123520087.png" alt="A挂掉" style="zoom:67%;" /></p><p>随后C上位，变成leader。</p><p>当然有可能B、C同时变成候选人，可能出现<strong>分裂投票</strong>：</p><p><img src="Raft算法/image-20231027142915797.png" alt="分裂投票开始" style="zoom:67%;" /></p><p>如上图，结点B、D同时进入候选人状态，都向临近的三个节点发送投票申请，这时发生分裂投票：</p><p><img src="Raft算法/image-20231027144413745.png" alt="分裂投票" style="zoom: 80%;" /></p><p>A和C分别投给了D和B，于是B、D票数持平，遇到这种情况系统的解决方案是，原地等待，再等一个<code>Election timeout</code>，直到遇到唯一一个结点进入候选者环节，且唯一胜出。</p><h4 id="log-replication日志同步">Log Replication日志同步</h4><p>大致流程：假设客户端请求想让集群改变状态到“5”，当请求到达leader时，该改变并不会立即提交，先将改变记录存放到leader的log当中，随后由leader结点先分发到各个从结点，随后从结点改变状态，然后修改成功的从结点向leader结点发送成功消息，当leader结点收到<strong>大多数</strong>成功消息后，就会将这个改动彻底提交，此刻集群的状态变成“5”</p><p>案例：</p><ol type="1"><li><p>客户端预备</p><p>此时集群处于心跳监测的状态</p><p><img src="Raft算法/image-20231027144923158.png" alt="image-20231027144923158" style="zoom:67%;" /></p></li><li><p>客户端发送消息</p><p><img src="Raft算法/image-20231027145034596.png" alt="image-20231027145034596" style="zoom:67%;" /></p><p>这个消息会被记录到leader结点的log中</p></li><li><p>再过一个心跳时间间隔，leader将log同步到其它结点中去</p><p><img src="Raft算法/image-20231027145208838.png" alt="image-20231027145208838" style="zoom:67%;" /></p></li><li><p>这个提交，如果同步到 <strong>大多数</strong>其他结点中去了，那么可以认定这个entry可以提交，提交后，会向客户端发送<code>response</code></p><p><img src="Raft算法/image-20231027145319195.png" alt="image-20231027145319195" style="zoom:67%;" /></p></li></ol><h5 id="网络分区">网络分区</h5><p>Raft可以在面对网络分区时保持一致：</p><p><img src="Raft算法/image-20231027145539682.png" alt="集群分区" style="zoom:67%;" /></p><p>上图中，两个分区，上面分区的<code>leader</code>是C，下面分区的<code>leader</code>是B（每个分区一个<code>leader</code>）</p><p>案例：</p><ol type="1"><li>多客户端，同时改变分区集群的状态</li></ol><p><img src="Raft算法/image-20231027145741819.png" alt="分区-多客户端 " style="zoom:67%;" /></p><ol start="2" type="1"><li><p>一个客户端先向B请求，让其状态变为3，但是由于整个集群中只有结点A发生变化，不能达到<strong>大多数</strong>，因此这个请求保持uncommited状态</p><p><img src="Raft算法/image-20231027150037345.png" alt="第一次请求" style="zoom:67%;" /></p></li><li><p>另一个客户端向C请求，让状态改到8，于是C同步到D和E上，要改变的结点个数占据大多数，因此请求提交成立</p><p><img src="Raft算法/image-20231027150153271.png" alt="第二次提交" style="zoom:67%;" /></p></li><li><p>此时恢复分区，B这个leader的层级是小于C这个leader的层级的，因此，B以及B的小弟们，会一同跟随新的大哥C，并且日志log也会同步</p><p><img src="Raft算法/image-20231027150440944.png" alt="image-20231027150440944" style="zoom:67%;" /></p></li></ol><p>核心： <em>Append Entries</em> message 配合心跳机制。</p><h1 id="实现raft">实现raft</h1><p><ahref="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/">ImplementingRaft: Part 0 - Introduction - Eli Bendersky's website(thegreenplace.net)</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;raft概念&quot;&gt;raft概念&lt;/h1&gt;
&lt;h2 id=&quot;raft分布式共识算法&quot;&gt;raft分布式共识算法&lt;/h2&gt;
&lt;p&gt;问题引入：假设有一个客户端、一个服务端，当客户端向服务端同步消息，在服务端单节点的情况下，很容易同步消息，服务端收到啥，这个服务端就做对应</summary>
      
    
    
    
    <category term="分布式" scheme="https://vlsmhd.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>SQL学习</title>
    <link href="https://vlsmhd.github.io/2023/10/17/SQL%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/10/17/SQL%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-10-17T00:40:06.220Z</published>
    <updated>2023-11-30T08:41:58.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sql语句">SQL语句</h1><h2 id="sql基础">SQL基础</h2><h3 id="ddl">DDL</h3><p>DDL（Data Definition Language）语句：<code>数据定义语言</code>，主要是进行定义/改变表的结构、数据类型、表之间的链接等操作。</p><p><strong>常用关键字：</strong>create、drop、alter等。</p><p>模板</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名&#123;</span><br><span class="line">列名<span class="number">1</span> 数据类型,</span><br><span class="line">列名<span class="number">2</span> 数据类型,</span><br><span class="line">列名<span class="number">3</span> 数据类型</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">#加一列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 列名 数据类型;</span><br><span class="line">#修改列名</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 列名 新列名 数据类型;</span><br><span class="line">#删除一列</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 列名;</span><br></pre></td></tr></table></figure><h3 id="dml">DML</h3><p>DML（Data Manipulation Language）语句:<code>数据操纵语言</code>，主要是对数据进行增加、删除、修改操作。语句关键字有INSERT、UPDATE、DELETE 等。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>插入单值、多值</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段<span class="number">1</span>,字段<span class="number">2</span>,...) <span class="keyword">values</span> (某值,某值,...),(某值,某值,...);</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>插入查询结果</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名<span class="number">1</span> (列名) <span class="keyword">select</span> (列名) <span class="keyword">from</span> 表名<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 列名<span class="operator">=</span>新值 <span class="keyword">WHERE</span> 限定条件;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 限定条件;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="dql">DQL</h3><p>DQL（Data QueryLanguage）语句：<code>数据查询语言</code>，主要是对数据进行查询操作。常用关键字有SELECT、FROM、WHERE 等。</p><p>查询结构：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后的条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><h4 id="基础查询">基础查询：</h4><p>简单查询多字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span> ... <span class="keyword">FROM</span> 表名 ; </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 ; #不能经常用</span><br></pre></td></tr></table></figure><p>别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ <span class="keyword">AS</span> 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ <span class="keyword">AS</span> 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名; <span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>去重：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名; </span><br></pre></td></tr></table></figure><h4 id="条件查询">条件查询：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表 ;</span><br></pre></td></tr></table></figure><p>条件列表：</p><table><thead><tr class="header"><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr class="odd"><td>&gt;</td><td>大于</td></tr><tr class="even"><td>&gt;=</td><td>大于等于</td></tr><tr class="odd"><td>&lt;</td><td>小于</td></tr><tr class="even"><td>&lt;=</td><td>小于等于</td></tr><tr class="odd"><td>=</td><td>等于</td></tr><tr class="even"><td>&lt;&gt; 或 !=</td><td>不等于</td></tr><tr class="odd"><td>between...and....</td><td>在某个范围之内(含最小、最大值)</td></tr><tr class="even"><td>in (. . . )</td><td>在in之后的列表中的值，多选一</td></tr><tr class="odd"><td>LIKE 占位符</td><td>模糊匹配 ( _匹配单个字符, % 匹配任意个字符)</td></tr><tr class="even"><td>IS NULL</td><td>是null值</td></tr></tbody></table><p>常用逻辑运算符：</p><table><thead><tr class="header"><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>AND 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr class="even"><td>OR 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr class="odd"><td>NOT 或 ！</td><td>非</td></tr></tbody></table><h4 id="聚合函数">聚合函数</h4><p>针对一<strong>列</strong>数据，<strong>纵向</strong>计算</p><p>常见聚合函数</p><table><thead><tr class="header"><th><strong>函数</strong></th><th></th></tr></thead><tbody><tr class="odd"><td>count</td><td>统计数量</td></tr><tr class="even"><td>max</td><td>最大值</td></tr><tr class="odd"><td>min</td><td>最小值</td></tr><tr class="even"><td>avg</td><td>平均值</td></tr><tr class="odd"><td>sum</td><td>求和</td></tr></tbody></table><p>语法：</p><p>一般配合分组使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><h5 id="案例">案例</h5><p>A. 统计该企业员工数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp;<span class="comment">-- 统计的是总记录数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(id) <span class="keyword">from</span> emp;  <span class="comment">-- 统计的是idcard字段不为null的记录数</span></span><br></pre></td></tr></table></figure><p>对于count聚合函数，统计符合条件的总记录数，还可以通过count(数字/字符串)的形式进行统计查询，比如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><h4 id="分组查询">分组查询</h4><p>基础语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表 <span class="keyword">where</span> 分组前条件 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段... [<span class="keyword">having</span> 分组后过滤条件]</span><br></pre></td></tr></table></figure><p>where与having区别</p><ul><li><p>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</p></li><li><p>判断条件不同：<strong>where不能对聚合函数</strong>进行判断，而having可以</p></li></ul><p><strong>分组查询结果条目</strong></p><p>根据哪个字段分组，一般结果的个数与这个字段可能出现的结果个数相同</p><h5 id="案例-1">案例</h5><p>根据性别分组 , 统计男性员工 和 女性员工的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender, <span class="built_in">count</span>(id) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure><p>查询年龄小于45的员工 , 并根据工作地址分组 ,获取员工数量大于等于3的工作地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> age, address, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> address_count <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> address <span class="keyword">having</span> address_count <span class="operator">&gt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>统计各个工作地址上班的男性及女性员工的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> address, gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="string">&#x27;数量&#x27;</span> <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender , address;</span><br></pre></td></tr></table></figure><h5 id="常用规则">常用规则</h5><ol type="1"><li>分组排序：除开带有聚合函数计算那一列，select中出现的其它列都要加到groupby 列。</li></ol><h4 id="排序查询">排序查询</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span> , 字段<span class="number">2</span> 排序方式<span class="number">2</span> ;</span><br></pre></td></tr></table></figure><ul><li>ASC：升序</li><li>DESC：降序</li></ul><p>从第1条数据开始升序/降序</p><h4 id="分页查询">分页查询</h4><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure><p>注意：</p><p>注意事项:</p><ul><li>起始索引从0开始，起始索引 = （查询页码 - 1）* 每页显示记录数。</li><li>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</li><li>如果查询的是<strong>第一页</strong>数据，起始索引可以省略，直接简写为limit 10。</li></ul><h4 id="综合案例">综合案例：</h4><p>查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name, age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;=</span> <span class="number">35</span> <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>, entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h4 id="查询语句执行顺序">查询语句执行顺序：</h4><p><img src="image-20230627221727164.png" alt="SQL执行过程" style="zoom:80%;" /></p><h3 id="dcl">DCL</h3><p>DCL（Data Control Language）语句：<code>数据控制语言</code>，主要是用来设置/更改数据库<strong>用户权限</strong>。常用关键字有GRANT、REVOKE 等。</p><h4 id="管理用户">管理用户</h4><p>查询用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure><figure><img src="image-20230627221939052.png" alt="image-20230627221939052" /><figcaption aria-hidden="true">image-20230627221939052</figcaption></figure><p>结果分析：</p><ul><li><p>Host代表当前用户访问的主机, 如果为localhost,仅代表只能够在当前本机访问，是不可以远程访问的。</p></li><li><p>User代表的是访问该数据库的用户名。在MySQL中需要通过Host和User来唯一标识一个用户</p></li></ul><p>创建：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span> @ <span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>修改密码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@ <span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span> ; </span><br></pre></td></tr></table></figure><p>删除用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> ;</span><br></pre></td></tr></table></figure><h4 id="权限控制">权限控制</h4><p>权限表：</p><table><thead><tr class="header"><th>权限</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>SELECT</td><td>允许用户查询（读取）表中的数据</td></tr><tr class="even"><td>INSERT</td><td>允许用户向表中插入新数据</td></tr><tr class="odd"><td>UPDATE</td><td>允许用户修改表中的数据</td></tr><tr class="even"><td>DELETE</td><td>允许用户删除表中的数据</td></tr><tr class="odd"><td>CREATE</td><td>允许用户创建新的数据库或表</td></tr><tr class="even"><td>DROP</td><td>允许用户删除数据库或表</td></tr><tr class="odd"><td>ALTER</td><td>允许用户修改已存在的数据库结构（表结构）</td></tr><tr class="even"><td>GRANT</td><td>允许用户授予或撤销权限给其他用户</td></tr><tr class="odd"><td>RELOAD</td><td>允许用户重新加载服务器配置</td></tr><tr class="even"><td>SHUTDOWN</td><td>允许用户关闭数据库服务器</td></tr><tr class="odd"><td>PROCESS</td><td>允许用户查看其他用户的进程</td></tr><tr class="even"><td>FILE</td><td>允许用户读取或写入文件系统</td></tr><tr class="odd"><td>SUPER</td><td>允许用户执行特殊的超级权限操作</td></tr><tr class="even"><td>ALL PRIVILEGES</td><td>允许用户拥有所有权限</td></tr></tbody></table><p>查询权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> ;</span><br></pre></td></tr></table></figure><p>授予权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><p>撤销权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="sql高级">SQL高级</h2><h3 id="dql-1">DQL</h3><h4 id="计算语句">计算语句</h4><h4 id="查询期间">查询期间</h4><h1 id="sql优化">SQL优化</h1><h2 id="sql执行计划">SQL执行计划</h2><p>explian 执行计划各个字段的含义：</p><ul><li><p><strong>id:</strong> Query Optimizer所选定的执行计划中的查询编号。</p></li><li><p><strong>select_type:</strong>所使用的查询类型，主要有几种查询类型：</p><figure><img src="SQL学习/v2-184207f2bd3c714463685956ebbea4f7_720w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure></li><li><p><strong>table:</strong>显示执行这一步所访问的数据库中的表的名称。</p></li><li><p><strong>partitions:</strong> 查询分区表匹配的分区，非分区表显示NULL 。</p></li><li><p><strong>type:</strong> 查询表所使用的方式，类型如下：</p></li></ul><figure><img src="SQL学习/v2-acfe7b9ac2aafb7a9ab0901765a83ca6_720w.webp"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>他们的性能由好到差依次是：<strong>system &gt; const &gt; eq_ref &gt;ref &gt; full_text &gt; ref_or_null &gt; unique_subquery &gt;index_subquery &gt; range &gt; index_merge &gt; index &gt; all</strong>。</p><ul><li><strong>possible_keys:</strong> 查询可能用到的索引。</li><li><strong>key_len:</strong> 用到的索引长度。</li><li><strong>ref:</strong> 展示将那些列或者常量与命中的索引比较。</li><li><strong>rows:</strong> 执行这次查询扫描的行数。</li><li><strong>filtered:</strong>过滤行数百分比，最大值是100，当显示100时候，表示没有过滤行，rows显示了检查的估计行数，乘以过滤百分比将显示与下表连接的行数。例如，如果行数为1000，过滤条件为50.00（50％），则与下表联接的行数为1000×50％=500。</li><li><strong>extra:</strong> 执行查询额外的条件。</li></ul><h2 id="慢sql优化">慢sql优化</h2><h3 id="避免select">避免select *</h3><p>原因1：数据库要翻译*为全部字段，耗时</p><p>原因2：利用覆盖索引</p><h3 id="使用prepare">使用prepare</h3><p>mysql8.0以后适用。</p><ul><li><strong>语句样式:</strong> MySQL中,可用如下方法: PREPARE stmt_nameFROM SELECT * FROM 表名称 WHERE id_pk &gt; (？* ？) ORDER BY id_pk ASCLIMIT M</li><li><strong>适应场景:</strong> 大数据量</li><li><strong>原因:</strong> 索引扫描,速度会很快.prepare语句又比一般的查询语句快一点。</li></ul><h3 id="高效分页">高效分页</h3><ul><li><p>数据量少：直接<code>limit 起始索引， 每页数据</code></p></li><li><p>数据量多：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,age</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">1000000</span>,<span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>该条sql会查询1000020条数据，然后取后面20条，很消耗资源，优化如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,age</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">1000000</span> limit <span class="number">20</span>;</span><br></pre></td></tr></table></figure></li></ul><ol type="1"><li><p>用union all 代替 union</p><p>union ：需要去重排序，遍历，更耗时</p></li><li><p>小表驱动大表（嵌套查询）</p><ul><li>exists：左边小表，右边大表</li><li>in：左边大表，右边小表</li></ul><figure><img src="image-20231020130044847.png" alt="image-20231020130044847" /><figcaption aria-hidden="true">image-20231020130044847</figcaption></figure><p>in关键字会优先查询in里面的子查询语句，这样缩减了大表的搜寻范围。</p></li><li><p>批量操作，但是一次性数据不要传输太多</p></li><li><p>多用limit</p><p>案例：查询最新的一条订单数据</p><p>低级思路：查询全部数据，然后倒序排序，随后在内存中取第一条数据。</p><p>高级思路：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, create_time</span><br><span class="line"><span class="keyword">from</span> <span class="keyword">order</span></span><br><span class="line"><span class="keyword">where</span> user_id <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> create_time</span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>in中的条件不能太多</p><p>分批查询，in中固定500（假设）个值。这些要放在业务代码层面解决。</p></li><li><p>用连接查询代替子查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span></span><br><span class="line"><span class="keyword">where</span> user_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> status<span class="operator">=</span><span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>改成连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.<span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span> o</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">user</span> u <span class="keyword">on</span> o.user_id <span class="operator">=</span> u.id</span><br><span class="line"><span class="keyword">where</span> u.status <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>join表的数量不宜过多</p><p>反例：</p><figure><img src="image-20231020145653892.png" alt="image-20231020145653892" /><figcaption aria-hidden="true">image-20231020145653892</figcaption></figure><p>修正：</p><p>添加冗余字段。</p><figure><img src="image-20231020150905166.png" alt="image-20231020150905166" /><figcaption aria-hidden="true">image-20231020150905166</figcaption></figure></li><li><p>控制索引的数量</p><p>不超过5个</p></li><li><p>选择合理的字段类型</p></li><li><p>提升group by效率</p><p>反例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id,user_name <span class="keyword">from</span> <span class="keyword">order</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line"><span class="keyword">having</span> user_id <span class="operator">&lt;=</span> <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>优化：</p><p>先缩小范围再分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id,user_name <span class="keyword">from</span> <span class="keyword">order</span> </span><br><span class="line"><span class="keyword">where</span> user_id <span class="operator">&lt;=</span> <span class="number">200</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br></pre></td></tr></table></figure></li><li><p>索引优化</p><p>查看sql走了索引没：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `<span class="keyword">order</span>` <span class="keyword">where</span> code <span class="operator">=</span> <span class="string">&#x27;002&#x27;</span></span><br></pre></td></tr></table></figure><p>随后建立索引或者预防索引失效。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;sql语句&quot;&gt;SQL语句&lt;/h1&gt;
&lt;h2 id=&quot;sql基础&quot;&gt;SQL基础&lt;/h2&gt;
&lt;h3 id=&quot;ddl&quot;&gt;DDL&lt;/h3&gt;
&lt;p&gt;DDL（Data Definition Language）语句：
&lt;code&gt;数据定义语言&lt;/code&gt;，主要是进行定</summary>
      
    
    
    
    <category term="数据库" scheme="https://vlsmhd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="SQL" scheme="https://vlsmhd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL/"/>
    
    
    <category term="数据库" scheme="https://vlsmhd.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="SQL" scheme="https://vlsmhd.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用命令</title>
    <link href="https://vlsmhd.github.io/2023/10/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://vlsmhd.github.io/2023/10/11/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-10-11T12:54:14.613Z</published>
    <updated>2023-11-20T14:22:48.396Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>命令可以是下面四种形式之一：</p><ol type="1"><li>是一个可执行程序，就像我们所看到的位于目录<code>/usr/bin</code>中的文件一样。属于这一类的程序，可以编译成二进制文件，诸如用C 和 C++ 语言写成的程序，也可以是由脚本语言写成的程序，比如说shell，perl，python，ruby，等等。</li><li>是一个内建于 shell 自身的命令。bash 支持若干命令，内部叫做 shell内部命令 (builtins)。例如，上面我本地环境中的 cd 命令，就是一个 shell内部命令。</li><li>是一个 shell 函数。这些是小规模的 shell 脚本，它们混合到环境变量中。比如上面讲到的 cd 命令，在某些环境中就是一个 shell 函数。</li><li>是一个命令别名。我们可以定义自己的命令，建立在其它命令之上。</li></ol></blockquote><h1 id="文件目录操作">文件目录操作</h1><p>命令规律： 关键字 [选项] [实体]</p><h2 id="ls">ls</h2><p>参考文章：<ahref="https://www.cnblogs.com/peida/archive/2012/10/23/2734829.html">每天一个linux命令(1)：ls命令- peida - 博客园 (cnblogs.com)</a></p><p>定义：ls 命令是 linux 下最常用的命令，ls 命令就是 <code>list</code>的缩写。</p><p>作用：打印出当前目录的清单，查看linux文件夹包含的文件、目录和文件权限等信息。</p><p>命令格式：<code>ls [选项][目录名]</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-a</td><td>–all 列出目录下的所有文件，包括以 . 开头的隐含文件</td></tr><tr class="even"><td>-l</td><td>除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</td></tr><tr class="odd"><td>-i</td><td>显示出文件的inode</td></tr><tr class="even"><td>-h</td><td>–human-readable 以容易理解的格式列出文件大小（例如 1K 234M 2G)</td></tr><tr class="odd"><td>-t</td><td>以文件修改时间排序</td></tr></tbody></table><h3 id="案例">案例</h3><p><strong>例一：</strong>列出<code>/home</code>文件夹下的所有文件和目录的详细资料，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -a -l /home</span><br><span class="line"><span class="built_in">ls</span> -al /home</span><br></pre></td></tr></table></figure><p>上面两个命令执行结果一样，结果如下： <imgsrc="Linux常用命令/linux1.jpg" alt="Alt text" /></p><p>注意上面红色方框：</p><ul><li>d 表示目录（directory）</li><li><ul><li>表示文件，文件和目录显示的颜色也不同。</li></ul></li></ul><p><strong>例二：</strong>列出当前目录中所有以”d”开头的文件目录的详细内容，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l d*</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/linux2.jpg" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p><strong>例三</strong>：以容易理解的格式列出<code>/home</code>目录中所有的文件目录的大小，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -alh /home</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/linux3.jpg" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><h3 id="文件信息">文件信息</h3><p>命令 <code>ls -l</code> 输出的信息如下：</p><figure><img src="Linux常用命令/image-20231014141526966.png"alt="image-20231014141526966" /><figcaption aria-hidden="true">image-20231014141526966</figcaption></figure><ul><li><strong>第1列</strong>——文件/目录权限，一共十位<ul><li>第一位是文档类型：d（目录）、-（文件）、l（链接文件）、c（一次性读取设备，如鼠标键盘）</li><li>后九位每三位权限对应一个身份：身份顺序为<code>owner、group（同群组下的用户）、others（其它人）</code></li><li>权限顺序：r（可读）、w（可写）、x（可执行）<ul><li>r4w2x1，这是每个权限的数字权重</li></ul></li></ul></li><li><strong>第2列</strong>——链接数。表示有多少个文件链接到inode号码。</li><li><strong>第3列</strong>——所有者的姓名。</li><li><strong>第4列</strong>——文件所属组的名称。</li><li><strong>第 5 列</strong>——文件大小（以字节为单位）。</li><li><strong>第 6 列至第 8 列</strong>——最后修改日期。</li><li><strong>第 9 列</strong>——文件/目录名称。</li></ul><h2 id="cd">cd</h2><p>定义：change directory的缩写，<strong>切换当前目录至指定的目录</strong>。</p><p>语法：<code>cd [目录名]</code></p><h3 id="案例-1">案例</h3><p><strong>例一：</strong>从当前目录进入系统根目录，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span>  /</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>从当前目录进入父目录，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure><p>.. 表示父目录。</p><p><strong>例三：</strong>从当前目录进入当前用户主目录，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><p>~ 表示当前用户主目录，注意它与系统根目录不是同一个概念。</p><p><strong>例四：</strong>从当前目录进入上次所在目录，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> -</span><br></pre></td></tr></table></figure><p>- 表示上次进入的目录。</p><h2 id="pwd">pwd</h2><p>定义：查看当前工作目录的完整路径，</p><p>语法：<code>pwd [选项]</code></p><p><strong>常用选项参数：</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-P</td><td>显示实际物理路径，而非使用连接（link）路径</td></tr><tr class="even"><td>-L</td><td>当目录为连接路径时，显示连接路径</td></tr></tbody></table><h3 id="案例-2">案例</h3><p><strong>例一：</strong>显示当前目录所在路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p><strong>例二：</strong>显示当前目录的物理路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> -P</span><br></pre></td></tr></table></figure><p><strong>例三：</strong>显示当前目录的连接路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span> -L</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/uid871732-20200826-1598406299890.png"alt="图片描述" /><figcaption aria-hidden="true">图片描述</figcaption></figure><h3 id="拓展">拓展</h3><h4 id="连接路径软连接和物理路径">连接路径（软连接）和物理路径</h4><ol type="1"><li><p>连接路径（Symbolic Link 或 Soft Link）：</p><ul><li>连接路径是一种特殊类型的文件，它包含了指向另一个文件或目录的路径信息。这个路径可以是相对路径或绝对路径。</li><li>当您打开连接路径时，实际上会访问连接路径所指向的文件或目录，而不是连接路径本身。</li><li>连接路径可以跨越不同的文件系统，可以链接到不存在的目标。</li><li>连接路径可用于创建文件和目录的快捷方式，或将文件和目录从一个位置链接到另一个位置。</li></ul><p>例如，如果您在您的家目录中创建一个连接路径 "mylink"，并将其链接到"/path/to/target" 目录，那么访问 "mylink" 实际上会打开 "/path/to/target"目录。</p></li><li><p>物理路径：</p><ul><li>物理路径是文件或目录在文件系统中的实际位置，它是从文件系统的根目录开始的完整路径。</li><li>物理路径表示文件或目录的确切位置，它不包含符号链接或任何其他间接引用。</li></ul><p>例如，如果一个文件的物理路径是"/var/www/html/index.html"，那么这是文件在文件系统中的实际位置，而不受符号链接的影响。</p></li></ol><p>连接路径就是引用。</p><h2 id="mkdir">mkdir</h2><p><ahref="https://www.cnblogs.com/peida/archive/2012/10/25/2738271.html">每天一个linux命令（4）：mkdir命令- peida - 博客园 (cnblogs.com)</a></p><p>mkdir命令用来创建指定名称的目录，要求创建目录的用户在当前目录中具有写权限，且目录名不能是当前目录已经有的。</p><p>命令格式：<code>mkdir [选项] 目录</code></p><p><strong>常用选项参数</strong>:</p><table><colgroup><col style="width: 18%" /><col style="width: 81%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-m --mode=模式</td><td>设定权限<模式></td></tr><tr class="even"><td>-p --parents</td><td>可以是一个路径名称。若路径中的某些目录尚不存在，加上此选项后，系统将自动建立好那些尚不存在的目录，即一次可以建立多个目录</td></tr><tr class="odd"><td>-v --verbose</td><td>每次创建新目录都显示信息</td></tr></tbody></table><h3 id="案例-3">案例</h3><p><strong>例一：</strong>递归创建多个目录 ，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p zhou/test</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>创建权限为 777 的目录，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -m 777 zhou</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/linux12.jpg" alt="Alt text" style="zoom:67%;" /></p><p><strong>例三：</strong>创建目录显示信息，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -vp zhou/test</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/linux13.jpg" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p><strong>例四</strong>：创建树形目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//安装插件</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tree</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -vp shiyanlou/&#123;lib/,bin/,doc/&#123;info,product&#125;&#125;</span><br><span class="line">tree shiyanlou/</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/image-20231013112425309.png"alt="image-20231013112425309" /><figcaption aria-hidden="true">image-20231013112425309</figcaption></figure><h2 id="rm">rm</h2><p>定义：常用的命令，该命令的功能为删除一个目录中的一个或多个文件或目录，它也可以将某个目录及其下的所有文件及子目录均删除。</p><p>注意：危险指令，比如在/（根目录）下执行 rm * -rf 。</p><p>命令格式： <code>rm [选项] 文件和目录</code></p><p><strong>常用参数</strong></p><table><colgroup><col style="width: 24%" /><col style="width: 75%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-f --force</td><td>忽略不存在的文件，从不给出提示</td></tr><tr class="even"><td>-i --interactive</td><td>进行交互式删除</td></tr><tr class="odd"><td>-r --recursive</td><td>指示 rm 将参数中列出的全部目录和子目录均递归地删除</td></tr><tr class="even"><td>-v --verbose</td><td>详细显示进行的步骤</td></tr></tbody></table><p>先来创建一个测试文本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">touch</span> shiyanlou.log</span><br></pre></td></tr></table></figure><h3 id="案例-4">案例</h3><p><strong>例一：</strong>删除文件，系统会先询问是否删除，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> shiyanlou.log</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>强行删除文件，系统不再提示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f shiyanlou.log</span><br></pre></td></tr></table></figure><p><strong>例三：</strong>删除后缀名为.log的所有，删除前逐一询问，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> *.<span class="built_in">log</span> 或 <span class="built_in">rm</span> -i *.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><strong>例4：</strong>删除以 -f 开头的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -- -f</span><br></pre></td></tr></table></figure><p><strong>例5：</strong>回收站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">myrm</span></span>()&#123;</span><br><span class="line">    D=/tmp/$(<span class="built_in">date</span> <span class="string">&quot;+%Y%m%d%H%M%S&quot;</span>)</span><br><span class="line">    <span class="built_in">mkdir</span> -p <span class="variable">$D</span></span><br><span class="line">    <span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span> <span class="variable">$D</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;moved to <span class="variable">$D</span> ok&quot;</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost test]# myrm()&#123; D=/tmp/$(date +%Y%m%d%H%M%S); mkdir -p $D;  mv &quot;$@&quot; $D &amp;&amp; echo &quot;moved to $D ok&quot;; &#125;</span><br><span class="line"></span><br><span class="line">[root@localhost test]# alias rm=&#x27;myrm&#x27;</span><br><span class="line"></span><br><span class="line">[root@localhost test]# touch 1.log 2.log 3.log</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ll</span><br><span class="line"></span><br><span class="line">总计 16</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root    0 10-26 15:08 1.log</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root    0 10-26 15:08 2.log</span><br><span class="line"></span><br><span class="line">-rw-r--r-- 1 root root    0 10-26 15:08 3.log</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 7 root root 4096 10-25 18:07 scf</span><br><span class="line"></span><br><span class="line">drwxrwxrwx 2 root root 4096 10-25 17:46 test3</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 2 root root 4096 10-25 17:56 test4</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 3 root root 4096 10-25 17:56 test5</span><br><span class="line"></span><br><span class="line">[root@localhost test]# rm [123].log</span><br><span class="line"></span><br><span class="line">moved to /tmp/20121026150901 ok</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ll</span><br><span class="line"></span><br><span class="line">总计 16drwxr-xr-x 7 root root 4096 10-25 18:07 scf</span><br><span class="line"></span><br><span class="line">drwxrwxrwx 2 root root 4096 10-25 17:46 test3</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 2 root root 4096 10-25 17:56 test4</span><br><span class="line"></span><br><span class="line">drwxr-xr-x 3 root root 4096 10-25 17:56 test5</span><br><span class="line"></span><br><span class="line">[root@localhost test]# ls /tmp/20121026150901/</span><br><span class="line"></span><br><span class="line">1.log  2.log  3.log</span><br></pre></td></tr></table></figure><p><strong>例6</strong>：删除整个文件夹的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf 目录名</span><br></pre></td></tr></table></figure><h2 id="mv">mv</h2><p>作用：移动文件，更改文件名</p><p>命令格式：<code>mv [选项] 源文件或目录 目标文件或目录</code></p><ul><li>源文件或目录：当参数类型是文件时，mv命令完成文件重命名，此时，源文件只能有一个（也可以是源目录名）；当第二个参数是已存在的目录名称时，源文件或目录参数可以有多个，mv命令将各参数指定的源文件均移至目标目录中。</li></ul><p><strong>常用选项参数：</strong></p><table><colgroup><col style="width: 21%" /><col style="width: 78%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-b --back</td><td>若需覆盖文件，则覆盖前先行备份</td></tr><tr class="even"><td>-f --force</td><td>如果目标文件已经存在，不会询问而直接覆盖</td></tr><tr class="odd"><td>-i --interactive</td><td>若目标文件已经存在时，就会询问是否覆盖</td></tr><tr class="even"><td>-u --update</td><td>若目标文件已经存在，且源文件比较新，才会更新</td></tr><tr class="odd"><td>-t --target</td><td>该选项适用于移动多个源文件到一个目录的情况，此时目标目录在前，源文件在后</td></tr></tbody></table><h3 id="案例-5">案例</h3><p><strong>例一：</strong>将文件<code>meng.log</code>重命名为<code>hai.log</code>，可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv meng.log hai.log</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>将文件<code>meng.log</code>移动到 test目录下（<strong>test目录必须已经存在，否则执行重命名</strong>），可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv meng.log test</span><br></pre></td></tr></table></figure><h2 id="cp">cp</h2><p>定义：cp 命令用来复制文件或者目录，是 Linux系统中最常用的命令之一。</p><p>命令格式：<code>cp [选项] 源文件 目录 / cp [选项] -t 目录 源文件</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 25%" /><col style="width: 74%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-t --target-directory</td><td>指定目标目录</td></tr><tr class="even"><td>-i --interactive</td><td>覆盖前询问（使前面的 -n 选项失效）</td></tr><tr class="odd"><td>-n --no-clobber</td><td>不要覆盖已存在的文件（使前面的 -i 选项失效）</td></tr><tr class="even"><td>-s --symbolic-link</td><td>对源文件建立符号链接，而非复制文件</td></tr><tr class="odd"><td>-f --force</td><td>强行复制文件或目录，不论目的文件或目录是否已经存在</td></tr><tr class="even"><td>-u --update</td><td>使用这项参数之后，只会在源文件的修改时间较目的文件更新时，或是对应的目的文件并不存在，才复制文件</td></tr></tbody></table><h3 id="案例-6">案例</h3><p><strong>例一：</strong>对文件<code>meng.log</code>建立一个符号链接<code>meng</code>，可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -s meng.log meng</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>将 test1 目录下的所有文件复制到 test2目录下，覆盖前询问，可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -i test1/* test2</span><br></pre></td></tr></table></figure><p><strong>例三：</strong>将 test1 目录下的最近更新的文件复制到 test2目录下，覆盖前询问，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -iu test1/* test2</span><br></pre></td></tr></table></figure><h2 id="cat">cat</h2><p>作用：</p><p>1.一次显示整个文件:cat filename</p><p>2.从键盘创建一个文件:cat &gt; filename只能创建新文件,不能编辑已有文件.</p><p>3.将几个文件合并为一个文件:cat file1 file2 &gt; file</p><p>命令格式：<code>cat [选项] [文件]</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 30%" /><col style="width: 70%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-A --show-all</td><td>等价于 -vET</td></tr><tr class="even"><td>-b --number-nonblank</td><td>对非空输出行编号</td></tr><tr class="odd"><td>-e</td><td>等价于 -vE</td></tr><tr class="even"><td>-E --show-ends</td><td>在每行结束处显示 $</td></tr><tr class="odd"><td>-n --number</td><td>对输出的所有行编号，由 1 开始对所有输出的行数编号</td></tr><tr class="even"><td>-s --squeeze-blank</td><td>有连续两行以上的空白行，就代换为一行的空白行</td></tr><tr class="odd"><td>-t</td><td>与 -vT 等价</td></tr><tr class="even"><td>-T --show-tabs</td><td>将跳格字符显示为 ^I</td></tr><tr class="odd"><td>-u</td><td>（被忽略）</td></tr><tr class="even"><td>-v --show-nonprinting</td><td>使用 ^ 和 M- 引用，除了 LFD 和 TAB 之外</td></tr></tbody></table><h3 id="案例-7">案例</h3><p><strong>例一：</strong>把<code>shiyanlou.log</code>的文件内容加上行号后输入<code>zhou.log</code>这个文件里，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> -n shiyanlou.log &gt; zhou.log</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>将<code>meng.log</code>的文件内容反向显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tac</span> meng.log</span><br></pre></td></tr></table></figure><ul><li>tac将cat反写，与cat的输出功能相反，cat是由第一行开始到最后一行连续显示在屏幕上，而 tac则是由<strong>最后一行开始到第一行反向</strong>在屏幕上显示出来。</li></ul><h2 id="nl">nl</h2><p>作用：</p><ul><li>计算文件中行号，可以将输出的文件内容自动加上行号，其默认的结果与 cat-n 有点不太一样。</li></ul><p>命令格式：<code>nl [选项] [文件]</code></p><p><strong>常用参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-b</td><td>指定行号指定的方式，主要有两种：</td></tr><tr class="even"><td>-b a</td><td>表示不论是否为空行，也同样列出行号（类似 cat -n）</td></tr><tr class="odd"><td>-b t</td><td>如果有空行，空的那一行不要列出行号（默认值）</td></tr><tr class="even"><td>-n</td><td>列出行号表示的方法，主要有三种：</td></tr><tr class="odd"><td>-n ln</td><td>行号在屏幕的最左方显示</td></tr><tr class="even"><td>-n rn</td><td>行号在自己栏位的最右方显示，且不加 0</td></tr><tr class="odd"><td>-n rz</td><td>行号在自己栏位的最右方显示，且加 0</td></tr><tr class="even"><td>-w</td><td>行号栏位的占用的位数</td></tr></tbody></table><h3 id="案例-8">案例</h3><p>例一：把<code>shiyanlou.log</code>的文件内容加上行号后显示，空行不加行号，可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> -b t shiyanlou.log</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/image-20231016184456860.png" alt="image-20231016184456860" style="zoom:50%;" /></p><p>例二：把<code>shiyanlou.log</code>的文件内容加上行号后显示，行号分别在屏幕最左方、最右方不加0 和最右方加 0 显示，可以使用如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> -n <span class="built_in">ln</span> shiyanlou.log</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/image-20231016185035434.png" alt="image-20231016185035434" style="zoom: 50%;" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> -n rn shiyanlou.log</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/image-20231016185239234.png" alt="image-20231016185239234" style="zoom:50%;" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> -n rz shiyanlou.log</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/image-20231016185326019.png" alt="image-20231016185326019" style="zoom:50%;" /></p><p><strong>例三：</strong>把<code>shiyanlou.log</code>的文件内容加上行号后显示，行号在屏幕最右方加0 显示，行号栏目占位数为 3，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> -n rz -w 3 shiyanlou.log</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/image-20231016185447270.png" alt="image-20231016185447270" style="zoom:50%;" /></p><h2 id="more">more</h2><p>功能：类似cat，将文件的内容一页一页的展示在屏幕，还能搜索字符</p><ul><li>下一页：空格</li><li>上一页：B（back）</li></ul><p>命令格式： <code>more [选项] 文件</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 13%" /><col style="width: 86%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>+ n</td><td>从笫 n 行开始显示</td></tr><tr class="even"><td>- n</td><td>定义屏幕大小为 n 行</td></tr><tr class="odd"><td>+/pattern</td><td>在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示</td></tr><tr class="even"><td>-c</td><td>从顶部清屏，然后显示</td></tr><tr class="odd"><td>-d</td><td>提示“Press space to continue，’q’ to quiet”，禁用响铃功能</td></tr><tr class="even"><td>-p</td><td>通过清除窗口而不是滚屏来对文件进行换页，与-c 选项相似</td></tr><tr class="odd"><td>-s</td><td>把连续的多个空行显示为一行</td></tr><tr class="even"><td>-u</td><td>把文件内容中的下划线去掉</td></tr></tbody></table><p><strong>常用控制操作</strong></p><table><thead><tr class="header"><th>符号</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>=</td><td>输出当前行的行号</td></tr><tr class="even"><td>q</td><td>退出 more</td></tr><tr class="odd"><td>空格键</td><td>向下滚动一屏</td></tr><tr class="even"><td>b</td><td>返回上一屏</td></tr></tbody></table><h3 id="案例-9">案例</h3><p><strong>例一：</strong>从第五行开始显示<code>shiyanlou.log</code>文件中的内容，可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +5 shiyanlou.log</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>从<code>shiyanlou.log</code>文件中查找第一个出现“g”字符串的行，并从该处前两行开始显示输出，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +/g shiyanlou.log</span><br></pre></td></tr></table></figure><p><strong>例三：</strong>设定每屏行数为 5，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more -5 shiyanlou.log</span><br></pre></td></tr></table></figure><ul><li>随后按空格翻页等等一系列操作</li></ul><p><strong>例四：</strong>使用 ll 和 more命令显示<code>/etc</code>目录信息，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /etc | more -10</span><br></pre></td></tr></table></figure><h2 id="less">*less</h2><p>定义：less 命令也是对文件或其它输出进行分页显示的工具，应该说是 linux正统查看文件内容的工具，功能极其强大。</p><p>命令格式：<code>less [选项] 文件</code></p><p><strong>常用参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-e</td><td>当文件显示结束后，自动离开</td></tr><tr class="even"><td>-f</td><td>强迫打开特殊文件，例如外围设备代号、目录和二进制文件</td></tr><tr class="odd"><td>-i</td><td>忽略搜索时的大小写</td></tr><tr class="even"><td>-m</td><td>显示类似 more 命令的百分比</td></tr><tr class="odd"><td>-N</td><td>显示每行的行号</td></tr><tr class="even"><td>-s</td><td>显示连续空行为一行</td></tr></tbody></table><p><strong>常用控制操作</strong></p><table><thead><tr class="header"><th>符号</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>/字符串</td><td>向下搜索“字符串”的功能</td></tr><tr class="even"><td>?字符串</td><td>向上搜索“字符串”的功能</td></tr><tr class="odd"><td>n</td><td>重复前一个搜索（与 / 或 ? 有关）</td></tr><tr class="even"><td>N</td><td>反向重复前一个搜索（与 / 或 ? 有关）</td></tr><tr class="odd"><td>b</td><td>向前翻一页</td></tr><tr class="even"><td>d</td><td>向后翻半页</td></tr><tr class="odd"><td>q</td><td>退出 less 命令</td></tr><tr class="even"><td>空格键</td><td>向后翻一页</td></tr><tr class="odd"><td>向上键</td><td>向上翻动一行</td></tr><tr class="even"><td>向下键</td><td>向下翻动一行</td></tr></tbody></table><h3 id="案例-10">案例</h3><p><strong>例一：</strong>显示<code>shiyanlou.log</code>文件中的内容，并显示行号，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less -N shiyanlou.log</span><br></pre></td></tr></table></figure><ul><li>退出：q</li></ul><p><strong>例二：</strong>显示<code>shiyanlou.log</code>文件中的内容，搜索字符串”h”，可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">less shiyanlou.log</span><br><span class="line"></span><br><span class="line">/h</span><br></pre></td></tr></table></figure><p><img src="Linux常用命令/image-20231017145740434.png" alt="image-20231017145740434" style="zoom:50%;" /></p><p><strong>例三：</strong>ps <strong>查看进程信息并通过 less分页显示</strong>，可以使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -f | less</span><br></pre></td></tr></table></figure><h2 id="head">head</h2><p>作用：head用来显示档案的开头至标准输出中，默认 head命令打印其相应文件的开头 10 行。</p><p>命令格式：<code>head [选项] [文件]</code></p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-q</td><td>隐藏文件名</td></tr><tr class="even"><td>-v</td><td>显示文件名</td></tr><tr class="odd"><td>-c<字节></td><td>显示字节数</td></tr><tr class="even"><td>-n<行数></td><td>显示的行数</td></tr></tbody></table><h3 id="案例-11">案例</h3><p><strong>例一：</strong>显示<code>shiyanlou.log</code>文件中的前 5行内容，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 5 shiyanlou.log</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>显示<code>shiyanlou.log</code>和<code>meng.log</code>文件中的前5 行内容，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">head</span> -n 5 shiyanlou.log  meng.log</span><br></pre></td></tr></table></figure><h2 id="tail">tail</h2><p>作用：tail命令主要用于显示指定文件末尾内容。常用查看<strong>日志</strong>文件。</p><p>命令格式： <code>tail [选项] [文件名]</code></p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-f</td><td>循环读取</td></tr><tr class="even"><td>-q</td><td>不显示处理信息</td></tr><tr class="odd"><td>-v</td><td>显示详细的处理信息</td></tr><tr class="even"><td>-c<字节></td><td>显示的字节数</td></tr><tr class="odd"><td>-n<行数></td><td>显示行数</td></tr></tbody></table><h3 id="案例-12">案例</h3><p><strong>例一：</strong>显示<code>shiyanlou.log</code>文件中的最后 5行内容，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 5 shiyanlou.log</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>将ping的输出输出到<code>shiyanlou.log</code>文件里，显示<code>shiyanlou.log</code>文件中的最后5行内容，当<code>shiyanlou.log</code>文件有新内容增加时自动更新显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tail</span> -n 5 -f shiyanlou.log</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/linux51.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p><code>ping www.shiyanlou.com &gt;&gt; shiyanlou.log &amp;</code>这条命令作用是 ping远程主机，并将信息追加到<code>shiyanlou.log</code>文件中。&amp;的作用是将这条命令放在<strong>后台执行</strong>，这样<code>shiyanlou.log</code>文件就会一直有内容增加。说明一下，linux下执行 ping 命令会一直执行，必须手动停止才行。而 windows 下执行 ping命令时，默认发送四个请求后会自动停止。</p><p>使用 tail 命令的 -f选项可以即时输出文件变化后追加的内容。<code>tail -f filename</code> 会把filename里最尾部的内容显示在屏幕上，并且不断刷新，使你看到最新的文件内容。</p><ul><li><p>杀死后台进程： jobs 命令可以查看正在后台运行的任务。kill命令可以杀死一个任务，但是需要使用任务的 pid。任务的 pid 可以通过 ps命令查看获得，然后使用<code>kill -9 任务pid</code>就可以将这个后台进程杀死。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jobs | ps</span><br><span class="line"></span><br><span class="line">kill -9 265</span><br></pre></td></tr></table></figure></li></ul><h1 id="文件查找">文件查找</h1><h2 id="which">which</h2><p>作用：在 PATH变量指定的路径中搜索可执行文件的所在位置。它一般用来确认系统中是否安装了指定的软件。</p><p>命令格式： <code>which 可执行文件</code></p><h3 id="案例-13">案例</h3><p><strong>例一：</strong>确认是否安装了 gcc，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> gcc</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>查看 cd 命令的位置路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> <span class="built_in">cd</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/uid871732-20190820-1566296522088.png"alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p>从上面的显示信息可以看到在当前使用的系统中 <strong>cd 是一个 shell内建命令</strong>。</p><p>但是在某些环境中，我们可以看到 cd 并不是一个内建函数而是一个 shell函数。</p><figure><img src="Linux常用命令/which2.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p>再来在我本地 linux 系统上执行 which cd 命令，显示的结果如下：</p><figure><img src="Linux常用命令/which3.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p>显示在 PATH 变量指定的路径下没有 cd 命令。为什么显示没有呢？这是因为cd 是 shell 内建命令，而 which 默认是找 PATH内所指定的目录，内建命令不在其指定的目录中，所以当然找不到。</p><p>那么就有个问题，为什么有的环境中 cd 是一个 shell函数，而有的又是内建命令呢？这跟所使用的 bash 有关。</p><figure><img src="Linux常用命令/which4.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><figure><img src="Linux常用命令/which5.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><ul><li><code>echo $SHELL</code> 命令可以查看当前使用的 shell。</li></ul><h2 id="whereis">whereis</h2><p>作用：用于定位可执行文件、源代码文件和帮助文件在文件系统中的位置。有<strong>搜索源代码</strong>、<strong>指定备用搜索路径</strong>和<strong>搜索不寻常项</strong>的功能。</p><ul><li>查找路径：在<code>/var/lib/mlocate/mlocate.db</code>查找，目标文件是一个数据库，查找速度较快，但是这个数据库一天更新一次，结果有时不准确。</li></ul><p>命令格式：<code>whereis [选项] 文件</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-b</td><td>定位可执行文件（查找的是路径）</td></tr><tr class="even"><td>-m</td><td>定位帮助文件</td></tr><tr class="odd"><td>-s</td><td>定位源代码文件</td></tr><tr class="even"><td>-u</td><td>搜索默认路径下除可执行文件、源代码文件和帮助文件以外的其它文件</td></tr><tr class="odd"><td>-B</td><td>指定搜索可执行文件的路径</td></tr><tr class="even"><td>-M</td><td>指定搜索帮助文件的路径</td></tr><tr class="odd"><td>-S</td><td>指定搜索源代码文件的路径</td></tr></tbody></table><h3 id="案例-14">案例</h3><p><strong>常用范例</strong></p><p><strong>例一：</strong>搜索 gcc可执行文件的路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -b gcc</span><br></pre></td></tr></table></figure><p><strong>例二：</strong>搜索 gcc帮助文件的路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -m gcc</span><br></pre></td></tr></table></figure><p><strong>例三：</strong>搜索 gcc 源代码的路径，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis -s gcc</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/whereis1.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><h2 id="locate">locate</h2><p>作用：类似whereis，但是信息更全面</p><ul><li>特性：使用了十分复杂的匹配语法，可以使用特殊字元（如 ’*’ 和 ’?’）来指定需要查找的样本。</li><li>注意：需要安装这个命令包：<code>sudo apt-get install locate</code></li></ul><p>命令格式：<code>locate [选项] [搜索字符串]</code></p><h3 id="案例-15">案例</h3><p><strong>例一：</strong>搜索 etc 目录下所有以 sh开头的文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate /etc/sh</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/locate1.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><p><strong>例二：</strong>搜索 etc 目录下文件名包含 lou的文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate /etc/*lou*</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/locate2.png" alt="Alt text" /><figcaption aria-hidden="true">Alt text</figcaption></figure><h2 id="find">find</h2><p>作用：沿着文件层次结构向下遍历，匹配符合条件的文件，并执行相应的操作。</p><p>命令格式：<code>find [选项] [搜索路径] [表达式]</code></p><ul><li>默认路径：当前路径</li><li>默认表达式：-print</li></ul><p><strong>常用参数</strong></p><table><colgroup><col style="width: 16%" /><col style="width: 83%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-print</td><td>find 命令将匹配的文件输出到标准输出</td></tr><tr class="even"><td>-exec</td><td>find 命令对匹配的文件执行该参数所给出的 shell 命令</td></tr><tr class="odd"><td>-name</td><td>按照文件名查找文件</td></tr><tr class="even"><td>-type</td><td>查找某一类型的文件</td></tr><tr class="odd"><td>-prune</td><td>使用这一选项可以使 find 命令不在当前指定的目录中查找，如果同时使用-depth 选项，那么 -prune 将被 find 命令忽略</td></tr><tr class="even"><td>-user</td><td>按照文件属主来查找文件</td></tr><tr class="odd"><td>-group</td><td>按照文件所属的组来查找文件</td></tr><tr class="even"><td>-mtime -n +n</td><td>按照文件的更改时间来查找文件，-n 表示文件更改时间距现在小于 n 天，+n表示文件更改时间距现在大于 n 天，find 命令还有 -atime 和 -ctime选项</td></tr></tbody></table><p>其它选项：</p><figure><img src="Linux常用命令/userid3372labid348time1419485012419.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="案例-16">案例</h3><p><strong>例一：</strong>打印当前目录下的文件目录列表，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485049983.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>打印当前目录下所有以.txt结尾的文件名，可以使用如下命令（截图只显示部分）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><p>-iname 选项跟-name 选项作用一样，不同的地方在于-iname会忽略字母大小写。</p><figure><img src="Linux常用命令/userid3372labid348time1419485125680.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>打印当前目录下所有以.txt 或.pdf结尾的文件名，可以使用如下命令（截图只显示部分）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . \( -name <span class="string">&quot;*.pdf&quot;</span> -or -name <span class="string">&quot;*.txt&quot;</span> \)</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485200246.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例四：</strong>打印当前目录下所有<strong>不以</strong>.txt结尾的文件名，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . ! -name <span class="string">&quot;*.txt&quot;</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485266187.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="具体查找匹配文件">具体查找匹配文件</h3><p>根据文件类型来查找文件，使用 -type 选项，常见 find文件类型见下表：</p><figure><img src="Linux常用命令/userid3372labid348time1419485465186.jpeg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>根据文件权限查找文件，使用 -perm 选项。所有者使用 -user 选项。</p><p>另外，find 命令可以通过逻辑操作符来创建更复杂的逻辑关系，例如 find命令（一）中的例三就使用了操作符 -or 。find 命令的逻辑操作符见下表：</p><figure><img src="Linux常用命令/userid3372labid348time1419485513603.jpeg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h4 id="案例-17">案例</h4><p><strong>例一：</strong>打印当前目录下所有以 .txt结尾的符号链接，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> l -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485577965.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>打印当前目录下所有权限为 777 的 php 文件（web服务器上的 php 文件一般需要执行权限），可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.php&quot;</span> -perm 777</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485634144.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>打印当前目录下 root用户拥有的所有文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -user root</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485682625.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例四：</strong>打印当前目录下权限不是 777 和 664的所有文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f \( ! -perm 777 -and ! -perm 644 \)</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485725524.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="指定文件动作">指定文件动作</h3><p><strong>常用范例</strong></p><p><strong>例一：</strong>找到当前目录下所有 php文件，并显示其详细信息，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.php&quot;</span> -<span class="built_in">exec</span> <span class="built_in">ls</span> -l &#123;&#125; \;</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485834752.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li>-exec 是 find命令对找到的文件执行的动作，这个动作就是对找到的文件执行命令，上面的命令就是<code>ls -l &#123;&#125;</code>。</li><li><code>&#123;&#125;</code>其实它就是一个占位符，在 find命令的执行过程中会不断地替换成当前找到的文件，相当于”<code>ls -l 找到的文件</code>”。</li><li><code>\;</code>是 -exec 命令结束的标记，因为规定 -exec后面的命令必须以<code>;</code>结束，但<code>;</code>在 shell中有特殊含义，必须要转义，所以写成<code>\;</code>。</li></ul><p><strong>例二：</strong>在实验楼环境中有很多自己编写的 c语言代码文件，现在想要把所有 c语言代码文件下载下来，如果一个一个的下载很麻烦，我们可以先查找到所有的 c语言代码文件，然后将这些文件内容写入到一个文件中，下载这一个文件就可以了，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.c&quot;</span> -<span class="built_in">exec</span> <span class="built_in">cat</span> &#123;&#125; \; &gt; all.c</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419485908149.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>默认下，-exec后面只能使用单个命令，如果想要多个命令，可以将多个命令写入脚本文件中，然后在-exec 中使用这个脚本，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -name <span class="string">&quot;*.c&quot;</span> -<span class="built_in">exec</span> ./command.sh &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>脚本内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="variable">$1</span>       <span class="comment">#$1表示第一个参数</span></span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>注意，直接运行上面的代码可能会提示你<code>find './command.sh' : 权限不够</code>，这是因为新建的<code>command.sh</code>没有执行权限，只需要使用<code>chmod +x command.sh</code>给予它可执行权限再执行就可以了。</p><figure><img src="Linux常用命令/userid3372labid348time1419486194690.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="xargs">xargs</h2><blockquote><p>我们可以用管道将一个命令的 stdout（标准输出）重定向到另一个命令的stdin（标准输入）。但有些命令只能以命令行参数的形式接收数据，而无法通过stdin 接收数据流。在这种情况下，无法通过管道将数据重定向给这些命令</p></blockquote><p>作用：可以从标准输入接收输入，并把输入转换为一个特定的参数列表。</p><p>命令格式： command | xargs [选项] [command]</p><ul><li>xargs命令应该紧跟在管道操作符之后，因为它<strong>以标准输入作为主要的源数据流</strong>。</li></ul><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-n</td><td>指定每行最大的参数数量</td></tr><tr class="even"><td>-d</td><td>指定分隔符</td></tr></tbody></table><h3 id="案例-18">案例</h3><p><strong>常用范例</strong></p><p><strong>例一：</strong>将多行输入转换为单行输出，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> a.txt | xargs</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419486436814.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>将单行输入转换为多行输出，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1 2 3 4 5 6 7&quot;</span> | xargs -n 3</span><br></pre></td></tr></table></figure><ul><li>-n 用于指定每行最大的参数数量</li></ul><figure><img src="Linux常用命令/userid3372labid348time1419486477811.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>将单行输入转换为多行输出，指定分隔符为i，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> b.txt | xargs -d i -n 3</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419486635856.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例四：</strong>查找当前目录下所有 c代码文件，统计总行数，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.c&quot;</span> | xargs <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid348time1419486674638.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="文件打包上传下载解压">文件打包、上传、下载、解压</h1><h2 id="tar">tar</h2><p>作用: 对文件进行打包、解包、压缩、解压</p><ul><li>包文件后缀为.tar表示只是完成了打包，并没有压缩</li><li>包文件后缀为.tar.gz表示打包的同时还进行了压缩</li></ul><p>语法: tar [-zcxvf] fileName [files]</p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-z</td><td>z代表的是gzip，通过gzip命令处理文件，gzip可以对文件压缩或者解压</td></tr><tr class="even"><td>-c</td><td>c代表的是create，即创建新的包文件</td></tr><tr class="odd"><td>-x</td><td>x代表的是extract，实现从包文件中还原文件</td></tr><tr class="even"><td>-v</td><td>v代表的是verbose，显示命令的执行过程</td></tr><tr class="odd"><td>-f</td><td>f代表的是file，用于指定包文件的名称</td></tr></tbody></table><h1 id="文件权限设置">文件权限设置</h1><h1 id="磁盘存储">磁盘存储</h1><h2 id="df">df</h2><p>df 命令是 disk free 的缩写。</p><p>功能：用来检查 linux服务器的文件系统的磁盘空间占用情况。获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>命令格式：<code>df [选项] 文件</code></p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-a</td><td>全部文件系统列表</td></tr><tr class="even"><td>-h</td><td>方便阅读方式显示</td></tr><tr class="odd"><td>-i</td><td>显示 inode 信息</td></tr><tr class="even"><td>-T</td><td>文件系统类型</td></tr><tr class="odd"><td>-t<文件系统类型></td><td>只显示选定文件系统的磁盘信息</td></tr><tr class="even"><td>-x<文件系统类型></td><td>不显示选定文件系统的磁盘信息</td></tr></tbody></table><h3 id="案例-19">案例</h3><p><strong>例一：</strong>显示磁盘使用情况，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740116614.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>以 inode模式来显示磁盘使用情况，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -i</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740127431.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>列出文件系统的类型，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -T</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740135464.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例四：</strong>显示指定类型磁盘，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -t ext4</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740147180.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="du">du</h2><p>功能：对文件和目录磁盘使用的空间的查看。</p><p>命令格式：<code>df [选项] 文件</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-a</td><td>显示目录中所有文件的大小。</td></tr><tr class="even"><td>-b</td><td>显示目录或文件大小时，以 byte 为单位。</td></tr><tr class="odd"><td>-c</td><td>除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</td></tr><tr class="even"><td>-k</td><td>以 KB(1024bytes)为单位输出。</td></tr><tr class="odd"><td>-m</td><td>以 MB 为单位输出。</td></tr><tr class="even"><td>-s</td><td>仅显示总计，只列出最后加总的值。</td></tr><tr class="odd"><td>-h</td><td>以 K，M，G 为单位，提高信息的可读性。</td></tr></tbody></table><h3 id="案例-20">案例</h3><p><strong>例一：</strong>显示指定文件所占空间，以方便阅读的格式显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h file1.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740343106.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>显示指定目录所占空间，以方便阅读的格式显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h Desktop</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740370569.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>显示几个文件或目录各自占用磁盘空间的大小，并且统计总和，使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -ch file1.txt file2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740386138.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例四：</strong>按照空间大小逆序排序显示，使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -h | <span class="built_in">sort</span> -nr | <span class="built_in">head</span> -10</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740400752.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="性能监测优化">性能监测、优化</h1><h2 id="time">time</h2><p>作用：测量一个命令的运行时间，包括实际使用时间（realtime）、用户态使用时间（the process spent in usermode）、内核态使用时间（the process spent in kernel mode）。</p><ul><li>用户态使用时间：命令执行完成花费的用户 CPU时间，即命令在用户态中执行时间总和。</li><li>内核态使用时间：命令执行完成花费的系统 CPU时间，即命令在核心态中执行时间总和。</li></ul><p>命令格式：<code>time 命令</code></p><h3 id="案例-21">案例</h3><p><strong>例一：</strong>测量 date命令运行的时间，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time <span class="built_in">date</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740854918.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>从上面的结果可以到：实际运行时间为 0.005s，用户 cpu 时间为0.001s，系统 cpu 时间为 0.001s。</p><p>其中，用户 CPU 时间和系统 CPU 时间之和为 CPU 时间，即命令占用 CPU执行的时间总和。实际时间要大于 CPU 时间，因为 Linux是多任务操作系统，往往在执行一条命令时，系统还要处理其它任务。</p><p><strong>例二：</strong>将 time命令的执行结果保存到文件中，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; time <span class="built_in">date</span>; &#125; 2&gt;1.txt</span><br><span class="line">(time <span class="built_in">date</span>) 2&gt;2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid393time1421740877117.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>time 是 shell 的关键字，shell 做了特殊处理，它会把 time命令后面的命令行作为一个整体来进行处理，在重定向时，实际上是针对后面的命令来的，time命令本身的输出并不会被重定向的。比如，执行<code>time date 2&gt;3.txt</code>，<code>3.txt</code>的内容为空。另外，time 命令的输出信息是打印在标准错误输出上的。</p><h1 id="网络">网络</h1><h1 id="文件版本更新">文件版本更新</h1><h2 id="diff">diff</h2><p>作用：用来监测文件之间的差异。它支持许多输出格式，并且一次能处理许多文本文件</p><p>应用：</p><ul><li>代码版本比较：软件开发员经常使用 diff程序来检查不同程序源码版本之间的更改，diff能够递归地检查源码目录，通常称之为源码树。并且 diff 是 svn、cvs、git等版本控制工具不可或缺的一部分。</li></ul><p>命令格式： <code>diff [选项] 文件</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-c</td><td>上下文模式，显示全部内文，并标出不同之处</td></tr><tr class="even"><td>-u</td><td>统一模式，以合并的方式来显示文件内容的不同</td></tr><tr class="odd"><td>-a</td><td>只会逐行比较文本文件</td></tr><tr class="even"><td>-N</td><td>在比较目录时，若文件 A 仅出现在某个目录中，预设会显示：Only in目录。若使用 -N 参数，则 diff 会将文件 A 与一个空白的文件比较</td></tr><tr class="odd"><td>-r</td><td>递归比较目录下的文件</td></tr></tbody></table><h3 id="案例-22">案例</h3><p>例一：显示<code>file1.txt</code>和<code>file2.txt</code>两个文件的差异，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff file1.txt file2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420781912223.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>输出结果分析：</p><ul><li><p>“1d0”表示<code>file1.txt</code>文件比<code>file2.txt</code>文件多了第一行，</p></li><li><p>“4c3,4”表示<code>file1.txt</code>文件的第四行和<code>file2.txt</code>文件的第三、四行不同。</p></li></ul><p>diff 的 normal 显示格式有三种提示:</p><ul><li>a - add</li><li>c - change</li><li>d - delete</li></ul><p><strong>例二：</strong>从上面例一的显示结果可以知道，<code>file1.txt</code>和<code>file2.txt</code>两个文件的差异不易直观看出，这时可以使用上下文模式显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff  -c file1.txt  file2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420781985260.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>这个输出结果以两个文件名和它们的时间戳开头。第一个文件用星号做标记，第二个文件用短横线做标记。纵观列表的其它部分，这些标记将象征它们各自代表的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*** 1,4 *** 表示第一个文件中第一行到第四行的文本行。` `--- 1,4 --- 表示第二个文件中第一行到第四行的文本行。</span><br></pre></td></tr></table></figure><p>三种特殊字符：</p><p><code>+</code>添加行，这一行将会出现在第二个文件内，而不是第一个文件内 <code>-</code>删除行，这一行将会出现在第一个文件中，而不是第二个文件内 <code>!</code>更改行，将会显示某个文本行的两个版本，每个版本会出现在更改组的各自部分</p><p>这些特殊字符很容易混淆，实际上记住一点就行：<strong>所有操作目的是将第一个文件变成第二个文件</strong>。</p><p><strong>例三：</strong>查看<code>file1.txt</code>和<code>file2.txt</code>两个文件的差异，使用统一模式显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -u file1.txt file2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420782103081.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>上下文模式和统一模式之间最显著的差异就是重复上下文的消除，这就使得统一模式的输出结果要比上下文模式的输出结果简短。</p><p>**@@ -1,4 +1,4 @<span class="citation"data-cites="*">@*</span>*表示在在更改组中描述的第一个文件中的文本行和第二个文件中的文本行。</p><p>特殊字符：</p><ul><li>＋ 添加这一行到第一个文件中</li><li>－ 在第一个文件中删除这一行</li></ul><h2 id="patch">patch</h2><p>Linux内核是由一个大型的，组织松散的贡献者团队开发而成，这些贡献者会提交固定的少量更改到源码包中。这个Linux内核由几百万行代码组成，虽然每个贡献者每次所做的修改相当少。对于一个贡献者来说，每做一个修改就给每个开发者发送整个的内核源码树，这是没有任何意义的。这时我们可以提交一个diff 文件。一个 diff文件包含先前的内核版本与带有贡献者修改的新版本之间的差异。然后一个接受者使用patch 程序，把这些更改应用到他自己的源码树中。</p><p>作用：patch 命令被用来把更改应用到文本文件中。它接受从 diff程序的输出，并且通常被用来把较老的文件版本转变为较新的文件版本。</p><p>命令格式：patch [选项] 补丁文件</p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-p num</td><td>忽略几层文件夹</td></tr><tr class="even"><td>-E</td><td>如果发现了空文件，那么就删除它</td></tr><tr class="odd"><td>-R</td><td>取消打过的补丁</td></tr></tbody></table><p>diff与patch组合：</p><ol type="1"><li>与整个源码树的大小相比较而言，一个 diff 文件非常小。</li><li>一个 diff文件简洁地显示了所做的修改，从而允许程序补丁的审阅者能快速地评估它。</li></ol><p>diff/patch能工作于任何文本文件，不仅仅是源码文件。它同样适用于配置文件或任意其它文本。</p><p>准备一个 diff 文件供 patch 命令使用，GNU 文档建议这样使用 diff命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -Naur old_file new_file &gt; diff_file</span><br></pre></td></tr></table></figure><p>old file 和 new file 部分不是单个文件就是包含文件的目录。这个 r选项支持递归目录树。</p><h3 id="案例-23">案例</h3><p><strong>例一：</strong>生成<code>file1.txt</code>和<code>file2.txt</code>的diff 文件，然后应用 patch命令更新<code>file1.txt</code>文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">diff  -Naur file1.txt  file2.txt &gt; patchdiff.txt</span><br><span class="line">patch &lt; patchdiff.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420782242319.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>取消上面例一打过的补丁，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">patch -R &lt; patchdiff.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420782287649.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="其它">其它</h1><h2 id="wc">wc</h2><p>作用：是一个统计的工具，主要用来显示文件所包含的行、字和字节数</p><p>命令格式：wc [选项] [文件]</p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-c</td><td>统计字节数</td></tr><tr class="even"><td>-l</td><td>统计行数</td></tr><tr class="odd"><td>-m</td><td>统计字符数，这个标志不能与 -c 标志一起使用</td></tr><tr class="even"><td>-w</td><td>统计字数，一个字被定义为由空白、跳格或换行字符分隔的字符串</td></tr><tr class="odd"><td>-L</td><td>打印最长行的长度</td></tr></tbody></table><h3 id="案例-24">案例</h3><p><strong>例一：</strong>统计文件的字节数、行数和字符数，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wc</span> -c c.txt</span><br><span class="line"><span class="built_in">wc</span> -l c.txt</span><br><span class="line"><span class="built_in">wc</span> -m c.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid353time1419920359258.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>注意，每行结尾的换行符也算一个字符，空格也算一个字符。另外，由于系统采用UTF-8 编码，所以一个汉字为 3 字节，9 个汉字加上一个换行，一共 28个字节。</p><p><strong>例二：</strong>统计文件的字节数、行数和字符数，只打印数字，不打印文件名，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> c.txt | <span class="built_in">wc</span> -c</span><br><span class="line"><span class="built_in">cat</span> c.txt | <span class="built_in">wc</span> -l</span><br><span class="line"><span class="built_in">cat</span> c.txt | <span class="built_in">wc</span> -m</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid353time1419920413153.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>统计<code>/bin</code>目录下的命令个数，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /bin | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure><h2 id="grep">grep</h2><p>作用：用来找到文件中的匹配文本，并且能够接受正则表达式和通配符，同时可以用多个grep 命令选项来生成各种格式的输出。</p><p>工作方式：在一个或多个文件中搜索字符串模板。如果模板包括空格，则必须被引用，模板后的所有字符串被看作文件名。搜索的结果被送到标准输出，不影响原文件内容。</p><p>grep 可用于 shell 脚本，因为 grep通过返回一个状态值来说明搜索的状态，如果模板搜索成功，则返回0，如果搜索不成功，则返回 1，如果搜索的文件不存在，则返回2。我们利用这些返回值就可进行一些自动化的文本处理工作。</p><p>命令格式：<code>grep [选项] pattern [file]</code></p><p><strong>常用参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-c</td><td>计算找到‘搜寻字符串’（即 pattern）的次数</td></tr><tr class="even"><td>-i</td><td>忽略大小写的不同，所以大小写视为相同</td></tr><tr class="odd"><td>-n</td><td>输出行号</td></tr><tr class="even"><td>-v</td><td>反向选择，打印不匹配的行</td></tr><tr class="odd"><td>-r</td><td>递归搜索</td></tr><tr class="even"><td>--color=auto</td><td>将找到的关键词部分加上颜色显示</td></tr></tbody></table><h3 id="案例-25">案例</h3><p><strong>例一：</strong>将<code>/etc/passwd</code>文件中出现 root的行取出来，关键词部分加上颜色显示，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;root&quot;</span> /etc/passwd --color=auto</span><br><span class="line">或</span><br><span class="line"><span class="built_in">cat</span> /etc/passwd | grep <span class="string">&quot;root&quot;</span> --color=auto</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid353time1419920596878.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>将<code>/etc/passwd</code>文件中没有出现 root和 nologin 的行取出来，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">&quot;root&quot;</span> /etc/passwd | grep -v <span class="string">&quot;nologin&quot;</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid353time1419920644630.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>在当前目录下递归搜索文件中包含 main()的文件，经常用于查找某些函数位于哪些源代码文件中，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r <span class="string">&quot;main()&quot;</span>.</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid353time1419920683927.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h4 id="配合正则表达式">配合正则表达式</h4><p>正则表达式是一种符号表示法，被用来识别文本模式。在某种程度上，它们与匹配文件和路径名的shell通配符比较相似，但其规模更大。许多命令行工具和大多数的编程语言都支持正则表达式，以此来帮助解决文本操作问题。</p><p>正则表达式元字符由以下字符组成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^` `$` `.` `[` `]` `&#123;` `&#125;` `-` `?` `*` `+` `(` `)` `|` `\</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid353time1419920809160.jpeg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>常用范例</strong></p><p><strong>例一：</strong>利用 Linux系统自带的字典查找一个五个字母的单词，第三个字母为 j,最后一个字母为r，<code>/usr/share/dict</code>目录下存放字典文件（若没有可手动建立），可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;^..j.r$&#x27;</span> words</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/uid600404-20191230-1577697206638.png"alt="图片描述" /><figcaption aria-hidden="true">图片描述</figcaption></figure><p><strong>例二：</strong>验证固定电话，打印符合条件的电话，固定电话格式基本都是带有0 的区号+连接符“-”＋电话号码，另外还有可能有分机号，区号有 3 位、4位，电话号码有 7 位和 8 位的，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">&quot;^0[0-9]&#123;2,3&#125;-[0-9]&#123;7,8&#125;(-[0-9]&#123;3,4&#125;)?$&quot;</span> telphone.txt</span><br></pre></td></tr></table></figure><p>区号：前面一个 0，后面跟 2-3 位数字 0[0-9]{2,3}</p><p>电话号码：7-8 位数字 [0-9]{7,8}</p><p>分机号：一般都是 3-4 位数字 [0-9]{3,4}</p><figure><img src="Linux常用命令/userid3372labid353time1419920922420.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>注意执行下面的命令时没有任何匹配输出，这是因为没有加 -E选项，那例一没加为什么可以呢，这是因为 grep 把<code>.</code>当成 shell通配符，不是正则表达式的元字符。</p><figure><img src="Linux常用命令/userid3372labid353time1419920941988.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="cut">cut</h2><p>作用：将文本按列进行切分的小工具，它可以指定分隔每列的定界符。</p><ul><li>如果一行数据包含多个字段（多列），现在想要提取其中的一列或多列，这时cut 命令就可以大显身手了。</li></ul><p>命令格式： <code>cut [选项] [文件名]</code></p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-b</td><td>以字节为单位进行分割</td></tr><tr class="even"><td>-c</td><td>以字符为单位进行分割</td></tr><tr class="odd"><td>-d</td><td>自定义分隔符，默认为制表符</td></tr><tr class="even"><td>-f</td><td>自定义字段</td></tr><tr class="odd"><td>--complement</td><td>抽取整个文本行，除了那些由 -c 或 -f 选项指定的文本</td></tr></tbody></table><h3 id="案例-26">案例</h3><p><strong>例一：</strong>取出<code>student.txt</code>文件中的第一列和第三列，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -f 1,3 -d <span class="string">&#x27; &#x27;</span> student.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420779726136.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>取出<code>student.txt</code>文件中的第一列，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -f 1 -d <span class="string">&#x27; &#x27;</span> student.txt</span><br></pre></td></tr></table></figure><p><strong>例三：</strong>取出<code>student.txt</code>文件中的前三列，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -f 1-3 -d <span class="string">&#x27; &#x27;</span> student.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420779770034.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例四：</strong>取出<code>student.txt</code>文件中除第一列的其他列，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cut</span> -f 1 -d <span class="string">&#x27; &#x27;</span> student.txt --complement</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420779805413.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例五：</strong>给任意一字符串str，取出其最后一个字符，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num=$(<span class="built_in">echo</span> -n <span class="variable">$str</span> | <span class="built_in">wc</span> -c)</span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$str</span> | <span class="built_in">cut</span> -b <span class="variable">$num</span></span><br><span class="line"><span class="comment">#或者可以使用下面这段代码</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="variable">$str</span> | <span class="built_in">cut</span> -b `<span class="built_in">echo</span> -n <span class="variable">$str</span> | <span class="built_in">wc</span> -c`</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420779859931.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="paste">paste</h2><p>功能：它会添加一个或多个文本列到文件中，而不是从文件中抽取文本列。它通过读取多个文件，然后把每个文件中的字段整合成单个文本流，输入到标准输出。</p><p>命令格式：paste [选项] [文件名]</p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-s</td><td>将每个文件合并成行而不是按行粘贴</td></tr><tr class="even"><td>-d</td><td>自定义分隔符，默认为制表符</td></tr></tbody></table><h3 id="案例-27">案例</h3><p><strong>例一：</strong>将<code>student.txt</code>和<code>telphone.txt</code>文件中的内容按列拼接，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">paste</span> student.txt telphone.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420780031604.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>将<code>student.txt</code>和<code>telphone.txt</code>文件中的内容按列拼接，指定分隔符为<code>:</code>，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">paste</span> student.txt telphone.txt -d <span class="string">&#x27;:&#x27;</span></span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420780078087.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例三：</strong>将<code>student.txt</code>和<code>telphone.txt</code>文件中的内容各自拼接成一行，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">paste</span> -s student.txt telphone.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid369time1420780124133.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="tr">tr</h2><p>作用：常被用来更改字符，我们可以把它看作是一种基于字符的查找和替换操作。换字是一种把字符从一个字母转换为另一个字母的过程，tr可以<strong>从标准输入中替换、缩减和删除字符，并将结果写到标准输出</strong>。</p><p>tr 只能通过 stdin（标准输入），而无法通过命令行参数来接受输入。</p><p>命令格式： <code>tr [选项] set1 set2</code></p><ul><li>将来自 stdin 的输入字符从 SET1 映射到 SET2，并将其输出写入stdout（标准输出）。</li><li>SET1 和 SET2 是字符类或字符集。</li><li>如果两个字符集的长度不相等，那么 SET2会不断重复其最后一个字符，直到长度与 SET1 相同。如果 SET2 的长度大于SET1，那么在 SET2 中超出 SET1 的那部分字符则全部被忽略。</li></ul><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-d</td><td>删除匹配 SET1 的内容，并不作替换</td></tr></tbody></table><h3 id="案例-28"><strong>案例</strong></h3><p><strong>例一：</strong>将输入的字符大写转换为小写，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;THIS IS SHIYANLOU!&#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27;A-Z&#x27;</span> <span class="string">&#x27;a-z&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>例二：</strong>将输入的字符中的数字删除，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;THIS 123 IS S1HIY5ANLOU!&#x27;</span> | <span class="built_in">tr</span> -d <span class="string">&#x27;0-9&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>例三：</strong>tr 命令的一个有趣的用法是执行 ROT13文本编码。ROT13 是一款微不足道的基于一种简易的替换暗码的加密类型。把ROT13称为“加密”是不严格的，“文本模糊处理”更准确些。有时候它被用来隐藏文本中潜在的攻击内容。这个方法就是简单地把每个字符在字母表中向前移动13 位。因为移动的位数是所有 26个字母的一半，所以对文本再次执行这个算法，就恢复到了它最初的形式。可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加密</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;shiyanlou&#x27;</span> | <span class="built_in">tr</span> <span class="string">&#x27;a-zA-Z&#x27;</span> <span class="string">&#x27;n-za-mN-ZA-M&#x27;</span></span><br></pre></td></tr></table></figure><p>得到结果 fuvlnaybh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#解密</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;fuvlnaybh&#x27;</span> | <span class="built_in">tr</span>  <span class="string">&#x27;a-zA-Z&#x27;</span>  <span class="string">&#x27;n-za-mN-ZA-M&#x27;</span></span><br></pre></td></tr></table></figure><p>得到结果 shiyanlou</p><figure><img src="Linux常用命令/userid3372labid369time1420780277727.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="sort">sort</h2><p>作用：排序文件、文本内容、字符串等</p><p>命令格式： <code>sort [选项] [文件名]</code></p><p><strong>常用选项参数</strong></p><table><colgroup><col style="width: 6%" /><col style="width: 93%" /></colgroup><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-n</td><td>基于字符串的长度来排序，使用此选项允许根据数字值排序，而不是字母值</td></tr><tr class="even"><td>-k</td><td>指定排序关键字</td></tr><tr class="odd"><td>-b</td><td>默认情况下，对整行进行排序，从每行的第一个字符开始。这个选项导致sort 程序忽略每行开头的空格，从第一个非空白字符开始排序</td></tr><tr class="even"><td>-m</td><td>只合并多个输入文件</td></tr><tr class="odd"><td>-r</td><td>按相反顺序排序，结果按照降序排列，而不是升序</td></tr><tr class="even"><td>-t</td><td>自定义分隔符，默认为制表符</td></tr></tbody></table><h3 id="案例-29">案例</h3><p><strong>例一：</strong>列出<code>/usr/share/</code>目录下使用空间最多的前10 个目录文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">du</span> -s /usr/share/* | <span class="built_in">sort</span> -nr | <span class="built_in">head</span> -10</span><br></pre></td></tr></table></figure><p><code>du -s /usr/share/*</code>命令显示<code>/usr/share/</code>目录下所有文件和目录的磁盘使用空间，目录包含目录下的子目录和文件</p><figure><img src="Linux常用命令/userid3372labid370time1420780699046.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>ls命令能显示目录下文件的详细信息，包含空间使用大小，但与 du命令不同的是，ls 命令不计算目录下的子目录和文件的大小。ls显示格式如下:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxrwxrwx   1  root   root  542  11 月   29  test.php</span><br></pre></td></tr></table></figure><p>现在想要对 ls命令输出信息中的空间使用大小字段进行排序，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l /usr/bin/ | <span class="built_in">sort</span> -nr -k 5 | <span class="built_in">head</span> -10</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid370time1420780744468.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li>-k 5 ： 表示按照第5列排序</li></ul><p><strong>例三：</strong>首先来看下下面的例子：</p><figure><img src="Linux常用命令/userid3372labid370time1420780803123.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>由于 11 由 1 开始，比 5 小，所以排在 5的前面，这时排序可以通过自定义排序字段来排序。使用下面的命令就可以解决：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>  -k 1,1  -k 2n data.txt</span><br></pre></td></tr></table></figure><ul><li><p>第一个 -k 选项指明只对第一个字段排序，1,1意味着“始于并且结束于第一个字段”。</p></li><li><p>第二个 -k 选项 2n 表示对第二个字段按数值排序。 还有一种格式，如-k 3.4n ，表示始于第三个字段的第四个字符，按数值排序。</p></li></ul><figure><img src="Linux常用命令/userid3372labid370time1420780839828.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>-k 选项的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ FStart [ .CStart ] ] [ Modifier ] [ , [ FEnd [ .CEnd ] ][ Modifier ] ]</span><br></pre></td></tr></table></figure><p>这个语法格式可以被其中的逗号（“，”）分为两大部分，Start 部分和 End部分。</p><p>Start 部分由三部分组成：</p><ul><li>其中的 Modifier 部分就是类似 n 和 r 的选项部分。</li><li>FStart.CStart，其中 FStart 就是表示使用的域</li><li>CStart 则表示在 FStart 域中从第几个字符开始算“排序首字符”。CStart是可以省略的，省略的话就表示从本域的开头部分开始。例二中的 -k 5就是省略了 CStart 的例子。</li></ul><p>在 End 部分中，你可以设定FEnd.CEnd，如果你省略.CEnd，则表示结尾到“域尾”，即本域的最后一个字符。或者，如果你将CEnd 设定为 0(零)，也是表示结尾到“域尾”。</p><p>“如果不设定 End 部分，那么就认为 End 被设定为行尾”。</p><h2 id="join">join</h2><p>作用：join 命令类似于 paste，它会往文件中添加列。一个 join操作通常与关系型数据库有关联，在关系型数据库中来自多个享有共同关键域的表格的数据结合起来，得到一个期望的结果。这个join命令执行相同的操作，它把来自于多个基于共享关键域的文件的数据结合起来。通俗地说，就是<strong>将两个文件中指定栏位相同的行连接起来</strong>，即按照两个文件中共同拥有的某一列，将对应的行拼接成一行。</p><p>命令格式：<code>join [选项] 文件 1 文件 2</code></p><p><strong>常用参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-j FIELD</td><td>等同于 -1 FIELD -2 FIELD，-j 指定一个域作为匹配字段</td></tr><tr class="even"><td>-1 FIELD</td><td>以 file1 中 FIELD 字段进行匹配</td></tr><tr class="odd"><td>-2 FIELD</td><td>以 file2 中 FIELD 字段进行匹配</td></tr><tr class="even"><td>-t</td><td>自定义分隔符，默认为制表符</td></tr></tbody></table><h3 id="案例-30">案例</h3><p>例一：将两个文件中的第一个字段作为匹配字段，连接两个文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">join</span> a.txt b.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid370time1420781241207.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>指定两个文件的第三个字段为匹配字段，连接两个文件，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">join</span> -1 3 -2 3 c.txt d.txt</span><br></pre></td></tr></table></figure><figure><imgsrc="Linux常用命令/document-uid370051labid370timestamp1490930024622.png"alt="此处输入图片的描述" /><figcaption aria-hidden="true">此处输入图片的描述</figcaption></figure><p>从上面的结果可以看到，一开始对<code>a.txt</code>和<code>b.txt</code>文件内容执行join 命令时报错，这是因为 join 命令跟 uniq命令一样，只能用于排过序的数据。</p><h2 id="uniq">uniq</h2><p>作用：经常和 sort 命令结合在一起使用。uniq从标准输入或单个文件名参数接受数据有序列表，默认情况下，从数据列表中删除任何重复行。</p><p>命令格式：<code>uniq [选项][文件名]</code></p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-c</td><td>在每行前加上表示相应行目出现次数的前缀编号</td></tr><tr class="even"><td>-d</td><td>只输出重复的行</td></tr><tr class="odd"><td>-u</td><td>只显示唯一的行</td></tr><tr class="even"><td>-D</td><td>显示所有重复的行</td></tr><tr class="odd"><td>-f</td><td>比较时跳过前 n 列</td></tr><tr class="even"><td>-i</td><td>在比较的时候不区分大小写</td></tr><tr class="odd"><td>-s</td><td>比较时跳过前 n 个字符</td></tr><tr class="even"><td>-w</td><td>对每行第 n 个字符以后的内容不作对照</td></tr></tbody></table><h3 id="案例-31">案例</h3><p><strong>例一：</strong>找出<code>/bin</code>目录和<code>/usr/bin</code>目录下所有相同的命令，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /bin /usr/bin | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -d</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid370time1420781011797.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>现有文件内容如下，红色方框里的内容表示区号，现在要统计出各个区号的总人数。</p><figure><img src="Linux常用命令/userid3372labid370time1420781055838.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>实现思路：首先按区号对每行信息排序，然后使用 uniq命令对区号进行重复行统计。使用命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span> -k 4.1n,4.1n student.txt | <span class="built_in">uniq</span> -c -f 3 -w 2</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid370time1420781089813.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><code>sort -k 4.1n,4.1n</code>表示对第四个字段的第一个字符按数值排序。</p><p><code>uniq -c -f 3 -w 2</code>中 -f 3表示跳过前三列的比较，那么现在只剩下最后一列，-w 2 表示第 2个字符后的内容不做比较，为什么是 2呢，因为跳过前三列时并没有跳过最后一列前面的空格分隔符，区号前都还有一个空格。</p><h2 id="comm">comm</h2><p>作用：comm命令将<strong>逐行比较已经排序的两个文件</strong>。显示结果包括 3 列：第1 列为只在第一个文件中找到的行，第 2 列为只在第二个文件中找到的行，第 3列为两个文件的共有行。</p><p>注意：comm 命令和 join、uniq 命令一样，只能用于已经排过序的数据。</p><p>命令格式： <code>comm [选项] 文件1 文件2</code></p><p><strong>常用选项参数</strong></p><table><thead><tr class="header"><th>参数</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>-1</td><td>不输出文件 1 特有的行</td></tr><tr class="even"><td>-2</td><td>不输出文件 2 特有的行</td></tr><tr class="odd"><td>-3</td><td>不输出两个文件共有的行</td></tr></tbody></table><h3 id="案例-32">案例</h3><p><strong>例一：</strong>比较<code>file1.txt</code>和<code>file2.txt</code>两个文件的内容，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">comm</span> file1.txt file2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420781783879.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p><strong>例二：</strong>比较<code>file1.txt</code>和<code>file2.txt</code>两个文件的内容，只显示两个文件共有的内容，可以使用如下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">comm</span> -12 file1.txt file2.txt</span><br></pre></td></tr></table></figure><figure><img src="Linux常用命令/userid3372labid371time1420781829807.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;命令可以是下面四种形式之一：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;是一个可执行程序，就像我们所看到的位于目录&lt;code&gt;/usr/bin&lt;/code&gt;中的文件一样。属于这一类的程序，可以编译成二进制文件，诸如用
C 和 C++ 语言</summary>
      
    
    
    
    <category term="Linux" scheme="https://vlsmhd.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>maven学习</title>
    <link href="https://vlsmhd.github.io/2023/09/26/maven%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/09/26/maven%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-09-26T12:52:34.829Z</published>
    <updated>2023-09-26T13:40:35.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="maven介绍">Maven介绍</h1><p>Maven的本质是一个<strong>项目管理工具</strong>，将项目开发和管理过程抽象成一个项目对象模型(POM)</p><ul><li>POM (Project Object Model):项目对象模型</li></ul><p>架构：</p><figure><img src="image-20230926210335974.png" alt="image-20230926210335974" /><figcaption aria-hidden="true">image-20230926210335974</figcaption></figure><p>作用：</p><ul><li>项目构建：提供标准的、跨平台的自动化项目构建方式</li><li>依赖管理：方便快捷的管理项目依赖的资源(jar包)，避免资源间的版本冲突问题</li><li>统一开发结构：提供标准的、统一的项目结构</li></ul><h2 id="下载安装">下载安装</h2><p>解压安装目录：</p><ul><li>bin：核心运行文件</li><li>boot：类加载目录</li><li>lib：依赖jar包</li><li>conf：核心配置文件</li></ul><p>配置环境变量：</p><ol type="1"><li><p>依赖Java，需要配置JAVA_HOME</p></li><li><p>设置MAVEN自身的运行环境，需要配置MAVEN_HOME环境</p></li></ol><p>配置结果：</p><figure><img src="image-20230926210537346.png" alt="image-20230926210537346" /><figcaption aria-hidden="true">image-20230926210537346</figcaption></figure><h2 id="基础概念">基础概念</h2><h3 id="仓库">仓库</h3><p>定义：存储资源，包含各种jar包。</p><p>分类：</p><ul><li>本地仓库：自己电脑存储的仓库，连接远程仓库获取资源。</li><li>远程仓库：非本地，为本地提供资源。<ul><li>中央仓库：存储所有资源的仓库（Maven维护）</li><li>私服：部门/公司范围内存储资源的仓库，从中央仓库获取资源<ul><li>作用：版权设立，服务内部。作为本地与远程仓库连接的枢纽。提供远程镜像供本地快速下载。</li></ul></li></ul></li></ul><h3 id="坐标">坐标</h3><p>定义：maven中用于描述仓库资源的位置。 链接：https://repo1.maven.org/maven2/</p><p>Maven坐标主要组成</p><ul><li><p>groupld：定义当前Maven<strong>项目隶属组织名称</strong>(通常是域名反写，例如:org.mybatis)</p></li><li><p>artifactld：定义当前Maven<strong>项目名称</strong>(通常是模块名称，例如CRM、SMS)</p></li><li><p>version：定义<strong>当前项目版本号</strong></p></li><li><p>packaging：定义该项目的打包方式</p></li></ul><p>Maven坐标的作用：使用唯一标识，唯一性定位资源位置，通过该标识可以将资源的识别与下载工作交由机器完成</p><p>https://mvnrepository.com/ 仓库中心网站。</p><ul><li><ul><li>里面有各种资源的坐标。</li></ul></li></ul><h3 id="基础配置">基础配置</h3><p>镜像仓库配置：在settings.xml中配置</p><figure><img src="image-20230926211007117.png" alt="image-20230926211007117" /><figcaption aria-hidden="true">image-20230926211007117</figcaption></figure><h1 id="maven高级">Maven高级</h1><h2 id="依赖管理">依赖管理</h2><h3 id="依赖配置">依赖配置</h3><p>概念：当前项目运行所需要的jar，可配置多个依赖。</p><p>格式：</p><p><img src="image-20230926211152233.png" alt="image-20230926211152233" style="zoom:80%;" /></p><h3 id="依赖传递">依赖传递</h3><p>依赖具有传递性。</p><ul><li>直接依赖：在当前项目中通过依赖配置建立的依赖关系</li><li>间接依赖：所依赖的直接依赖如果依赖其它资源，当前项目间接依赖其它资源。</li></ul><figure><img src="image-20230926211539298.png" alt="image-20230926211539298" /><figcaption aria-hidden="true">image-20230926211539298</figcaption></figure><p>注意：相对于本项目而言。</p><h4 id="依赖冲突解决">依赖冲突解决</h4><ul><li>路径优先：当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高</li><li>声明优先：当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的。（项目的ID是不同的,在同度下，但是属于不同的直接依赖。直接依赖在前的，用直接依赖的。）</li><li>特殊优先：当同级配置了相同资源的不同版本，后配置的覆盖先配置的。（项目的ID是相同的，相当于在一个项目的pom.xml文件中有多个相同的依赖）。</li></ul><figure><img src="image-20230926211611529.png" alt="image-20230926211611529" /><figcaption aria-hidden="true">image-20230926211611529</figcaption></figure><h3 id="可选依赖">可选依赖</h3><p>作用：对外隐藏当前所依赖的资源。</p><p>配置方法：</p><figure><img src="image-20230926211654725.png" alt="image-20230926211654725" /><figcaption aria-hidden="true">image-20230926211654725</figcaption></figure><p>案例：</p><p>比如项目二依赖了项目三，项目三在所依赖的资源写了optional标签，这样一来，项目二看不到项目三的依赖。</p><h3 id="排除依赖">排除依赖</h3><p>概念：<strong>主动</strong>断开依赖的资源，被排除的资源无需指定版本。</p><figure><img src="image-20230926211731266.png" alt="image-20230926211731266" /><figcaption aria-hidden="true">image-20230926211731266</figcaption></figure><h3 id="依赖范围">依赖范围</h3><p>scope设定依赖作用范围。</p><p>作用：通过设置坐标的依赖范围(scope)，可以设置对应jar包的作用范围：编译环境、测试环境、运行环境。</p><p>scope取值：</p><figure><img src="image-20230926211853073.png" alt="image-20230926211853073" /><figcaption aria-hidden="true">image-20230926211853073</figcaption></figure><ul><li>compile ：作用于编译环境、测试环境、运行环境。<ul><li>test：作用于测试环境。典型的就是Junit坐标，以后使用Junit时，都会将scope指定为该值。</li></ul></li><li>provided ：作用于编译环境、测试环境。<ul><li>servlet-api ，在使用它时，必须将 scope设置为该值，不然运行时就会报错。</li></ul></li><li>runtime ： 作用于测试环境、运行环境。<ul><li>jdbc驱动一般将 scope 设置为该值，当然不设置也没有任何问题。</li></ul></li></ul><p>注意：如果坐标不引入scope标签，默认是compile。</p><h2 id="生命周期与插件">生命周期与插件</h2><p>Maven对项目构建的生命周期划分为3套</p><ul><li>clean：清理工作</li><li>default：核心工作，例如编译，测试，打包，部署等</li><li>site：产生报告，发布站点等</li></ul><h3 id="clean">clean</h3><figure><img src="image-20230926212130745.png" alt="image-20230926212130745" /><figcaption aria-hidden="true">image-20230926212130745</figcaption></figure><h3 id="default">default</h3><figure><img src="image-20230926212153949.png" alt="image-20230926212153949" /><figcaption aria-hidden="true">image-20230926212153949</figcaption></figure><h3 id="site">site</h3><figure><img src="image-20230926212237672.png" alt="image-20230926212237672" /><figcaption aria-hidden="true">image-20230926212237672</figcaption></figure><h2 id="分模块开发">分模块开发</h2><figure><img src="image-20230926212317298.png" alt="image-20230926212317298" /><figcaption aria-hidden="true">image-20230926212317298</figcaption></figure><h3 id="模块拆分">模块拆分</h3><p>案例：抽取domain层</p><ol type="1"><li><p>创建新模块</p><p><img src="image-20230926212420163.png" alt="image-20230926212420163" style="zoom: 80%;" /></p></li><li><p>项目中创建domain包，复制原项目的内容。</p></li><li><p>建立依赖关系</p></li></ol><p>​ 总项目里的pom文件，添加分离出去的模块的坐标依赖</p><ol start="4" type="1"><li><p>在本地仓库里，安装这个分离出去的模块</p><figure><img src="image-20230926212500120.png" alt="image-20230926212500120" /><figcaption aria-hidden="true">image-20230926212500120</figcaption></figure></li></ol><h2 id="聚合">聚合</h2><p>概念：</p><ul><li><p>所谓聚合：将<strong>多个模块组织成一个整体</strong>，同时进行项目构建的过程称为聚合</p></li><li><p>聚合工程：通常是一个不具有业务功能的"空"工程（有且仅有一个pom文件）</p></li><li><p>作用：使用聚合工程可以将多个工程编组，通过对聚合工程进行构建，实现对所包含的模块进行同步构建</p></li><li><ul><li>当工程中某个模块发生更新（变更）时，必须保障工程中与已更新模块关联的模块同步更新，此时可以使用聚合工程来解决批量模块同步构建的问题。</li></ul></li></ul><p>实现：</p><ol type="1"><li><p>创建空的maven项目</p></li><li><p>项目的打包方式改成pom</p><figure><img src="image-20230926212751252.png" alt="image-20230926212751252" /><figcaption aria-hidden="true">image-20230926212751252</figcaption></figure></li><li><p>pom.xml添加要管理的项目</p><figure><img src="image-20230926212806821.png" alt="image-20230926212806821" /><figcaption aria-hidden="true">image-20230926212806821</figcaption></figure></li><li><p>运行</p><p>聚合工程管理的项目在进行运行的时候，会按照项目与项目之间的依赖关系来自动决定执行的顺序，和配置的顺序无关。</p></li></ol><h2 id="继承">继承</h2><p>概念：</p><ul><li><p>所谓继承：描述的是两个工程间的关系，与java中的继承相似，子工程可以继承父工程中的配置信息，常见于依赖关系的继承。</p></li><li><p>作用：</p></li><li><ul><li>简化配置</li><li>减少版本冲突</li></ul></li></ul><p>实现：</p><ol type="1"><li><p>创建一个空的Maven项目并将其打包方式设置为pom</p></li><li><p>在子项目中设置其父工程</p><figure><img src="image-20230926213027423.png" alt="image-20230926213027423" /><figcaption aria-hidden="true">image-20230926213027423</figcaption></figure></li><li><p>优化子项目共有依赖导入问题</p><ol type="1"><li><p>将子项目共同使用的jar包都抽取出来，维护在父项目的pom.xml中</p></li><li><p>删除子项目中已经被抽取到父项目的pom.xml中的jar包</p></li></ol></li><li><p>优化子项目依赖版本问题</p><p>有部分项目，需要依赖独有的jar包。或者说，有部分项目，不需要父类的某个或多个jar包</p><ol type="1"><li><p>在父工程mavne_01_parent的pom.xml来定义依赖管理</p><figure><img src="image-20230926213225766.png" alt="image-20230926213225766" /><figcaption aria-hidden="true">image-20230926213225766</figcaption></figure><p><dependencyManagement>标签不真正引入jar包，而是配置可供子项目选择的jar包依赖==</p></li><li><p>子项目添加依赖</p><figure><img src="image-20230926213250736.png" alt="image-20230926213250736" /><figcaption aria-hidden="true">image-20230926213250736</figcaption></figure><p>可以不写版本，默认跟父项目版本一致。</p></li></ol></li></ol><h2 id="属性">属性</h2><p>作用：解决更改版本的牵连繁杂问题</p><p>属性分类：</p><figure><img src="image-20230926213711498.png" alt="image-20230926213711498" /><figcaption aria-hidden="true">image-20230926213711498</figcaption></figure><p>实现：</p><p>父工程中定义属性：</p><figure><img src="image-20230926213531412.png" alt="image-20230926213531412" /><figcaption aria-hidden="true">image-20230926213531412</figcaption></figure><p>修改依赖的version</p><figure><img src="image-20230926213544328.png" alt="image-20230926213544328" /><figcaption aria-hidden="true">image-20230926213544328</figcaption></figure><p>配置文件存储属性值</p><p>设置maven过滤文件范围</p><figure><img src="image-20230926213741832.png" alt="image-20230926213741832" /><figcaption aria-hidden="true">image-20230926213741832</figcaption></figure><h3 id="版本管理">版本管理</h3><ul><li><p>SNAPSHOT（快照版本）</p></li><li><ul><li>项目开发过程中临时输出的版本，称为快照版本</li><li>快照版本会随着开发的进展不断更新</li></ul></li><li><p>RELEASE（发布版本）</p></li><li><ul><li>项目开发到一定阶段里程碑后，向团队外部发布较为稳定的版本，这种版本所对应的构件文件是稳定的</li><li>即便进行功能的后续开发，也不会改变当前发布版本内容，这种版本称为发布版本</li></ul></li></ul><h2 id="多环境开发配置">多环境开发配置</h2><p>多环境概念</p><figure><img src="image-20230926213904274.png" alt="image-20230926213904274" /><figcaption aria-hidden="true">image-20230926213904274</figcaption></figure><p>实现：</p><ol type="1"><li><p>父工程配置多个环境,并指定默认激活环境</p><ul><li><p>格式：</p><figure><img src="image-20230926213927144.png" alt="image-20230926213927144" /><figcaption aria-hidden="true">image-20230926213927144</figcaption></figure><p>案例：</p><figure><img src="image-20230926213953496.png" alt="image-20230926213953496" /><figcaption aria-hidden="true">image-20230926213953496</figcaption></figure></li></ul></li><li><p>命令实现环境切换</p><p>格式：</p><figure><img src="image-20230926214018770.png" alt="image-20230926214018770" /><figcaption aria-hidden="true">image-20230926214018770</figcaption></figure></li></ol><h1 id="配置文件帮助文档">配置文件帮助文档</h1><h2 id="附件1pom文件总体配置说明">附件1：POM文件总体配置说明</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd &quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。</span></span><br><span class="line"><span class="comment">         坐标包括group ID，artifact ID和 version。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的构件标识符 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被继承的父项目的版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。</span></span><br><span class="line"><span class="comment">             Maven首先在构建当前项目的地方寻找父项目的pom，其次在文件系统的这个位置（relativePath位置），</span></span><br><span class="line"><span class="comment">             然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，</span></span><br><span class="line"><span class="comment">         这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span> 4.0.0 <span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， </span></span><br><span class="line"><span class="comment">         如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID</span></span><br><span class="line"><span class="comment">         和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven</span></span><br><span class="line"><span class="comment">         为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">packaging</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 1.0-SNAPSHOT <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的名称, Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span> xxx-maven <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目主页的URL, Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://maven.apache.org <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，</span></span><br><span class="line"><span class="comment">         就可以包含HTML标签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的</span></span><br><span class="line"><span class="comment">         索引页文件，而不是调整这里的文档。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span> A maven project to study maven. <span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 描述了这个项目构建环境中的前提条件。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span>&gt;</span><span class="tag">&lt;/<span class="name">maven</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 问题管理系统（例如jira）的名字， --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span> jira <span class="tag">&lt;/<span class="name">system</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的问题管理系统的URL --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://jira.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目持续集成信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 持续集成系统的名字，例如continuum --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span><span class="tag">&lt;/<span class="name">system</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 传送通知的途径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span><span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 发生错误时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnError</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建失败时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnFailure</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建成功时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnSuccess</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 发生警告时是否通知 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span>&gt;</span><span class="tag">&lt;/<span class="name">sendOnWarning</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 不赞成使用。通知发送到哪里 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span>&gt;</span><span class="tag">&lt;/<span class="name">address</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 扩展配置项 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目相关邮件列表信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 邮件的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">post</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 你可以浏览邮件信息的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span> http:/hi.baidu.com/banseon/demo/dev/ <span class="tag">&lt;/<span class="name">archive</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目开发者列表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 某个项目开发者的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- SCM里项目开发者的唯一标识符 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> HELLO WORLD <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的全名 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的email --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span> banseon@126.com <span class="tag">&lt;/<span class="name">email</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者的主页的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所属组织的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span> http://hi.baidu.com/xxx <span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目开发者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span> -5 <span class="tag">&lt;/<span class="name">timezone</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目的其他贡献者列表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 项目的其他贡献者。参见developers/developer元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的全名 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span><span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span><span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span><span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Project Manager <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span> Architect <span class="tag">&lt;/<span class="name">role</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者所在时区， -11到12范围内的整数。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span><span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 项目贡献者属性，如即时消息如何处理等 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span> No <span class="tag">&lt;/<span class="name">dept</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。</span></span><br><span class="line"><span class="comment">         如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- license用于法律上的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Apache 2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 官方的license正文页面的URL --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon/LICENSE-2.0.txt <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 项目分发的主要方式： </span></span><br><span class="line"><span class="comment">                    repo，可以从Maven库下载 </span></span><br><span class="line"><span class="comment">                    manual， 用户必须手动下载和安装依赖 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span> repo <span class="tag">&lt;/<span class="name">distribution</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 关于license的补充信息 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span> A business-friendly OSS license <span class="tag">&lt;/<span class="name">comments</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span> </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk </span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当前代码的标签，在开发阶段默认为HEAD --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span>&gt;</span><span class="tag">&lt;/<span class="name">tag</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://svn.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 组织的全名 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span> demo <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 组织主页的URL --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://www.baidu.com/banseon <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 构建项目需要的信息 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对</span></span><br><span class="line"><span class="comment">             于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容会</span></span><br><span class="line"><span class="comment">             被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">scriptSourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。</span></span><br><span class="line"><span class="comment">             该路径是相对于pom.xml的相对路径。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的应用程序class文件存放的目录。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 被编译过的测试class文件存放的目录。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span>&gt;</span><span class="tag">&lt;/<span class="name">testOutputDirectory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用来自该项目的一系列构建扩展 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 描述使用到的构建扩展。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的groupId --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的artifactId --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 构建扩展的版本 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span>&gt;</span><span class="tag">&lt;/<span class="name">defaultGoal</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在</span></span><br><span class="line"><span class="comment">             最终的打包文件里。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。</span></span><br><span class="line"><span class="comment">                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为</span></span><br><span class="line"><span class="comment">                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素</span></span><br><span class="line"><span class="comment">                     里列出。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 描述了测试相关的资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。</span></span><br><span class="line"><span class="comment">                     举个例子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为</span></span><br><span class="line"><span class="comment">                    org/apache/maven/messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素</span></span><br><span class="line"><span class="comment">                     里列出。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 描述存放测试相关的资源的目录，该路径相对POM路径 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 包含的模式列表，例如**/*.xml. --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构建产生的所有文件存放的目录 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本</span></span><br><span class="line"><span class="comment">             地配置都会覆盖这里的配置 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 使用的插件列表 。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该</span></span><br><span class="line"><span class="comment">                         元素才被设置成enabled。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                            <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                            <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 该项目使用的插件列表 。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述插件所需要的信息。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该</span></span><br><span class="line"><span class="comment">                     元素才被设置成enabled。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- execution元素包含了插件执行需要的信息 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置的执行目标 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被传播到子POM --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 项目引入插件所需要的额外依赖 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 作为DOM对象的配置 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 根据环境参数或命令行参数激活某个构建处理 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它能够</span></span><br><span class="line"><span class="comment">                 在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元</span></span><br><span class="line"><span class="comment">                 素并不是激活profile的唯一方式。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- profile默认是否激活的标志 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本</span></span><br><span class="line"><span class="comment">                     不是以1.4开头的JDK。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>jdk版本，如:1.7<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统的名字 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span> Windows XP <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span> Windows <span class="tag">&lt;/<span class="name">family</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统体系结构 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span> x86 <span class="tag">&lt;/<span class="name">arch</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的操作系统版本 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span> 5.1.2600 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile</span></span><br><span class="line"><span class="comment">                     就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹</span></span><br><span class="line"><span class="comment">                     配属性值字段 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的名称 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span> mavenVersion <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 激活profile的属性的值 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span> 2.0.3 <span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 </span></span><br><span class="line"><span class="comment">                     profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件存在，则激活profile。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">exists</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- 如果指定的文件不存在，则激活profile。 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span> /usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/ <span class="tag">&lt;/<span class="name">missing</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构建项目所需要的信息。参见build元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span><span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span>&gt;</span><span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span><span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span><span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span>&gt;</span><span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span>&gt;</span><span class="tag">&lt;/<span class="name">filters</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 参见build/pluginManagement/plugins/plugin元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">extensions</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span> </span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span>&gt;</span><span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span><span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的</span></span><br><span class="line"><span class="comment">                 相对路径 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--子项目相对路径--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">modules</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 参见repositories/repository元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span><span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的</span></span><br><span class="line"><span class="comment">                 仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 该元素包括使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看</span></span><br><span class="line"><span class="comment">                 到所有报表的链接。参见reporting元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span><span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencyManagement元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见distributionManagement元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 参见properties元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--子项目相对路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发现依赖和扩展的远程仓库列表。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程仓库的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里发布版本的下载 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），</span></span><br><span class="line"><span class="comment">                     daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，</span></span><br><span class="line"><span class="comment">                 为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon-repository-proxy <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 远程仓库URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> http://192.168.1.169:9999/repository/ <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认</span></span><br><span class="line"><span class="comment">                 的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span> default <span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。</span></span><br><span class="line"><span class="comment">         要获取更多信息，请看项目依赖机制。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 依赖的group ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.apache.maven <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的artifact ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> maven-artifact <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span> 3.8.1 <span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展</span></span><br><span class="line"><span class="comment">                 名或分类器。类型经常和使用的打包方式对应，尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。</span></span><br><span class="line"><span class="comment">                 如果设置extensions为 true，就可以在plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span> jar <span class="tag">&lt;/<span class="name">type</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，</span></span><br><span class="line"><span class="comment">                 如果你想要构建两个单独的构件成JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生</span></span><br><span class="line"><span class="comment">                 成两个单独的JAR构件。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 </span></span><br><span class="line"><span class="comment">                - compile ：默认范围，用于编译 </span></span><br><span class="line"><span class="comment">                - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用 </span></span><br><span class="line"><span class="comment">                - test: 用于test任务时使用 </span></span><br><span class="line"><span class="comment">                - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径 </span></span><br><span class="line"><span class="comment">                - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span> test <span class="tag">&lt;/<span class="name">scope</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件</span></span><br><span class="line"><span class="comment">                 系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的</span></span><br><span class="line"><span class="comment">                 依赖。此元素主要用于解决版本冲突问题 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span> spring-core <span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span> org.springframework <span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。</span></span><br><span class="line"><span class="comment">                 可选依赖阻断依赖的传递性。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span> true <span class="tag">&lt;/<span class="name">optional</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 不赞成使用. 现在Maven忽略该元素. --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 该元素描述使用报表插件产生报表的规范。当用户执行“mvn site”，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- true，则，网站不包括默认的报表。这包括“项目信息”菜单中的报表。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 使用的报表插件和他们的配置。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- plugin元素包含描述报表插件需要的信息 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的group ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">                <span class="comment">&lt;!-- 报表插件在仓库里的artifact ID --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 被使用的报表插件的版本（或版本范围） --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 任何配置是否被传播到子项目 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 报表插件的配置 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- 一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，</span></span><br><span class="line"><span class="comment">                     有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报</span></span><br><span class="line"><span class="comment">                     表集，对应另一个执行目标 --&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span> </span><br><span class="line">                    <span class="comment">&lt;!-- 表示报表的一个集合，以及产生该集合的配置 --&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span> </span><br><span class="line">                        <span class="comment">&lt;!-- 报表集合的唯一标识符，POM继承时用到 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 产生报表集合时，被使用的报表的配置 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 配置是否被继承到子POMs --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span>&gt;</span>true/false<span class="tag">&lt;/<span class="name">inherited</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">                        <span class="comment">&lt;!-- 这个集合里使用到哪些报表 --&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span> </span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖</span></span><br><span class="line"><span class="comment">        （必须描述group ID和artifact ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过</span></span><br><span class="line"><span class="comment">            group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 参见dependencies/dependency元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者</span></span><br><span class="line"><span class="comment">         把构件部署到远程仓库。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 部署项目产生的构件到远程仓库需要的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见</span></span><br><span class="line"><span class="comment">                 repositories/repository元素 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> banseon maven2 <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> file://$&#123;basedir&#125;/target/deploy <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见</span></span><br><span class="line"><span class="comment">             distributionManagement/repository元素 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-maven2 <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> Banseon-maven2 Snapshot Repository <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> scp://svn.baidu.com/banseon:/usr/local/maven-snapshot <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 部署项目的网站需要的信息 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span> banseon-site <span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的名称 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span> business api website <span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 部署位置的URL，按protocol://hostname/path形式 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span> </span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web </span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位</span></span><br><span class="line"><span class="comment">             那些不在仓库里的构件（由于license限制）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 构件新的group ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的artifact ID --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 构件新的版本号 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span>&gt;</span><span class="tag">&lt;/<span class="name">message</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值</span></span><br><span class="line"><span class="comment">             有：none（默认），converted（仓库管理员从Maven 1 POM转换过来），partner（直接从伙伴Maven </span></span><br><span class="line"><span class="comment">             2仓库同步过来），deployed（从Maven 2实例部署），verified（被核实时正确的和最终的）。 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span>&gt;</span><span class="tag">&lt;/<span class="name">status</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里</span></span><br><span class="line"><span class="comment">         activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>value<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure><h2 id="附件2pom文件单项配置说明">附件2：POM文件单项配置说明</h2><h3 id="localrepository">localRepository</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库的路径。默认值为$&#123;user.home&#125;/.m2/repository。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>usr/local/maven<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="interactivemode">interactiveMode</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven是否需要和用户交互以获得输入。如果Maven需要和用户交互以获得输入，则设置成true，反之则应为false。默认为true。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interactiveMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">interactiveMode</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="usepluginregistry">usePluginRegistry</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Maven是否需要使用plugin-registry.xml文件来管理插件版本。如果需要让Maven使用文件$&#123;user.home&#125;/.m2/plugin-registry.xml来管理插件版本，则设为true。默认为false。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">usePluginRegistry</span>&gt;</span>false<span class="tag">&lt;/<span class="name">usePluginRegistry</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="offline">offline</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--表示Maven是否需要在离线模式下运行。如果构建系统需要在离线模式下运行，则为true，默认为false。当由于网络设置原因或者安全因素，构建服务器不能连接远程仓库的时候，该配置就十分有用。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">offline</span>&gt;</span>false<span class="tag">&lt;/<span class="name">offline</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="plugingroups">pluginGroups</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--当插件的组织Id（groupId）没有显式提供时，供搜寻插件组织Id（groupId）的列表。该元素包含一个pluginGroup元素列表，每个子元素包含了一个组织Id（groupId）。当我们使用某个插件，并且没有在命令行为其提供组织Id（groupId）的时候，Maven就会使用该列表。默认情况下该列表包含了org.apache.maven.plugins和org.codehaus.mojo --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--plugin的组织Id（groupId） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="proxies">proxies</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--用来配置不同的代理，多代理profiles 可以应对笔记本或移动设备的工作环境：通过简单的设置profile id就可以很容易的更换整个代理配置。 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--代理元素包含配置代理时需要的信息--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxy</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的唯一定义符，用来区分不同的代理元素。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>myproxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该代理是否是激活的那个。true则激活代理。当我们声明了一组代理，而某个时候只需要激活一个代理的时候，该元素就可以派上用处。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">active</span>&gt;</span>true<span class="tag">&lt;/<span class="name">active</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的协议。 协议://主机名:端口，分隔成离散的元素以方便配置。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">protocol</span>&gt;</span>http<span class="tag">&lt;/<span class="name">protocol</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的主机名。协议://主机名:端口，分隔成离散的元素以方便配置。  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">host</span>&gt;</span>proxy.somewhere.com<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的端口。协议://主机名:端口，分隔成离散的元素以方便配置。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的用户名，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>proxyuser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--代理的密码，用户名和密码表示代理服务器认证的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>somepassword<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--不该被代理的主机名列表。该列表的分隔符由代理服务器指定；例子中使用了竖线分隔符，使用逗号分隔也很常见。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">nonProxyHosts</span>&gt;</span>*.google.com|ibiblio.org<span class="tag">&lt;/<span class="name">nonProxyHosts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxy</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="servers">servers</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置服务端的一些设置。一些设置如安全证书不应该和pom.xml一起分发。这种类型的信息应该存在于构建服务器上的settings.xml文件中。--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--服务器元素包含配置服务器时需要的信息 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--这是server的id（注意不是用户登陆的id），该id与distributionManagement中repository元素的id相匹配。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>server001<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权用户名。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">username</span>&gt;</span>my_login<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权密码 。鉴权用户名和鉴权密码表示服务器认证所需要的登录名和密码。密码加密功能已被添加到2.1.0 +。详情请访问密码加密页面--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">password</span>&gt;</span>my_password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权时使用的私钥位置。和前两个元素类似，私钥位置和私钥密码指定了一个私钥的路径（默认是$&#123;user.home&#125;/.ssh/id_dsa）以及如果需要的话，一个密语。将来passphrase和password元素可能会被提取到外部，但目前它们必须在settings.xml文件以纯文本的形式声明。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">privateKey</span>&gt;</span>$&#123;usr.home&#125;/.ssh/id_dsa<span class="tag">&lt;/<span class="name">privateKey</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--鉴权时使用的私钥密码。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">passphrase</span>&gt;</span>some_passphrase<span class="tag">&lt;/<span class="name">passphrase</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--文件被创建时的权限。如果在部署的时候会创建一个仓库文件或者目录，这时候就可以使用权限（permission）。这两个元素合法的值是一个三位数字，其对应了unix文件系统的权限，如664，或者775。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filePermissions</span>&gt;</span>664<span class="tag">&lt;/<span class="name">filePermissions</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--目录被创建时的权限。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">directoryPermissions</span>&gt;</span>775<span class="tag">&lt;/<span class="name">directoryPermissions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="mirrors">mirrors</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--为仓库列表配置的下载镜像列表。高级设置请参阅镜像设置页面 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--给定仓库的下载镜像。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该镜像的唯一标识符。id用来区分不同的mirror元素。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>planetmirror.com<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--镜像名称 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>PlanetMirror Australia<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--该镜像的URL。构建系统会优先考虑使用该URL，而非使用默认的服务器URL。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://downloads.planetmirror.com/pub/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--被镜像的服务器的id。例如，如果我们要设置了一个Maven中央仓库（http://repo.maven.apache.org/maven2/）的镜像，就需要将该元素设置成central。这必须和中央仓库的id central完全一致。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="profiles">profiles</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据环境参数来调整构建配置的列表。settings.xml中的profile元素是pom.xml中profile元素的裁剪版本。它包含了id，activation, repositories, pluginRepositories和 properties元素。这里的profile元素只包含这五个子元素是因为这里只关心构建系统这个整体（这正是settings.xml文件的角色定位），而非单独的项目对象模型设置。如果一个settings中的profile被激活，它的值会覆盖任何其它定义在POM中或者profile.xml中的带有相同id的profile。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--根据环境参数来调整的构件的配置--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--该配置的唯一标识符。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="activation">Activation</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。如POM中的profile一样，profile的力量来自于它能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。settings.xml文件中的activeProfile元素可以包含profile的id。profile也可以通过在命令行，使用-P标记和逗号分隔的列表来显式的激活（如，-P test）。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--profile默认是否激活的标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>false<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.5<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;)  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统体系结构  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的操作系统版本--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;name&#125;引用），其拥有对应的name = 值，Profile就会被激活。如果值字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的名称--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">exists</span>&gt;</span>$&#123;basedir&#125;/file2.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">missing</span>&gt;</span>$&#123;basedir&#125;/file1.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="repositories">Repositories</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--远程仓库列表，它是Maven用来填充构建系统本地仓库所使用的一组远程项目。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库唯一标识--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>codehausSnapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Codehaus Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://snapshots.maven.codehaus.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--发现插件的远程仓库列表。仓库是两种主要构件的家。第一种构件被用作其它构件的依赖。这是中央仓库中存储的大部分构件类型。另外一种构件类型是插件。Maven插件是一种特殊类型的构件。由于这个原因，插件仓库独立于其它仓库。pluginRepositories元素的结构和repositories元素的结构类似。每个pluginRepository元素指定一个Maven可以用来寻找新插件的远程地址。--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见profiles/profile/repositories/repository元素的说明--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span>           </span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span>      </span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">enabled</span>/&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>/&gt;</span><span class="tag">&lt;<span class="name">checksumPolicy</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>/&gt;</span><span class="tag">&lt;<span class="name">name</span>/&gt;</span><span class="tag">&lt;<span class="name">url</span>/&gt;</span><span class="tag">&lt;<span class="name">layout</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="activeprofiles">activeProfiles</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--手动激活profiles的列表，按照profile被应用的顺序定义activeProfile。 该元素包含了一组activeProfile元素，每个activeProfile都含有一个profile id。任何在activeProfile中定义的profile id，不论环境设置如何，其对应的</span></span><br><span class="line"><span class="comment">        profile都会被激活。如果没有匹配的profile，则什么都不会发生。例如，env-test是一个activeProfile，则在pom.xml（或者profile.xml）中对应id的profile会被激活。如果运行过程中找不到这样一个profile，Maven则会像往常一样运行。 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>env-test<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;maven介绍&quot;&gt;Maven介绍&lt;/h1&gt;
&lt;p&gt;Maven的本质是一个&lt;strong&gt;项目管理工具&lt;/strong&gt;，将项目开发和管理过程抽象成一个项目对象模型(POM)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;POM (Project Object Model):项目</summary>
      
    
    
    
    <category term="开发工具" scheme="https://vlsmhd.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="maven" scheme="https://vlsmhd.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/maven/"/>
    
    
  </entry>
  
  <entry>
    <title>git学习</title>
    <link href="https://vlsmhd.github.io/2023/09/26/git%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/09/26/git%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-09-26T08:06:58.379Z</published>
    <updated>2023-12-04T14:56:54.055Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git核心概念">git核心概念</h1><h2 id="版本控制">版本控制</h2><p>版本控制是一种<strong>记录文件内容变化，以便查阅特定版本修订情况</strong>的系统。</p><p>作用：方便回溯版本。</p><h3 id="本地版本控制系统">本地版本控制系统</h3><p>在本地利用数据库存储文件历次版本之间的差异。</p><p><img src="https://oss.javaguide.cn/github/javaguide/tools/git/%E6%9C%AC%E5%9C%B0%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png" alt="本地版本控制系统" style="zoom:80%;" /></p><h3 id="集中化版本控制系统">集中化版本控制系统</h3><p>集中化的版本控制系统都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，取出最新的文件或者提交更新。</p><figure><imgsrc="https://oss.javaguide.cn/github/javaguide/tools/git/%E9%9B%86%E4%B8%AD%E5%8C%96%E7%9A%84%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.png"alt="集中化的版本控制系统" /><figcaption aria-hidden="true">集中化的版本控制系统</figcaption></figure><p>会出现的问题：</p><ul><li>单点故障：中央服务器宕机，则其他人无法使用；如果中心数据库磁盘损坏又没有进行备份，你将丢失所有数据。</li><li>断网：<strong>必须联网才能工作：</strong> 受网络状况、带宽影响</li></ul><h3 id="分布式版本控制系统">分布式版本控制系统</h3><p>（Distributed Version Control System，简称 DVCS），git属于这个。</p><p>特点：客户端不只提取最新版本的文件快照，而是<strong>把整个代码仓库复制下来</strong></p><p><img src="分布式版本控制系统.png" alt="分布式版本控制系统" style="zoom:80%;" /></p><p>优势：</p><ul><li>不用联网：每个人的电脑上都是完整的版本库，当你修改了某个文件后，你只需要将自己的修改推送给别人就可以了</li><li>中央服务器：方便交换大家的修改。</li></ul><h2 id="git">git</h2><blockquote><p>Linux 内核项目组当时使用分布式版本控制系统 BitKeeper来管理和维护代码。但是，后来开发 BitKeeper 的商业公司同 Linux内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper的权力。 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用BitKeeper时的经验教训，开发出自己的版本系统，而且对新的版本控制系统做了很多改进。</p></blockquote><h3 id="与其它版本管理工具的区别">与其它版本管理工具的区别</h3><p>大部分版本管理工具都是基于<strong>差异比较</strong>来对待数据，以文件变更列表的形式存储信息。</p><p><img src="2019-3deltas.png" alt="img" style="zoom: 80%;" /></p><p>原理：每提交一个修改，记录增量以△标记。</p><p>如何得到最终版本：遍历链表把全部增量添加到初始文件中。</p><p>缺陷：遍历链表耗时。</p><p>git采用<strong>快照流</strong>的形式，对待每一版本数据：</p><p>每次你提交更新，或在 Git中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。</p><figure><img src="2019-3snapshots.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li>Version 2：FileA和C更改，B没更改，但是也会把B快照记录下来。</li></ul><h3 id="git的状态及工作区">git的状态及工作区</h3><ol type="1"><li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li><li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li><li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li></ol><p>工作区：</p><p><strong>Git 仓库(.git directory)</strong>、<strong>工作目录(WorkingDirectory)</strong> 以及 <strong>暂存区域(Staging Area)</strong> 。</p><figure><img src="2019-3areas.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>工作流程：</p><ol type="1"><li>在工作目录修改文件</li><li>将文件的快照暂存到暂存区域</li><li>提交更新，提交到git仓库</li></ol><h1 id="git使用">git使用</h1><h2 id="基础命令">基础命令</h2><h3 id="获取git仓库">获取git仓库</h3><p>现有目录初始化仓库：进入某一项目目录，输入<code>git init</code>，该命令将创建一个名为<code>.git</code> 的子目录。</p><p>从服务器克隆一个现有的git仓库：<code>git clone</code></p><p>定义本地仓库的名字: <code>git clone [url] directoryname</code></p><h3 id="记录每次更新到仓库">记录每次更新到仓库</h3><ol type="1"><li><strong>检测当前文件状态</strong> : <code>git status</code></li><li><strong>提出更改（把它们添加到暂存区</strong>）：<code>git add filename</code>(针对特定文件)、<code>git add *</code>(所有文件)、<code>git add *.txt</code>（支持通配符，所有.txt 文件）</li><li><strong>忽略文件</strong>：<code>.gitignore</code> 文件</li><li><strong>提交更新:</strong> <code>git commit -m "代码提交信息"</code>（每次准备提交前，先用 <code>git status</code>看下，是不是都已暂存起来了， 然后再运行提交命令<code>git commit</code>）</li><li><strong>跳过使用暂存区域更新的方式</strong> :<code>git commit -a -m "代码提交信息"</code>。 <code>git commit</code>加上 <code>-a</code> 选项，Git就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过<code>git add</code> 步骤。</li><li><strong>移除文件</strong>：<code>git rm filename</code>（从暂存区域移除，然后提交。）</li><li><strong>对文件重命名</strong>：<code>git mv README.md README</code>(这个命令相当于<code>mv README.md README</code>、<code>git rm README.md</code>、<code>git add README</code>这三条命令的集合)</li></ol><h4 id="git-commit">Git Commit</h4><p>Git仓库中的提交记录保存的是你的目录下所有文件的快照，就像是把整个目录复制，然后再粘贴一样。</p><p>Git希望<strong>提交记录尽可能地轻量</strong>，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。</p><p>提交结点链表：</p><figure><img src="image-20230926174535281.png" alt="image-20230926174535281" /><figcaption aria-hidden="true">image-20230926174535281</figcaption></figure><p>每一次gitcommit，都会创建一个cx结点，结点的parent指针指向上次提交的结点。</p><h3 id="推送改到远程仓库">推送改到远程仓库</h3><ul><li>如果你还没有克隆现有仓库，并<strong>欲将你的仓库连接到某个远程服务器</strong>，你可以使用如下命令添加：<code>git remote add origin &lt;server&gt;</code><ul><li>比如我们要让本地的一个仓库和 GitHub上创建的一个仓库关联可以这样<code>git remote add origin https://github.com/Snailclimb/test.git</code></li></ul></li><li>将这些改动提交到远端仓库：<code>git push origin master</code>(可以把 <em>master</em> 换成你想要推送的任何分支)</li></ul><h3 id="远程仓库的移除重命名">远程仓库的移除、重命名</h3><ul><li>将 test 重命名为test1：<code>git remote rename test test1</code></li><li>移除远程仓库 test1:<code>git remote rm test1</code></li></ul><h3 id="查看提交历史">查看提交历史</h3><p>列出所有更新：<code>git log</code></p><p>查看某个人的：<code>git log --author=bob</code></p><h3 id="撤销操作">撤销操作</h3><p>重新提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>取消暂存的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset filename</span><br></pre></td></tr></table></figure><p>撤消对文件的修改:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout --filename</span><br></pre></td></tr></table></figure><p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure><h3 id="分支操作">分支操作</h3><p>在创建仓库的时候，<em>master</em>是“默认”的分支。在其他分支上进行开发，完成后再将它们合并到主分支上。我们通常在开发新功能、修复一个紧急bug等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。</p><p>建议：多用分支、早用分支</p><p><strong>操作演示：</strong></p><ol type="1"><li>初始状态：</li></ol><p>两次提交，主分支指向最新的提交</p><figure><img src="image-20230926175007156.png" alt="image-20230926175007156" /><figcaption aria-hidden="true">image-20230926175007156</figcaption></figure><ol start="2" type="1"><li>创建一个名字叫做 newImage 的分支</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch newImage</span><br></pre></td></tr></table></figure><figure><img src="image-20230926175037271.png" alt="image-20230926175037271" /><figcaption aria-hidden="true">image-20230926175037271</figcaption></figure><ul><li>新建的分支都会指向主节点在指向的提交。</li></ul><ol start="3" type="1"><li><p>不切换分支提交一份代码</p><figure><img src="image-20230926194924511.png" alt="image-20230926194924511" /><figcaption aria-hidden="true">image-20230926194924511</figcaption></figure></li></ol><ul><li>因为本次提交是在主分支的提交，所以仅有main指向最新的提交C2、</li></ul><ol start="4" type="1"><li><p>切换分支再提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout newImage;</span><br><span class="line"></span><br><span class="line">git commit;</span><br></pre></td></tr></table></figure><figure><img src="image-20230926195054090.png" alt="image-20230926195054090" /><figcaption aria-hidden="true">image-20230926195054090</figcaption></figure></li></ol><p>注意：在 Git 2.23 版本中，引入了一个名为 <code>git switch</code>的新命令，最终会取代 <code>git checkout</code>，因为<code>checkout</code>作为单个命令有点超载（它承载了很多独立的功能）。</p><p>把新建的分支删掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature_x</span><br></pre></td></tr></table></figure><p>将分支推送到远端仓库（推送成功后其他人可见）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br></pre></td></tr></table></figure><h4 id="分支合并">分支合并</h4><h5 id="git-merge">git merge</h5><ul><li>在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个 parent节点。翻译成自然语言相当于：“我要把这两个 parent节点本身及它们所有的祖先都包含进来。”</li></ul><ol type="1"><li><p>初始化</p><p><img src="image-20230926204311275.png" alt="image-20230926204311275" style="zoom:80%;" /></p></li><li><p>合并bugFix到main</p><p>当前所在分支：main</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge bugFix</span><br></pre></td></tr></table></figure><p><img src="image-20230926204406178.png" alt="image-20230926204406178" style="zoom:80%;" /></p></li></ol><ul><li>C2和C3合并成C4，然后main指向C4</li><li><code>main</code> 现在指向了一个拥有两个 parent节点的提交记录。假如从 <code>main</code>开始沿着箭头向上看，在到达起点的路上会经过所有的提交记录。这意味着<code>main</code> 包含了对代码库的所有修改。</li></ul><ol start="3" type="1"><li><p>再把main合并到bugFix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//合并到哪，切换分支到哪</span><br><span class="line">git checkout bugFix;</span><br><span class="line">//把main合并过来</span><br><span class="line">git merge main</span><br></pre></td></tr></table></figure><p><img src="image-20230926204647629.png" alt="image-20230926204647629" style="zoom:80%;" /></p></li></ol><ul><li>因为main继承bugFix，把 <code>bugFix</code> 移动到 <code>main</code>所指向的那个提交记录即可。</li></ul><h5 id="git-rebase">git rebase</h5><p>概念：Rebase实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。</p><p>优势：可以创造更线性的提交历史。如果只允许使用 Rebase的话，代码库的提交历史将会变得异常清晰。</p><p>语法：</p><p><code>git rebase A B</code>：把分支B移到A上。</p><p><code>git rebase A</code>：把A移到HEAD所在地方</p><p>rebase可以理解为：改变基地到...</p><p>案例：</p><ol type="1"><li><p>初始化：</p><p><img src="image-20230926205410807.png" alt="image-20230926205410807" style="zoom:80%;" /></p></li></ol><p>目标：把 bugFix 分支里的工作直接移到 main分支上。移动以后会使得两个分支的功能看起来像是按顺序开发，但实际上它们是并行开发的。</p><ol start="2" type="1"><li><p>合并到main</p><p>当前所在分支：bugFix</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase main</span><br></pre></td></tr></table></figure><p><img src="image-20230926205618554.png" alt="image-20230926205618554" style="zoom:80%;" /></p></li></ol><ul><li>现在 bugFix 分支上的工作在 main的最顶端，同时我们也得到了一个更线性的提交序列。</li><li>提交记录 C3 依然存在（树上那个半透明的节点），而 C3' 是我们 Rebase到 main 分支上的 C3 的副本。</li></ul><ol start="3" type="1"><li><p>切换分支到main，把main更新到bugFix上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line"></span><br><span class="line">git rebase bugFix</span><br></pre></td></tr></table></figure><p><img src="image-20230926205903609.png" alt="image-20230926205903609" style="zoom:80%;" /></p></li></ol><h2 id="高级特性">高级特性</h2><h3 id="分离head">分离head</h3><p>HEAD 是一个对当前所在分支的符号引用 ——也就是<strong>指向你正在其基础上进行工作的提交记录</strong>。</p><p>head总是指向当前分支上最近一次提交记录，通常情况指向分支名。</p><p>案例：</p><p>从main分离出去：</p><ol type="1"><li><p>初始化</p><p><img src="image-20230927143659502.png" alt="image-20230927143659502" style="zoom:80%;" /></p></li><li><p>开始分离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout c1</span><br></pre></td></tr></table></figure><p><img src="image-20230927143728033.png" alt="image-20230927143728033" style="zoom:80%;" /></p></li></ol><h3 id="相对引用移动">相对引用——移动</h3><p>为什么引入相对引用：通过哈希值指定提交记录不方便，还要gitlog查看一长串的字符。</p><p>使用：</p><ul><li>使用 <code>^</code> 向上移动 1 个提交记录<ul><li><code>^</code>加在引用名称的后面，表示寻找这个提交记录的<code>parent</code>结点</li></ul></li><li>使用 <code>~&lt;num&gt;</code> 向上移动多个提交记录，如<code>~3</code></li></ul><p>案例1：向上移动一个提交记录</p><ol type="1"><li><p>初始化</p><p><img src="image-20230927144208639.png" alt="image-20230927144208639" style="zoom:80%;" /></p></li><li><p>向上移动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout main^</span><br></pre></td></tr></table></figure><p><img src="image-20230927144503570.png" alt="image-20230927144503570" style="zoom:80%;" /></p></li></ol><ul><li>这里HEAD会自动分离</li></ul><p>案例2：使用head作为相对引用的指针参照</p><ol type="1"><li><p>初始化</p><p><img src="image-20230927144644440.png" alt="image-20230927144644440" style="zoom:80%;" /></p></li><li><p>分离head、向上移动一位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout c3</span><br><span class="line"></span><br><span class="line">git checkout HEAD^</span><br></pre></td></tr></table></figure><figure><img src="image-20230927144805362.png" alt="image-20230927144805362" /><figcaption aria-hidden="true">image-20230927144805362</figcaption></figure></li></ol><p>案例3：强制修改分支位置</p><ol type="1"><li><p>初始化</p><p><img src="image-20230927145227852.png" alt="image-20230927145227852" style="zoom:80%;" /></p></li><li><p>移动分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//让main分支回退HEAD所在结点处三个版本</span><br><span class="line">git branch -f main HEAD^3</span><br></pre></td></tr></table></figure><p><img src="image-20230927145312813.png" alt="image-20230927145312813" style="zoom:80%;" /></p></li></ol><h3 id="撤销变更">撤销变更</h3><p>方法：</p><ul><li>git reset：把分支回退几个提交记录</li><li>gitrevert：向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</li></ul><p>案例1：reset实战</p><ol type="1"><li><p>初始化：</p><p><img src="image-20230927145909531.png" alt="image-20230927145909531" style="zoom:80%;" /></p></li><li><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure><p><img src="image-20230927150014697.png" alt="image-20230927150014697" style="zoom:80%;" /></p></li></ol><p>案例2：revert实战</p><ol type="1"><li><p>初始化：</p><p><img src="image-20230927150413680.png" alt="image-20230927150413680" style="zoom:80%;" /></p></li><li><p>执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git revert HEAD/C2</span><br></pre></td></tr></table></figure><p><img src="image-20230927150456259.png" alt="image-20230927150456259" style="zoom:80%;" /></p></li></ol><ul><li>新提交记录 <code>C2'</code>相当于一个<strong>更改</strong>：用来撤销 <code>C2</code> 这个提交，因此C2' = C1</li></ul><h3 id="移动提交记录">移动提交记录</h3><h4 id="整理提交记录">整理提交记录</h4><ul><li><code>git cherry-pick &lt;提交号&gt;...</code>：将一些提交(提交树上任何地方)复制到当前所在的位置（<code>HEAD</code>）下面</li></ul><p>案例：将 <code>side</code> 分支上的工作复制到 <code>main</code>分支</p><ol type="1"><li><p>初始化</p><p><img src="image-20230930181312137.png" alt="image-20230930181312137" style="zoom:67%;" /></p></li><li><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick C2 C4</span><br></pre></td></tr></table></figure><figure><img src="image-20230930181415507.png" alt="image-20230930181415507" /><figcaption aria-hidden="true">image-20230930181415507</figcaption></figure></li></ol><p>可以看到，把side分支上的C2、C4提交记录直接按命令输入顺序复制到main（当前head所在的分支上）上了。</p><h4 id="交互式rebase">交互式rebase</h4><p>在清楚提交记录名称（C2、C4...）的情况下，使用cherry-pick可以，在未知情的情况下，利用交互式rebase：用带参数<code>--interactive</code> 的 rebase 命令。</p><ul><li>在命令后增加了这个选项, Git 会打开一个 UI界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。</li><li>可以缩写为 <code>-i</code></li></ul><p>UI界面操作：</p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code>的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。遗憾的是由于某种逻辑的原因，我们的课程不支持此功能，因此我不会详细介绍这个操作。简而言之，它允许你把多个提交记录合并成一个。</li></ul><p>案例：</p><ol type="1"><li><p>初始化</p><p><img src="image-20230930182821022.png" alt="image-20230930182821022" style="zoom:67%;" /></p></li><li><p>执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~4</span><br></pre></td></tr></table></figure><p><img src="image-20230930182907601.png" alt="image-20230930182907601" style="zoom: 67%;" /></p></li><li><p>结果（自定义）</p><p><img src="image-20230930182936362.png" alt="image-20230930182936362" style="zoom:67%;" /></p></li></ol><h3 id="只提取一个提交记录">只提取一个提交记录</h3><blockquote><p>开发场景：我正在解决某个特别棘手的Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个Bug 的根本原因。最后就差把 <code>bugFix</code> 分支里的工作合并回<code>main</code> 分支了。你可以选择通过 fast-forward 快速合并到<code>main</code> 分支上，但这样的话 <code>main</code>分支就会包含我这些调试语句了。</p></blockquote><p>更好的解决方法：</p><p>让 Git复制解决问题的那一个提交记录就可以了，把那个提交记录合并到main就可以。命令如下：</p><ul><li><code>git rebase -i</code></li><li><code>git cherry-pick</code></li></ul><h3 id="提交的技巧">提交的技巧</h3><p>开发场景1：你之前在 <code>newImage</code>分支上进行了一次提交，然后又基于它创建了 <code>caption</code>分支，然后又提交了一次。此时你想对某个以前的提交记录进行一些小小的调整。比如设计师想修改一下<code>newImage</code>中图片的分辨率，尽管那个提交记录并不是最新的了。</p><p>使用<code>git rebase -i</code>步骤：</p><ul><li>先用 <code>git rebase -i</code>将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 <code>git commit --amend</code> 来进行一些小修改</li><li>接着再用 <code>git rebase -i</code> 来将他们调回原来的顺序</li><li>最后我们把 main 移到修改的最前端（用你自己喜欢的方法）</li></ul><p>案例1：用 <code>git rebase -i</code></p><ol type="1"><li><p>初始化</p><p><img src="image-20231004175032221.png" alt="image-20231004175032221" style="zoom:67%;" /></p></li><li><p>git rebase -i调整</p><figure><img src="image-20231004175800640.png" alt="image-20231004175800640" /><figcaption aria-hidden="true">image-20231004175800640</figcaption></figure><p>复制两次</p></li><li><p>移动main到caption</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git rebase C3<span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>目标结果</p><p><img src="image-20231004175107960.png" alt="image-20231004175107960" style="zoom: 80%;" /></p></li></ol><p>案例2：使用git cherry-pick</p><ol type="1"><li><p>初始化</p><p><img src="image-20231004180311310.png" alt="image-20231004180311310" style="zoom:67%;" /></p></li><li><p>复制C2、C3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git cherry-pick C2</span><br><span class="line">git checkout c1</span><br><span class="line">git cherry-pick C2 C3</span><br></pre></td></tr></table></figure><figure><img src="image-20231004185159887.png" alt="image-20231004185159887" /><figcaption aria-hidden="true">image-20231004185159887</figcaption></figure></li><li><p>移动main到head</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -f main HEAD</span><br></pre></td></tr></table></figure></li><li><p>目标结果：</p><p><img src="image-20231004180338649.png" alt="image-20231004180338649" style="zoom:67%;" /></p></li></ol><h3 id="git-tag">git tag</h3><p><em>永远</em>指向某个提交记录的标识，比如软件发布新的大版本，或者是修正一些重要的Bug 或是增加了某些新特性。</p><blockquote><p>是提交树上的一个锚点，标识了某个特定的位置。</p></blockquote><p>语法：<code>git tag 名称 提交</code></p><p>案例：</p><ol type="1"><li><p>初始化</p><p><img src="image-20231007231130175.png" alt="image-20231007231130175" style="zoom:67%;" /></p></li><li><p>执行语法：</p><figure><img src="image-20231007232054050.png" alt="image-20231007232054050" /><figcaption aria-hidden="true">image-20231007232054050</figcaption></figure></li><li><p>结果：</p><p><img src="image-20231007232106504.png" alt="image-20231007232106504" style="zoom:80%;" /></p></li></ol><h3 id="git-describe">git Describe</h3><p>Git专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），就是<code>git describe</code></p><ul><li><code>git bisect</code>：一个查找产生 Bug 的提交记录的指令</li></ul><p>语法规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git describe &lt;ref&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;ref&gt;</code> 是<strong>任何能被 Git识别成提交记录的引用</strong>，如果你没有指定的话，Git会使用你目前所在的位置（<code>HEAD</code>）</li></ul><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;tag&gt;_&lt;numCommits&gt;_g&lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><code>tag</code> 表示的是离 <code>ref</code> 最近的标签</li><li><code>numCommits</code> 是表示这个 <code>ref</code> 与<code>tag</code> 相差有多少个提交记录</li><li><code>hash</code> 表示的是你所给定的 <code>ref</code>所表示的提交记录哈希值的前几位</li></ul><p>案例：</p><p><img src="image-20231008225829759.png" alt="image-20231008225829759" style="zoom: 80%;" /></p><p><code>git describe main</code> 会输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1_2_gC2</span><br></pre></td></tr></table></figure><p><code>git describe side</code> 会输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2_1_gC4</span><br></pre></td></tr></table></figure><h3 id="多分支rebase">多分支rebase</h3><p>案例：</p><ol type="1"><li><p>初始化</p><p><img src="image-20231009131401336.png" alt="image-20231009131401336" style="zoom:67%;" /></p></li><li><p>命令</p><figure><img src="image-20231009131329216.png" alt="image-20231009131329216" /><figcaption aria-hidden="true">image-20231009131329216</figcaption></figure><p>简洁版</p><figure><img src="image-20231009132036143.png" alt="image-20231009132036143" /><figcaption aria-hidden="true">image-20231009132036143</figcaption></figure></li><li><p>结果</p><p><img src="image-20231009131256122.png" alt="image-20231009131256122" style="zoom:67%;" /></p></li></ol><h3 id="选择parent提交记录">选择parent提交记录</h3><p>案例1：</p><p><img src="image-20231010131119309.png" alt="image-20231010131119309" style="zoom: 80%;" /></p><p>执行代码1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout main^</span><br></pre></td></tr></table></figure><p><img src="image-20231010131812799.png" alt="image-20231010131812799" style="zoom:67%;" /></p><p>执行代码2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout main^2</span><br></pre></td></tr></table></figure><p><img src="image-20231010132028173.png" alt="image-20231010132028173" style="zoom:67%;" /></p><p>用 <code>^</code> 和 <code>~</code> 可以自由地在提交树中移动：</p><p><img src="image-20231010132208452.png" alt="image-20231010132208452" style="zoom:67%;" /></p><p>git checkout HEAD~;</p><p>git checkout HEAD^2;</p><p>git checkout HEAD~2;</p><p>以上三段代码缩减为：git checkout HEAD<sub>^2</sub>2</p><p><img src="image-20231010132153825.png" alt="image-20231010132153825" style="zoom:67%;" /></p><h3 id="分支提交分发">分支提交分发</h3><p>案例：</p><p><code>main</code> 分支是比 <code>one</code>、<code>two</code> 和<code>three</code> 要多几个提交。出于某种原因，我们需要把<code>main</code>分支上最近的几次提交做不同的调整后，分别添加到各个的分支上。</p><p><code>one</code> 需要重新排序并删除 <code>C5</code>，<code>two</code>仅需要重排排序，而 <code>three</code> 只需要提交一次。</p><ol type="1"><li><p>初始化</p><p><img src="image-20231011124801130.png" alt="image-20231011124801130" style="zoom:67%;" /></p></li><li><p>执行代码</p><figure><img src="image-20231011131018723.png" alt="image-20231011131018723" /><figcaption aria-hidden="true">image-20231011131018723</figcaption></figure></li><li><p>结果</p><p><img src="image-20231011124816572.png" alt="image-20231011124816572" style="zoom:67%;" /></p></li></ol><h2 id="git远程仓库">git远程仓库</h2><h3 id="git-clone">git clone</h3><h3 id="远程分支">远程分支</h3><p><code>git clone</code>后，本地仓库多了一个名为 <code>o/main</code>的分支, 这种类型的分支就叫<strong>远程</strong>分支。</p><p>远程分支反映了远程仓库(在你上次和它通信时)的<strong>状态</strong>。这会有助于你理解本地的工作与公共工作的差别—— 这是你与别人分享工作成果前至关重要的一步.</p><ul><li>远程分支有一个特别的属性，在你切换到远程分支时，<strong>自动进入分离HEAD 状态</strong>。</li></ul><p><code>o/</code>的含义：</p><p>远程分支有一个命名规范 —— 它们的格式是:</p><ul><li><code>&lt;remote name&gt;/&lt;branch name&gt;</code></li></ul><p>o就代表远程分支名字标识：</p><ul><li>大多数的开发人员会将它们主要的远程仓库命名为<code>origin</code>，并不是 <code>o</code>。这是因为当你用<code>git clone</code> 某个仓库时，Git 已经帮你把远程仓库的名称设置为<code>origin</code> 了</li></ul><p>案例：</p><p>初始化：</p><p><img src="image-20231012131127515.png" alt="image-20231012131127515" style="zoom:67%;" /></p><p>main分支提交一次：</p><p>o/main分支提交一次：</p><figure><img src="image-20231012131530907.png" alt="image-20231012131530907" /><figcaption aria-hidden="true">image-20231012131530907</figcaption></figure><p>结果：</p><p><img src="image-20231012131436492.png" alt="image-20231012131436492" style="zoom:67%;" /></p><h3 id="git-fetch">git fetch</h3><p>作用：从远程仓库中获取数据，并且远程分支也会更新并反映最新的远程仓库。</p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新远程分支指针(如 <code>o/main</code>)</li><li>该命令不会改变本地仓库的任何东西</li></ul><blockquote><p>通过互联网（使用 <code>http://</code> 或 <code>git://</code> 协议)与远程仓库通信。</p></blockquote><h4 id="参数">参数</h4><p>抓取特定分支到本地远程分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin foo</span><br></pre></td></tr></table></figure><p>Git 会到远程仓库的 <code>foo</code>分支上，然后获取所有本地不存在的提交，放到本地的 <code>o/foo</code>上。</p><p>抓取特定分支到本地分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin &lt;<span class="built_in">source</span>&gt;:&lt;destination&gt;</span><br></pre></td></tr></table></figure><ul><li><code>source</code>现在指的是远程仓库中的位置，如果不指定，会在本地创建一个分支destination</li><li><code>&lt;destination&gt;</code>才是要放置提交的本地仓库的位置。</li></ul><h4 id="案例">案例</h4><p>1、不带参数</p><ol type="1"><li><p>初始化</p><p>左本地、右远程</p></li></ol><p><img src="image-20231014152429027.png" alt="image-20231014152429027" style="zoom: 67%;" /></p><ol start="2" type="1"><li><p>使用命令 git fetch</p><p><img src="image-20231014152523450.png" alt="image-20231014152523450" style="zoom:67%;" /></p><p>C2、C3已被下载到本地仓库，远程分支o/main移动到最新提交记录</p></li></ol><p>2、抓取远程特定分支的提交，但不更新本地分支</p><ol type="1"><li>初始化</li></ol><p><img src="image-20231026114018903.png" alt="image-20231026114018903" style="zoom:67%;" /></p><ol start="2" type="1"><li><p>执行： <code>git fetch origin foo</code></p><p><img src="image-20231026114357313.png" alt="image-20231026114357313" style="zoom:67%;" /></p></li></ol><p>3、抓取远程分支到本地分支，更新本地分支</p><ol type="1"><li><p>初始化</p><p><img src="image-20231026130209205.png" alt="image-20231026130209205" style="zoom:67%;" /></p></li><li><p>执行命令：<code>fit fetch origin foo~1:bar</code></p><p><img src="image-20231026130534290.png" alt="image-20231026130534290" style="zoom:67%;" /></p></li></ol><ul><li>即使本地没有bar分支，git也会自动创建一个分支出来</li></ul><h3 id="git-pull">git pull</h3><p>先抓取更新再合并，是基本常用操作，相当于<code>git fetch + git merge</code></p><p>合并为一个命令：<code>git pull</code></p><h4 id="参数-1">参数</h4><p><code>git pull origin foo</code> 相当于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin foo; git merge o/foo</span><br></pre></td></tr></table></figure><p><code>git pull origin bar~1:bugFix</code> 相当于：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin bar~1:bugFix; git merge bugFix</span><br></pre></td></tr></table></figure><h4 id="案例-1">案例</h4><p>1、不带参数</p><ol type="1"><li><p>初始化</p><p>左本地、右远程</p><p><img src="image-20231015125528962.png" alt="image-20231015125528962" style="zoom:67%;" /></p></li><li><p>执行git pull</p></li><li><p>本地分支结果：</p><p><img src="image-20231015125629419.png" alt="image-20231015125629419" style="zoom:67%;" /></p></li></ol><p>2、带有参数</p><ol type="1"><li><p>初始化</p><p><img src="image-20231026142851130.png" alt="image-20231026142851130" style="zoom:67%;" /></p></li><li><p>执行命令：<code>git pull origin main:foo</code></p><p><img src="image-20231026142931565.png" alt="image-20231026142931565" style="zoom:67%;" /></p></li></ol><ul><li>它先在本地创建了一个叫 <code>foo</code> 的分支，从远程仓库中的 main分支中下载提交记录，并合并到 <code>foo</code>，然后再 merge到我们的当前所在的分支 <code>bar</code> 上。</li></ul><h3 id="git-push">git push</h3><p><code>git push</code>负责将<strong>你的</strong>变更上传到指定的远程仓库，并在远程仓库上合并你的新提交记录。一旦<code>git push</code> 完成,你的朋友们就可以从这个远程仓库下载你分享的成果了。</p><blockquote><p><em>注意 —— <code>git push</code> 不带任何参数时的行为与 Git的一个名为 <code>push.default</code>的配置有关。它的默认值取决于你正使用的 Git的版本，但是在教程中我们使用的是 <code>upstream</code>。这没什么太大的影响，但是在你的项目中进行推送之前，最好检查一下这个配置。</em></p></blockquote><h4 id="参数-2">参数</h4><p>未指定参数时的行为： Git 是通过当前所在分支的属性来确定远程仓库以及要push 的目的地的。</p><p>带有参数：<code>git push &lt;remote&gt; &lt;place&gt;</code></p><ul><li>remote：远程仓库名</li><li>place：告诉git提交记录来自本地的哪个分支，要推送到远程的哪个分支下。</li></ul><p>如果要同时指定本地分支和远程其它分支，命令如下：</p><p><code>git push origin &lt;source&gt;:&lt;destination&gt;</code></p><ul><li>source：可以是任何git能识别的位置，如果没有source，那就会把本地和远程的destination分支一并删除</li></ul><h4 id="案例-2">案例</h4><p>1、普通提交</p><ol type="1"><li><p>初始化</p><p><img src="image-20231016191844111.png" alt="image-20231016191844111" style="zoom:67%;" /></p></li><li><p>执行 git push</p><p><img src="image-20231016191921287.png" alt="image-20231016191921287" style="zoom:67%;" /></p><ul><li>本地分支的C2被远程分支接收，远程分支的main分支移动到C2，同时本地的o/main远程分支也会移动到C2.</li></ul></li></ol><p>2、指定远程分支、本地起始位置提交</p><ol type="1"><li><p>初始化</p><p><img src="image-20231026112610484.png" alt="image-20231026112610484" style="zoom:67%;" /></p></li><li><p>执行命令：<code>git push origin foo^:main</code></p><p><img src="image-20231026112653938.png" alt="image-20231026112653938" style="zoom:67%;" /></p></li></ol><p>3、指定不存在的远程分支提交</p><ol type="1"><li><p>初始化</p><p><img src="image-20231026112833724.png" alt="image-20231026112833724" style="zoom:67%;" /></p></li><li><p>执行命令：<code>git push origin main:newBranch</code></p><p><img src="image-20231026112847598.png" alt="image-20231026112847598" style="zoom:67%;" /></p></li><li></li></ol><h3 id="偏离的提交历史">偏离的提交历史</h3><h4 id="情景描述">情景描述</h4><p>假设你周一克隆了一个仓库，然后开始研发某个新功能。到周五时，你新功能开发测试完毕，可以发布了。但是，<strong>你的同事这周写了一堆代码，还改了许多你的功能中使用的API，这些变动会导致你新开发的功能变得不可用。但是他们已经将那些提交推送到远程仓库</strong>了，因此你的工作就变成了基于项目<strong>旧版</strong>的代码，与远程仓库最新的代码不匹配了。</p><p>这种情况下, <code>git push</code> 就不知道该如何操作了。如果你执行<code>git push</code>，Git应该让远程仓库回到星期一那天的状态吗？还是直接在新代码的基础上添加你的代码，亦或由于你的提交已经过时而直接忽略你的提交？</p><p>因为这情况（历史偏离）有许多的不确定性，Git 是不会允许你<code>push</code>变更的。实际上它会强制你先合并远程最新的代码，然后才能分享你的工作。</p><p><img src="image-20231016192805874.png" alt="无法push的情况" style="zoom: 67%;" /></p><p>这种情况就无法push。</p><h4 id="解决">解决</h4><p>1、在push之前rebase：</p><p>对上图执行：</p><ol type="1"><li><p>git fetch</p><p><img src="image-20231016193112280.png" alt="1" style="zoom: 67%;" /></p></li><li><p>git rebase o/main</p><p><img src="image-20231016193215680.png" alt="image-20231016193215680" style="zoom: 67%;" /></p></li><li><p>git push</p><p><img src="image-20231016193255128.png" alt="image-20231016193255128" style="zoom:67%;" /></p></li></ol><p>命令简写：<code>git pull --rebase  git push ;</code></p><p>2、利用merge</p><p>对上图执行：</p><ol type="1"><li><p>git fetch</p><p><img src="image-20231016194113291.png" alt="image-20231016194113291" style="zoom: 67%;" /></p></li><li><p>git merge o/main</p><p><img src="image-20231016194138506.png" alt="image-20231016194138506" style="zoom:67%;" /></p></li><li><p>git push</p><p><img src="image-20231016194204792.png" alt="image-20231016194204792" style="zoom:67%;" /></p></li></ol><h3 id="锁定mainpull-request">锁定main——Pull Request</h3><p>远程服务器拒绝：</p><p>如果你是在一个大的合作团队中工作, 很可能是main被锁定了, 需要一些PullRequest流程来合并修改。如果你直接提交(commit)到本地main,然后试图推送(push)修改, 你将会收到这样类似的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! [远程服务器拒绝] main -&gt; main (TF402455: 不允许推送(push)这个分支; 你必须使用pull request来更新这个分支.)</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>新建一个分支feature, 推送到远程服务器. 然后resetmain分支和远程服务器保持一致,否则下次你pull并且他人的提交和你冲突的时候就会有问题.</p><p>案例：</p><ol type="1"><li>初始化</li></ol><p><img src="image-20231019120859987.png" alt="image-20231019120859987" style="zoom:80%;" /></p><ol start="2" type="1"><li><p>执行：</p><p>git reset --hard o/main</p><p><img src="image-20231019125155533.png" alt="image-20231019125155533" style="zoom:80%;" /></p><p>git checkout -b feature C2</p><p><img src="image-20231019130605870.png" alt="image-20231019130605870" style="zoom:80%;" /></p><p>git push origin feature</p><p><img src="image-20231019130645025.png" alt="image-20231019130645025" style="zoom:80%;" /></p></li></ol><h2 id="git远程高级操作">git远程高级操作</h2><h3 id="远程追踪">远程追踪</h3><p><code>main</code> 和 <code>o/main</code>的关联关系就是由分支的“<code>remote tracking</code>”属性决定的。<code>main</code>被设定为跟踪 <code>o/main</code> —— 这意味着为 <code>main</code>分支指定了推送的目的地以及拉取后合并的目标。</p><p>好吧, 当你克隆仓库的时候, Git就自动帮你把main分支的这个属性设置好了。当你克隆时, Git会为远程仓库中的每个分支在本地仓库中创建一个远程分支（比如<code>o/main</code>）。然后再创建一个跟踪远程仓库中活动分支的本地分支，默认情况下这个本地分支会被命名为<code>main</code>。</p><p>克隆完成后，你会得到一个本地分支（如果没有这个本地分支的话，你的目录就是“空白”的），但是可以查看远程仓库中所有的分支（如果你好奇心很强的话）。这样做对于本地仓库和远程仓库来说，都是最佳选择。</p><p>这也解释了为什么会在克隆的时候会看到下面的输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local branch &quot;main&quot; set to track remote branch &quot;o/main&quot;</span><br></pre></td></tr></table></figure><p>自定义属性：</p><p>1、通过远程分支切换到一个新的分支，执行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b totallyNotMain o/main</span><br></pre></td></tr></table></figure><ul><li>创建一个名为 <code>totallyNotMain</code> 的分支，它跟踪远程分支<code>o/main</code>。</li></ul><p>2、使用分支命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u o/main foo</span><br></pre></td></tr></table></figure><p>这样 <code>foo</code> 就会跟踪 <code>o/main</code> 了。如果当前就在foo 分支上, 还可以省略 foo：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -u o/main</span><br></pre></td></tr></table></figure><h4 id="案例-3">案例</h4><p>1、初始化</p><p><img src="image-20231024142941742.png" alt="image-20231024142941742" style="zoom:67%;" /></p><p>2、创建新追踪，提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b side o/main</span><br></pre></td></tr></table></figure><p><img src="image-20231024143848841.png" alt="image-20231024143848841" style="zoom:67%;" /></p><p>3、提交、修复偏离提交历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line"></span><br><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure><p><img src="image-20231024144247076.png" alt="image-20231024144247076" style="zoom:67%;" /></p><p>4、提交</p><p><img src="image-20231024144315511.png" alt="image-20231024144315511" style="zoom:67%;" /></p><h1 id="实践">实践</h1><p><a href="https://learngitbranching.js.org/?locale=zh_CN">Learn GitBranching</a></p><p>最后一章节</p><h2 id="推送主分支">推送主分支</h2><p>在大型项目中开发人员通常会在（从 <code>main</code>上分出来的）特性分支上工作，工作完成后只做一次集成。这跟前面课程的描述很相像（把side 分支推送到远程仓库），不过本节我们会深入一些.</p><p>但是有些开发人员只在 main 上做 push、pull —— 这样的话 main总是最新的，始终与远程分支 (o/main) 保持一致。</p><p>对于接下来这个工作流，我们集成了两个步骤：</p><ul><li>将特性分支集成到 <code>main</code> 上</li><li>推送并更新远程分支</li></ul><p>1、初始化</p><p><img src="image-20231022143618243.png" alt="image-20231022143618243" style="zoom:67%;" /></p><p>2、执行命令</p><ol type="1"><li><p>先拿到远程最新的提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br></pre></td></tr></table></figure></li><li><p>合并side1到远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase o/main side1</span><br></pre></td></tr></table></figure><p><img src="image-20231022144424900.png" alt="image-20231022144424900" style="zoom:67%;" /></p></li><li><p>合并side2到side1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase side1 side2</span><br></pre></td></tr></table></figure><p><img src="image-20231022144442911.png" alt="image-20231022144442911" style="zoom:67%;" /></p></li><li><p>合并side3到side2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase side2 side3</span><br></pre></td></tr></table></figure><p><img src="image-20231022144505996.png" alt="image-20231022144505996" style="zoom:67%;" /></p></li><li><p>main分支合并过来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase side3 main</span><br></pre></td></tr></table></figure><p><img src="image-20231022144955962.png" alt="image-20231022144955962" style="zoom:67%;" /></p></li><li><p>git push提交</p><p><img src="image-20231022145027210.png" alt="image-20231022145027210" style="zoom:67%;" /></p></li></ol><h2 id="合并远程仓库">合并远程仓库</h2><p>1、初始化</p><p><img src="image-20231023131945515.png" alt="image-20231023131945515" style="zoom:67%;" /></p><p>2、命令</p><ul><li>自拟版本：</li></ul><p><img src="image-20231023132542392.png" alt="image-20231023132542392" style="zoom:67%;" /></p><ul><li><p>简洁版本：</p><figure><img src="image-20231023132746822.png" alt="image-20231023132746822" /><figcaption aria-hidden="true">image-20231023132746822</figcaption></figure></li></ul><p>3、最终结果</p><p><img src="image-20231023132608987.png" alt="image-20231023132608987" style="zoom:67%;" /></p><h2 id="绑定本地和远程分支">绑定本地和远程分支</h2><p>注意要有SSH认证。</p><p>本地库执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@&lt;你的用户名&gt;/&lt;仓库名&gt;.git</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;git核心概念&quot;&gt;git核心概念&lt;/h1&gt;
&lt;h2 id=&quot;版本控制&quot;&gt;版本控制&lt;/h2&gt;
&lt;p&gt;版本控制是一种&lt;strong&gt;记录文件内容变化，以便查阅特定版本修订情况&lt;/strong&gt;的系统。&lt;/p&gt;
&lt;p&gt;作用：方便回溯版本。&lt;/p&gt;
&lt;h3 id=</summary>
      
    
    
    
    <category term="开发工具" scheme="https://vlsmhd.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    <category term="git" scheme="https://vlsmhd.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/git/"/>
    
    
  </entry>
  
  <entry>
    <title>图解系统学习笔记</title>
    <link href="https://vlsmhd.github.io/2023/09/21/%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://vlsmhd.github.io/2023/09/21/%E5%9B%BE%E8%A7%A3%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-09-21T09:23:59.557Z</published>
    <updated>2023-12-05T14:29:34.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="硬件结构">硬件结构</h1><h1 id="操作系统结构">操作系统结构</h1><h2 id="内核">内核</h2><p>内核的概念：应用程序和外部硬件设备交互的桥梁。</p><p><img src="图解系统学习笔记/Kernel_Layout.png" alt="内核" style="zoom: 33%;"></p><p>内核的作用：</p><ul><li>进程、线程管理：</li><li>内存管理：</li><li>硬件设施管理：</li><li>内核调用：应用程序需要更高权限运行的服务，必须要有内核调用，是用户程序与操作系统之间的接口</li></ul><p>内核的工作流程</p><p>大多数的操作系统，内存会有俩区域：</p><ul><li>内核空间，这个内存空间只有内核程序可以访问；</li><li>用户空间，这个内存空间专门给应用程序使用；</li></ul><p>系统调用过程：</p><p><img src="图解系统学习笔记/systemcall.png" alt="img" style="zoom:67%;"></p><ul><li>第一次中断：中断用户程序</li><li>第二次中断：中断内核程序</li></ul><h2 id="linux设计">linux设计</h2><p>设计理念：</p><ul><li><em>MultiTask</em>，多任务</li><li><em>SMP</em>，对称多处理</li><li><em>ELF</em>，可执行文件链接格式</li><li><em>Monolithic Kernel</em>，宏内核</li></ul><h3 id="multitask">MultiTask</h3><p>多任务机制：</p><ul><li>单CPU并发</li><li>多CPU并行</li></ul><h3 id="smp">SMP</h3><p><strong>对称多处理</strong>，每个CPU的权重低位是相同的，对资源的使用权限相同。</p><p>每个CPU都共享整个内存空间。</p><h3 id="elf">ELF</h3><p>定义：可执行文件链接格式</p><p>结构：</p><p><img src="图解系统学习笔记/Elf.png" alt="ELF 文件格式" style="zoom: 33%;"></p><p>ELF文件的生成：</p><p>编写的代码，首先通过「<strong>编译器</strong>」编译成汇编代码，接着通过「<strong>汇编器</strong>」变成目标代码，也就是目标文件，最后通过「<strong>链接器</strong>」把多个目标文件以及调用的各种函数库链接起来，形成一个可执行文件，也就是ELF 文件。</p><p>ELF文件的执行：</p><p>利用<strong>装载器</strong>把ELF文件装载到内存中，CPU读取内存中的指令和数据，于是程序就被执行起来了。</p><h3 id="monolithic-kernel">Monolithic Kernel</h3><p>Monolithic Kernel 的意思是<strong>宏内核</strong>，Linux内核架构就是宏内核，</p><figure><img src="图解系统学习笔记/OS-structure2.png" alt="分别为宏内核、微内核、混合内核的操作系统结构"><figcaption aria-hidden="true">分别为宏内核、微内核、混合内核的操作系统结构</figcaption></figure><h2 id="windows设计">windows设计</h2><p>Windows NT 的结构图片：</p><p><img src="图解系统学习笔记/windowNT.png" alt="Windows NT 的结构" style="zoom:50%;"></p><p>windows可执行文件：</p><p>可执行文件格式叫PE，称为<strong>可移植执行文件</strong>，扩展名通常是<code>.exe</code>、<code>.dll</code>、<code>.sys</code>等。</p><p>PE结构：</p><p><img src="图解系统学习笔记/pe.png" alt="PE 文件结构" style="zoom:80%;"></p><h1 id="内存管理">内存管理</h1><h2 id="虚拟内存">虚拟内存</h2><p>单片机：一次性只能烧录一个程序运行，<strong>无法运行多个程序</strong>。</p><p>操作系统利用虚拟内存解决多程序运行的问题：</p><p>内存隔离：把进程所使用的地址隔离开，让每个进程都<strong>拥有自己的内存地址</strong>——虚拟内存</p><p>内存映射：把虚拟内存和真实物理内存一 一映射</p><ul><li>虚拟内存地址</li><li>物理内存地址</li></ul><p>转换过程：</p><p><img src="图解系统学习笔记/72ab76ba697e470b8ceb14d5fc5688d9.png" alt="img" style="zoom:50%;"></p><p>管理虚存地址和物理内存地址的方式：内存分段、内存分页、段页混合式管理。</p><h2 id="内存分段">内存分段</h2><p>程序由多个段组成：</p><ul><li>代码段</li><li>数据分段</li><li>栈段</li><li>堆段</li></ul><p>采用分段，将以上的段分离</p><p><strong>分段机制下，虚拟——&gt;真实地址的映射</strong></p><p>虚拟地址的组成：</p><ul><li>段选择因子：保存在<strong>段寄存器</strong>里。其中包含：<ul><li>段号：段表的索引</li><li>标志位等</li></ul></li><li>段内偏移量：位于 0 和段界限之间</li></ul><p><img src="图解系统学习笔记/a9ed979e2ed8414f9828767592aadc21.png" alt="img" style="zoom: 50%;"></p><p>CPU解析虚拟地址，通过段选择因子获取段表索引，查找到对应段的段内描述符，获取段内描述符里的段基地址，配合段内偏移量找到对应的物理地址。</p><ul><li>段表：<ul><li>段内描述符<ul><li>段基地址：段的起始地址（低地址）</li><li>段界限</li><li>DPL</li></ul></li></ul></li></ul><p>程序分段示意图：</p><p><img src="图解系统学习笔记/c5e2ab63e6ee4c8db575f3c7c9c85962.png" alt="程序分段示意图" style="zoom:67%;"></p><p>分段的缺陷：内存碎片、内存交换效率低</p><p><strong>内存碎片</strong></p><p>分类：</p><ul><li>内部碎片</li><li>外部碎片</li></ul><p><img src="图解系统学习笔记/6142bc3c917e4a6298bdb62936e0d332.png" alt="img" style="zoom:50%;"></p><p>分段不会产生内部碎片，因为段根据实际需要分配内存。但是多个段之间会产生外部碎片，导致其它程序无法运行。</p><p><strong>交换效率低</strong></p><p>有外部内存碎片，就要重新swap内存区域，swap是内存和磁盘进行交互，由于磁盘IO速度过慢，而每一次内存交换，我们都需要把一大段连续的内存数据写到硬盘上，所以显得效率很慢。</p><h2 id="内存分页">内存分页</h2><p>分页，就是把虚拟空间和物理空间都切成一段段大小相同的内存块。通过<strong>页表</strong>来映射。</p><p><img src="图解系统学习笔记/08a8e315fedc4a858060db5cb4a654af.png" alt="img" style="zoom:50%;"></p><ul><li><p>页表存储在内存，通过MMU（内存管理单元）</p></li><li><p>缺页异常：虚拟地址在页表中查不到</p></li></ul><p><strong>分页机制下，虚拟——&gt;真实地址的映射</strong></p><p>虚拟地址组成：</p><ul><li>页号</li><li>页内偏移量</li></ul><p>页表项组成：</p><ul><li>虚拟页号</li><li>物理页号</li></ul><p><img src="图解系统学习笔记/7884f4d8db4949f7a5bb4bbd0f452609.png" alt="img" style="zoom:50%;"></p><p>分页解决内存外部碎片问题，但是出现内部碎片问题：</p><p>页与页之间紧密排列，不会出现外部碎片，但是由于每页大小固定，但是进程占多少页不清楚，而<strong>内存分配的最小单位是页</strong>，有可能进程的某部分只占了一页的一小部分大小，这时候这个页也会被标记已经使用，从而浪费掉一段空间。这浪费掉的一段空间就叫内部碎片。</p><p>分页提高内存交换效率：</p><p>内存空间不够的时候，操作系统会把正在运行的进程<strong>最近最少使用</strong>的页，给<strong>换出</strong>（swapout）到磁盘中，等待需要的时候再<strong>换入</strong>（swapin）内存。</p><p><img src="图解系统学习笔记/388a29f45fe947e5a49240e4eff13538-20230309234651917.png" alt="img" style="zoom: 40%;"></p><p>分页的最大优点就是：加载程序的时候，没必要一次性把程序都加载到物理内存，而是通过虚存的页映射到物理内存的页的时候，根据当前的需要加载特定的页即可。</p><p>缺陷：</p><ul><li><p>内部碎片</p></li><li><p>存储页表项需要耗费大量空间</p><p>在 32 位的环境下，虚拟地址空间共有 4GB，假设一个页的大小是4KB（2^12），那么就需要大约 100 万 （2^20） 个页，每个「页表项」需要 4个字节大小来存储，那么整个 4GB 空间的映射就需要有 <code>4MB</code>的内存来存储页表。这 4MB大小的页表，看起来也不是很大。但是要知道每个进程都是有自己的虚拟地址空间的，也就说都有自己的页表。</p><p>那么，<code>100</code> 个进程的话，就需要 <code>400MB</code>的内存来存储页表，这是非常大的内存了，更别说 64 位的环境了。</p></li></ul><h3 id="多级页表">多级页表</h3><p>在32位系统、页大小4KB、页表项4B的情况下，一个进程的页表需要装下 100多万个「页表项」，并且每个页表项是占用 4字节大小的，于是相当于每个页表需占用 4MB大小的空间，对这些页表项进行二级分页处理：</p><p><img src="图解系统学习笔记/19296e249b2240c29f9c52be70f611d5.png" alt="img" style="zoom: 50%;"></p><p>为什么二级页表会减少空间消耗？</p><p>假如一个进程需要4GB的内存空间，如果全部映射到物理内存，那二级页表占用空间&gt;一级页表，但是实际上程序执行的时候操作系统不会为该进程分配全部内存。</p><p>局部性原理来解释：</p><p>每个进程都有 4GB的虚拟地址空间，而显然对于大多数程序来说，其使用到的空间远未达到4GB，因为会存在部分对应的页表项都是空的，根本没有分配，对于已分配的页表项，如果存在最近一定时间未访问的页表，在物理内存紧张的情况下，操作系统会将页面换出到硬盘，也就是说不会占用物理内存。</p><p>如果使用了二级分页，一级页表就可以覆盖整个 4GB虚拟地址空间，但<strong>如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表</strong>。</p><ul><li>假设只有 20% 的一级页表项被用到了，那么页表占用的内存空间就只有4KB（一级页表） + 20% * 4MB（二级页表）=<code>0.804MB</code>，这对比单级页表的 <code>4MB</code> 小得多</li></ul><p>64位系统的分页：</p><ul><li>全局页目录项 PGD（<em>Page Global Directory</em>）；</li><li>上层页目录项 PUD（<em>Page Upper Directory</em>）；</li><li>中间页目录项 PMD（<em>Page Middle Directory</em>）；</li><li>页表项 PTE（<em>Page Table Entry</em>）；</li></ul><p><img src="图解系统学习笔记/四级分页.png" alt="img" style="zoom: 33%;"></p><h3 id="tlb">TLB</h3><p>程序是有局部性的，即<strong>在一段时间内，整个程序的执行仅限于程序中的某一部分</strong>。相应地，执行所访问的存储空间也局限于某个内存区域。</p><p><img src="图解系统学习笔记/edce58534d9342ff89f5261b1929c754.png" alt="局部性原理" style="zoom:50%;"></p><p>把这些热点页进行缓存，无疑是提高效率的良好途径。于是CPU中添加了缓存：TLB（<em>TranslationLookaside Buffer</em>） ，通常称为页表缓存、转址旁路缓存、快表等。</p><p><img src="图解系统学习笔记/a3cdf27646b24614a64cfc5d7ccffa35.png" alt="CPU与TLB的结构关系" style="zoom:67%;"></p><h2 id="段页式内存管理">段页式内存管理</h2><p>实现方式：</p><ol type="1"><li>把程序分成多个段：代码段、栈段...</li><li>把每个段分成多个页</li></ol><p>虚拟地址结构：</p><ul><li>段号</li><li>页号</li><li>页内偏移量</li></ul><p><img src="图解系统学习笔记/8904fb89ae0c49c4b0f2f7b5a0a7b099.png" alt="段页式虚存物存映射" style="zoom:50%;"></p><h2 id="内存达到上限的处理">内存达到上限的处理</h2><h3 id="内存分配的过程">内存分配的过程</h3><ol type="1"><li><p>malloc分配：申请虚拟内存，此时并没有分配物理内存</p></li><li><p>缺页中断：应用程序访问这片内存，发现没有映射到物理内存，CPU产生缺页中断，进程从用户态变为内核态，并将缺页中断交给内核的Page Fault Handler （缺页中断函数）处理。</p></li><li><p>缺页函数判断有无空闲空间，进行分配，如果没有空闲空间，进行<strong>内存回收</strong></p></li></ol><p>内存回收：</p><ul><li>后台内存回收：唤醒kswapd内核线程来<strong>异步</strong>的回收内存。</li><li>直接内存回收：假如后台回收的速度赶不上进程申请内存的速度，会将进程阻塞，转而同步回收内存。</li></ul><p>OOM机制：</p><p>触发条件：如果内存回收后依旧没有足够的内存分配给进程，则触发该机制。</p><p>作用：OOM Killer机制会根据算法选择一个占用物理内存较高的进程，杀死该进程，（循环进行），直到有足够空间分配</p><p>流程：</p><p><img src="图解系统学习笔记/2f61b0822b3c4a359f99770231981b07.png" alt="img" style="zoom:50%;"></p><h3 id="可以被回收的内存">可以被回收的内存</h3><p><strong>文件页：</strong></p><ul><li>内核缓存的磁盘、文件数据，这些都属于干净页，可以直接释放。</li><li>被应用程序修改过，并且暂时还没写入磁盘的数据（也就是脏页），还需要先写入磁盘，才能释放内存</li></ul><p><strong>匿名页：</strong></p><p>没有实际载体的数据，例如：堆栈数据等</p><p>回收方式：Linux的Swap机制</p><p>LRU回收算法：</p><p>LRU维护的队列：</p><ul><li><strong>active_list</strong>活跃内存页链表，这里存放的是最近被访问过（活跃）的内存页；</li><li><strong>inactive_list</strong>不活跃内存页链表，这里存放的是很少被访问（非活跃）的内存页；</li></ul><p>越接近链表尾部，就表示内存页越不常访问。这样，在回收内存时，系统就可以根据活跃程度，优先回收不活跃的内存。</p><p>回收影响：</p><p>动用磁盘IO，影响机器性能。</p><h4 id="降低内存回收带来的性能影响">降低内存回收带来的性能影响</h4><h5 id="调整文件页和匿名页的回收倾向">调整文件页和匿名页的回收倾向</h5><p>文件页中，干净页直接回收，效率高于脏页。一般只要动用linux的swap机制，就会触发IO</p><p>Linux 提供了一个 <code>/proc/sys/vm/swappiness</code>选项，用来调整文件页和匿名页的回收倾向。</p><p><code>swappiness</code> 的范围是 0-100，数值越大，越积极使用Swap，也就是更倾向于回收匿名页；数值越小，越消极使用Swap，也就是更倾向于回收文件页。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@xiaolin ~]# cat /proc/sys/vm/swappiness</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>一般建议 swappiness 设置为 0（默认值是60），这样在回收内存的时候，会更倾向于文件页的回收，但是并不代表不会回收匿名页。</p><h5 id="尽早触发-kswapd-内核线程异步回收内存">尽早触发 kswapd内核线程异步回收内存</h5><p>内核定义三个内存阈值（watermark，也称为水位），用来衡量当前剩余内存（pages_free）是否充裕或者紧张，分别是：</p><ul><li>页最小阈值（pages_min）；</li><li>页低阈值（pages_low）；</li><li>页高阈值（pages_high）；</li></ul><p>对应四种内存使用情况：</p><p><img src="图解系统学习笔记/166bc9f5b7c545d89f1e36ab8dd772cf.png" alt="img" style="zoom:67%;"></p><p>kswapd会定期扫描内存的使用情况，根据剩余内存（pages_free）的情况来进行内存回收的工作：</p><ul><li>在橙色范围，kswapd 0线程会<strong>异步</strong>进行内存回收</li><li>在红色范围，kswapd 会进行直接内存回收。阻塞进程</li></ul><h5 id="numa-架构下的内存回收策略">NUMA 架构下的内存回收策略</h5><p>CPU的两种架构：</p><h6 id="smp架构">SMP架构</h6><p><img src="图解系统学习笔记/image-20231011171048345.png" alt="image-20231011171048345" style="zoom:80%;"></p><p>多个CPU通过一条总线共享内存资源，CPU地位相同。也被称为一致存储访问结构（UMA，UniformMemory Access）。</p><p>缺陷：总线带宽压力大，CPU越多，每个CPU分得的带宽越少。</p><h6 id="numa架构">NUMA架构</h6><p><img src="图解系统学习笔记/image-20231011171155253.png" alt="image-20231011171155253" style="zoom:80%;"></p><p>分组CPU思想：每组称为Node，有自己独立的内存、总线、IO等，每个 Node之间可以通过<strong>互联模块总线</strong>（QPI）进行通信，</p><p>NUMA回收策略：</p><p>当一个结点的内存不足时，系统可以从其它结点找空闲内存，也可以对自己的内存空间进行释放。</p><p>具体选哪种模式，可以通过 /proc/sys/vm/zone_reclaim_mode来控制。它支持以下几个选项：</p><ul><li>0 （默认值）：在回收本地内存之前，在其他 Node 寻找空闲内存；</li><li>1：只回收本地内存；</li><li>2：只回收本地内存，在本地回收内存时，可以将文件页中的脏页写回硬盘，以回收内存。</li><li>4：只回收本地内存，在本地回收内存时，可以用 swap 方式回收内存。</li></ul><blockquote><p>虽然说访问远端 Node的内存比访问本地内存要耗时很多，但是相比内存回收的危害而言，访问远端Node 的内存带来的性能影响还是比较小的。因此，zone_reclaim_mode一般建议设置为 0。</p></blockquote><h3 id="如何保证进程不被oom杀死">如何保证进程不被OOM杀死</h3><p>linux系统根据<strong>某种标准</strong>杀死进程：</p><p>在 Linux 内核里有一个 <code>oom_badness()</code>函数，它会把系统中可以被杀掉的进程扫描一遍，并对每个进程打分，得分最高的进程就会被首先杀掉。</p><p>影响得分因素：</p><ul><li>进程使用的物理页面数</li><li>每个进程的 OOM 校准值 <code>oom_score_adj</code>。它是可以通过<code>/proc/[pid]/oom_score_adj</code> 来配置的。我们可以在设置 -1000 到1000 之间的任意一个数值，调整进程被 OOM Kill 的几率。</li></ul><p>函数 oom_badness() 里的最终计算方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// points 代表打分的结果</span></span><br><span class="line"><span class="comment">// process_pages 代表进程已经使用的物理内存页面数</span></span><br><span class="line"><span class="comment">// oom_score_adj 代表 OOM 校准值</span></span><br><span class="line"><span class="comment">// totalpages 代表系统总的可用页面数</span></span><br><span class="line">points = process_pages + oom_score_adj*totalpages/<span class="number">1000</span></span><br></pre></td></tr></table></figure><p>不想杀死一个进程，就把校准值降低。</p><blockquote><p>一般来说，我们最好将一些很重要的系统服务的 oom_score_adj 配置为-1000，比如sshd，因为这些系统服务一旦被杀掉，我们就很难再登陆进系统了。</p></blockquote><h1 id="进程管理">进程管理</h1><h2 id="进程">进程</h2><p>编写的代码——&gt; 编译为二进制文件——&gt;CPU执行每一条指令</p><p>正在运行中的程序叫做进程。</p><p>提高CPU利用率：<strong>并发</strong>技术，多程序交替运行。</p><ul><li>只不过由于时间片较短，我们的视角看上去像是每个线程都在运行一样。</li></ul><p><img src="图解系统学习笔记/4-进程交替运行.jpg" alt="进程 1 与进程 2 切换" style="zoom:67%;"></p><p>并发与并行的区别：</p><p><img src="图解系统学习笔记/5-并发与并行.jpg" alt="并发与并行" style="zoom:67%;"></p><h3 id="进程状态">进程状态</h3><p>基础状态：</p><ul><li>运行：CPU为进程分配了时间片执行</li><li>就绪：可运行，<strong>但是其它进程占用了CPU</strong>导致当前进程没有执行</li><li>阻塞：该进程在等待某一事件结束（如磁盘IO），这时即使CPU给它时间片它也不会执行。</li></ul><p><img src="图解系统学习笔记/7-进程三个基本状态.jpg" alt="进程的三种基本状态" style="zoom:67%;"></p><ul><li>创建状态（<em>new</em>）：进程正在被创建时的状态；</li><li>结束状态（<em>Exit</em>）：进程正在从系统中消失时的状态</li></ul><p><img src="图解系统学习笔记/8-进程五个状态.jpg" alt="进程五种状态的变迁" style="zoom: 67%;"></p><p>在有虚拟内存管理的系统，一般把处于阻塞状态的进程所占的内存页给swap到磁盘，节省内存空间。而被换出的进程有一个独立的状态，叫做<strong>挂起状态</strong>，只要是处于挂起状态，那就是在外存里</p><ul><li>阻塞挂起：在外存等待某一事件的发生</li><li>就绪挂起：在外存就绪，进入内存就变成就绪状态</li></ul><p><img src="图解系统学习笔记/image-20231012144137284.png" alt="image-20231012144137284" style="zoom:67%;"></p><h3 id="进程控制结构">进程控制结构</h3><p>进程的描述：由进程控制块PCB（<em>process controlblock</em>）这一数据结构描述。</p><p>PCB信息：</p><ul><li>进程描述信息<ul><li>进程标识符：标识进程的唯一id，pid</li><li>用户标识符：进程所属用户的id</li></ul></li><li>进程控制和管理信息<ul><li>进程当前状态</li><li>进程优先级</li></ul></li><li>资源分配清单<ul><li>内存地址空间、虚拟地址空间、进程所使用的IO设备、所打开文件列表</li></ul></li><li>CPU相关信息<ul><li>CPU各寄存器的值，当进程进行上下文切换时，会告知CPU上次运行到哪了、变量的值等信息</li></ul></li></ul><p>PCB的组织：</p><p>根据状态分配，相同状态的线程串成链表：</p><p><img src="图解系统学习笔记/12-PCB状态链表组织.jpg" alt="就绪队列和阻塞队列" style="zoom:67%;"></p><h3 id="进程的控制">进程的控制</h3><h4 id="创建">创建</h4><p>由于进程由PCB管理：</p><ol type="1"><li>申请空白PCB：并填写相关基本管理信息，比如进程pid等</li><li>分配资源：比如内存资源</li><li>将PCB放入就绪队列，等待运行</li></ol><h4 id="终止">终止</h4><p>终止方式：</p><ul><li>正常执行结束</li><li>异常结束</li><li>外界干扰：如kill指令</li></ul><p>父进程与子进程的终止：当子进程结束后，需要把从父进程继承而来的资源还回去。当父进程结束后，子进程变成孤儿进程，会被一号进程收留。</p><p>终止过程：</p><ol type="1"><li>查找对应进程的PCB</li><li>如果处于执行状态，立即终止，<strong>将CPU资源转让给别的进程</strong></li><li>如果有子进程，将子进程交给1号进程</li><li>将<strong>全部资源</strong>（内存等）归还给操作系统</li><li>将进程的PCB从所在队列移除</li></ol><h4 id="阻塞">阻塞</h4><p>当进程需要等待某一事件完成时，它可以调用<strong>阻塞语句</strong>把自己阻塞等待。</p><ul><li>被阻塞时，只能等待别的进程唤醒</li></ul><ol type="1"><li>找到进程PCB</li><li>如果进程是运行状态，保护现场，记录信息，然后切换为阻塞状态</li><li>将PCB插入到阻塞队列</li></ol><h4 id="唤醒">唤醒</h4><ol type="1"><li>从阻塞队列找到进程PCB</li><li>移除阻塞队列，设置为就绪队列</li><li>把该 PCB 插入到就绪队列中，等待调度程序调度；</li></ol><h3 id="进程上下文切换">进程上下文切换</h3><p>CPU上下文切换：</p><p>系统通常支持＞CPU个数的进程同时运行，但是这个“同时”，只是假象罢了。实际上CPU是通过进程间的不断切换，而且切换的时间间隔很小，我们就觉得进程之间都是并行的。</p><p>每个任务运行前，CPU需要知道任务从哪里加载，又从哪里开始运行，这些借助CPU的<strong>寄存器（CPU缓存）、程序计数器</strong>，也就是<strong>CPU上下文</strong>。</p><p>CPU 上下文切换：</p><ol type="1"><li>先<strong>把前一个任务的 CPU 上下文（CPU寄存器和程序计数器）保存起来</strong></li><li><strong>加载新任务的上下文到这些寄存器和程序计数器</strong></li><li>跳转到程序计数器所指的新位置，运行新任务。</li></ol><p>进程上下文切换：</p><p>用户资源（虚拟内存、栈、全局变量等），内核资源（堆栈、寄存器等）都会切换</p><figure><img src="图解系统学习笔记/13-进程上下文切换.jpg" alt="进程上下文切换"><figcaption aria-hidden="true">进程上下文切换</figcaption></figure><p>进程上下文切换的场景：</p><ul><li>为了保证所有进程可以得到公平调度，CPU时间被划分为一段段的时间片，这些<strong>时间片再被轮流分配</strong>给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；</li><li><strong>进程在系统资源不足（比如内存不足）时</strong>，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；</li><li>当<strong>进程通过睡眠函数 sleep</strong>这样的方法将自己主动挂起时，自然也会重新调度；</li><li>当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；</li><li>发生<strong>硬件中断</strong>时，CPU上的进程会被中断挂起，转而执行内核中的中断服务程序；</li></ul><h2 id="线程">线程</h2><p>进程内的新执行单位，共享进程内存，是进程里的执行流程，</p><p><img src="图解系统学习笔记/16-多线程内存结构.jpg" alt="多线程" style="zoom:67%;"></p><p>线程的优点：</p><ul><li>一个进程中可以同时存在多个线程；</li><li>各个线程之间可以并发执行；</li><li>各个线程之间可以共享地址空间和文件等资源；</li></ul><p>线程的缺点：</p><ul><li>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对C/C++ 语言，Java语言中的线程奔溃不会造成进程崩溃</li></ul><p>线程与进程的比较：</p><table><colgroup><col style="width: 11%"><col style="width: 37%"><col style="width: 50%"></colgroup><thead><tr class="header"><th></th><th>进程</th><th>线程</th></tr></thead><tbody><tr class="odd"><td>单位</td><td>资源分配单位</td><td>CPU调度单位</td></tr><tr class="even"><td>资源拥有量</td><td>完整的资源平台</td><td>只独享必不可少的资源，如寄存器和栈；</td></tr><tr class="odd"><td>状态</td><td>基本状态</td><td>具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</td></tr><tr class="even"><td>创建时间开销</td><td>慢</td><td>快，因为共享进程的资源信息，无需加载</td></tr><tr class="odd"><td>终止时间</td><td>慢</td><td>快，因为线程释放的资源相比进程少很多；</td></tr><tr class="even"><td>上下文切换开销</td><td>要切换页表（每个进程对应一个页表），速度较慢</td><td>因为共享进程内存资源空间，无需切换页表</td></tr></tbody></table><p><strong>线程线程上下文切换：</strong></p><p><strong>线程是调度的基本单位，而进程则是资源拥有的基本单位</strong>。</p><ul><li>当进程仅有一个线程（main），进程 ≈ 线程</li><li>当进程拥有多个线程时，这些线程会共享相同的虚拟内存和全局变量等资源，这些资源在上下文切换时是不需要修改的；</li></ul><h3 id="线程的实现">线程的实现</h3><p>三种线程：</p><ul><li>用户线程：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；</li><li>内核线程：在内核中实现的线程，是由内核管理的线程</li><li>轻量级线程：在内核中来支持用户线程；</li></ul><p>用户线程和内核线程的关系：</p><p>一对一：</p><p><img src="图解系统学习笔记/18-内核线程与用户线程-一对一关系.jpg" alt="一对一" style="zoom:50%;"></p><p>多对一：</p><p><img src="图解系统学习笔记/17-内核线程与用户线程-一对多关系.jpg" alt="多对一" style="zoom: 50%;"></p><p>多对多：</p><p><img src="图解系统学习笔记/19-内核线程与用户线程-多对多关系.jpg" alt="多对多" style="zoom:50%;"></p><p><strong>用户线程：</strong></p><p>基于用户态的<strong>线程管理库</strong>来实现的，那么<strong>线程控制块（*ThreadControl Block, TCB*）</strong> 也是在库里面来实现的。</p><p>用户线程的整个调度和管理，只由用户线程库管理（自管理），操作系统不参与</p><p><img src="图解系统学习笔记/20-线程PCB-一对多关系.jpg" alt="用户级线程模型" style="zoom:50%;"></p><p>用户线程的<strong>优点</strong>：</p><ul><li>每个进程都需要有它私有的线程控制块（TCB）列表，用来跟踪记录它各个线程状态信息（PC、栈指针、寄存器），TCB由用户级线程库函数来维护，可用于不支持线程技术的操作系统；</li><li>用户线程的切换也是由线程库函数来完成的，无需用户态与内核态的切换，所以速度特别快；</li></ul><p>用户线程的<strong>缺点</strong>：</p><ul><li>由于操作系统不参与线程的调度，如果一个线程发起了系统调用而阻塞，那进程所包含的用户线程都不能执行了。</li><li>当一个线程开始运行后，除非它主动地交出 CPU的使用权，否则它所在的进程当中的其他线程无法运行，因为用户态的线程没法打断当前运行中的线程，它没有这个特权，只有操作系统才有，但是用户线程不是由操作系统管理的。</li><li>由于时间片分配给进程，故与其他进程比，在多线程执行时，每个线程得到的时间片较少，执行会比较慢；</li></ul><p><strong>内核线程：</strong></p><p><strong>内核线程是由操作系统管理的，线程对应的 TCB自然是放在操作系统里的，这样线程的创建、终止和管理都是由操作系统负责。</strong></p><p>内核线程的模型，也就类似前面提到的<strong>一对一</strong>的关系，即一个用户线程对应一个内核线程，如下图所示：</p><p><img src="图解系统学习笔记/21-线程PCB-一对一关系.jpg" alt="内核线程模型" style="zoom:50%;"></p><p>内核线程的<strong>优点</strong>：</p><ul><li>在一个进程当中，如果某个内核线程发起系统调用而被阻塞，并不会影响其他内核线程的运行；</li><li>分配给线程，多线程的进程获得更多的 CPU 运行时间；</li></ul><p>内核线程的<strong>缺点</strong>：</p><ul><li>在支持内核线程的操作系统中，由内核来维护进程和线程的上下文信息，如PCB 和 TCB；</li><li>线程的创建、终止和切换都是通过系统调用的方式来进行，因此对于系统来说，系统开销比较大；</li></ul><p><strong>轻量级线程</strong></p><p>定义：内核支持的用户级线程，<strong>（Light-weightprocess，LWP）</strong>，进程可以有多个LWP，每个LWP和内核线程一对一映射。</p><p>在 LWP 之上也是可以使用用户线程的，那么 LWP与用户线程的对应关系就有三种：</p><ul><li><code>1 : 1</code>，即一个 LWP 对应 一个用户线程；</li><li><code>N : 1</code>，即一个 LWP 对应多个用户线程；</li><li><code>M : N</code>，即多个 LWP 对应多个用户线程；</li></ul><p>接下来针对上面这三种对应关系说明它们优缺点。先看下图的 LWP 模型：</p><p><img src="图解系统学习笔记/22-LWP.jpg" alt="LWP 模型" style="zoom: 33%;"></p><h3 id="多线程冲突">多线程冲突</h3><h4 id="竞争与协作">竞争与协作</h4><p>CPU执行线程时的并发：</p><p><img src="图解系统学习笔记/3-并发.jpg" alt="并发" style="zoom:50%;"></p><p>并发安全问题：</p><p>假如每个线程都执行以下步骤：</p><p><img src="图解系统学习笔记/8-汇编语句赋值过程.jpg" alt="img" style="zoom: 50%;"></p><p>由于<strong>CPU时钟中断</strong>的存在，这些指令并不是原子操作，导致线程可能执行到第二步就被中断，转而运行另一个线程，于是就发送了<strong>丢失修改</strong>，这一现象。如图：</p><p><img src="图解系统学习笔记/9-汇编语句-赋值过程-竞争.jpg" alt="蓝色表示线程 1 ，红色表示线程 2" style="zoom:50%;"></p><h5 id="互斥">互斥</h5><p>多线程<strong>竞争临界资源</strong>的行为就叫互斥（竞争条件），</p><p>临界区：操作共享变量的代码块</p><ul><li>这段代码不能给多线程运行，也就是要保证<strong>互斥</strong></li></ul><p><img src="图解系统学习笔记/10-临界区.jpg" alt="互斥" style="zoom:50%;"></p><h5 id="同步">同步</h5><p>多线程之间要合作完成某项工作，要保证线程间的执行顺序。</p><h4 id="互斥和同步的实现">互斥和同步的实现</h4><h5 id="锁">锁</h5><p>进入临界区前，必须获得锁才能执行。</p><p>原子指令<strong>Test-and-Set</strong></p><figure><img src="图解系统学习笔记/image-20231013173136692.png" alt="image-20231013173136692"><figcaption aria-hidden="true">image-20231013173136692</figcaption></figure><p>忙等待锁：</p><p>源码：</p><p><img src="图解系统学习笔记/image-20231013173231704.png" alt="image-20231013173231704" style="zoom:67%;"></p><p>锁的工作流程：</p><p>场景一：锁空闲，有一个线程申请锁，调用lock方法，由于锁初值为0，进入到while里0！= 1，于是跳出循环，获得锁</p><p>场景二：锁已经被占用，当一个线程申请锁，此时flag就是1，会一直满足while循环条件，会一直等待锁释放以后获得锁才行。</p><h5 id="信号量">信号量</h5><p>PV操作算法实现：</p><p><img src="图解系统学习笔记/17-操作系统PV算法描述-16973795960521.jpg" alt="PV 操作的算法描述" style="zoom:25%;"></p><h5 id="生产者消费者问题">生产者消费者问题</h5><figure><img src="图解系统学习笔记/20-生产者消费者.jpg" alt="生产者-消费者模型"><figcaption aria-hidden="true">生产者-消费者模型</figcaption></figure><p>问题概述：</p><ul><li><strong>生产者</strong>在生成数据后，放在一个缓冲区中；</li><li><strong>消费者</strong>从缓冲区取出数据处理；</li><li>任何时刻，<strong>只能有一个</strong>生产者或消费者可以访问缓冲区；</li></ul><p>问题剖析：</p><ul><li>缓冲区是临界代码，互斥</li><li>生产者、消费者需要同步操作，</li></ul><p>信号量设置：</p><ul><li>互斥信号量 <code>mutex</code>：用于互斥访问缓冲区，初始化值为1；</li><li>资源信号量<code>fullBuffers</code>：用于消费者询问缓冲区是否有数据，有数据则读取数据，初始化值为0（表明缓冲区一开始为空）；</li><li>资源信号量<code>emptyBuffers</code>：用于生产者询问缓冲区是否有空位，有空位则生成数据，初始化值为n （缓冲区大小）；</li></ul><p><img src="图解系统学习笔记/21-生产者消费者代码示例.jpg" alt="img" style="zoom:25%;"></p><ul><li>规律：操作信号量必须有一对PV操作，不能单独P或者单独V</li></ul><h4 id="经典同步问题">经典同步问题</h4><h5 id="哲学家就餐">哲学家就餐</h5><p><img src="图解系统学习笔记/23-哲学家进餐模型.jpg" alt="哲学家就餐的问题" style="zoom:50%;"></p><p>问题描述：</p><ul><li><code>5</code> 个哲学家，闲着没事做，围绕着一张圆桌吃面；</li><li>巧就巧在，这个桌子只有 <code>5</code>支叉子，每两个哲学家之间放一支叉子；</li><li>哲学家围在一起先思考，思考中途饿了就会想进餐；</li><li><strong>奇葩的是，这些哲学家要两支叉子才愿意吃面，也就是需要拿到左右两边的叉子才进餐</strong>；</li><li><strong>吃完后，会把两支叉子放回原处，继续思考</strong>；</li></ul><p><strong>方案一，利用PV操作：</strong></p><p><img src="图解系统学习笔记/image-20231016190252520.png" alt="image-20231016190252520" style="zoom: 67%;"></p><p>死锁问题：假如每个哲学家同时拿了左手边的叉子，则所有的哲学家都会卡在P(fork[(i+ 1) % n]);</p><p><strong>方案二，全局互斥</strong></p><p><img src="图解系统学习笔记/26-哲学家进餐-方案二示例.jpg" alt="img" style="zoom: 25%;"></p><p>效率低下问题：当一个线程顺利抢到锁，进入临界区，但是由于锁只有一个，没抢到锁的直接要等这个抢到锁的吃完才能抢叉子，造成资源浪费，如下：</p><p><img src="图解系统学习笔记/27-哲学家进餐-方案二问题.jpg" alt="方案二的问题" style="zoom: 50%;"></p><p><strong>方案三，奇偶分明</strong></p><p>改进方案一，不让全部哲学家都拿左边的等右边的，<strong>即让偶数编号的哲学家「先拿左边的叉子后拿右边的叉子」，奇数编号的哲学家「先拿右边的叉子后拿左边的叉子」。</strong></p><p><img src="图解系统学习笔记/28-哲学家进餐-方案三示例.jpg" alt="img" style="zoom:25%;"></p><p><strong>方案四，多状态</strong></p><p>设置每个哲学家三个状态：</p><ul><li>思考态：吃饱了</li><li>就餐态：</li><li>饥饿态：等待就餐</li></ul><p>哲学家要在左右两个哲学家都没有就餐的时候，才能就餐。</p><p>第i个哲学家，左邻右舍分别为： (i - 1 + 5) % 5， (i + 1) % 5</p><p><img src="图解系统学习笔记/30-哲学家进餐-方案四示例.jpg" alt="img" style="zoom:25%;"></p><p>流程：</p><p><img src="图解系统学习笔记/31-哲学家进餐-方案四-图解.jpg" alt="方案四也可解决问题" style="zoom: 50%;"></p><h5 id="读者-写者问题">读者-写者问题</h5><p>「读者-写者」，它为数据库访问建立了一个模型。读者只会读取数据，不会修改数据，而写者即可以读也可以修改数据。</p><p>问题描述：</p><ul><li>「读-读」允许：同一时刻，允许多个读者同时读</li><li>「读-写」互斥：没有写者时读者才能读，没有读者时写者才能写</li><li>「写-写」互斥：没有其他写者时，写者才能写</li></ul><p><strong>方案一，信号量——读者优先/写者优先</strong></p><p>读者有多个，对读者计数</p><p>写者只有一个，设立互斥锁信号量，</p><p>读写互斥，有写不能有读，有读不能有写。</p><p>读者优先：</p><ul><li>信号量 <code>wMutex</code>：控制写操作的互斥信号量，初始值为 1；</li><li>读者计数 <code>rCount</code>：正在进行读操作的读者个数，初始化为0；</li><li>信号量 <code>rCountMutex</code>：控制对 rCount读者计数器的互斥修改，初始值为 1；</li></ul><p><img src="图解系统学习笔记/32-读者写者-方案一示例.jpg" alt="img" style="zoom:25%;"></p><p>写者优先：</p><ul><li>信号量 <code>rMutex</code>：控制读者进入的互斥信号量，初始值为1；</li><li>信号量 <code>wDataMutex</code>：控制写者写操作的互斥信号量，初始值为1；</li><li>写者计数 <code>wCount</code>：记录写者数量，初始值为 0；——写者优先的关键</li><li>信号量 <code>wCountMutex</code>：控制 wCount 互斥修改，初始值为1；</li></ul><p><img src="图解系统学习笔记/33-读者写者-方案二示例.jpg" alt="img" style="zoom:25%;"></p><p><strong>方案三：公平策略</strong></p><ul><li>优先级相同；</li><li>写者、读者互斥访问；</li><li>只能一个写者访问临界区；</li><li>可以有多个读者同时访问临界资源；</li></ul><p>定义全局信号量flag</p><p><img src="图解系统学习笔记/34-读者写者-方案三示例.jpg" alt="img" style="zoom:25%;"></p><ul><li>flag信号量它让读者和写者产生<strong>排队</strong>，不像方案一，读者后续进来，也会优先排队，排在读者序列，永远都是写者最后执行结束。但加了flag，保证了写者和读者竞争的公平性。</li><li>写者与写者之间的互斥通过<code>wDataMutex</code>控制</li><li>读者与写者阻塞也靠<code>wDataMutex</code></li></ul><h2 id="锁-1">锁</h2><h3 id="互斥锁与自旋锁">互斥锁与自旋锁</h3><p>最底层的两种锁，高级的锁都是基于互斥 + 自旋锁实现。</p><p>两者的区别：加锁失败后的处理过程不一样。</p><ul><li>互斥锁：加锁失败后，线程释放CPU，给其它线程</li><li>自旋锁：加锁失败后，线程忙等待，直到拿到锁</li></ul><p><strong>互斥锁</strong></p><p>独占锁，加锁失败后会阻塞，锁空闲的时候又会被唤醒继续抢锁。这些操作由操作系统内核实现，</p><p><img src="图解系统学习笔记/互斥锁工作流程.png" alt="img" style="zoom: 50%;"></p><ul><li>加锁失败：线程从用户态变为内核态，由内核帮我们唤醒线程</li><li>开销成本：两次线程上下文切换<ul><li>加锁失败：运行态 -&gt; 休眠态</li><li>锁释放的唤醒：睡眠态 -&gt; 就绪态</li></ul></li></ul><p>建议使用场景：被锁住的代码执行时间短，就没必要用互斥锁</p><p><strong>自旋锁</strong></p><p>借助CPU提供的CAS原子指令，只在用户态完成线程的上下文切换</p><p>加锁步骤：</p><ol type="1"><li>判断锁的状态，锁空闲，执行下一步</li><li>将锁设置为该线程持有</li></ol><p>以上俩步骤为原子指令</p><p>比如，设锁为变量 lock，整数 0 表示锁是空闲状态，整数 pid 表示线程ID，那么 CAS(lock, 0, pid) 就表示自旋锁的加锁操作，CAS(lock, pid, 0)则表示解锁操作。</p><p>使用自旋锁的时候，当发生多线程竞争锁的情况，加锁失败的线程会「忙等待」，直到它拿到锁。这里的「忙等待」可以用<code>while</code> 循环等待实现，不过最好是使用 CPU 提供的<code>PAUSE</code>指令来实现「忙等待」，因为可以减少循环等待时的耗电量。</p><blockquote><p>注意：单核cpu环境下，需要CPU有中断处理的功能，因为自旋状态下的线程是不会释放CPU资源的，会造成其它线程饿死。</p></blockquote><h3 id="读写锁">读写锁</h3><p>作用：明确区分读写场景</p><p>应用场景：读多写少</p><p>工作原理：</p><ul><li>当写锁没有被线程持有，多个线程能并发获取读锁，提高读效率</li><li>当写锁被线程持有，剩下的读线程和写线程都会被阻塞，保证了数据一致性</li></ul><p><strong>读优先锁</strong></p><p><img src="图解系统学习笔记/读优先锁工作流程.png" alt="img" style="zoom:50%;"></p><p><strong>写优先锁</strong></p><p><img src="图解系统学习笔记/写优先锁工作流程.png" alt="img" style="zoom:50%;"></p><p>两种锁都会造成另一方的饥饿现象，因此采用公平策略最好：选择队列，先进来的无论读写，先工作。</p><h3 id="乐观锁与悲观锁">乐观锁与悲观锁</h3><p>悲观锁做事比较悲观，它认为<strong>多线程同时修改共享资源的概率比较高，于是很容易出现冲突，所以访问共享资源前，先要上锁</strong>。</p><p>乐观锁做事比较乐观，它假定冲突的概率很低，它的工作方式是：<strong>先修改完共享资源，再验证这段时间内有没有发生冲突，如果没有其他线程在修改资源，那么操作完成，如果发现有其他线程已经修改过这个资源，就放弃本次操作</strong>。</p><h4 id="在线文档案例">在线文档案例</h4><p>我们都知道在线文档可以同时多人编辑的，如果使用了悲观锁，那么只要有一个用户正在编辑文档，此时其他用户就无法打开相同的文档了，这用户体验当然不好了。</p><p>那实现多人同时编辑，实际上是用了乐观锁，它允许多个用户打开同一个文档进行编辑，编辑完提交之后才验证修改的内容是否有冲突。</p><p>怎么样才算发生冲突？这里举个例子，比如用户 A先在浏览器编辑文档，之后用户 B在浏览器也打开了相同的文档进行编辑，但是用户 B 比用户 A提交早，这一过程用户 A 是不知道的，当 A 提交修改完的内容时，那么 A 和 B之间并行修改的地方就会发生冲突。</p><p>服务端要怎么验证是否冲突了呢？通常方案如下：</p><ul><li>由于发生冲突的概率比较低，所以先让用户编辑文档，但是浏览器在下载文档时会记录下服务端返回的文档版本号；</li><li>当用户提交修改时，发给服务端的请求会带上原始文档版本号，服务器收到后将它与当前版本号进行比较，如果版本号不一致则提交失败，如果版本号一致则修改成功，然后服务端版本号更新到最新的版本号。</li></ul><p>实际上，我们常见的 SVN 和 Git也是用了乐观锁的思想，先让用户编辑代码，然后提交的时候，通过版本号来判断是否产生了冲突，发生了冲突的地方，需要我们自己修改后，再重新提交。</p><h3 id="死锁">死锁</h3><p>概念：两个（或者多个）线程互相等待对方的锁释放的场景。</p><p>死锁的条件：</p><ul><li><p>互斥：多个线程不能使用同一个资源</p></li><li><p>不剥夺：线程持有的资源未使用完不会释放也不会被剥夺</p></li><li><p>循环等待：多个线程获取资源的顺序构成环路</p><figure><img src="图解系统学习笔记/环路等待条件.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure></li><li><p>请求与保持：线程拥有一个资源，还去请求另一个资源，但是又保持自己已有的资源不释放</p></li></ul><h4 id="避免死锁">避免死锁</h4><p>破坏其中一个条件，常用：</p><h5 id="资源有序分配法">资源有序分配法</h5><p>线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源A，然后尝试获取资源 B。也就是说，线程 A 和 线程 B总是以相同的顺序申请自己想要的资源。</p><h2 id="调度">调度</h2><h3 id="调度时机">调度时机</h3><p>涉及到进程状态变化，都会触发调度：</p><ul><li>运行 -&gt; 就绪</li><li>运行 -&gt; 阻塞</li><li>就绪 -&gt; 运行</li></ul><p>如果硬件时钟提供周期性中断，可以根据如何处理时钟中断，把调度算法分为两类：</p><ul><li>抢占式：挑选一个进程，运行一段时间后终止。</li><li>非抢占式：挑选一个进程，直到该进程运行到阻塞（或者运行到结束）为止。</li></ul><h3 id="调度原则">调度原则</h3><p>原则：</p><ol type="1"><li>提高CPU利用率：在发生IO请求的程序事件时，CPU必须将时间片交给其它程序执行，无需等待这个程序等待IO的时间</li><li>提高系统吞吐率：调度程序衡量长任务和短任务的执行数量</li><li>降低程序平均周转时间：进程开始到结束的过程中，实际上是包含两个时间，分别是进程运行时间和进程等待时间两个时间总和就称为周转时间。</li><li>就绪队列的进程不能等太久</li><li>交互式比较强的应用，提高响应率。</li></ol><p>量化：</p><ul><li><strong>CPU 利用率</strong>：调度程序应确保 CPU是始终匆忙的状态，这可提高 CPU 的利用率</li><li><strong>系统吞吐量</strong>：吞吐量表示的是单位时间内 CPU完成进程的数量，长作业的进程会占用较长的 CPU资源，因此会降低吞吐量，相反，短作业的进程会提升系统吞吐量</li><li><strong>周转时间</strong>：周转时间是进程运行+阻塞时间+等待时间的总和，一个进程的周转时间越小越好</li><li><strong>等待时间</strong>：这个等待时间不是阻塞状态的时间，而是进程处于就绪队列的时间，等待的时间越长，用户越不满意</li><li><strong>响应时间</strong>：用户提交请求到系统第一次产生响应所花费的时间，在交互式系统中，响应时间是衡量调度算法好坏的主要标准</li></ul><h3 id="调度算法">调度算法</h3><h4 id="先来先服务">先来先服务</h4><p><strong>每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。</strong></p><figure><img src="图解系统学习笔记/24-先来先服务.jpg" alt="FCFS 调度算法"><figcaption aria-hidden="true">FCFS 调度算法</figcaption></figure><p>长作业优先，不利于短作业。</p><h4 id="短作业优先">短作业优先</h4><figure><img src="图解系统学习笔记/25-最短作业优先算法.jpg" alt="SJF 调度算法"><figcaption aria-hidden="true">SJF 调度算法</figcaption></figure><h4 id="高响应比">高响应比</h4><p>响应比计算公式：（等待时间 + 要求服务时间 ）/ 要求服务时间</p><p>每次进程调度时，计算每个进程的响应比数值，然后把响应比最高的进程投入运行。</p><p>本算法无法知道进程的要求服务时间，是一个理想算法。</p><h4 id="时间片轮转">时间片轮转</h4><p><img src="图解系统学习笔记/27-时间片轮询.jpg" alt="RR 调度算法" style="zoom:67%;"></p><p>每个进程分一个时间片，时间片执行完毕立刻切换其它进程，当然如果进程在这一个时间片内执行结束，CPU会立即切换其它进程，并为其分配新的时间片。</p><p>缺点：</p><ul><li>时间片过短，会导致频繁切换，影响系统性能</li><li>时间片过长，会产生饥饿现象</li></ul><p>一般来说，时间片设为 <code>20ms~50ms</code>通常是一个比较合理的折中值。</p><h4 id="高优先级">高优先级</h4><p>进程的优先级：</p><ul><li>动态优先级：根据进程的运行状态分配优先级，如果进程运行时间长了，降低优先级;如果进程等待时间增加，升高其优先级</li><li>静态优先级：创建进程时候，就已经确定了优先级了，然后整个运行时间优先级都不会变化；</li></ul><p>缺陷：</p><ul><li>饥饿现象：低优先级的进程可能永远不会执行。</li></ul><h4 id="多级反馈队列">多级反馈队列</h4><p>时间片轮转 + 最高优先级的综合实现。</p><ul><li>多级：多层级进程任务队列</li><li>反馈：有新的进程进入优先级高的队列，直接去服务新的进程。</li></ul><p>队列示意图：</p><p><img src="图解系统学习笔记/28-多级队列.jpg" alt="多级反馈队列" style="zoom:67%;"></p><p>工作流程：</p><ol type="1"><li>设置多个队列，队列从1级 —— n级优先级降低，但是每一级的时间片长度增加</li><li>新进程进入队列，首先进入一级队列执行，分配1级时间片，如果进程没有执行完，则进入下一级队列的队尾，以此类推，直到执行完毕</li><li>只有较高优先级的队列为空，才能执行低优先级队列。</li></ol><p>优点：</p><ol type="1"><li>长短作业兼顾（长作业到后面时间片更久，短作业刚进来可以被先执行）</li><li>响应时间良好（兼顾了每一个进来的程序）</li></ol><h2 id="进程间的通信">进程间的通信</h2><h3 id="管道">管道</h3><h4 id="linux的-命令">Linux的 | 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps auxf | grep mysql</span><br></pre></td></tr></table></figure><p>命令行里的「<code>|</code>」竖线就是一个<strong>管道</strong>：</p><ul><li>功能：将前一个命令的输出，作为后一个命令的输入</li><li>传输方向：管道传输数据单向</li><li>名称：没有名字，称为匿名管道</li></ul><p>命名管道：</p><p>创建： <code>mkfifo myPipe</code></p><p>管道也是文件，ls查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line">prw-r--r--. 1 root    root         0 Jul 17 02:45 myPipe</span><br></pre></td></tr></table></figure><ul><li>p开头，就是pipe</li></ul><p>写入数据的时候，必须有一方来接收写入的数据，否则会阻塞。</p><p>匿名管道原理：</p><p><code>|</code> 进行了系统调用：<code>int pipe(int fd[2])</code></p><p><img src="图解系统学习笔记/5-管道-pipe.jpg" alt="img" style="zoom:50%;"></p><p>管道的本质：内核里的缓存</p><p>A|B模型：</p><p><img src="图解系统学习笔记/8-管道-pipe-shell.jpg" alt="img" style="zoom:50%;"></p><p>两个进程通信模型：</p><p><img src="图解系统学习笔记/6-管道-pipe-fork.jpg" alt="img" style="zoom: 50%;"></p><p>保证一读一写：</p><ul><li>父进程关闭读取的 fd[0]，只保留写入的 fd[1]；</li><li>子进程关闭写入的 fd[1]，只保留读取的 fd[0]；</li></ul><h3 id="消息队列">消息队列</h3><p>进程把要发送的数据封装成<strong>消息单元</strong>，放入消息队列，就可以返回了。</p><ul><li><strong>消息队列是保存在内核中的消息链表</strong></li></ul><p>优势：效率、响应能力都较出色</p><p>缺陷：通信不及时、消息体有大小限制</p><h3 id="共享内存">共享内存</h3><p>如果两个进程A和B想进行通信，A、B都有自己的虚拟内存空间，那就直接把这俩进程的虚拟内存映射到相同的物理内存上，两个进程通信的内容都在共享内存区域呈现。</p><p><img src="图解系统学习笔记/9-共享内存.jpg" alt="img" style="zoom:50%;"></p><ul><li>效率很高</li></ul><p>缺陷：可能会发生写写冲突</p><h3 id="信号量-1">信号量</h3><p>概念：信号量相当于整型的计数器</p><p>作用：用于实现进程间的同步与互斥，并不缓存进程之间的通信数据。</p><p>控制信号量的方式：</p><ul><li>P操作：信号量-1，减后如果信号量 &lt;0，则表示当前资源被占用进程需阻塞等待；相减后如果信号量 &gt;=0，则表明还有资源可使用，进程可正常继续执行。</li><li>V操作：信号量+1，相加后如果信号量 &lt;=0，则表明当前有阻塞中的进程，于是会将该进程唤醒运行；相加后如果信号量&gt; 0，则表明当前没有阻塞中的进程；</li></ul><h4 id="信号量初值">信号量初值</h4><p>信号量初始化为1：</p><p>A、B进程访问资源：</p><ul><li>进程 A 在访问共享内存前，先执行了 P 操作，由于信号量的初始值为1，故在进程 A 执行 P 操作后信号量变为 0，表示共享资源可用，于是进程 A就可以访问共享内存。</li><li>若此时，进程 B 也想访问共享内存，执行了 P 操作，结果信号量变为了-1，这就意味着临界资源已被占用，因此进程 B 被阻塞。</li><li><strong>直到进程 A 访问完共享内存，才会执行 V操作</strong>，<strong>使得信号量恢复为 0，接着就会唤醒阻塞中的线程B</strong>，使得进程 B 可以访问共享内存，最后完成共享内存的访问后，执行V 操作，使信号量恢复到初始值 1。</li></ul><p>结论：信号量初值为1，相当于<strong>互斥信号量</strong></p><p>信号量初值为0：</p><p><img src="图解系统学习笔记/11-信号量-同步.jpg" alt="img" style="zoom:67%;"></p><ul><li>如果进程B先于A执行，P操作结束后，信号量为-1，表示A未生产数据，B阻塞</li><li>A执行后，触发V操作，信号量+1，这时B会被唤醒，读取数据</li></ul><p>结论：信号量为0，相当于<strong>同步信号量</strong></p><h3 id="信号">信号</h3><p>应用于非常规情况的工作模式，linux常用信号：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">kill</span> -l</span></span><br><span class="line"> 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP</span><br><span class="line"> 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1</span><br><span class="line">11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM</span><br><span class="line">16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP</span><br><span class="line">21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ</span><br><span class="line">26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR</span><br><span class="line">31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3</span><br><span class="line">38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8</span><br><span class="line">43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13</span><br><span class="line">48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12</span><br><span class="line">53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7</span><br><span class="line">58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2</span><br><span class="line">63) SIGRTMAX-1  64) SIGRTMAX</span><br></pre></td></tr></table></figure><p>通信机制：异步</p><p>用户进程对信号的处理：</p><p><strong>1.执行默认操作</strong>。Linux对每种信号都规定了默认操作，例如，上面列表中的 SIGTERM信号，就是终止进程的意思。</p><p><strong>2.捕捉信号</strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。</p><p><strong>3.忽略信号</strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即<code>SIGKILL</code> 和<code>SEGSTOP</code>，它们用于在任何时候中断或结束某一进程。</p><h3 id="socket网络通信">Socket网络通信</h3><p>作用：跨网络与其它主机通信</p><p>系统调用：<code>int socket(int domain, int type, int protocal)</code></p><ul><li>domain 参数用来指定协议族，比如 AF_INET 用于 IPV4、AF_INET6 用于IPV6、AF_LOCAL/AF_UNIX 用于本机；</li><li>type 参数用来指定通信特性，比如 SOCK_STREAM 表示的是字节流，对应TCP、SOCK_DGRAM 表示的是数据报，对应 UDP、SOCK_RAW表示的是原始套接字；</li><li>protocal参数原本是用来指定通信协议的，但现在基本废弃。因为协议已经通过前面两个参数指定完成，protocol目前一般写成 0 即可；</li></ul><p>socket的类型决定，通信方式也不同：</p><ul><li>实现 TCP 字节流通信： socket 类型是 AF_INET 和 SOCK_STREAM；</li><li>实现 UDP 数据报通信：socket 类型是 AF_INET 和 SOCK_DGRAM；</li><li>实现本地进程间通信： 「本地字节流 socket 」类型是 AF_LOCAL 和SOCK_STREAM，「本地数据报 socket 」类型是 AF_LOCAL 和SOCK_DGRAM。另外，AF_UNIX 和 AF_LOCAL 是等价的，所以 AF_UNIX 也属于本地socket；</li></ul><p>基于TCP通信模型：</p><p><img src="图解系统学习笔记/12-TCP编程模型.jpg" alt="img" style="zoom:50%;"></p><p>基于UDP通信模型：</p><p><img src="图解系统学习笔记/13-UDP编程模型.jpg" alt="img" style="zoom: 67%;"></p><h2 id="常见面试题">常见面试题</h2><h1 id="调度算法-1">调度算法</h1><h2 id="内存页面置换算法">内存页面置换算法</h2><p>缺页中断的概念：</p><p>当 CPU访问的页面不在物理内存时，便会产生一个缺页中断，请求操作系统将所缺页调入到物理内存。</p><p>与一般中断的区别：</p><ul><li>缺页中断在<strong>指令执行期间</strong>产生和处理中断信号，而一般中断在一条<strong>指令执行完成</strong>后检查和处理中断信号。</li><li>缺页中断返回到该指令的开始<strong>重新执行该指令</strong>，而一般中断返回回到该指令的<strong>下一个指令</strong>执行。</li></ul><p><img src="图解系统学习笔记/缺页异常流程.png" alt="缺页中断的处理流程" style="zoom: 50%;"></p><p>假如第三、四步，找不到对应的页表，就会采用页面置换，将要访问的页从磁盘里换进来。</p><p>页表项通常有如下图的字段：</p><figure><img src="图解系统学习笔记/页表项字段.png" alt="img"><figcaption aria-hidden="true">img</figcaption></figure><p>那其中：</p><ul><li><em>状态位</em>：用于表示该页是否有效，也就是说是否在物理内存中，供程序访问时参考。</li><li><em>访问字段</em>：用于记录该页在一段时间被访问的次数，供页面置换算法选择出页面时参考。</li><li><em>修改位</em>：表示该页在调入内存后是否有被修改过，由于内存中的每一页都在磁盘上保留一份副本，因此，如果没有修改，在置换该页时就不需要将该页写回到磁盘上，以减少系统的开销；如果已经被修改，则将该页重写到磁盘上，以保证磁盘中所保留的始终是最新的副本。</li><li><em>硬盘地址</em>：用于指出该页在硬盘上的地址，通常是物理块号，供调入该页时使用。</li></ul><p><img src="图解系统学习笔记/虚拟内存管理流程.png" alt="虚拟内存的流程" style="zoom: 50%;"></p><h3 id="最佳页面置换算法">最佳页面置换算法</h3><p>算法思想：发生缺页时，<strong>置换在「未来」最长时间不访问的页面</strong>。</p><figure><img src="图解系统学习笔记/最优置换算法.png" alt="最佳页面置换算法"><figcaption aria-hidden="true">最佳页面置换算法</figcaption></figure><p>缺陷：</p><ul><li>理想算法，无法实现，最佳页面置换算法作用是为了衡量其它算法的效率，其它算法效率越接近该算法的效率，那么说明其它算法是高效的。</li></ul><h3 id="先进先出置换算法">先进先出置换算法</h3><p>算法思想：发生缺页时，选择在内存中驻留时间最长的页进行置换</p><figure><img src="图解系统学习笔记/FIFO置换算法.png" alt="先进先出置换算法"><figcaption aria-hidden="true">先进先出置换算法</figcaption></figure><p>缺陷：</p><ul><li>效率低</li></ul><h3 id="最近最久未使用置换算法">最近最久未使用置换算法</h3><p>算法思想：发生缺页时，选择最长时间（相对当前时刻）没有访问的页面进行切换</p><figure><img src="图解系统学习笔记/LRU置换算法.png" alt="最近最久未使用的置换算法"><figcaption aria-hidden="true">最近最久未使用的置换算法</figcaption></figure><p>缺陷：</p><ul><li>实现难：底层需要实现双向链表，最近最多使用的页面在表头，最近最少使用的页面在表尾。</li><li>开销大：每次访问内存，都要更新一遍链表。</li></ul><h3 id="时钟页面置换算法">时钟页面置换算法</h3><p>算法思想：结合LRU +FIFO，将页面保存到一个环形链表中，用一个指针指向最老的页面。</p><p>当<strong>发生缺页中断</strong>时，算法首先检查表针指向的页面：</p><ul><li>如果它的访问位位是 0就淘汰该页面，并把新的页面插入这个位置，然后把表针前移一个位置；</li><li>如果访问位是 1就清除访问位，并把表针前移一个位置，重复这个过程直到找到了一个访问位为 0的页面为止；</li></ul><p>不发生缺页中断，遇到访问的页面在内存中，那就将这个页面的访问位置于1。</p><p><img src="图解系统学习笔记/时钟置换算法.png" alt="时钟页面置换算法" style="zoom:50%;"></p><h3 id="最不常用置换算法">最不常用置换算法</h3><p>算法思想：发生缺页时，将最近访问次数最少的页面置换掉。</p><p>实现方式：对每个页面设置一个「访问计数器」，每当一个页面被访问时，该页面的访问计数器就累加1。</p><p>缺陷：</p><ul><li>无时间维度的误判：有些页面在过去时间里访问的频率很高，但是现在已经没有访问了，而当前频繁访问的页面由于没有这些页面访问的次数高，在发生缺页中断时，就会可能会误伤当前刚开始频繁访问，但访问次数还不高的页面。</li><li>计数器成本高：</li></ul><h2 id="磁盘调度算法寻道">磁盘调度算法——寻道</h2><p>磁盘结构：</p><p><img src="图解系统学习笔记/磁盘结构.jpg" alt="磁盘的结构" style="zoom:67%;"></p><ul><li>右边盘片的结构：盘片中的每一层分为多个磁道，每个磁道分多个扇区，每个扇区是<code>512</code>字节。那么，多个具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面，如上图中间。</li></ul><h3 id="先来先服务-1">先来先服务</h3><p>磁道请求序列：</p><p>98，183，37，122，14，124，65，67</p><p>那么，磁盘的写入顺序是从左到右，如下图：</p><p><img src="图解系统学习笔记/磁盘调度-先来先服务.png" alt="先来先服务" style="zoom:67%;"></p><p>缺点：</p><ul><li>寻道时间过长，效率低下</li></ul><h3 id="最短寻道时间优先">最短寻道时间优先</h3><p>最短寻道时间优先（<em>Shortest SeekFirst，SSF</em>）算法的工作方式是，<strong>优先选择从当前磁头位置所需寻道时间最短的请求</strong>（也就是离磁头最近的请求优先处理）。</p><p>磁道请求序列：</p><p>98，183，37，122，14，124，65，67</p><p>那么，那么根据距离磁头（ 53位置）最近的请求的算法，具体的请求则会是下列从左到右的顺序：</p><p>65，67，37，14，98，122，124，183</p><p><img src="图解系统学习笔记/磁盘调度-最短寻道时间优先.png" alt="最短寻道时间优先" style="zoom: 67%;"></p><p>缺陷：</p><ul><li>饥饿问题：动态请求过程中，如果一直请求靠近磁头的磁道，那远距离的磁道请求就得不到响应。</li></ul><h3 id="扫描scan电梯算法">扫描SCAN（电梯）算法</h3><p>算法思想：先向一个方向工作，遇到<strong>该方向上的最后一个磁道</strong>时，调换方向。</p><p>磁道请求序列：</p><p>98，183，37，122，14，124，65，67</p><p>假设扫描调度算先朝磁道号减少的方向移动，具体请求则会是下列从左到右的顺序：</p><p>37，14，<code>0</code>，65，67，98，122，124，183</p><p><img src="图解系统学习笔记/磁盘调度-扫描算法.png" alt="扫描算法" style="zoom:67%;"></p><p>缺陷：</p><ul><li>响应不均匀：中间的磁道比较占便宜。</li></ul><h3 id="循环扫描c-scan算法">循环扫描C-SCAN算法</h3><p>算法思想：<strong>单向请求（只响应一个方向的请求）</strong>，只有磁头朝某个设定方向时，才会执行寻道请求任务，回来的过程中不处理任务，而是快速回到起始位置，继续进行下一轮的扫描。</p><p>磁道请求序列：</p><p>98，183，37，122，14，124，65，67</p><p>假设循环扫描调度算先朝磁道增加的方向移动，具体请求会是下列从左到右的顺序：</p><p>65，67，98，122，124，183，<code>199</code>，<code>0</code>，14，37</p><p><img src="图解系统学习笔记/磁盘调度-C-SCAN算法.png" alt="循环扫描算法" style="zoom:67%;"></p><h3 id="looc与c-look算法">LOOC与C-LOOK算法</h3><p>为了优化扫描算法产生的，针对 SCAN 算法的优化则叫 LOOK算法，针对C-SCAN 算法的优化则叫 C-LOOK。</p><p>优化思路：<strong>磁头在移动到「最远的请求」位置，然后立即反向移动。</strong></p><p>LOOK：磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，<strong>反向移动的途中会响应请求</strong>。</p><p><img src="图解系统学习笔记/磁盘调度-LOOK算法.png" alt="LOOK 算法" style="zoom:67%;"></p><p>C-LOOK：磁头在每个方向上仅仅移动到最远的请求位置，然后立即反向移动，而不需要移动到磁盘的最始端或最末端，<strong>反向移动的途中不会响应请求</strong>。</p><p><img src="图解系统学习笔记/磁盘调度-LOOK算法-169805346460716.png" alt="LOOK 算法" style="zoom:67%;"></p><h1 id="文件系统">文件系统</h1><h2 id="基本组成">基本组成</h2><p>文件系统概念：文件系统是操作系统中<strong>负责管理持久数据的子系统</strong>，负责把用户的文件存到磁盘硬件中，因为即使计算机断电了，磁盘里的数据并不会丢失，所以可以持久化的保存文件。</p><p>基本数据单位：文件</p><p>文件系统的目的：组织、管理这些文件</p><p>Linux为每个文件分配两个数据结构：</p><ul><li>索引结点：也就是 <em>inode</em>，用来记录文件的元信息，比如 inode编号、文件大小、访问权限、创建时间、修改时间、<strong>数据在磁盘的位置</strong>等等。索引节点是文件的<strong>唯一</strong>标识，它们之间一一对应，也同样都会被存储在硬盘中，所以<strong>索引节点同样占用磁盘空间</strong>。</li><li>目录项：也就是<em>dentry</em>，用来记录文件的名字、<strong>索引节点指针</strong>以及与其他目录项的层级关联关系。多个目录项关联起来，就会形成目录结构，但它与索引节点不同的是，<strong>目录项是由内核维护的一个数据结构，不存放于磁盘，而是缓存在内存</strong>。</li></ul><p>目录项与索引结点的关系：<strong>多对一</strong>，因为一个文件可能有多个别名。但是指向这个文件的指针只有一个（索引节点）。</p><h3 id="文件在磁盘的存储形式">文件在磁盘的存储形式</h3><p>磁盘最小的读写单位：磁盘扇区，每个扇区只有512B。</p><p>文件系统从磁盘最小读取单位：文件系统将<strong>磁盘多个扇区组成一个大的逻辑块</strong>，linux中逻辑块大小为4KB，一次性能读8个扇区。</p><p><img src="图解系统学习笔记/目录项和索引关系图-16985863111181.png" alt="目录项和索引关系图" style="zoom:67%;"></p><p>磁盘格式化后的区域：</p><ul><li><strong>超级块</strong>：用来存储文件系统的详细信息，比如块个数、块大小、空闲块等等。<ul><li>加载内存时机：文件系统挂载时</li></ul></li><li><strong>索引节点区</strong>：用来存储索引节点；<ul><li>加载内存时机：文件被访问时</li></ul></li><li><strong>数据块区</strong>：用来存储文件或目录数据；</li></ul><h2 id="虚拟文件系统">虚拟文件系统</h2><p>由于操作系统管理的文件系统众多，如磁盘文件系统、网络文件系统等等......为了方便管理，对用户提供一个统一接口，于是在用户层与文件系统层添加了一层中间件，这个中间件叫做虚拟文件系统<strong>（*VirtualFile System，VFS*）。</strong></p><p>在 Linux文件系统中，用户空间、系统调用、虚拟文件系统、缓存、文件系统以及存储之间的关系如下图：</p><p><img src="图解系统学习笔记/虚拟文件系统.png" alt="img" style="zoom: 50%;"></p><p>Linux支持的文件系统也不少，根据存储位置的不同，可以把文件系统分为三类：</p><ul><li><em>磁盘的文件系统</em>，它是直接把数据存储在磁盘中，比如 Ext2/3/4、XFS 等都是这类文件系统。</li><li><em>内存的文件系统</em>，这类文件系统的数据不是存储在硬盘的，而是占用内存空间，我们经常用到的<code>/proc</code> 和 <code>/sys</code>文件系统都属于这一类，读写这类文件，实际上是读写内核中相关的数据。</li><li><em>网络的文件系统</em>，用来访问其他计算机主机数据的文件系统，比如NFS、SMB 等等。</li></ul><h2 id="文件的使用">文件的使用</h2><p>文件系统基本操作（读写）单位：数据块</p><p>操作一个文件的过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fd = open(name, flag); # 打开文件</span><br><span class="line">...</span><br><span class="line">write(fd,...);         # 写数据</span><br><span class="line">...</span><br><span class="line">close(fd);             # 关闭文件</span><br></pre></td></tr></table></figure><ul><li>首先用 <code>open</code><strong>系统调用</strong>打开文件，<code>open</code>的参数中包含文件的路径名和文件名。</li><li>使用 <code>write</code> 写数据，其中 <code>write</code> 使用<code>open</code>所返回的<strong>文件描述符</strong>，并不使用文件名作为参数。</li><li>使用完文件后，要用 <code>close</code>系统调用关闭文件，避免资源的泄露。</li></ul><p>打开文件后，操作系统会<strong>跟踪</strong>这个文件，也就是在进程中创建并维护一个打开文件表，文件表的每一项叫做<strong>文件描述符</strong>。</p><p>文件描述符中打开文件的状态和信息：</p><ul><li>文件指针：系统跟踪<strong>上次读写位置</strong>作为当前文件位置指针，这种指针对打开文件的某个进程来说是唯一的；</li><li>文件打开计数器：文件关闭时，操作系统必须重用其打开文件表条目，否则表内空间不够用。因为多个进程可能打开同一个文件，所以系统在删除打开文件条目之前，必须等待最后一个进程关闭文件，该计数器跟踪打开和关闭的数量，当该计数为0 时，系统关闭文件，删除该条目；</li><li>文件磁盘位置：绝大多数文件操作都要求系统修改文件数据，该信息保存在内存中，以免每个操作都从磁盘中读取；</li><li>访问权限：每个进程打开文件都需要有一个访问模式（创建、只读、读写、添加等），该信息保存在进程的打开文件表中，以便操作系统能允许或拒绝之后的I/O 请求；</li></ul><p>读文件和写文件的过程：</p><ul><li>当用户进程从文件读取 1个字节大小的数据时，文件系统则需要获取字节所在的数据块，再返回数据块对应的用户进程所需的数据部分。</li><li>当用户进程把 1个字节大小的数据写进文件时，文件系统则找到需要写入数据的数据块的位置，然后修改数据块中对应的部分，最后再把数据块写回磁盘。</li></ul><h2 id="文件的存储">文件的存储</h2><h3 id="连续空间存放方式">连续空间存放方式</h3><p>概念：文件存放在磁盘<strong>连续</strong>的存储空间，但是需要事先知道文件的大小。</p><p>文件头：类似linux的inode</p><ul><li>起始块的位置</li><li>文件长度</li></ul><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F.png" alt="连续空间存放方式" style="zoom:67%;"></p><p><strong>缺陷</strong></p><p>磁盘空间碎片：</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E8%BF%9E%E7%BB%AD%E7%A9%BA%E9%97%B4%E5%AD%98%E6%94%BE%E6%96%B9%E5%BC%8F-%E7%A3%81%E7%9B%98%E7%A2%8E%E7%89%87.png" alt="磁盘碎片" style="zoom:50%;"></p><ul><li>可以通过将现有文件进行挪动来腾出空间以容纳新的文件，但是这个在磁盘挪动文件是非常耗时，所以这种方式不太现实。</li></ul><p>文件长度不易扩展：</p><p>优点：读写效率高。</p><h3 id="非连续空间存放方式">非连续空间存放方式</h3><h4 id="链表方式">链表方式</h4><p>链表的方式存放是<strong>离散的，不连续的</strong>，可以<strong>消除磁盘碎片</strong>，大大提高磁盘空间的利用率，同时<strong>文件的长度可以动态扩展</strong>。</p><h5 id="隐式链表">隐式链表</h5><p><img src="图解系统学习笔记/非连续空间存放方式-链表方式.png" alt="隐式链表" style="zoom:67%;"></p><p>文件头包含文件数据块的第一块和最后一块的位置，每个数据块要多留出一个指针空间，用来存放下一个数据块的位置。</p><p>缺点：</p><ul><li>查询效率低：无法直接访问数据块，只能顺序遍历</li><li>不稳定：链表指针因为系统原因损坏，就会导致文件内容缺失</li></ul><h5 id="显式链接">显式链接</h5><p>取出每个磁盘块的指针，放到内存的一个表中，这个表的每个表项存放每个数据块指向下一个数据块的指针。</p><p>工作形式：</p><p>文件 A 依次使用了磁盘块 4、7、2、10 和 12 ，文件 B 依次使用了磁盘块6、3、11 和 14 。利用下图中的表，可以从第 4块开始，顺着链走到最后，找到文件 A 的全部磁盘块。同样，从第 6块开始，顺着链走到最后，也能够找出文件 B的全部磁盘块。最后，这两个链都以一个不属于有效磁盘编号的特殊标记（如 -1）结束。内存中的这样一个表格称为<strong>文件分配表（*File AllocationTable，FAT*）</strong>。</p><p><img src="图解系统学习笔记/文件分配表.png" alt="显式链接" style="zoom:50%;"></p><p>不适用大磁盘的情况：对于 200GB 的磁盘和 1KB 大小的块，这张表需要有 2亿项，每一项对应于这 2 亿个磁盘块中的一个块，每项如果需要 4个字节，那这张表要占用 800MB 内存，很显然 FAT方案对于大磁盘而言不太合适。</p><h4 id="索引方式">索引方式</h4><p>弥补了链表的方式不能直接访问的缺点。</p><p>实现：为每个文件创建一个<strong>索引数据块</strong>，存放的是<strong>指向每一个文件数据块的指针</strong>列表。</p><p><img src="图解系统学习笔记/非连续空间存放方式-索引方式.png" alt="索引的方式" style="zoom:67%;"></p><p>优点：</p><ul><li>文件的创建、增大、缩小很方便；</li><li>不会有碎片的问题；</li><li>支持顺序读写和随机读写；</li></ul><p>缺陷：</p><ul><li>空间开销</li></ul><h5 id="解决大文件存储">解决大文件存储</h5><p>大文件存储，可能要多个索引块去存放索引信息。</p><h6 id="链表索引">链表+索引</h6><p>实现：索引数据块留出一个指向下一个索引数据块的指针。</p><p><img src="图解系统学习笔记/链式索引块.png" alt="链式索引块" style="zoom:67%;"></p><h6 id="索引索引">索引+索引</h6><p>实现：多级索引块，一级索引块存二级索引块的地址...依此类推。</p><p><img src="图解系统学习笔记/多级索引块.png" alt="多级索引块" style="zoom:67%;"></p><h2 id="空闲空间管理">空闲空间管理</h2><h3 id="空闲表法">空闲表法</h3><p>为所有空闲空间创建一个表，表内容包含第一个空闲块号的位置，以及空间的空闲块总个数。</p><p><img src="图解系统学习笔记/空闲表法.png" alt="空闲表法" style="zoom: 50%;"></p><p>请求分配磁盘空间时，会按照顺序遍历空闲表，直到找到合适的空间。</p><p>当用户撤销空间时，也要遍历空闲表，然后将新空出来的空闲块信息添加到表中。</p><p>缺陷：</p><ul><li>空闲区数量多，尤其是小碎片级别的空闲区，会大量占用表空间。</li></ul><h3 id="空闲链表法">空闲链表法</h3><p>每个空闲块有一个链表指向下一个空闲块，</p><p><img src="图解系统学习笔记/空闲块链表.png" alt="空闲链表法" style="zoom:67%;"></p><p>当创建文件需要一块或几块时，就从链头上依次取下一块或几块。反之，当回收空间时，把这些空闲块依次接到链头上。</p><p>缺陷：</p><ul><li>不支持随机访问：每当在链上增加或移动空闲块时需要做很多 I/O操作，同时数据块的指针消耗了一定的存储空间。</li></ul><h3 id="位图法">位图法</h3><p>磁盘分为多个盘块，位图利用一个二进制位表示磁盘中一个盘块的状态。</p><p>当值为 0 时，表示对应的盘块空闲，值为 1时，表示对应的盘块已分配。它形式如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1111110011111110001110110111111100111 ...</span><br></pre></td></tr></table></figure><p>Linux文件系统就采用了位图的方式来管理空闲空间，不仅用于数据空闲块的管理，还用于inode 空闲块的管理，因为 inode也是存储在磁盘的，自然也要有对其管理。</p><h2 id="文件系统的结构">文件系统的结构</h2><blockquote><p>Linux 是用位图的方式管理空闲空间，用户在创建一个新文件时，Linux内核会通过 inode 的位图找到空闲可用的inode，并进行分配。要存储数据时，会通过块的位图找到空闲的块，并分配。</p><p>数据块的位图是放在磁盘块里的，假设是放在一个块里，一个块4K，每位表示一个数据块，共可以表示 <code>4 * 1024 * 8 = 2^15</code>个空闲块，由于 1 个数据块是 4K 大小，那么最大可以表示的空间为<code>2^15 * 4 * 1024 = 2^27</code> 个 byte，也就是 128M。</p><p>按照上面的结构，如果采用「一个块的位图 + 一系列的块」，外加「一个块的inode 的位图 + 一系列的 inode 的结构」能表示的最大空间也就128M，这太少了，现在很多文件都比这个大。</p><p>「一个块的位图 + 一系列的块」 —— 块组</p></blockquote><h3 id="块组">块组</h3><p>Linux Ext2整个文件系统的结构和块组的内容，文件系统都由大量块组组成，在硬盘上相继排布：</p><p><img src="图解系统学习笔记/块组.png" alt="img" style="zoom:50%;"></p><p>块组的内容：</p><ul><li>超级块：包含的是文件系统的重要信息，比如 inode总个数、块总个数、每个块组的 inode 个数、每个块组的块个数等等。</li><li>块组描述符：包含文件系统中各个块组的状态，比如块组中空闲块和 inode的数目等，每个块组都包含了文件系统中「所有块组的组描述符信息」。</li><li>数据位图和 inode 位图， 用于表示对应的数据块或 inode是空闲的，还是被使用中。</li><li>inode 列表：包含了块组中所有的 inode，inode用于保存文件系统中与各个文件和目录相关的所有元数据。</li><li>数据块：包含文件的有用数据。</li></ul><p>块组中的重复信息：都是备份作用。</p><h2 id="目录的存储">目录的存储</h2><p>目录其实也是个文件，也有inode，但和普通文件不同，<strong>普通文件的数据块里面保存的是文件数据，而目录文件的数据块里面保存的是目录里面一项一项的文件信息。</strong></p><p><img src="图解系统学习笔记/目录哈希表.png" alt="目录格式哈希表" style="zoom:50%;"></p><p>哈希表的作用：</p><p>当目录有超级多的文件，想在这个目录下找文件，哈希表会大幅提高效率。</p><p>保存目录的格式改成<strong>哈希表</strong>，对文件名进行哈希计算，把哈希值保存起来，如果我们要查找一个目录下面的文件名，可以通过名称取哈希。如果哈希能够匹配上，就说明这个文件的信息在相应的块里面。</p><h2 id="软链接和硬链接">软链接和硬链接</h2><p>链接的作用：给文件起别名</p><p>硬链接：</p><p>硬链接是<strong>多个目录项中的「索引节点」指向一个文件</strong>，也就是指向同一个inode，但是 inode 是不可能跨越文件系统的，每个文件系统都有各自的 inode数据结构和列表，所以<strong>硬链接是不可用于跨文件系统的</strong>。由于多个目录项都是指向一个inode，那么<strong>只有删除文件的所有硬链接以及源文件时，系统才会彻底删除该文件。</strong></p><p><img src="图解系统学习笔记/硬链接-2.png" alt="硬链接" style="zoom:50%;"></p><p>软链接：</p><p>软链接相当于<strong>重新创建一个文件</strong>，这个文件有<strong>独立的inode</strong>，但是这个<strong>文件的内容是另外一个文件的路径</strong>。</p><p>所以访问软链接的时候，实际上相当于访问到了另外一个文件，所以<strong>软链接是可以跨文件系统的</strong>，甚至<strong>目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</strong></p><p><img src="图解系统学习笔记/软链接.png" alt="软链接" style="zoom:50%;"></p><h2 id="文件io">文件IO</h2><h3 id="缓冲与非缓冲io">缓冲与非缓冲IO</h3><p>区别：<strong>是否利用标准库缓存</strong>。</p><p>概念：</p><ul><li>缓冲IO：利用标准库缓存实现文件加速访问，然后<strong>通过标准库进行系统调用</strong>访问文件。</li><li>非缓冲IO：直接通过系统调用访问文件，不经过标准库缓存。</li></ul><p>缓冲 = 标准库内部实现的缓冲</p><p>很多程序遇到换行时才真正输出，而换行前的内容，其实就是被标准库暂时缓存了起来，这样做的目的是，<strong>减少系统调用的次数</strong>，毕竟系统调用是有CPU 上下文切换的开销的。</p><h3 id="直接与非直接io">直接与非直接IO</h3><p>区别：<strong>是否利用操作系统的缓存</strong></p><p>概念：</p><ul><li>直接IO：不会发生<strong>内核缓存和用户程序之间的复制</strong>，直接经过文件系统访问磁盘。</li><li>间接IO<ul><li>读操作：数据从内核缓存 拷贝给 用户程序</li><li>写操作：数据从用户程序 拷贝给内核缓存，再<strong>由内核决定</strong>什么时候写入数据到磁盘。<ul><li>写入时机：<ul><li>在调用 <code>write</code>的最后，当发现内核缓存的数据太多的时候，内核会把数据写到磁盘上；</li><li>用户主动调用 <code>sync</code>，内核缓存会刷到磁盘上；</li><li>当内存十分紧张，无法再分配页面时，也会把内核缓存的数据刷到磁盘上；</li><li>内核缓存的数据的缓存时间超过某个时间时，也会把数据刷到磁盘上；</li></ul></li></ul></li></ul></li></ul><p>启动使用直接IO的方式：在使用文件操作类的系统调用函数时，指定<code>O_DIRECT</code> 标志。</p><h3 id="阻塞与非阻塞io">阻塞与非阻塞IO</h3><h4 id="阻塞io">阻塞IO</h4><p>用户执行read：线程会被阻塞，一直等到<strong>内核数据准备好</strong>，并把<strong>数据从内核缓冲区拷贝到应用程序的缓冲区</strong>中，当拷贝过程完成，<code>read</code>才会返回。</p><p>等待关键：</p><ul><li>内核数据准备好</li><li>内核把数据从内核缓冲区拷贝到应用程序的缓冲区</li></ul><h4 id="非阻塞io">非阻塞IO</h4><p>用户执行read：<strong>数据未准备好的情况</strong>下立即返回，可以继续往下执行，此时应用程序不断<strong>轮询内核</strong>，直到内核把数据准备好，凡事发生必有利于我，一切阻碍我的事物必将成为我前进的阶梯。</p><p><img src="图解系统学习笔记/非阻塞 I_O .png" alt="非阻塞 I/O" style="zoom: 67%;"></p><ul><li>注意：最后一次调用内核时，这时内核把数据准备好了，随后read线程需要<strong>等待</strong>数据从内核拷贝到应用进程，拷贝完成后返回给用户进程。这个过程是同步的。</li></ul><p>启动非阻塞IO的方式：访问管道或 socket 时，设置<code>O_NONBLOCK</code> 标志</p><blockquote><p>为了解决这种傻乎乎轮询方式，于是 <strong>I/O多路复用</strong>技术就出来了，如 select、poll，它是通过 I/O事件分发，当内核数据准备好时，再以事件通知应用程序进行操作。</p><p>这个做法大大改善了 CPU 的利用率，因为当调用了 I/O多路复用接口，如果没有事件发生，那么当前线程就会发生阻塞，这时 CPU会切换其他线程执行任务，等内核发现有事件到来的时候，会唤醒阻塞在 I/O多路复用接口的线程，然后用户可以进行后续的事件处理。</p><p>整个流程要比阻塞 IO 要复杂，似乎也更浪费性能。但 <strong>I/O多路复用接口最大的优势在于，用户可以在一个线程内同时处理多个 socket 的IO 请求</strong>（参见：<a href="https://xiaolincoding.com/os/8_network_system/selete_poll_epoll.html">I/O多路复用：select/poll/epoll (opens new window)</a>）。用户可以注册多个socket，然后不断地调用 I/O 多路复用接口读取被激活的socket，即可达到在同一个线程内同时处理多个 IO请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。</p></blockquote><h4 id="select-io-多路复用">select I/O 多路复用</h4><p><img src="图解系统学习笔记/基于非阻塞 I_O 的多路复用.png" alt="I/O 多路复用" style="zoom:67%;"></p><p>无论是阻塞 I/O、非阻塞 I/O，还是基于非阻塞 I/O的多路复用都是<strong>同步调用</strong>。因为它们在 read调用时，内核将数据从内核空间拷贝到应用程序空间，过程都是需要<strong>等待</strong>的，也就是说这个过程是同步的，如果内核实现的拷贝效率不高，read调用就会在这个同步过程中等待比较长的时间。</p><h3 id="异步io">异步IO</h3><p><img src="图解系统学习笔记/异步 I_O.png" alt="异步 I/O" style="zoom:50%;"></p><h2 id="page-cache">Page Cache</h2><p>page cache模型图：</p><p><img src="图解系统学习笔记/72568a29816fa9b505f15edac68adee2.jpeg" alt="img" style="zoom: 50%;"></p><p>查看系统page cache：</p><h3 id="page与page-cache">Page与Page Cache</h3><p>page 是内存管理分配的基本单位， <strong>Page Cache 由多个 page构成。但并不是所有 page 都被组织为 Page Cache</strong>。</p><p>Linux 系统上供用户可访问的内存分为两个类型，即：</p><ul><li>File-backed pages：文件备份页也就是 Page Cache 中的page，对应于磁盘上的若干数据块；对于这些页最大的问题是脏页回盘；</li><li>Anonymouspages：匿名页不对应磁盘上的任何磁盘数据块，它们是进程的运行是内存空间（例如方法栈、局部变量表等属性）；</li></ul><h3 id="swap-与-缺页中断">Swap 与 缺页中断</h3><p><strong>Swap机制</strong>：当物理内存不够用，内存管理单元（MemoryMangamentUnit，MMU）需要提供<strong>调度算法</strong>来回收相关内存空间，然后将清理出来的内存空间给当前内存申请方。</p><p>缺页中断：当进程发现需要访问的数据不在内存时，操作系统可能会将数据以页的方式加载到内存中。</p><p>swap的作用：对于有发生<strong>内存泄漏</strong>几率的应用程序（进程），Swap交换分区更是重要，这可以确保内存泄露不至于导致物理内存不够用，最终导致系统崩溃。</p><p>Linux 通过一个 swappiness 参数来控制 Swap 机制：这个参数值可为0-100，控制系统 swap 的优先级：</p><ul><li>高数值：较高频率的 swap，进程不活跃时主动将其转换出物理内存。</li><li>低数值：较低频率的swap，这可以确保交互式不因为内存空间频繁地交换到磁盘而提高响应延迟。</li></ul><p>Page Cache 的一部分，SwapCached：</p><p>当匿名页（Inactive(anon) 以及 Active(anon)）先被交换（swapout）到磁盘上后，然后再加载回（swap in）内存中，由于读入到内存后原来的Swap File 还在，所以 SwapCached 也可以认为是 File-backed page，即属于Page Cache。</p><p><img src="图解系统学习笔记/cbba24cac4668625c4e32d8cf641cf9c.jpeg" alt="图片" style="zoom:67%;"></p><h3 id="buffer-cache">Buffer Cache</h3><p><strong>Page Cache 用于缓存文件的页数据，buffer cache用于缓存块设备（如磁盘）的块数据。</strong></p><ul><li>页是逻辑上的概念，因此 Page Cache 是与文件系统同级的；</li><li>块是物理上的概念，因此 buffer cache 是与块设备驱动程序同级的。</li></ul><p>加速数据IO：</p><ul><li>写数据时首先写到缓存，将写入的页标记为 dirty，然后向外部存储flush，也就是缓存写机制中的 write-back（另一种是 write-through，Linux默认情况下不采用）；</li><li>读数据时首先读取缓存，如果未命中，再去外部存储读取，并且将读取来的数据也加入缓存。<strong>操作系统总是积极地将所有空闲内存都用作Page Cache 和 buffer cache</strong>，当内存不够用时也会用 LRU等算法淘汰缓存页。</li></ul><p><img src="图解系统学习笔记/c81ffa0b7d11506ffad3c33001385444.jpeg" alt="图片" style="zoom:50%;"></p><p>Page Cache 中的每个文件都是一棵基数树（radixtree，本质上是多叉搜索树），树的每个节点都是一个页。根据文件内的偏移量就可以快速定位到所在的页，如下图所示。关于基数树的原理可以参见英文维基，这里就不细说了。</p><p><img src="图解系统学习笔记/cfda154558181c4af27a34c1d4a97552.jpeg" alt="图片" style="zoom:67%;"></p><h3 id="预读">预读</h3><p>操作系统为基于 Page Cache的读缓存机制提供<strong>预读机制</strong>（PAGE_READAHEAD），一个例子是：</p><ul><li>用户线程仅仅请求读取磁盘上文件 A 的 offset 为 0-3KB范围内的数据，由于磁盘的基本读写单位为block（4KB），于是操作系统至少会读 0-4KB 的内容，这恰好可以在一个 page中装下。</li><li>但是操作系统出于<strong>局部性原理</strong>会选择将磁盘块 offset[4KB,8KB)、[8KB,12KB) 以及 [12KB,16KB)都加载到内存，于是额外在内存中申请了 3 个 page；</li></ul><p><img src="图解系统学习笔记/ae8252378169c8c14b8b9907983f7d8b-20230309235145646.png" alt="img" style="zoom:67%;"></p><h3 id="page-cache-与文件持久化的一致性可靠性">Page Cache与文件持久化的一致性&amp;可靠性</h3><p>文件 = 数据 + 元数据</p><ul><li>元数据：文件头信息</li></ul><p>要保证这俩数据的一致性。</p><p>当前 Linux 下以两种方式实现文件一致性：</p><ol type="1"><li><strong>WriteThrough（写穿）</strong>：向用户层提供特定接口，<strong>应用程序</strong>可<strong>主动</strong>调用接口来保证文件一致性；</li><li><strong>Writeback（写回）</strong>：系统中存在<strong>定期任务</strong>（表现形式为内核线程），周期性地同步文件系统中文件脏数据块，这是默认的Linux 一致性方案；</li></ol><p>上述两种方式最终都依赖于系统调用，主要分为如下三种系统调用：</p><table><colgroup><col style="width: 22%"><col style="width: 77%"></colgroup><thead><tr class="header"><th style="text-align: left;">方法</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">fsync(int fd)</td><td style="text-align: left;">fsync(fd)：将 fd代表的文件的脏数据和脏元数据全部刷新至磁盘中。</td></tr><tr class="even"><td style="text-align: left;">fdatasync(int fd)</td><td style="text-align: left;">fdatasync(fd)：将 fd代表的文件的脏数据刷新至磁盘，同时对必要的元数据刷新至磁盘中，这里所说的必要的概念是指：对接下来访问文件有关键作用的信息，如文件大小，而文件修改时间等不属于必要信息</td></tr><tr class="odd"><td style="text-align: left;">sync()</td><td style="text-align: left;">sync()：则是对系统中所有的脏的文件数据元数据刷新至磁盘中</td></tr></tbody></table><ol type="1"><li>创建的针对回写任务的内核线程数由系统中持久存储设备决定，为每个存储设备创建单独的刷新线程；</li><li>关于多线程的架构问题，Linux 内核采取了 <code>Lighthttp</code>的做法，即系统中存在一个管理线程和多个刷新线程（每个持久存储设备对应一个刷新线程）。管理线程监控设备上的脏页面情况，若设备一段时间内没有产生脏页面，就销毁设备上的刷新线程；若监测到设备上有脏页面需要回写且尚未为该设备创建刷新线程，那么创建刷新线程处理脏页面回写。而刷新线程的任务较为单调，只负责将设备中的脏页面回写至持久存储设备中。</li><li>刷新线程刷新设备上脏页面大致设计如下：<ul><li>每个设备保存脏文件链表，保存的是该设备上存储的脏文件的 inode节点。所谓的回写文件脏页面即回写该 inode 链表上的某些文件的脏页面；</li><li>系统中存在多个回写时机<ul><li>第一是应用程序主动调用回写接口（fsync，fdatasync 以及 sync 等）</li><li>第二管理线程周期性地唤醒设备上的回写线程进行回写</li><li>第三是某些应用程序/内核任务发现内存不足时要回收部分缓存页面而事先进行脏页面回写，设计一个统一的框架来管理这些回写任务非常有必要</li></ul></li></ul></li></ol><h1 id="设备管理">设备管理</h1><h2 id="设备控制器">设备控制器</h2><p>电脑设备可以接非常多的输入输出设备，比如键盘、鼠标、显示器、网卡、硬盘、打印机、音响等等，每个设备的用法和功能都不同操作系统是如何把这些输入输出设备统一管理的呢?</p><p>为了<strong>屏蔽设备之间的差异</strong>，每个设备都有一个叫<strong>设备控制器（*DeviceControl*）</strong> 的组件：</p><p><img src="图解系统学习笔记/I_O系统结构.png" alt="计算机 I/O 系统结构" style="zoom:50%;"></p><p>设备控制器的组成：</p><ul><li>芯片：执行自己的逻辑</li><li>寄存器：与CPU通信<ul><li>通过写入这些寄存器，操作系统可以命令设备发送数据、接收数据、开启或关闭，或者执行某些其他操作。</li><li>通过读取这些寄存器，操作系统可以了解设备的状态，是否准备好接收一个新的命令等。</li></ul></li></ul><p>控制器里的寄存器：</p><p><img src="图解系统学习笔记/设备控制器.png" alt="img" style="zoom: 50%;"></p><ul><li><em>数据寄存器</em>：CPU 向 I/O设备写入需要传输的数据，比如要打印的内容是「Hello」，CPU 就要先发送一个H 字符给到对应的 I/O 设备。</li><li><em>命令寄存器</em>：CPU 发送一个命令，告诉 I/O设备，要进行输入/输出操作，于是就会交给 I/O设备去工作，任务完成后，会把状态寄存器里面的状态标记为完成。</li><li><em>状态寄存器</em>：目的是告诉 CPU，现在已经在工作或工作已经完成，如果已经在工作状态，CPU再发送数据或者命令过来，都是没有用的，直到前面的工作已经完成，状态寄存标记成已完成，CPU才能发送下一个字符和命令。</li></ul><h2 id="io控制方式">I/O控制方式</h2><p>IO设备 IO结束以后，需要通知CPU进行 I/O，通知方法：</p><ul><li>轮询等待：占用CPU，淘汰</li><li>中断（不友好）：通知操作系统数据已经准备好了。硬件有中断控制器，设备执行完任务就会触发中断到中断控制器，中断控制器通知CPU，CPU必须停下来处理中断。<ul><li>软中断：代码调用 <code>INT</code> 指令触发</li><li>硬件中断：件通过中断控制器触发的。</li></ul></li></ul><p>DMA（<strong>Direct Memory Access</strong>）功能：它可以使得设备在<strong>CPU 不参与的情况下</strong>，能够自行完成把设备 I/O数据放入到内存。</p><p>DMA工作过程：</p><p><img src="图解系统学习笔记/DMA工作原理.png" alt="img" style="zoom: 67%;"></p><ul><li><strong>CPU 需对 DMA控制器下发指令</strong>，告诉它想读取多少数据，读完的数据放在内存的某个地方就可以了；</li><li>接下来，DMA控制器会向磁盘控制器发出指令，通知它从磁盘读数据到其内部的缓冲区中，接着磁盘控制器将缓冲区的数据传输到内存；</li><li>当磁盘控制器把数据传输到内存的操作完成后，磁盘控制器在总线上发出一个确认成功的信号到DMA 控制器；</li><li>DMA 控制器收到信号后，DMA 控制器发<strong>中断通知 CPU指令完成</strong>，CPU 就可以直接用内存里面现成的数据了；</li></ul><h2 id="设备驱动程序">设备驱动程序</h2><p>为了屏蔽「设备控制器」的差异，引入了<strong>设备驱动程序</strong>。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost2/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/%E9%A9%B1%E5%8A%A8%E7%A8%8B%E5%BA%8F.png" alt="img" style="zoom:50%;"></p><ul><li>驱动程序属于操作系统层面，是面向设备控制器的代码</li></ul><p>中断处理程序的流程：</p><p><img src="图解系统学习笔记/中断工作过程.png" alt="img" style="zoom:50%;"></p><ol type="1"><li>在 I/O时，外部设备的设备控制器如果已经准备好数据，则会通过中断控制器向 CPU发送中断请求；</li><li>保护被中断进程的 CPU 上下文；</li><li>转入相应的设备中断处理函数；</li><li>由<strong>设备驱动程序的中断处理函数</strong>进行中断处理；</li><li>恢复被中断进程的上下文；</li></ol><h2 id="通用块层">通用块层</h2><p>对于块设备，为了减少不同块设备的差异带来的影响，Linux通过一个统一的<strong>通用块层</strong>，来管理不同的块设备。</p><p>通用块层是处于文件系统和磁盘驱动中间的一个块设备抽象层，功能：</p><ul><li>向上为文件系统和应用程序，提供访问块设备的<strong>标准接口</strong>，向下把各种不同的磁盘设备抽象为统一的块设备，并在内核层面，提供一个框架来管理这些设备的驱动程序；</li><li>通用层还会给文件系统和应用程序发来的 <strong>I/O请求排队</strong>，接着会对队列重新排序、请求合并等方式，也就是<strong>I/O 调度</strong>，主要目的是为了提高磁盘读写的效率。</li></ul><p>Linux 内存支持 5 种 I/O 调度算法，分别是：</p><ul><li>没有调度算法：它不对文件系统和应用程序的 I/O做任何处理，这种算法常用在虚拟机 I/O 中，此时磁盘 I/O调度算法交由物理机系统负责。</li><li>先入先出调度算法：最简单的 I/O 调度算法，先进入 I/O 调度队列的 I/O请求先发生。</li><li>完全公平调度算法：，大部分系统都把这个算法作为默认的 I/O调度器，它为每个进程维护了一个 I/O调度队列，并按照时间片来均匀分布每个进程的 I/O 请求。</li><li>优先级调度：优先级高的 I/O 请求先发生，它适用于运行大量进程的系统，像是桌面环境、多媒体应用等。</li><li>最终期限调度算法：分别为读、写请求创建了不同的 I/O队列，这样可以提高机械磁盘的吞吐量，并确保达到最终期限的请求被优先处理，适用于在I/O 压力比较大的场景，比如数据库等。</li></ul><h2 id="存储系统io软件分层">存储系统IO软件分层</h2><p>Linux 存储系统的 I/O由上到下可以分为三个层次，分别是文件系统层、通用块层、设备层。他们整个的层次关系如下图：</p><p><img src="图解系统学习笔记/I_O软件分层.png" alt="io软件分层" style="zoom:50%;"></p><ul><li>文件系统层，包括虚拟文件系统和其他文件系统的具体实现，它向上为应用程序统一提供了标准的文件访问接口，向下会通过通用块层来存储和管理磁盘数据。</li><li>通用块层，包括块设备的 I/O 队列和 I/O 调度器，它会对文件系统的 I/O请求进行排队，再通过 I/O 调度器，选择一个 I/O 发给下一层的设备层。</li><li>设备层，包括硬件设备、设备控制器和驱动程序，负责最终物理设备的 I/O操作。</li></ul><p>有了<strong>文件系统接口</strong>之后，不但可以通过文件系统的命令行操作设备，也可以通过应用程序，调用<code>read</code>、<code>write</code>函数，就像读写文件一样操作设备，所以说设备在 Linux下，也只是一个特殊的文件。</p><p>但是，除了读写操作，还需要有检查特定于设备的功能和属性。于是，需要<code>ioctl</code>（输入输出控制接口）接口，是用于配置和修改特定设备属性的通用接口。</p><p>另外，存储系统的 I/O 是整个系统最慢的一个环节，所以 Linux提供了不少缓存机制来提高 I/O 的效率。</p><ul><li>为了提高文件访问的效率，会使用<strong>页缓存、索引节点缓存、目录项缓存</strong>等多种缓存机制，目的是为了减少对块设备的直接调用。</li><li>为了提高块设备的访问效率，会使用<strong>缓冲区</strong>，来缓存块设备的数据。</li></ul><h2 id="键入字母的流程">键入字母的流程</h2><p>硬件架构图：</p><p><img src="图解系统学习笔记/CPU 硬件总线图.png" alt="CPU 的硬件架构图" style="zoom:50%;"></p><ol type="1"><li>用户输入字符</li><li><strong>键盘控制器</strong>产生扫描码数据，将数据缓冲在<strong>键盘控制器的寄存器</strong>中，键盘控制器通过IO总线给CPU 发送<strong>中断请求</strong>。</li><li>操作系统保存被中断进程的CPU上下文，调用键盘的中断处理程序<ul><li>键盘的中断处理程序是在<strong>键盘驱动程序</strong>初始化时注册的<ul><li>功能：从键盘控制器的寄存器的缓冲区读取扫描码，再根据扫描码找到用户在键盘输入的字符，如果输入的字符是显示字符，那就会把扫描码翻译成对应显示字符的ASCII 码，比如用户在键盘输入的是字母A，是显示字符，于是就会把扫描码翻译成 A 字符的 ASCII码。得到了显示字符的 ASCII 码后，就会把 ASCII码放到「读缓冲区队列」，接下来就是要把显示字符显示屏幕了，显示设备的驱动程序会定时从「读缓冲区队列」读取数据放到「写缓冲区队列」，最后把「写缓冲区队列」的数据一个一个写入到显示设备的控制器的寄存器中的数据缓冲区，最后将这些数据显示在屏幕里。</li></ul></li></ul></li><li>显示结果到屏幕，恢复进程IO</li></ol><h1 id="网络系统">网络系统</h1><h2 id="零拷贝">零拷贝</h2><h3 id="为什么要有dma">为什么要有DMA</h3><p>如果没有DMA，IO过程如下：</p><p><img src="图解系统学习笔记/I_O 中断.png" alt="img" style="zoom: 50%;"></p><p>CPU需要全程参与，会阻塞，影响响应能力。</p><p>DMA技术<strong>直接内存访问（Direct Memory Access）技术：</strong>在进行 I/O设备和内存的数据传输的时候，数据搬运的工作全部交给 DMA 控制器，而 CPU不再参与任何与数据搬运相关的事情，这样 CPU 就可以去处理别的事务</p><p><img src="图解系统学习笔记/DRM I_O 过程.png" alt="img" style="zoom: 50%;"></p><ul><li>CPU收到用户提出的IO请求，向DMA通知以后，自己就忙其它事去了，等DMA读完数据，直接提醒CPU读取即可。</li></ul><h3 id="传统的文件传输">传统的文件传输</h3><p>传统IO工作方式：数据读取和写入是从用户空间到内核空间来回复制，内核空间的数据是通过操作系统层面的I/O 接口从磁盘读取或写入。</p><p>伪码，两个系统调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">read(file, tmp_buf, len);</span><br><span class="line">write(socket, tmp_buf, len);</span><br></pre></td></tr></table></figure><p><img src="图解系统学习笔记/传统文件传输.png" alt="img" style="zoom:67%;"></p><ul><li>四次内核态与用户态的转化，两次系统调用</li><li>四次数据拷贝<ul><li><em>第一次拷贝</em>，把磁盘上的数据拷贝到操作系统内核的缓冲区里，这个拷贝的过程是通过DMA 搬运的。</li><li><em>第二次拷贝</em>，把内核缓冲区的数据拷贝到用户的缓冲区里，于是我们应用程序就可以使用这部分数据了，这个拷贝到过程是由CPU 完成的。</li><li><em>第三次拷贝</em>，把刚才拷贝到用户的缓冲区里的数据，再拷贝到内核的socket 的缓冲区里，这个过程依然还是由 CPU 搬运的。</li><li><em>第四次拷贝</em>，把内核的 socket缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程又是由 DMA 搬运的。</li></ul></li></ul><p><strong>优化文件传输</strong></p><p><strong>减少上下文切换到次数 -&gt; 减少系统调用的次数</strong></p><p>减少内存拷贝次数 -&gt; 没必要设立用户缓冲区</p><h3 id="实现零拷贝">实现零拷贝</h3><h4 id="mmap-write">mmap + write</h4><p><code>read()</code>系统调用的过程中会把内核缓冲区的数据拷贝到用户的缓冲区里，为了减少这一步开销，我们可以用<code>mmap()</code> 替换 <code>read()</code> 系统调用函数。</p><p>伪码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf = mmap(file, len);</span><br><span class="line">write(sockfd, buf, len);</span><br></pre></td></tr></table></figure><p>mmap作用：把内核缓冲区里的数据「<strong>映射</strong>」到用户空间</p><p><img src="图解系统学习笔记/mmap %2B write 零拷贝.png" alt="img" style="zoom:50%;"></p><ol type="1"><li>应用进程调用了 <code>mmap()</code> 后，DMA会把磁盘的数据拷贝到内核的缓冲区里。接着，<strong>应用进程跟操作系统内核「共享」这个缓冲区</strong>；</li><li>应用进程再调用<code>write()</code>，操作系统直接将内核缓冲区的数据拷贝到 socket缓冲区中，这一切都发生在内核态，由 CPU 来搬运数据；</li><li>最后，把内核的 socket缓冲区里的数据，拷贝到网卡的缓冲区里，这个过程是由 DMA 搬运的。</li></ol><p><strong>缺点</strong></p><ul><li>仍然需要 4 次上下文切换</li></ul><h4 id="sendfile">sendfile</h4><p>linux内核版本 2.1 中，提供了一个专门发送文件的系统调用函数<code>sendfile()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">sendfile</span><span class="params">(<span class="type">int</span> out_fd, <span class="type">int</span> in_fd, <span class="type">off_t</span> *offset, <span class="type">size_t</span> count)</span>;</span><br></pre></td></tr></table></figure><ul><li>out_fd：目的端的文件描述符</li><li>in_fd：源端的文件描述符</li></ul><p><img src="图解系统学习笔记/senfile-3次拷贝.png" alt="img" style="zoom:67%;"></p><p>但是这还不是真正的零拷贝技术，如果网卡支持 SG-DMA（<em>TheScatter-Gather Direct Memory Access</em>）技术（和普通的 DMA有所不同），我们可以进一步减少通过 CPU 把内核缓冲区里的数据拷贝到 socket缓冲区的过程。</p><p>可以在 Linux 系统通过下面这个命令，查看网卡是否支持 scatter-gather特性：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ethtool -k eth0 | grep scatter-gather</span><br><span class="line">scatter-gather: on</span><br></pre></td></tr></table></figure><p>最终形式：</p><p><img src="图解系统学习笔记/senfile-零拷贝.png" alt="img" style="zoom:67%;"></p><p>全程没有CPU搬运数据，所有的数据通过DMA来拷贝传输。</p><h3 id="大文件传输">大文件传输</h3><p><strong>使用异步IO + 直接IO的方式</strong></p><p>异步IO只支持直接IO</p><ul><li>直接IO目的：绕开PageCache</li></ul><p>直接 I/O 应用场景常见的两种：</p><ul><li>应用程序已经实现了磁盘数据的缓存，那么可以不需要 PageCache再次缓存，减少额外的性能损耗。在 MySQL数据库中，可以通过参数设置开启直接 I/O，默认是不开启；</li><li>传输大文件的时候，由于大文件难以命中 PageCache 缓存，而且会占满PageCache导致「热点」文件无法充分利用缓存，从而增大了性能开销，因此，这时应该使用直接I/O。</li></ul><p>为什么不使用零拷贝：因为可能由于 PageCache被大文件占据，而导致「热点」小文件无法利用到PageCache，这样在高并发的环境下，会带来严重的性能问题。</p><h2 id="io多路复用">IO多路复用</h2><h2 id="socket模型">socket模型</h2><p>socket：插口，双方要进行网络通信前，各自得创建一个Socket，这相当于客户端和服务器都开了一个“口子”，插了根线进行数据传输。</p><ul><li>创建socket，可以指定网络层使用的是 IPv4 还是 IPv6，传输层使用的是TCP 还是 UDP。</li></ul><h3 id="基于tcp的socket编程">基于TCP的Socket编程</h3><p><strong>服务端</strong></p><ol type="1"><li>创建socket，调用bind()绑定ip地址和端口</li><li>服务端进入监听状态，调用<code>accept()</code>方法接收客户端连接请求</li><li>有客户端连接，进入TCP连接<ul><li>TCP连接有两个队列：<ul><li>半连接队列：服务端处于 <code>syn_rcvd</code> 的状态；</li><li>全连接队列：服务端处于 <code>established</code> 状态；</li></ul></li></ul></li><li>全连接队列不为空，拿出一个初始化连接完毕的<strong>新socket</strong>返回给应用程序，传输数据用这个socket<ul><li>socket类型<ul><li>已连接socket</li><li>监听socket</li></ul></li></ul></li></ol><p><strong>客户端</strong></p><p>建立连接的过程：</p><ol type="1"><li>创建socket</li><li>调用<code>connect()</code>方法</li></ol><p><img src="图解系统学习笔记/tcp_socket.png" alt="连接流程" style="zoom:67%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;硬件结构&quot;&gt;硬件结构&lt;/h1&gt;
&lt;h1 id=&quot;操作系统结构&quot;&gt;操作系统结构&lt;/h1&gt;
&lt;h2 id=&quot;内核&quot;&gt;内核&lt;/h2&gt;
&lt;p&gt;内核的概念：应用程序和外部硬件设备交互的桥梁。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;图解系统学习笔记/Kernel_Layo</summary>
      
    
    
    
    <category term="操作系统" scheme="https://vlsmhd.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="学习" scheme="https://vlsmhd.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="操作系统" scheme="https://vlsmhd.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>jenkins</title>
    <link href="https://vlsmhd.github.io/2023/09/10/jenkins/"/>
    <id>https://vlsmhd.github.io/2023/09/10/jenkins/</id>
    <published>2023-09-10T11:18:54.846Z</published>
    <updated>2023-09-10T12:52:35.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ci概念">CI概念</h1><p>持续集成（ Continuous integration ， 简称 CI）指的是，频繁地（一天多次）将代码集成到主干</p><figure><img src="jenkins/image-20210802000658790.png"alt="image-20210802000658790" /><figcaption aria-hidden="true">image-20210802000658790</figcaption></figure><p><strong>持续集成的组成要素</strong></p><p>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、测试统计等都是自动完成的， 无需人工干预。</p><p>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</p><p>一个持续集成服务器， Jenkins就是一个配置简单和使用方便的持续集成服务器。</p><p><strong>持续集成的好处</strong></p><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；2、对系统健康持续检查，减少发布风险带来的问题； 3、减少重复性工作；4、持续部署，提供可部署单元包； 5、持续交付可供使用的版本；6、增强团队信心；</p><h1 id="jenkins安装配置">Jenkins安装配置</h1><h2 id="jenkins介绍">Jenkins介绍</h2><figure><img src="jenkins/image-20210802011553923.png"alt="image-20210802011553923" /><figcaption aria-hidden="true">image-20210802011553923</figcaption></figure><p>Jenkins 是一款流行的开源持续集成（ContinuousIntegration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网：http://jenkins-ci.org/。</p><p>Jenkins的特征：</p><ul><li>开源的 Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</li><li>分布式构建：支持 Jenkins能够让多台计算机一起构建/测试。</li><li>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</li></ul><p>Jenkins安装和持续集成环境配置</p><figure><img src="jenkins/image-20210802011607894.png"alt="image-20210802011607894" /><figcaption aria-hidden="true">image-20210802011607894</figcaption></figure><p>1 ）首先，开发人员每天进行代码提交，提交到Git仓库</p><p>2）然后，Jenkins作为持续集成工具，使用Git工具到Git仓库拉取代码到集成服务器，再配合JDK，Maven等软件完成代码编译，代码测试与审查，测试，打包等工作，在这个过程中每一步出错，都重新再执行一次整个流程。</p><p>3）最后，Jenkins把生成的jar或war包分发到测试服务器或者生产服务器，测试人员或用户就可以访问应用。</p><h2 id="jenkins环境搭建">Jenkins环境搭建</h2><h3 id="jenkins安装配置-1">Jenkins安装配置</h3><p>导入镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器用户名：root   密码：itcast</span><br><span class="line"></span><br><span class="line">jenkins  用户名：itcast   密码：itcast</span><br></pre></td></tr></table></figure><ol type="1"><li><p>采用YUM方式安装</p><p>加入jenkins安装源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --no-check-certificate</span><br><span class="line"></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><p>执行yum命令安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install jenkins</span><br></pre></td></tr></table></figure></li><li><p>采用RPM安装包方式</p><p><ahref="https://pkg.jenkins.io/redhat-stable/">Jenkins安装包下载地址</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.190.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><p>执行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jenkins-2.190.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>配置：</p><p>修改配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改为对应的目标用户， 这里使用的是root</span></span><br><span class="line"><span class="variable">$JENKINS_USER</span>=<span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="comment"># 服务监听端口</span></span><br><span class="line">JENKINS_PORT=<span class="string">&quot;16060&quot;</span></span><br></pre></td></tr></table></figure><p>目录权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R root:root /var/lib/jenkins</span><br><span class="line"><span class="built_in">chown</span> -R root:root /var/cache/jenkins</span><br><span class="line"><span class="built_in">chown</span> -R root:root /var/log/jenkins</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><p>如果启动失败， 出现错误信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting Jenkins bash: /usr/bin/java: No such file or directory</span><br></pre></td></tr></table></figure><p>创建JAVA环境的软链接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li><li><p>管理后台初始化设置</p><p>http://192.168.200.100:16060/</p><p>需要输入管理密码， 在以下位置查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><figure><img src="jenkins/image-20210802011625800.png"alt="image-20210802011625800" /><figcaption aria-hidden="true">image-20210802011625800</figcaption></figure><p>按默认设置，把建议的插件都安装上</p><figure><img src="jenkins/image-20210802011638639.png"alt="image-20210802011638639" /><figcaption aria-hidden="true">image-20210802011638639</figcaption></figure><p>这一步等待时间较长， 安装完成之后， 创建管理员用户：</p><figure><img src="jenkins/image-20210802011653454.png"alt="image-20210802011653454" /><figcaption aria-hidden="true">image-20210802011653454</figcaption></figure></li></ol><p>配置访问地址：</p><figure><img src="jenkins/image-20210802011707013.png"alt="image-20210802011707013" /><figcaption aria-hidden="true">image-20210802011707013</figcaption></figure><p>配置完成之后， 会进行重启， 之后可以看到管理后台：</p><figure><img src="jenkins/image-20210802011723835.png"alt="image-20210802011723835" /><figcaption aria-hidden="true">image-20210802011723835</figcaption></figure><h3 id="jenkins插件安装">Jenkins插件安装</h3><p>在实现持续集成之前， 需要确保以下插件安装成功。</p><ul><li>Maven Integration plugin： Maven 集成管理插件。</li><li>Docker plugin： Docker集成插件。</li><li>GitLab Plugin： GitLab集成插件。</li><li>Publish Over SSH：远程文件发布插件。</li><li>SSH: 远程脚本执行插件。</li></ul><p>安装方法：</p><ol type="1"><li><p>进入【系统管理】-【插件管理】</p></li><li><p>点击标签页的【可选插件】</p><p>在过滤框中搜索插件名称</p><figure><img src="jenkins/image-20210802011740056.png"alt="image-20210802011740056" /><figcaption aria-hidden="true">image-20210802011740056</figcaption></figure></li><li><p>勾选插件， 点击直接安装即可。</p></li></ol><blockquote><p>注意，如果没有安装按钮，需要更改配置</p><p>在安装插件的高级配置中，修改升级站点的连接为：http://updates.jenkins.io/update-center.json保存</p><figure><img src="jenkins/image-20210802011758588.png"alt="image-20210802011758588" /><figcaption aria-hidden="true">image-20210802011758588</figcaption></figure></blockquote><h4 id="git安装配置">Git安装配置</h4><ol type="1"><li><p>yum 安装方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure></li><li><p>采用源码包方式安装</p><ul><li><p>安装依赖包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum -y install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li><li><p>如果之前有安装旧版本， 先做卸载， 没有安装则忽略</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure></li><li><p>下载源码包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-1.8.3.1.tar.gz</span><br><span class="line">tar -xvf git-1.8.3.1.tar.gz</span><br></pre></td></tr></table></figure><p>也可以安装其他版本，地址：https://mirrors.edge.kernel.org/pub/software/scm/git/</p></li><li><p>编译安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-1.8.3.1</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查git版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># git version</span></span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure></li></ol><h4 id="maven安装配置">Maven安装配置</h4><ol type="1"><li><p>下载安装包</p><p>下载地址： https://maven.apache.org/download.cgi</p></li><li><p>解压安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">unzip -o apache-maven-3.6.1.zip </span><br></pre></td></tr></table></figure><p>上传本地仓库并解压</p><figure><img src="jenkins/image-20210802013808080.png"alt="image-20210802013808080" /><figcaption aria-hidden="true">image-20210802013808080</figcaption></figure></li><li><p>配置</p><p>环境变量配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>增加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven/apache-maven-3.6.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>如果权限不够，则需要增加当前目录的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /usr/local/maven/apache-maven-3.6.1/bin/mvn</span><br></pre></td></tr></table></figure><p>修改镜像仓库配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/maven/apache-maven-3.6.1/conf/settings.xml</span><br></pre></td></tr></table></figure><p>需要把本机的仓库打包上传到服务器上（不上传会自动下载）</p><p>然后指定上传后的仓库配置</p><figure><img src="jenkins/image-20210802013533421.png"alt="image-20210802013533421" /><figcaption aria-hidden="true">image-20210802013533421</figcaption></figure></li></ol><h4 id="docker安装配置">Docker安装配置</h4><ol type="1"><li><p>更新软件包版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></li><li><p>卸载旧版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装软件依赖包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置yum源为阿里云</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装后查看docker版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure></li><li><p>启动</p><p>设置开机启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li></ol><h4 id="docker-registry私有仓库安装配置">DockerRegistry私有仓库安装配置</h4><h3 id="jenkins工具配置">Jenkins工具配置</h3><ol type="1"><li><p>进入【系统管理】--&gt; 【全局工具配置】</p><figure><img src="jenkins/image-20210802011944005.png"alt="image-20210802011944005" /><figcaption aria-hidden="true">image-20210802011944005</figcaption></figure></li><li><p>MAVEN配置全局设置</p><figure><img src="jenkins/image-20210802011956261.png"alt="image-20210802011956261" /><figcaption aria-hidden="true">image-20210802011956261</figcaption></figure></li><li><p>指定JDK配置</p><figure><img src="jenkins/image-20210802012010244.png"alt="image-20210802012010244" /><figcaption aria-hidden="true">image-20210802012010244</figcaption></figure></li><li><p>指定MAVEN 目录</p><figure><img src="jenkins/image-20210802012026476.png"alt="image-20210802012026476" /><figcaption aria-hidden="true">image-20210802012026476</figcaption></figure></li><li><p>指定DOCKER目录</p><figure><img src="jenkins/image-20210802012038581.png"alt="image-20210802012038581" /><figcaption aria-hidden="true">image-20210802012038581</figcaption></figure><p>如果不清楚docker的安装的目录，可以使用<code>whereis docker</code>命令查看docker的安装的目录</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ci概念&quot;&gt;CI概念&lt;/h1&gt;
&lt;p&gt;持续集成（ Continuous integration ， 简称 CI
）指的是，频繁地（一天多次）将代码集成到主干&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;jenkins/image-202108020006</summary>
      
    
    
    
    <category term="CI/CD" scheme="https://vlsmhd.github.io/categories/CI-CD/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka学习</title>
    <link href="https://vlsmhd.github.io/2023/09/03/Kafka%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/09/03/Kafka%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-09-03T10:19:16.718Z</published>
    <updated>2023-11-30T08:42:08.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速入门">快速入门</h1><h2 id="概念">概念</h2><h3 id="介绍">介绍</h3><p>Kafka是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：http://kafka.apache.org/</p><figure><img src="Kafka学习/image-20210525181028436.png"alt="image-20210525181028436" /><figcaption aria-hidden="true">image-20210525181028436</figcaption></figure><p>kafka介绍-名词解释</p><figure><img src="Kafka学习/image-20210525181100793.png"alt="image-20210525181100793" /><figcaption aria-hidden="true">image-20210525181100793</figcaption></figure><ul><li><p>producer：发布消息的对象称之为主题生产者（Kafka topicproducer）</p></li><li><p>topic：Kafka将消息分门别类，每一类的消息称之为一个主题（Topic）</p></li><li><p>consumer：订阅消息并处理发布的消息的对象称之为主题消费者（consumers）</p></li><li><p>broker：已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理（Broker）。消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p></li></ul><h3 id="section"></h3><h2 id="环境搭建">环境搭建</h2><h3 id="docker集成">docker集成</h3><h2 id="使用">使用</h2><h3 id="java简易使用">java简易使用</h3><h3 id="springboot集成">springboot集成</h3><h1 id="原理篇">原理篇</h1><h2 id="时间轮算法">时间轮算法</h2><blockquote><p>时间轮技术其实出来很久了，在<ahref="https://so.csdn.net/so/search?q=kafka&amp;spm=1001.2101.3001.7020">kafka</a>、zookeeper等技术中都有时间轮使用的方式。</p><p>时间轮是一种高效利用线程资源进行批量化调度的一种调度模型。把大批量的调度任务全部绑定到同一个调度器上，使用这一个调度器来进行所有任务的管理、触发、以及运行。所以时间轮的模型能够高效管理各种延时任务、周期任务、通知任务。</p><ul><li>在Kafka中应用了大量的延迟操作但在Kafka中，并没用使用JDK自带的Timer或是DelayQueue用于延迟操作，而是使用自己开发的DelayedOperationPurgatory组件用于管理延迟操作。</li><li>Kafka这类分布式框架有大量延迟操作并且对性能要求及其高，而java.util.Timer与java.uti.concurrent.DelayQueue的插入和删除时间复杂度都为对数阶0(logn)并不能满足Kafka性能要求。</li><li>Kafka实现了基于时间轮的定时任务组件，该时间轮定时任务实现的插入与删除(开始定时器与暂停定时器)的时间复杂度都为常数阶O(1)。</li><li>时间轮的应用并不少见，在Netty、Akka、Quarz、Zookeeper、Redis等高性能组件中都存在时间轮定时器的踪影。</li><li>Redis的定时调度是基于时间轮实现的。</li></ul></blockquote><h3 id="时间轮数据结构">时间轮数据结构</h3><p>底层采用环形数组，数组的每个元素称为槽，可以存放一个<strong>定时任务列表</strong>（TimerTaskList）。</p><p><strong>定时任务列表（也成Bucket）</strong>：双向环形链表，链表中每一项为<strong>定时任务项</strong>（TimerTaskEntry），其中封装了真正的定时任务（TimerTask）。</p><figure><img src="Kafka学习/format,png-1696317891561-8.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><ul><li><strong>tickMs：</strong>时间轮由多个时间格组成，每个<strong>时间格</strong>就是tickMs，它代表当前时间轮的<strong>基本时间跨度</strong>。<ul><li>对于秒针而言，tickMs 就是 1 秒。同理，分针是 1 分，时针是 1 小时。在Kafka 中，第 1 层时间轮的 tickMs 被固定为 1 毫秒，也就是说，向前推进一格Bucket 的时长是 1 毫秒。</li></ul></li><li><strong>wheelSize：</strong>代表每一层<strong>时间轮的格数</strong><ul><li>每一层时间轮上的 Bucket 数量。第 1 层的 Bucket 数量是 20。</li></ul></li><li><strong>interval：</strong>当前时间轮的<strong>总体时间跨度</strong>，<code>interval = tickMs × wheelSize</code></li><li><strong>startMs：</strong>构造当层时间轮时候的当前时间，第一层的时间轮的startMs是<code>TimeUnit.NANOSECONDS.toMillis(nanoseconds()),</code><strong>上层时间轮的startMs为下层时间轮的currentTime。</strong><ul><li>当前时间轮创建的起始时间戳</li></ul></li><li><strong>currentTime：</strong>表示<strong>时间轮当前所处的时间</strong>，currentTime是<strong>tickMs的整数倍</strong>（通过currentTime=startMs- (startMs %tickMs）来保正currentTime一定是tickMs的整数倍，这个运算类比钟表中分钟里65秒分钟指针指向的还是1分钟）。currentTime可以将整个时间轮划分为到期部分和未到期部分，<strong>currentTime当前指向的时间格也属于到期部分</strong>，表示刚好到期，需要处理此时间格所对应的TimerTaskList的所有任务。</li></ul><h3 id="时间轮工作过程">时间轮工作过程</h3><p><img src="Kafka学习/format,png-1696303764735-5.png" alt="img" style="zoom: 200%;" /></p><h4 id="添加任务">添加任务</h4><p>若时间轮的tickMs=1ms，wheelSize=20，那么可以计算得出interval为20ms。</p><p>初始情况下表盘指针currentTime指向时间格0，此时有一个定时为2ms的任务插入进来会存放到时间格为2的TimerTaskList中。随着时间的不断推移，指针currentTime不断向前推进，过了2ms之后，当到达时间格2时，就需要将时间格2所对应的TimeTaskList中的任务做相应的到期操作。</p><p>此时若又有一个定时为8ms的任务插入进来，则会存放到时间格10中，currentTime再过8ms后会指向时间格10。如果同时有一个定时为19ms的任务插入进来怎么办？新来的TimerTaskEntry会复用原来的TimerTaskList，所以它会插入到原本已经到期的时间格1中。</p><ul><li>整个时间轮的总体跨度是不变的，<strong>随着指针currentTime的不断推进，当前时间轮所能处理的时间段也在不断后移，总体时间范围在currentTime和currentTime+interval之间。</strong></li></ul><h4 id="时间轮的升降级">时间轮的升降级</h4><p><img src="Kafka学习/format,png.png" alt="img" style="zoom: 67%;" /></p><p>当添加的任务超过这一层时间的跨度interval，会将该事件向上级传递，上级的tickMs是下级的interval传递直到某一个时间满足<code>expiration &lt; currentTime + interval</code>,计算完对应哪一格子，将事件放入，重新设置超时时间，然后放进jkd延迟队列。</p><p>各层时间跨度：</p><ul><li>第一层的时间轮tickMs=1ms, wheelSize=20, interval=20ms。</li><li>第二层的时间轮的tickMs为第一层时间轮的interval，即为20ms。</li><li>每一层时间轮的wheelSize是固定的，都是20，那么第二层的时间轮的总体时间跨度interval为400ms。</li><li>以此类推，400ms也是第三层的tickMs的大小，第三层的时间轮的总体时间跨度为8000ms。</li></ul><p><strong>存储位置计算公式：</strong><code>buckets[(expiration / tickMs) % wheelSize]</code></p><p>其中,</p><ul><li>expiration = delayMs + startMs</li><li>startMs = currentTime</li><li>tickMS：当前层级的</li></ul><p>案例：</p><ol type="1"><li><p>350ms的任务如何添加： 350 &lt; 20 *20，因此会被插入到第二级时间轮，计算过程： (350 / 1) % 20 = 17，(17 / 1)% 20 = 17 会放入第16个格子</p></li><li><p>如果此时有一个450ms后执行的任务，将会放在第三层时间轮中，按照刚才的计算公式，仍然假设currentTime=0ms,(450ms / tickMs(400))，会放在第1个bucket。第0个bucket里会包含[0,400)ms的任务, 第1个bucket里会包含[400, 800)ms的任务。</p><p>降级操作：</p><ol type="1"><li>当时间过去了400ms，那么450ms后就要执行的任务还剩下50ms的时间才能执行，此时有一个时间轮降级的操作，将50ms任务重新提交到二层级时间轮中。</li><li>50ms的任务根据公式(50ms/tickMs(20))会放入第二个时间轮的第2个的bucket中，此bucket的时间范围为[40,60)ms，然后再经过40ms，这个50ms的任务又会被监控到，只剩10ms，开始降级</li><li>随后放到第一层的第10个bucket，到期后执行</li></ol></li></ol><h3 id="源码分析">源码分析</h3><ul><li>TimingWheel:时间轮时间类，存储定时任务的环形队列，内部使用数组实现，数组是用于存放TimerTaskList对象，</li><li>TimerTaskList：<strong>环形双向链表</strong></li><li>TimerTaskEntry：环形双向链表的<strong>链表项</strong>，封装了定时任务TimerTask</li><li>TimerTask:表示一个要执行的任务，实现了Runnable接口,TimerTask中delayMs字段用于记录任务延迟时间</li></ul><h4 id="timertask任务类">TimerTask任务类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TimerTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> delayMs;<span class="comment">//表示当前任务延迟多久后执行(单位ms)，比如说延迟3s，则此值为3000     属于相对当前的时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimerTask</span><span class="params">(<span class="type">long</span> delayMs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.delayMs = delayMs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimerTaskList.<span class="type">TimerTaskEntry</span> <span class="variable">timerTaskEntry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消当前任务，就是从TimerTaskEntry移出TimerTask，并且把当前的timerTaskEntry置空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancel</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(timerTaskEntry != <span class="literal">null</span>)&#123;</span><br><span class="line">            timerTaskEntry.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        timerTaskEntry = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TimerTaskList.TimerTaskEntry <span class="title function_">getTimerTaskEntry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> timerTaskEntry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前任务绑定的TimerTaskEntry</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setTimerTaskEntry</span><span class="params">(TimerTaskList.TimerTaskEntry entry)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timerTaskEntry != <span class="literal">null</span> &amp;&amp; timerTaskEntry != entry) &#123;</span><br><span class="line">            timerTaskEntry.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        timerTaskEntry = entry;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象类：项目中自定义的任务可以继承该类，继承该有的属性</li></ul><h4 id="timertasklist任务列表">TimerTaskList任务列表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerTaskList</span> <span class="keyword">implements</span> <span class="title class_">Delayed</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger taskCounter;</span><br><span class="line">    <span class="comment">//列表头结点,哨兵</span></span><br><span class="line">    <span class="keyword">public</span> TimerTaskEntry root;</span><br><span class="line">    <span class="comment">//过期时间</span></span><br><span class="line">    <span class="keyword">public</span> AtomicLong expiration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimerTaskList</span><span class="params">(AtomicInteger taskCounter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.taskCounter = taskCounter;</span><br><span class="line">        <span class="built_in">this</span>.root =  <span class="keyword">new</span> <span class="title class_">TimerTaskEntry</span>(<span class="literal">null</span>,-<span class="number">1L</span>);</span><br><span class="line">        <span class="built_in">this</span>.expiration = <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(-<span class="number">1</span>);</span><br><span class="line">        root.next = root;</span><br><span class="line">        root.prev = root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给当前槽设置过期时间</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setExpiration</span><span class="params">(Long expirationMs)</span> &#123;</span><br><span class="line">        <span class="comment">//返回的是旧值</span></span><br><span class="line">        <span class="keyword">return</span> expiration.getAndSet(expirationMs) != expirationMs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpiration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 遍历</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> f  传入相应的遍历行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">foreach</span><span class="params">(Consumer&lt;TimerTask&gt; f)</span>&#123;</span><br><span class="line">        <span class="type">TimerTaskEntry</span> <span class="variable">entry</span> <span class="operator">=</span> root.next;</span><br><span class="line">        <span class="keyword">while</span>(entry != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">TimerTaskEntry</span> <span class="variable">entryNext</span> <span class="operator">=</span> entry.next;</span><br><span class="line">            <span class="keyword">if</span>(!entryNext.cancel())&#123;</span><br><span class="line">                f.accept(entry.timerTask);</span><br><span class="line">            &#125;</span><br><span class="line">            entry = entryNext;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加任务到列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(TimerTaskEntry timerTaskEntry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">done</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(!done)&#123;</span><br><span class="line">            <span class="comment">//从其它列表中移除该任务entry</span></span><br><span class="line">            timerTaskEntry.remove();</span><br><span class="line">            <span class="comment">//锁当前链表，防止并发添加导致任务消失</span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="comment">//防止多个线程持有同一个timerTaskEntry，重复添加</span></span><br><span class="line">                <span class="keyword">synchronized</span> (timerTaskEntry)&#123;</span><br><span class="line">                    <span class="type">TimerTaskEntry</span> <span class="variable">tail</span> <span class="operator">=</span> root.prev;</span><br><span class="line">                    timerTaskEntry.prev = tail;</span><br><span class="line">                    timerTaskEntry.next = root;</span><br><span class="line">                    tail.next = timerTaskEntry;</span><br><span class="line">                    root.prev = timerTaskEntry;</span><br><span class="line">                    done = <span class="literal">true</span>;</span><br><span class="line">                    timerTaskEntry.list = <span class="built_in">this</span>;</span><br><span class="line">                    taskCounter.incrementAndGet();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移出任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(TimerTaskEntry timerTaskEntry)</span> &#123;</span><br><span class="line">        <span class="comment">//防止两个拥有相同的timerTaskEntry对象的线程多删（导致counter多减了个1）</span></span><br><span class="line">        <span class="keyword">synchronized</span> (timerTaskEntry)&#123;</span><br><span class="line">            <span class="keyword">if</span>(timerTaskEntry.list == <span class="built_in">this</span>)&#123;</span><br><span class="line">                timerTaskEntry.prev.next = timerTaskEntry.next;</span><br><span class="line">                timerTaskEntry.next.prev = timerTaskEntry.prev;</span><br><span class="line">                timerTaskEntry.next = <span class="literal">null</span>;</span><br><span class="line">                timerTaskEntry.prev = <span class="literal">null</span>;</span><br><span class="line">                timerTaskEntry.list = <span class="literal">null</span>;</span><br><span class="line">                taskCounter.decrementAndGet();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空任务列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">(Consumer&lt;TimerTaskEntry&gt; f)</span>&#123;</span><br><span class="line">        <span class="type">TimerTaskEntry</span> <span class="variable">head</span> <span class="operator">=</span> root.next;</span><br><span class="line">        <span class="keyword">while</span> (head != root)&#123;</span><br><span class="line">            <span class="comment">//头删</span></span><br><span class="line">            remove(head);</span><br><span class="line">            f.accept(head);</span><br><span class="line">            head = root.next;</span><br><span class="line">        &#125;</span><br><span class="line">        expiration.set(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得当前任务剩余时间</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(Math.max(getExpiration() - System.currentTimeMillis(), <span class="number">0</span>), TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed d)</span> &#123;</span><br><span class="line">        <span class="type">TimerTaskList</span> <span class="variable">other</span> <span class="operator">=</span> (TimerTaskList) d;</span><br><span class="line">        <span class="keyword">return</span> Long.compare(getExpiration(),other.getExpiration());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TimerTaskEntry</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;TimerTaskEntry&gt;&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> TimerTask timerTask;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//任务的过期时间，此处的过期时间设置的过期间隔 + 系统当前时间（毫秒）</span></span><br><span class="line">        <span class="keyword">public</span> Long expirationMs;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所属列表</span></span><br><span class="line">        <span class="keyword">private</span> TimerTaskList list;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> TimerTaskEntry prev;</span><br><span class="line">        <span class="keyword">private</span> TimerTaskEntry next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">TimerTaskEntry</span><span class="params">(TimerTask timerTask,Long expirationMs)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.timerTask = timerTask;</span><br><span class="line">            <span class="built_in">this</span>.expirationMs = expirationMs;</span><br><span class="line">            <span class="comment">// 传递进来任务TimerTask，并设置TimerTask的包装类</span></span><br><span class="line">            <span class="keyword">if</span>(timerTask != <span class="literal">null</span>) &#123;</span><br><span class="line">                timerTask.setTimerTaskEntry(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(TimerTaskEntry task)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.compare(<span class="built_in">this</span>.expirationMs, task.expirationMs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从列表中移除该任务entry</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">TimerTaskList</span> <span class="variable">currList</span> <span class="operator">=</span> list;</span><br><span class="line">            <span class="keyword">while</span> (currList != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//列表主题类加锁了，本方法不用加锁</span></span><br><span class="line">                currList.remove(<span class="built_in">this</span>);</span><br><span class="line">                currList = list;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任务的取消，就是判断任务TimerTask的Entry是否是当前任务 (有可能任务降级，不属于当前列表了）</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> timerTask.getTimerTaskEntry() != <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间轮结构">时间轮结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimingWheel</span> &#123;</span><br><span class="line">    <span class="comment">//每一槽的时间跨度</span></span><br><span class="line">    <span class="keyword">private</span> Long tickMs;</span><br><span class="line">    <span class="comment">//槽的个数\时间轮的格数</span></span><br><span class="line">    <span class="keyword">private</span> Integer wheelSize;</span><br><span class="line">    <span class="comment">//系统开始时间</span></span><br><span class="line">    <span class="keyword">private</span> Long startMs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AtomicInteger taskCounter;  <span class="comment">// 当前层任务数</span></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;TimerTaskList&gt; queue; <span class="comment">//延迟队列，用于从队列取每个任务列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long interval;<span class="comment">//每一层总时间跨度</span></span><br><span class="line">    <span class="keyword">private</span> Long currentTime;<span class="comment">//时间轮当前时间（修正）  (当前指针指的格子）</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;TimerTaskList&gt; buckets;  <span class="comment">// 每一层的每一个槽中的时间任务列表</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//上一层时间轮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TimingWheel</span> <span class="variable">overflowWheel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TimingWheel</span><span class="params">(Long tickMs, Integer wheelSize, Long startMs, AtomicInteger taskCounter, DelayQueue&lt;TimerTaskList&gt; queue)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tickMs = tickMs;</span><br><span class="line">        <span class="built_in">this</span>.wheelSize = wheelSize;</span><br><span class="line">        <span class="built_in">this</span>.startMs = startMs;</span><br><span class="line">        <span class="built_in">this</span>.taskCounter = taskCounter;</span><br><span class="line">        <span class="built_in">this</span>.queue = queue;</span><br><span class="line">        interval = tickMs * wheelSize;</span><br><span class="line">        currentTime = startMs - (startMs % tickMs); <span class="comment">//当前时间，往前推</span></span><br><span class="line"></span><br><span class="line">        buckets = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(wheelSize);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wheelSize; i++) &#123;</span><br><span class="line">            buckets.add(<span class="keyword">new</span> <span class="title class_">TimerTaskList</span>(taskCounter));  <span class="comment">//创建每一个槽中的列表</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建上层时间轮</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">createOverflowWheel</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (overflowWheel == <span class="literal">null</span>) &#123;</span><br><span class="line">            overflowWheel = <span class="keyword">new</span> <span class="title class_">TimingWheel</span>(<span class="built_in">this</span>.interval, wheelSize, currentTime, taskCounter, queue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加任务</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">addTask</span><span class="params">(TimerTaskList.TimerTaskEntry timerTaskEntry)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">expiration</span> <span class="operator">=</span> timerTaskEntry.expirationMs;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">thisTime</span> <span class="operator">=</span> currentTime + <span class="number">1</span> * tickMs; <span class="comment">//当前时间轮所指位置的下一个槽的开始时间，因为当前时间槽也算到期。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (timerTaskEntry) &#123;</span><br><span class="line">            <span class="keyword">if</span> (timerTaskEntry.cancel()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expiration &lt; thisTime) &#123;<span class="comment">//查看是否过期</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (expiration &lt; currentTime + interval) &#123; <span class="comment">//判断是否能添加到当前时间轮</span></span><br><span class="line">                <span class="type">long</span> <span class="variable">virtualId</span> <span class="operator">=</span> expiration / tickMs;<span class="comment">//虚拟时间标识</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">whereBucket</span> <span class="operator">=</span> (<span class="type">int</span>) virtualId % wheelSize;</span><br><span class="line">                <span class="type">TimerTaskList</span> <span class="variable">bucket</span> <span class="operator">=</span> buckets.get(whereBucket);</span><br><span class="line">                bucket.add(timerTaskEntry);</span><br><span class="line">                <span class="comment">//更新槽的过期时间</span></span><br><span class="line">                <span class="keyword">if</span> (bucket.setExpiration(virtualId * tickMs)) &#123;</span><br><span class="line">                    queue.offer(bucket);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//找上级时间轮</span></span><br><span class="line">                <span class="keyword">if</span> (overflowWheel == <span class="literal">null</span>) &#123;</span><br><span class="line">                    createOverflowWheel();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> overflowWheel.addTask(timerTaskEntry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//时间轮的推动,向前驱动时间轮</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">advanceClock</span><span class="params">(Long timeMs)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timeMs &gt;= currentTime + tickMs)&#123;</span><br><span class="line">            currentTime = timeMs - (timeMs % tickMs);</span><br><span class="line">            <span class="keyword">if</span>(overflowWheel != <span class="literal">null</span>)&#123;</span><br><span class="line">                overflowWheel.advanceClock(currentTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="时间轮接口">时间轮接口</h4><ul><li>kafka中提供了Timer接口，用于对外提供调用，分别是<ul><li>Timer#add 添加任务；</li><li>Timer#advanceClock 驱动时间；</li><li>Timer#size 时间轮中总任务数；</li><li>Timer#shutdown 停止时间轮</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(TimerTask timerTask)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">advanceClock</span><span class="params">(Long timeoutMs)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="systemtimer实现类">SystemTimer实现类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemTimer</span> <span class="keyword">implements</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Integer</span> <span class="variable">wheelSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">tickMs</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">startMs</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">    <span class="keyword">private</span> String executorName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ExecutorService</span> <span class="variable">taskExecutor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">1</span>, (runnable) -&gt;&#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">        thread.setName(<span class="string">&quot;executor-&quot;</span> + executorName);</span><br><span class="line">        thread.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TimingWheel timingWheel;</span><br><span class="line">    <span class="keyword">private</span> AtomicInteger taskCounter;</span><br><span class="line">    <span class="comment">//任务队列</span></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;TimerTaskList&gt; delayQueue = <span class="keyword">new</span> <span class="title class_">DelayQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理并发</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantReadWriteLock</span> <span class="variable">readWriteLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock.<span class="type">ReadLock</span> <span class="variable">readLock</span> <span class="operator">=</span> readWriteLock.readLock();</span><br><span class="line">    <span class="keyword">private</span> ReentrantReadWriteLock.<span class="type">WriteLock</span> <span class="variable">writeLock</span> <span class="operator">=</span> readWriteLock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来执行时间轮的重新排列，及上一个槽中的任务列表被执行后，后面的槽中的任务列表移动</span></span><br><span class="line">    <span class="keyword">private</span> Consumer&lt;TimerTaskList.TimerTaskEntry&gt; reinsert = (timerTaskEntry) -&gt; addTimerTaskEntry(timerTaskEntry);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemTimer</span><span class="params">(Integer wheelSize, Long tickMs, Long startMs, String executorName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wheelSize = wheelSize;</span><br><span class="line">        <span class="built_in">this</span>.tickMs = tickMs;</span><br><span class="line">        <span class="built_in">this</span>.startMs = startMs;</span><br><span class="line">        <span class="built_in">this</span>.executorName = executorName;</span><br><span class="line">        taskCounter = <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        timingWheel = <span class="keyword">new</span> <span class="title class_">TimingWheel</span>(tickMs, wheelSize, startMs, taskCounter, delayQueue);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemTimer</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(TimerTask timerTask)</span> &#123;</span><br><span class="line">        <span class="comment">//读锁允许多个线程同时访问共享资源，但不允许写操作。</span></span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            addTimerTaskEntry(<span class="keyword">new</span> <span class="title class_">TimerTaskList</span>.</span><br><span class="line">                    TimerTaskEntry(timerTask, timerTask.delayMs + System.currentTimeMillis()));</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addTimerTaskEntry</span><span class="params">(TimerTaskList.TimerTaskEntry timerTaskEntry)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!timingWheel.addTask(timerTaskEntry)) &#123;</span><br><span class="line">            <span class="comment">//添加失败，如果任务没取消立即执行</span></span><br><span class="line">            <span class="keyword">if</span>(!timerTaskEntry.cancel())&#123;</span><br><span class="line">                taskExecutor.submit(timerTaskEntry.timerTask);<span class="comment">//任务对象实现了runnable接口</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间向前推进，推进过程中处理已经过期的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutMs   大于currentTime的某一时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">advanceClock</span><span class="params">(Long timeoutMs)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TimerTaskList</span> <span class="variable">bucket</span> <span class="operator">=</span> delayQueue.poll(timeoutMs, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="keyword">if</span>(bucket != <span class="literal">null</span>)&#123;</span><br><span class="line">            writeLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (bucket != <span class="literal">null</span>)&#123;</span><br><span class="line">                    timingWheel.advanceClock(bucket.getExpiration());</span><br><span class="line">                    <span class="comment">// 驱动时间后，需要移动TimerTaskList到上一个槽或者从上一层移动到本层</span></span><br><span class="line">                    bucket.flush(reinsert);</span><br><span class="line">                    bucket = delayQueue.poll();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                writeLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> taskCounter.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        taskExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快速入门&quot;&gt;快速入门&lt;/h1&gt;
&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;
&lt;h3 id=&quot;介绍&quot;&gt;介绍&lt;/h3&gt;
&lt;p&gt;Kafka
是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：http://kafka.apache.org/&lt;/</summary>
      
    
    
    
    <category term="消息队列" scheme="https://vlsmhd.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="Kafka" scheme="https://vlsmhd.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/Kafka/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode双指针题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/09/02/leetcode%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/09/02/leetcode%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-09-02T00:23:47.137Z</published>
    <updated>2023-11-17T01:31:30.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="双指针解题规律">双指针解题规律</h1><h2 id="对向指针">对向指针</h2><p>对向搜索：可用于解决有序数组找和的区间，大了右指针移动，小了左指针移动。</p><h2 id="快慢指针">快慢指针</h2><h1 id="题目">题目</h1><h2 id="简单">简单</h2><h3 id="反转字符串中的元音字母"><ahref="https://leetcode.cn/problems/reverse-vowels-of-a-string/">345.反转字符串中的元音字母</a></h3><p>给你一个字符串 <code>s</code>，仅反转字符串中的所有元音字母，并返回结果字符串。</p><p>元音字母包括<code>'a'</code>、<code>'e'</code>、<code>'i'</code>、<code>'o'</code>、<code>'u'</code>，且可能以大小写两种形式出现不止一次。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;hello&quot;</span><br><span class="line">输出：&quot;holle&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;leetcode&quot;</span><br><span class="line">输出：&quot;leotcede&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 3 * 105</code></li><li><code>s</code> 由 <strong>可打印的 ASCII</strong> 字符组成</li></ul><h4 id="对向指针-1">对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseVowels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; n &amp;&amp; !isVowel(arr[left])) left++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(right &gt; <span class="number">0</span> &amp;&amp; !isVowel(arr[right])) right--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">                arr[right] = tmp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;e&#x27;</span> || c == <span class="string">&#x27;o&#x27;</span> || c == <span class="string">&#x27;i&#x27;</span> || c == <span class="string">&#x27;u&#x27;</span></span><br><span class="line">        || c == <span class="string">&#x27;A&#x27;</span> || c == <span class="string">&#x27;E&#x27;</span> || c == <span class="string">&#x27;I&#x27;</span> || c == <span class="string">&#x27;O&#x27;</span> || c == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证回文串"><ahref="https://leetcode.cn/problems/valid-palindrome/">125.验证回文串</a></h3><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个<strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong>，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;race a car&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;raceacar&quot; 不是回文串。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot; &quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：在移除非字母数字字符之后，s 是一个空字符串 &quot;&quot; 。</span><br><span class="line">由于空字符串正着反着读都一样，所以是回文串。</span><br></pre></td></tr></table></figure><h4 id="对向指针-2">对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除除字母以外的其它字符，添加到新字符串中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27;a&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                str.append(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                str.append((<span class="type">char</span>)(c + <span class="number">32</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                str.append(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s = str.toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left) != s.charAt(right))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动零"><a href="https://leetcode.cn/problems/move-zeroes/">283.移动零</a></h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code>移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong>，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><h4 id="二次遍历">二次遍历</h4><p>第一次遍历，把全部不为0的数都弄到前面（保持相对顺序），然后指针停的位置left，用<code>n - left</code>得出0的个数，也就是把后面都赋值为0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//右指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span>  right;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt; n; i++)&#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断子序列"><ahref="https://leetcode.cn/problems/is-subsequence/">392.判断子序列</a></h3><p>给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断<strong>s</strong> 是否为 <strong>t</strong> 的子序列。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>"ace"</code>是<code>"abcde"</code>的一个子序列，而<code>"aec"</code>不是）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abc&quot;, t = &quot;ahbgdc&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h4 id="贪心思想">贪心思想</h4><p>优先遍历左边的字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), m = t.length();</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m &amp;&amp; j &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.charAt(i) == s.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == n;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="合并两个有序数组"><ahref="https://leetcode.cn/problems/merge-sorted-array/">88.合并两个有序数组</a></h3><p>给你两个按 <strong>非递减顺序</strong> 排列的整数数组<code>nums1</code> 和 <code>nums2</code>，另有两个整数 <code>m</code> 和<code>n</code> ，分别表示 <code>nums1</code> 和 <code>nums2</code>中的元素数目。</p><p>请你 <strong>合并</strong> <code>nums2</code> 到 <code>nums1</code>中，使合并后的数组同样按 <strong>非递减顺序</strong> 排列。</p><p><strong>注意：</strong>最终，合并后数组不应由函数返回，而是存储在数组<code>nums1</code> 中。为了应对这种情况，<code>nums1</code> 的初始长度为<code>m + n</code>，其中前 <code>m</code> 个元素表示应合并的元素，后<code>n</code> 个元素为 <code>0</code> ，应忽略。<code>nums2</code>的长度为 <code>n</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">输出：[1,2,2,3,5,6]</span><br><span class="line">解释：需要合并 [1,2,3] 和 [2,5,6] 。</span><br><span class="line">合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1], m = 1, nums2 = [], n = 0</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并 [1] 和 [] 。</span><br><span class="line">合并结果是 [1] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [0], m = 0, nums2 = [1], n = 1</span><br><span class="line">输出：[1]</span><br><span class="line">解释：需要合并的数组是 [] 和 [1] 。</span><br><span class="line">合并结果是 [1] 。</span><br><span class="line">注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。</span><br></pre></td></tr></table></figure><h4 id="双指针-额外数组">双指针 + 额外数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] sorted = <span class="keyword">new</span> <span class="title class_">int</span>[m + n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(p != m &amp;&amp; q != n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums1[p] &lt; nums2[q])&#123;</span><br><span class="line">                sorted[i++] = nums1[p++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sorted[i++] = nums2[q++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(p != m)&#123;</span><br><span class="line">            sorted[i++] = nums1[p++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(q != n)&#123;</span><br><span class="line">            sorted[i++] = nums2[q++];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m + n; j++)&#123;</span><br><span class="line">            nums1[j] = sorted[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="空间优化-双指针">空间优化 + 双指针</h4><p>借助数组后面的空闲空间，以防止顺序遍历发生覆盖的情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> m, <span class="type">int</span>[] nums2, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> m-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">q</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">tail</span> <span class="operator">=</span> m + n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> cur;</span><br><span class="line">        <span class="keyword">while</span>(p &gt;= <span class="number">0</span> || q &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p == -<span class="number">1</span>)&#123;</span><br><span class="line">                cur = nums2[q--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(q == -<span class="number">1</span>)&#123;</span><br><span class="line">                cur = nums1[p--];</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums1[p] &lt; nums2[q])&#123;</span><br><span class="line">                cur = nums2[q--];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                cur = nums1[p--];</span><br><span class="line">            &#125;</span><br><span class="line">            nums1[tail--] = cur;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移除元素"><ahref="https://leetcode.cn/problems/remove-element/">27.移除元素</a></h3><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a></strong>移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并<strong><ahref="https://baike.baidu.com/item/原地算法">原地</a>修改输入数组</strong>。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>说明:</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢?</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝</span><br><span class="line">int len = removeElement(nums, val);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [3,2,2,3], val = 3</span><br><span class="line">输出：2, nums = [2,2]</span><br><span class="line">解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,2,2,3,0,4,2], val = 2</span><br><span class="line">输出：5, nums = [0,1,4,0,3]</span><br><span class="line">解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h4 id="快慢指针-1">快慢指针</h4><p>快指针就像拣货员，冲在最前面将不等于val的值丢到前面来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] != val)&#123;</span><br><span class="line">                <span class="comment">//把不是val的值都弄到前面来</span></span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除有序数组中的重复项"><ahref="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/">26.删除有序数组中的重复项</a></h3><p>给你一个 <strong>非严格递增排列</strong> 的数组 <code>nums</code>，请你<strong><ahref="http://baike.baidu.com/item/原地算法">原地</a></strong>删除重复出现的元素，使每个元素 <strong>只出现一次</strong>，返回删除后数组的新长度。元素的 <strong>相对顺序</strong> 应该保持<strong>一致</strong> 。然后返回 <code>nums</code>中唯一元素的个数。</p><p>考虑 <code>nums</code> 的唯一元素的数量为 <code>k</code>，你需要做以下事情确保你的题解可以被通过：</p><ul><li>更改数组 <code>nums</code> ，使 <code>nums</code> 的前<code>k</code> 个元素包含唯一元素，并按照它们最初在 <code>nums</code>中出现的顺序排列。<code>nums</code> 的其余元素与 <code>nums</code>的大小不重要。</li><li>返回 <code>k</code> 。</li></ul><p><strong>判题标准:</strong></p><p>系统会用下面的代码来测试你的题解:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = [...]; // 输入数组</span><br><span class="line">int[] expectedNums = [...]; // 长度正确的期望答案</span><br><span class="line"></span><br><span class="line">int k = removeDuplicates(nums); // 调用</span><br><span class="line"></span><br><span class="line">assert k == expectedNums.length;</span><br><span class="line">for (int i = 0; i &lt; k; i++) &#123;</span><br><span class="line">    assert nums[i] == expectedNums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果所有断言都通过，那么您的题解将被 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,2]</span><br><span class="line">输出：2, nums = [1,2,_]</span><br><span class="line">解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,2,2,3,3,4]</span><br><span class="line">输出：5, nums = [0,1,2,3,4]</span><br><span class="line">解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h4 id="快慢指针-2">快慢指针</h4><p>每个值可能有重复的，所以慢指针指向重复数字的第一个数字，然后快指针不断遍历，直到遇到不同的数字，因为有序，直接将这个数字添加到左指针后一个位置，左指针也顺带前移，最终左指针所在的位置既是终点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] == nums[right])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[++left] = nums[right];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等">中等</h2><h3 id="反转字符串中的单词"><ahref="https://leetcode.cn/problems/reverse-words-in-a-string/">151.反转字符串中的单词</a></h3><p>给你一个字符串 <code>s</code> ，请你反转字符串中<strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code>中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong>之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串<code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</span><br></pre></td></tr></table></figure><h4 id="快慢指针-3">快慢指针</h4><p>快慢指针指向单词的区间，进行拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.append(s.substring(left + <span class="number">1</span>, right + <span class="number">1</span>));</span><br><span class="line">            res.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125;</span><br><span class="line">            right = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数之和-ii---输入有序数组"><ahref="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">167.两数之和 II - 输入有序数组</a></h3><p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code>，该数组已按 <strong>非递减顺序排列</strong>，请你从数组中找出满足相加之和等于目标数 <code>target</code>的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和<code>numbers[index2]</code> ，则<code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p><p>以长度为 2 的整数数组 <code>[index1, index2]</code>的形式返回这两个整数的下标 <code>index1</code> 和<code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你<strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,7,11,15], target = 9</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,3,4], target = 6</span><br><span class="line">输出：[1,3]</span><br><span class="line">解释：2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [-1,0], target = -1</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：-1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h4 id="对向指针-3">对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[left] + numbers[right] &gt; target)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[left] + numbers[right] &lt; target)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left+<span class="number">1</span>, right+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="盛最多水的容器"><ahref="https://leetcode.cn/problems/container-with-most-water/">11.盛最多水的容器</a></h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有<code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是<code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code>轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><h4 id="贪心思路">贪心思路</h4><p>双指针一左一右。</p><p>如果左指针指的高度高，那就让右指针移动，反之，让左指针移动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            max = Math.max(max, (right - left) * Math.min(height[right], height[left]));</span><br><span class="line">            <span class="keyword">if</span>(height[left] &lt;= height[right])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="k-和数对的最大数目"><ahref="https://leetcode.cn/problems/max-number-of-k-sum-pairs/">1679. K和数对的最大数目</a></h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>每一步操作中，你需要从数组中选出和为 <code>k</code>的两个整数，并将它们移出数组。</p><p>返回你可以对数组执行的最大操作数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4], k = 5</span><br><span class="line">输出：2</span><br><span class="line">解释：开始时 nums = [1,2,3,4]：</span><br><span class="line">- 移出 1 和 4 ，之后 nums = [2,3]</span><br><span class="line">- 移出 2 和 3 ，之后 nums = []</span><br><span class="line">不再有和为 5 的数对，因此最多执行 2 次操作。</span><br></pre></td></tr></table></figure><h4 id="排序贪心对向指针">排序+贪心+对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] + nums[right] &gt; k)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[left] + nums[right] &lt; k)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count++;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩字符串"><ahref="https://leetcode.cn/problems/string-compression/">443.压缩字符串</a></h3><p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p><p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组<strong>连续重复字符</strong> ：</p><ul><li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code>中。</li><li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li></ul><p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong>，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为<code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code>数组中会被拆分为多个字符。</p><p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p><p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line">输出：返回 6 ，输入数组的前 6 个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line">解释：&quot;aa&quot; 被 &quot;a2&quot; 替代。&quot;bb&quot; 被 &quot;b2&quot; 替代。&quot;ccc&quot; 被 &quot;c3&quot; 替代。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：chars = [&quot;a&quot;]</span><br><span class="line">输出：返回 1 ，输入数组的前 1 个字符应该是：[&quot;a&quot;]</span><br><span class="line">解释：唯一的组是“a”，它保持未压缩，因为它是一个字符。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]</span><br><span class="line">输出：返回 4 ，输入数组的前 4 个字符应该是：[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]。</span><br><span class="line">解释：由于字符 &quot;a&quot; 不重复，所以不会被压缩。&quot;bbbbbbbbbbbb&quot; 被 “b12” 替代。</span><br></pre></td></tr></table></figure><h4 id="快慢指针读写指针">快慢指针（读写指针）</h4><p>写指针在前，写指针要在一个字符出现的最后一个位置处，然后再用一个left记录这个字符开始的位置，这样就能计算字符出现的长度，然后通过辗转相除，取余数转成字符放进去然后反转（因为辗转相除是逆序数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compress</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> chars.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> <span class="number">0</span>; read &lt; chars.length; read++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(read == n-<span class="number">1</span> || chars[read] != chars[read + <span class="number">1</span>])&#123;</span><br><span class="line">                chars[write++] = chars[read];</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> read - left + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">numStartIdx</span> <span class="operator">=</span> write;</span><br><span class="line">                    <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        chars[write++] = (<span class="type">char</span>)(num%<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        num /= <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    reverse(chars, numStartIdx, write - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                left = read + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> write;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[left];</span><br><span class="line">            chars[left] = chars[right];</span><br><span class="line">            chars[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三数之和"><a href="https://leetcode.cn/problems/3sum/">15.三数之和</a></h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组<code>[nums[i], nums[j], nums[k]]</code> 满足<code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><h4 id="对向指针-4">对向指针</h4><p>这题注意去重，排序过后，对于相同的相邻元素的处理：直接跳过即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">//剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//去重</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">//去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除有序数组中的重复项-ii"><ahref="https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/">80.删除有序数组中的重复项 II</a></h3><p>给你一个有序数组 <code>nums</code> ，请你<strong><ahref="http://baike.baidu.com/item/原地算法">原地</a></strong>删除重复出现的元素，使得出现次数超过两次的元素<strong>只出现两次</strong>，返回删除后数组的新长度。</p><p>不要使用额外的数组空间，你必须在 <strong><ahref="https://baike.baidu.com/item/原地算法">原地</a>修改输入数组</strong>并在使用 O(1) 额外空间的条件下完成。</p><p><strong>说明：</strong></p><p>为什么返回数值是整数，但输出的答案是数组呢？</p><p>请注意，输入数组是以<strong>「引用」</strong>方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p><p>你可以想象内部操作如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝</span><br><span class="line">int len = removeDuplicates(nums);</span><br><span class="line"></span><br><span class="line">// 在函数里修改输入数组对于调用者是可见的。</span><br><span class="line">// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。</span><br><span class="line">for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="line">    print(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,2,2,3]</span><br><span class="line">输出：5, nums = [1,1,2,2,3]</span><br><span class="line">解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,1,1,1,1,2,3,3]</span><br><span class="line">输出：7, nums = [0,0,1,1,2,3,3]</span><br><span class="line">解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素。</span><br></pre></td></tr></table></figure><h4 id="快慢指针-4">快慢指针</h4><p>慢指针已经到达重复元素的第三个元素了，这时候一定要交换值，不然重复的元素过多：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; nums.length; right++)&#123;</span><br><span class="line">            <span class="comment">//慢指针如果到达重复元素的第二个，会停下来，直到遇见不重复元素再继续添加</span></span><br><span class="line">            <span class="keyword">if</span>(left &lt; <span class="number">2</span> ||nums[right] != nums[left - <span class="number">2</span>])&#123;</span><br><span class="line">                nums[left++] = nums[right];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;双指针解题规律&quot;&gt;双指针解题规律&lt;/h1&gt;
&lt;h2 id=&quot;对向指针&quot;&gt;对向指针&lt;/h2&gt;
&lt;p&gt;对向搜索：可用于解决有序数组找和的区间，大了右指针移动，小了左指针移动。&lt;/p&gt;
&lt;h2 id=&quot;快慢指针&quot;&gt;快慢指针&lt;/h2&gt;
&lt;h1 id=&quot;题目&quot;&gt;题目</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="双指针" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
  </entry>
  
  <entry>
    <title>2023秋招投递记录</title>
    <link href="https://vlsmhd.github.io/2023/09/01/2023%E7%A7%8B%E6%8B%9B%E6%8A%95%E9%80%92%E8%AE%B0%E5%BD%95/"/>
    <id>https://vlsmhd.github.io/2023/09/01/2023%E7%A7%8B%E6%8B%9B%E6%8A%95%E9%80%92%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-01T07:53:58.583Z</published>
    <updated>2023-12-05T06:44:24.214Z</updated>
    
    <content type="html"><![CDATA[<p>标题上的V？表示用的第几版本简历投递。</p><h1 id="中小厂试炼v1">中小厂试炼——V1</h1><h2 id="boss投递">boss投递</h2><h3 id="保融科技笔试挂">保融科技（笔试挂）</h3><p>投递日期9.14</p><p>投递地址：<ahref="https://campus.fingard.com/campus_apply/baorong/25901/#/candidateHome/applications">浙江保融科技股份有限公司- 校园招聘 (fingard.com)</a></p><h4 id="笔试">10.19笔试</h4><h3 id="去哪儿网测评挂">去哪儿网（测评挂）</h3><p>投递日期9.1</p><p>注意：旧版简历</p><h4 id="测评">9.12测评</h4><h3 id="赛博大象简历挂">赛博大象（简历挂）</h3><p>投递日期9.4</p><h3 id="杭州乐刻网络简历挂">杭州乐刻网络（简历挂）</h3><p>投递日期9.4</p><p>简历挂——9.8</p><h3 id="automq简历挂">AutoMQ（简历挂）</h3><p>投递日期9.4</p><h4 id="笔试9.4">笔试——9.4</h4><p>https://eztest.org/exam/session/294548/</p><p>一些基础选择题。</p><h4 id="面试资料提交">面试资料提交</h4><p>通过以下代码，在项目工程目录下执行，可以得到本人对项目的提交次数、代码量等等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;mhd&quot; --pretty=tformat: --numstat | awk &#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;;git shortlog --all --numbered --summary --no-merges</span><br></pre></td></tr></table></figure><h3 id="上海嘉银金融科技简历挂">上海嘉银金融科技（简历挂）</h3><p>投递日期9.4</p><p>简历挂——9.5</p><h3 id="创达猎星简历挂">创达猎星（简历挂）</h3><p>投递日期9.4</p><h3 id="衡泰技术笔试挂">衡泰技术（笔试挂）</h3><p>投递日期9.6</p><h4 id="笔试-1">9.19笔试</h4><p>https://exam.nowcoder.com/cts/17293419/summary?id=73EDF63E67AC41035D2B1AAD67C4DCC3</p><h3 id="九鼎无双简历挂">九鼎无双（简历挂）</h3><p>投递日期9.6</p><h3 id="同程数科简历挂">同程数科（简历挂）</h3><p>投递日期9.6</p><h3 id="七宝简历挂">七宝（简历挂）</h3><p>投递日期9.6</p><h3 id="安徽优质采简历挂">安徽优质采（简历挂）</h3><p>投递日期9.6</p><h3 id="科远智慧简历挂">科远智慧（简历挂）</h3><p>投递日期9.6</p><h3 id="信也科技简历挂">信也科技（简历挂）</h3><p>投递日期9.7</p><h3 id="邦盛科技简历挂">邦盛科技（简历挂）</h3><p>投递日期9.7</p><h3 id="同盾科技一面挂">同盾科技（一面挂）</h3><p>投递日期9.11</p><p><ahref="https://app.mokahr.com/m/candidate/applications/deliver-query/tongdun">同盾科技- 投递查询 (mokahr.com)</a></p><h4 id="笔试-2">9.22笔试</h4><ol start="2" type="1"><li>体积尽量占满背包</li></ol><h4 id="面试">11.10面试</h4><p>https://interview.nowcoder.com/interview/15376330/interviewee?code=mu8IvZz9</p><ol type="1"><li>Map都有哪些实现类</li><li>HashMap底层</li><li>HashMap扩容机制</li><li>Hash冲突有哪几种方式</li><li>线程安全的Map</li><li><strong>ConcurrentHashMap</strong>如何保证线程安全</li><li>怎么使用多线程</li><li>线程池参数</li><li>为什么使用线程池</li><li>线程池的类</li><li>mysql的索引结构</li><li>为什么使用B+树结构</li><li>OSI网络模型</li><li>TCP三次握手、四次挥手</li><li>Linux<ol type="1"><li>分页查看日志文件常用命令（答得cat我是傻逼）</li><li>实现文件滚动查找</li><li>查看进程号</li></ol></li><li>实习项目<ol type="1"><li>实习中用redis做了什么</li><li>为什么用redis做缓存<ol type="1"><li>除了基于内存，redis还有什么设计保证它高性能</li></ol></li><li>对MongoDB的了解</li><li>项目中核心投入</li><li>对接系统，接口开发过程中有没有踩过坑，做过什么优化保证系统的稳定性</li><li>在这个系统中设计比较好的点</li></ol></li><li>反问环节</li></ol><h3 id="品茗科技简历挂">品茗科技（简历挂）</h3><p>投递日期9.11</p><h3 id="掌阅科技一面挂">掌阅科技（一面挂）</h3><p>投递日期9.14</p><p>岗位：客户端开发</p><h4 id="笔试9.18">笔试9.18</h4><p>https://t.zijieimg.com/ie5vWYQD/</p><h5 id="编程题">编程题</h5><p>AC</p><p>判断回文串新方法：用栈，先添加一半的数据，剩下一半对应出栈。</p><h4 id="面试-1">10.30面试</h4><ul><li>面试形式：视频面试</li><li>面试时间：2023-10-30 15:00 (GMT+08:00) China Standard Time -Beijing</li><li>面试链接：https://q7w8vltyes.feishu.cn/hire/short_url/idnfck6d（飞书）</li></ul><ol type="1"><li><p>为什么面客户端，明明是后端技术栈</p></li><li><p>hashmap的底层</p></li><li><p>线程和进程</p></li><li><p>为什么使用线程池</p></li><li><p>线程池参数</p></li><li><p>tcp和udp的区别</p></li><li><p>tcp协议如何保证可靠性</p></li><li><p>单例模式</p></li><li><p><strong>代理模式</strong></p></li><li><p><strong>常用什么代理模式</strong></p></li><li><p>什么是动态代理</p></li><li><p>jvm内存结构</p></li><li><p>jvm在复习一下</p></li><li><p>什么是本地方法</p></li><li><p>虚拟机栈详解</p></li><li><p>gc算法</p></li><li><p>分代回收理论，常用的算法</p><ol type="1"><li>新生代产生内存碎片的概率大不大？</li><li>CPU怎么检索这些</li></ol></li><li><p>实习经历</p></li><li><p>反问环节</p><ol type="1"><li>业务</li><li>指出缺陷（被夸了）</li><li>学习建议</li></ol></li></ol><h3 id="人大金仓简历挂">人大金仓（简历挂）</h3><p>投递日期9.14</p><h3 id="北京亚控简历挂">北京亚控（简历挂）</h3><p>投递日期9.18</p><h3 id="宏杉科技简历挂"><strong>宏杉科技（简历挂）</strong></h3><p>投递日期9.27</p><h3 id="传化智联笔试挂">传化智联（笔试挂）</h3><p>投递日期9.28</p><h4 id="笔试-3">9.28笔试</h4><p>https://short-phx-ali.yunxuetang.cn/qbaq8tbp</p><h2 id="官网投递">官网投递</h2><h3 id="广联达简历挂">广联达（简历挂）</h3><p>投递日期9.5</p><p>投递地址：<ahref="https://app.mokahr.com/campus-recruitment/glodon/91966?sourceToken=2b78348d1798c5dd95d999db699457d3#/job/2f4c8a53-9061-4aa5-898c-911c6f3a9254/campus_apply/thanks?jobId=2f4c8a53-9061-4aa5-898c-911c6f3a9254&amp;recommendCode=NTAUtTI&amp;codeType=1&amp;applyInfo%5BaimWorkCity%5D=西安市&amp;applyInfo%5BrecommendCode%5D=NTAUtTI&amp;candidateName=孟海东&amp;candidateId=460102903">广联达科技股份有限公司- 校园招聘 (mokahr.com)</a></p><h3 id="得物泡池子">得物（泡池子）</h3><p>投递日期9.7</p><p><ahref="https://app.mokahr.com/campus-recruitment/thedu/37483?recommendCode=DSr7mMWw#/job/4f85f728-9ecb-4411-ab30-ed6affff54a7/campus_apply/thanks?jobId=4f85f728-9ecb-4411-ab30-ed6affff54a7&amp;codeType=2&amp;applyInfo%5BaimWorkCity%5D=上海市&amp;applyInfo%5BrecommendCode%5D=DSr7mMWw&amp;candidateName=孟海东&amp;candidateId=461372337">得物App—校园招聘官网(mokahr.com)</a></p><h3 id="笔试挂">4399（笔试挂）</h3><p>账号：1067853293@qq.com</p><p>密码：LOLVlongshen716</p><p>投递日期9.7</p><p><ahref="https://hr.4399om.com/?r=userCenter/index">个人中心-4399招聘频道(4399om.com)</a></p><h4 id="笔试-4">9.12笔试</h4><p>地址：<ahref="https://hr.4399om.com/main/?r=CandidateTest/candidateIndex">4399笔试平台(4399om.com)</a></p><p>密码：fKHZ5ItI</p><p><strong>问答题</strong></p><p>在 Centos 7 中，假设你有一个名为 "script.sh"的脚本文件，我们查询到其对应的权限为 -rwxrw-rw-</p><ol type="1"><li><p>这个权限值代表了什么（3分）？</p><p>答：分三组：第一组是文件所有者的权限，可读可写可执行;第二组是所属组权限，可读可写; 第三组是其它外人的权限，可读可写</p></li><li><p>对应的权限码是啥（2分）？</p><p>r(4) w(2) x(1)</p><p>答：766</p></li></ol><p>现在有个简易的电商系统需要增加几个新功能</p><ol type="1"><li><p>给商品支持分类，分类层级至少需要3层（3层分类示例：男装-上衣-短袖），现在请帮忙设计一个分类表来实现，写出对应的建表语句并简述是如何实现多级分类的。（4分）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Shops&#123;</span><br><span class="line"></span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"></span><br><span class="line">    NAME <span class="type">VARCHAR</span>,</span><br><span class="line"></span><br><span class="line">    PARENT_ID <span class="type">INT</span>,</span><br><span class="line"></span><br><span class="line">    LEVEL <span class="type">INT</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">每一行数据包含父节点id和层级属性</span><br></pre></td></tr></table></figure></li><li><p>在商品完成交易后给买卖双方发送短信通知，如果让你设计一个短信发送系统，你会怎么设计？有什么需要注意和拓展的地方？（6分）</p></li></ol><p><strong>算法题</strong></p><ol type="1"><li>4399 出了一款小游戏 《劫富济贫》，游戏中，有多个富商基地，一个侠盗需要夜行从每个富商基地偷到最多的珠宝钻石，并且保证不被安保发现；已知： （1）基地里面的房间是一整排到底的，即仅有一排 n 间房子（2）侠盗已经从 “百晓生” 那里得知了每个房子里面的珠宝数量（3）如果相邻的两间房间同一个晚上被盗窃，侠盗就会被安保发现给定您一个代表每个房屋存放珠宝的非负整数数据，请您编写程序，计算出侠盗一晚能够在不被安保发现的情况下盗取的最大珠宝数量！ 输入示例: 1,2,5,2,1,3,1 输出示例: 9</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxThief</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[length + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= length; i++) &#123;</span><br><span class="line">        dp[i] = Math.max(dp[i-<span class="number">1</span>], nums[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>有n个硬币，每次最多拿走一个或者两个，你有多少种不同的方法拿完全部的硬币？（要求用动态规范解题）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">method2GetCoins</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">2</span>] = dp[<span class="number">1</span>] + dp[<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = dp[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">Coin</span> <span class="variable">coin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coin</span>();</span><br><span class="line">            System.out.println(coin.method2GetCoins(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li><p>有一款小游戏，游戏中有N+1座基地——从0到N编号，从左到右排列。每个基地都有不同数量的小兵，编号为i的基地的小兵数量为H(i)个。</p><p>起初，小牙在编号为0的基地处。每一步，它跳到下一个（右边）基地。假设小牙在第k个基地，且它现在的能量值是E,下一步它将跳到第个k+1基地。它将会得到或者失去正比于与H(k+1)与E之差的能量。如果H(k+1) &gt; E 那么小牙就失去 H(k+1) - E 的能量值，否则它将得到 E -H(k+1) 的能量值。</p><p>游戏目标是到达第个N基地，在这个过程中，能量值不能为负数个单位。现在的问题是小牙以多少能量值开始游戏，才可以保证成功完成游戏？</p><p>输入描述： 第一行输入，表示一共有 N 组数据. 第二个是 N个空格分隔的整数，H1, H2, H3, ..., Hn 代表建筑物的高度</p><p>输出描述： 输出一个单独的数表示完成游戏所需的最少单位的初始能量</p><p>输入例子： 5 3 4 3 2 4 输出例子： 4</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="同花顺泡池子">同花顺（泡池子）</h3><p>投递时间：9.8</p><p><ahref="http://campus.10jqka.com.cn/userCenter/employRecord">同花顺校园招聘(10jqka.com.cn)</a></p><h4 id="测试">测试</h4><p><img src="2023秋招投递记录/image-20230908204508384.png" alt="image-20230908204508384" style="zoom:67%;" /></p><h4 id="笔试-5">10.8笔试</h4><p><ahref="http://job.10jqka.com.cn/#/schoolExam?examId=307">同花顺校园招聘(10jqka.com.cn)</a></p><h5 id="编程题-1">编程题</h5><p>1、打印0-999之间不含5的数字。</p><p>思路：暴力，转成字符串操作，调用字符串API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">999</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(String.valueOf(i).contains(<span class="string">&quot;5&quot;</span>))&#123;</span><br><span class="line">        sout(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作业帮简历挂">作业帮（简历挂）</h3><p>投递时间：9.8</p><p><ahref="https://app.mokahr.com/campus-recruitment/zuoyebang/39595#/candidateHome/applications">作业帮教育科技（北京）有限公司- 校园招聘 (mokahr.com)</a></p><h3 id="诗悦科技简历挂">诗悦科技（简历挂）</h3><p>投递时间：9.14</p><h3 id="数字马力二面挂">数字马力（二面挂）</h3><p>投递时间：9.17</p><p><ahref="https://app.mokahr.com/campus-recruitment/digital-engine/92713#/candidateHome/applications">数字马力- 校园招聘 (mokahr.com)</a></p><h4 id="笔试-6">10.9笔试</h4><p>https://exam.nowcoder.com/cts/17299211/summary?id=00C12C0314AE14875D2B1AAD67C4DCC3</p><h5 id="算法题">算法题</h5><ol type="1"><li><p>归并排序（手写十遍！！！）、</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sortString</span><span class="params">(String s)</span>&#123;</span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="type">char</span>[] ans = <span class="keyword">new</span> <span class="title class_">char</span>[s.length()];</span><br><span class="line">    merge_sort_recursive(chars, ans,<span class="number">0</span>, chars.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge_sort_recursive</span><span class="params">(<span class="type">char</span>[] arr, <span class="type">char</span>[] result, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> end - start, mid = (len &gt;&gt; <span class="number">1</span>) + start;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start1</span> <span class="operator">=</span> start, end1 = mid;</span><br><span class="line">    <span class="type">int</span> <span class="variable">start2</span> <span class="operator">=</span> mid + <span class="number">1</span>, end2 = end;</span><br><span class="line">    merge_sort_recursive(arr, result, start1, end1);</span><br><span class="line">    merge_sort_recursive(arr, result, start2, end2);</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> start;</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class="line">        result[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class="line">    <span class="keyword">while</span> (start1 &lt;= end1)</span><br><span class="line">        result[k++] = arr[start1++];</span><br><span class="line">    <span class="keyword">while</span> (start2 &lt;= end2)</span><br><span class="line">        result[k++] = arr[start2++];</span><br><span class="line">    <span class="keyword">for</span> (k = start; k &lt;= end; k++)</span><br><span class="line">        arr[k] = result[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除链表结点</p></li><li><p>给定一个int数组A及其大小n以及需查找的和sum，请返回数组中两数之和为sum的整数对的个数。保证数组大小小于等于10000</p><p>[1,2,2,2,2]假如sum要求 = 3，那就有四种情况，要求下标组成不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">countPairs</span> <span class="params">(ArrayList&lt;Integer&gt; A, <span class="type">int</span> n, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">    <span class="comment">// write code here</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">want</span> <span class="operator">=</span> sum - A.get(i);</span><br><span class="line">        <span class="keyword">if</span>(map.containsKey(want))&#123;</span><br><span class="line">            count += map.get(want);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(A.get(i), map.getOrDefault(A.get(i), <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="一面">10.21一面</h4><p>早上10.00</p><ol type="1"><li>自我介绍</li><li>对多线程的理解、应用场景</li><li>悲观锁乐观锁<ol type="1"><li>悲观锁的实现原理</li><li>CAS</li></ol></li><li>线程池的工作原理<ol type="1"><li>拒绝策略，<strong>名称</strong>，默认</li></ol></li><li>mysql索引原理</li><li><strong>aop动态代理</strong>：答得不咋地，专业术语较少，大白话较多。<ol type="1"><li>jdk动态代理</li><li>CGLIB</li></ol></li><li>AOP的切面、切点、定义的实现</li><li><strong>环绕通知常用注解</strong></li><li>redis常用数据结构</li><li><strong>redis命令</strong>（不熟悉...)</li><li>redis持久化机制</li><li>设计模式<ol type="1"><li>单例模式</li></ol></li><li><strong>项目</strong>：<ol type="1"><li>一人一单的加锁，</li><li>在哪用到AOP，具体说说（我刚实现的给忘了）</li><li><strong>锁、多线程的使用</strong></li><li>超卖问题</li></ol></li><li>实习内容：<strong>鉴权机制</strong>。权限认证，这个得专门学一下</li></ol><h4 id="二面">10.25二面</h4><ol type="1"><li>项目疯狂拷打</li><li><strong>超卖问题的优化</strong></li><li>一人一单中，自定义分布式锁的key、分布式锁怎么加</li><li>消息队列、redis扣减库存的一致性如何保证<ol type="1"><li>感觉就是问<strong>分布式事务</strong></li></ol></li><li>volatile和synchronized的区别</li><li>什么是可见性，为什么变量需要可见性</li><li>有序性</li><li><strong>迭代器模式</strong><ol type="1"><li>为什么map需要迭代器模式</li></ol></li><li>JMM内存模型</li><li>单例模式详解</li></ol><h1 id="大厂冲刺v1">大厂冲刺——V1</h1><h2 id="官网投递-1">官网投递</h2><h3 id="新奥集团简历挂">新奥集团（简历挂）</h3><p>投递地址：<ahref="https://enn.zhiye.com/form?fromPage=job&amp;jobAdId=bdd992bb-0b63-4745-a65e-8409f385e2de&amp;userId=273749158">新奥集团(zhiye.com)</a></p><p>投递日期9.4</p><h3 id="恒生电子人才池">恒生电子（人才池）</h3><p>投递地址：<a href="https://campus.hundsun.com/campus/jobs">校园招聘(hundsun.com)</a></p><p>投递日期9.4</p><h4 id="笔试-7">10.13笔试</h4><p><ahref="https://exam.nowcoder.com/cts/17290170/summary?id=8EE7978F6977E38B5D2B1AAD67C4DCC3">恒生2024校园招聘-Java卷1013_牛客(nowcoder.com)</a></p><h3 id="美团笔试挂">美团（笔试挂）</h3><p>投递地址：<ahref="https://zhaopin.meituan.com/web/personalCenter/deliveryRecord?staffSsoId=5817141">个人中心| 美团招聘 (meituan.com)</a></p><p>投递日期9.7</p><h4 id="笔试-8">9.9笔试</h4><p><ahref="https://exam.nowcoder.com/cts/17292034/summary?id=59BBA5D0CE44CD4A5D2B1AAD67C4DCC3">美团2024届秋招第五场笔试【技术】_牛客(nowcoder.com)</a></p><h3 id="小红书简历挂">小红书（简历挂）</h3><p>投递时间：9.8</p><h3 id="腾讯测评挂">腾讯（测评挂）</h3><p>投递地址：<a href="https://join.qq.com/progress.html">应聘进度 |腾讯校招 (qq.com)</a></p><p>投递日期9.8</p><h4 id="测评-1">测评</h4><p><ahref="https://assessment.tencent.com/assessments?p=SywtybA1VMtMsTU0MDBSyywrAfIKbI2MDNRKkm1DLELNTNISU0zTjMwsjC3MAA">测验任务页_腾讯招聘在线测评(tencent.com)</a></p><h3 id="科大讯飞简历挂">科大讯飞（简历挂）</h3><p>投递日期9.8</p><p><a href="https://campus.iflytek.com/official-pc/delivery">投递记录 -科大讯飞校园招聘 (iflytek.com)</a></p><h3 id="快手简历挂">快手（简历挂）</h3><p>投递日期9.8</p><p><a href="https://campus.kuaishou.cn/#/campus/my-apply">快手校招 -快手校招-投递记录 (kuaishou.cn)</a></p><p>9.18重新投</p><h3 id="京东简历挂">京东(简历挂)</h3><p>投递日期9.8</p><p><a href="https://campus.jd.com/#/myDeliver?type=present">京东校招(jd.com)</a></p><h4 id="测评-2">9.9测评</h4><h3 id="虎牙直播泡池子">虎牙直播（泡池子）</h3><p>岗位：Java后台开发工程师(帐号/支付/安全/秩序平台)</p><p>投递日期9.10</p><p><ahref="https://app.mokahr.com/campus_apply/huya/4112#/candidateHome/applications">虎牙直播-校园招聘(mokahr.com)</a></p><h3 id="影石简历挂">影石（简历挂）</h3><p>投递日期9.11</p><p><ahref="https://insta360.zhiye.com/campus/jobs">影石创新科技股份有限公司(zhiye.com)</a></p><h3 id="三七互娱简历挂">三七互娱（简历挂）</h3><p>投递日期9.11</p><p><ahref="https://app.mokahr.com/campus_apply/37/25238?recommendCode=DSQNKtCs#/candidateHome/applications">三七互娱-校园招聘(mokahr.com)</a></p><h3 id="顺丰测评挂">顺丰（测评挂）</h3><p>投递日期9.11</p><p><ahref="https://campus.sf-express.com/m/?channel=29&amp;referCode=4FOLXH#/applyList">投递记录(sf-express.com)</a></p><h4 id="测评-3">9.12测评</h4><h3 id="宇通集团挂">宇通集团（挂）</h3><p>投递日期9.15</p><p><ahref="https://wecruit.hotjob.cn/SU649796b60dcad412ce9c4bbd/pb/account.html#/myDeliver">宇通招聘(hotjob.cn)</a></p><h3 id="滴滴泡池子">滴滴（泡池子）</h3><p>投递日期9.11</p><p><ahref="https://campus.didiglobal.com/campus_apply/didiglobal/96064#/candidateHome/applications">滴滴- 校园招聘 (didiglobal.com)</a></p><h4 id="滴滴笔试">9.15滴滴笔试</h4><p><strong>https://didi.acmcoder.com/cand/login?wm9sepgb</strong></p><p>登录帐号：<strong>didi</strong> 登录密码：<strong>d95qyn</strong></p><p>算法题：</p><p>1.你负责在一条笔直的道路上安装一些照明灯。但是道路上并不是任意位置都适合安装照明灯，具体地，假设将道路看作一条起点坐标为0，终点坐标为M的线段，那么只有在x1,x2...xn这n个坐标可以安装照明灯，且每个坐标上最多只能安装一个照明灯。现在你要在道路上安装k个照明灯，为了使照明灯能够尽星覆盖道路，你需要使距离最近的两个照明灯尽量远。请问这个最近距离最大可以是多少?</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一行是两个整数n、k，分别表示可以安装照明灯的位置数和需要安装的照明灯数量。</span><br><span class="line">接下来一行n个整数x1,x2..Xn表示可以安装照明灯的坐标。保证x1&lt;x2&lt;....&lt;xn。</span><br><span class="line">1&lt;=k&lt;=n&lt;=100000，1&lt;=xi&lt;=1000000</span><br></pre></td></tr></table></figure><p>代码：</p><p>2.有一个n*m的网格图,起初你在(1，1)处,现在想走到(n,m)处,且经过的黑色网格尽可能少。请输出最少需要经过多少个黑色网格。网格图是四联通的,也就是每次只能向上下左右四个相邻的格子移动,且不能走出边界。</p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一行两个正整数n和m，含义如上文所述。</span><br><span class="line">接下来n行，每行m个数，此数为1时表示为黑色格子,为0时表示为白色格子。1≤n*ms100000</span><br></pre></td></tr></table></figure><p>输出：</p><p>非负整数，表示答案。</p><p>代码：</p><p>通过36%...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(in.hasNextInt())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span>[][] road = <span class="keyword">new</span> <span class="title class_">int</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">                    road[i][j] = in.nextInt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Main</span> <span class="variable">blackWhite</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Main</span>();</span><br><span class="line">            System.out.println(blackWhite.minBlack(road, n,m));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minBlack</span><span class="params">(<span class="type">int</span>[][] road, <span class="type">int</span> n, <span class="type">int</span> m)</span>&#123;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>][m+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(road[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][m];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完美世界简历挂">完美世界（简历挂）</h3><p>投递日期9.13</p><p><ahref="https://app.mokahr.com/campus-recruitment/pwrd/98446#/candidateHome/applications">完美世界- 校园招聘 (mokahr.com)</a></p><h3 id="深信服人招满了">深信服（人招满了）</h3><p>投递日期9.14</p><p><ahref="https://app.mokahr.com/campus_apply/sangfor/27944#/job/17e64524-232e-4a3c-bcce-1024c925c43f/campus_apply/thanks?jobId=17e64524-232e-4a3c-bcce-1024c925c43f&amp;recommendCode=NTAVdXe&amp;codeType=1&amp;applyInfo%5BcampusSiteId%5D=18063&amp;applyInfo%5BaimWorkCity%5D=深圳市&amp;applyInfo%5BrecommendCode%5D=NTAVdXe&amp;candidateName=孟海东&amp;candidateId=464026162&amp;pure=1">深信服集团- 校园招聘 (mokahr.com)</a></p><h4 id="笔试9.16">笔试9.16</h4><p>https://exam.nowcoder.com/cts/17295845/summary?id=649187173D1ED54B5D2B1AAD67C4DCC3</p><h5 id="算法题-1">算法题</h5><p>1、</p><figure><img src="2023秋招投递记录/image-20230916100154268.png"alt="image-20230916100154268" /><figcaption aria-hidden="true">image-20230916100154268</figcaption></figure><p>正确思路：模运算+快速幂</p><p>模运算性质：<span class="math inline">\((a*b)\% n =(a\%n *b\%n)\%n\)</span>，解决数据溢出问题。</p><p>a的b次方的个位数，也就是(<spanclass="math inline">\(a*a*a...*a\)</span>)%10 ==b个（a%10)相乘再%10。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    a %= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span> == <span class="number">1</span>)&#123;</span><br><span class="line">            ans = (ans * a) % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        a = (a * a)  % <span class="number">10</span>;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人思路：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">    <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        System.out.println(getLast(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLast</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> x;</span><br><span class="line">    <span class="type">long</span> <span class="variable">tmp</span> <span class="operator">=</span> y;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        last = (x * last) % <span class="number">10</span>;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (last == x) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> y % count;</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        last = (x * last) % <span class="number">10</span>;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用例通过25%</li></ul><p>2、</p><figure><img src="2023秋招投递记录/image-20230916102700011.png"alt="image-20230916102700011" /><figcaption aria-hidden="true">image-20230916102700011</figcaption></figure><figure><img src="2023秋招投递记录/image-20230916102708546.png"alt="image-20230916102708546" /><figcaption aria-hidden="true">image-20230916102708546</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> in.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> in.next();</span><br><span class="line">            System.out.println(match(a, b));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">match</span><span class="params">(String s, String patten)</span> &#123;</span><br><span class="line">        Deque&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;</span><br><span class="line">            stack.push(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> patten.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> patten.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; stack.peek() == c) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; c == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!stack.isEmpty() &amp;&amp; c == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                i--;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek() == patten.charAt(i)) &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty() ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过80%</li></ul><p>3、</p><figure><img src="2023秋招投递记录/image-20230916104727692.png"alt="image-20230916104727692" /><figcaption aria-hidden="true">image-20230916104727692</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">            String[] c = s.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; c.length; i++)&#123;</span><br><span class="line">                list.add(Integer.parseInt(c[i]));</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(maxDeSerial(list));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxDeSerial</span><span class="params">(List&lt;Integer&gt; list)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right &amp;&amp; right &lt; list.size())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> left;</span><br><span class="line">            <span class="keyword">while</span>(++right &lt; list.size() &amp;&amp; list.get(right) &lt; list.get(c))&#123;</span><br><span class="line">                c++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, right - left);</span><br><span class="line"></span><br><span class="line">            left = right;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>滑动窗口：通过100%</li></ul><p>4、</p><figure><img src="2023秋招投递记录/image-20230916111356223.png"alt="image-20230916111356223" /><figcaption aria-hidden="true">image-20230916111356223</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a string字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b string字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">substr</span> <span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">needCnt</span> <span class="operator">=</span> b.length();</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : b.toCharArray()) &#123;</span><br><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> a.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (map.getOrDefault(c, <span class="number">0</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                needCnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(c, map.getOrDefault(c, <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (needCnt == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left &lt; i &amp;&amp; map.get(a.charAt(left)) != <span class="number">0</span>) &#123;</span><br><span class="line">                    map.put(a.charAt(left), map.getOrDefault(a.charAt(left), <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i - left + <span class="number">1</span> &lt; len) &#123;</span><br><span class="line">                    len = Math.min(len, i - left + <span class="number">1</span>);</span><br><span class="line">                    ans = a.substring(left, left + len);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                map.put(a.charAt(left), map.get(a.charAt(left)) + <span class="number">1</span>);</span><br><span class="line">                left++;</span><br><span class="line">                needCnt++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>滑动窗口：完成83.3%</li></ul><h3 id="小米科技笔试挂">小米科技（笔试挂）</h3><p>投递日期9.14</p><p><ahref="https://xiaomi.jobs.f.mioffice.cn/campus/position/application?spread=J7NS6YR">应聘记录- 小米校园招聘 (mioffice.cn)</a></p><h4 id="笔试-9">10.14笔试</h4><p>https://mi.acmcoder.com/cand/login?key=3rc6ju</p><h5 id="编程题-2">编程题</h5><p>1、寻找xiaomi</p><figure><img src="2023秋招投递记录/image-20231014165427342.png"alt="image-20231014165427342" /><figcaption aria-hidden="true">image-20231014165427342</figcaption></figure><p>自测代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XM1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">char</span>[][] chars = <span class="keyword">new</span> <span class="title class_">char</span>[n][m];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.next();</span><br><span class="line">                chars[i] = s.toCharArray();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(findXM(n, m, chars));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findXM</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m, <span class="type">char</span>[][] chars)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">3</span> || m &lt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> n - <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt;= c; k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>; s &lt;= c; s++)&#123;</span><br><span class="line">                Map&lt;Character, Integer&gt; map = getMap();</span><br><span class="line">                <span class="type">int</span> <span class="variable">need</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">                <span class="comment">//出发点</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt; <span class="number">3</span> + k; i++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> k; j &lt; <span class="number">3</span> + k; j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(map.containsKey(chars[i][j]) &amp;&amp; map.get(chars[i][j]) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                            map.put(chars[i][j], map.get(chars[i][j]) - <span class="number">1</span>);</span><br><span class="line">                            need--;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(need == <span class="number">0</span>)&#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Character, Integer&gt; <span class="title function_">getMap</span><span class="params">()</span>&#123;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;i&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;o&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&#x27;m&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过测试用例：40%</p><p>2、字符串</p><figure><img src="2023秋招投递记录/image-20231014171918082.png"alt="image-20231014171918082" /><figcaption aria-hidden="true">image-20231014171918082</figcaption></figure><p>哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XM2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">            System.out.println(findXM(s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findXM</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;xiao&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        map.put(<span class="string">&quot;mi&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;m&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(s.substring(i,i + <span class="number">2</span>)))&#123;</span><br><span class="line">                    List&lt;Integer&gt; list = map.get(<span class="string">&quot;mi&quot;</span>);</span><br><span class="line">                    list.add(i);</span><br><span class="line">                    map.put(<span class="string">&quot;mi&quot;</span>, list);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27;x&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(map.containsKey(s.substring(i,i+<span class="number">4</span>)))&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">                    List&lt;Integer&gt; list = map.get(<span class="string">&quot;mi&quot;</span>);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; list.size(); j++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(list.get(j) &gt; i)&#123;</span><br><span class="line">                            count++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ans += count;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过测试用例：67%</p><h3 id="好未来简历挂">好未来（简历挂）</h3><p>投递日期9.14</p><p><ahref="https://neitui-upload.info.100tal.com/upload_resume?type=out&amp;code=30156d1b863bb8f3f90867391ac50d4f">内部推荐(100tal.com)</a></p><h3 id="比亚迪简历挂">比亚迪（简历挂）</h3><p>投递日期9.14</p><p><ahref="https://job.byd.com/portal/pc/#/personalCenter/myApply">比亚迪招聘(byd.com)</a></p><h3 id="海康威视简历挂">海康威视（简历挂）</h3><p>投递日期9.15</p><p><a href="https://campushr.hikvision.com/myDelivery">校园招聘(hikvision.com)</a></p><h3 id="联想人才池">联想（人才池）</h3><p>投递日期9.15</p><p><a href="https://talent.lenovo.com.cn/account/apply">我的申请(lenovo.com.cn)</a></p><h3 id="携程人才池">携程（人才池）</h3><p>投递日期9.18</p><p><ahref="https://app.mokahr.com/campus-recruitment/trip/37757?sourceToken=c2fb946302192b49b05185eec45fcdc0#/candidateHome/applications">携程集团- 校园招聘 (mokahr.com)</a></p><h4 id="测评-4">9.20测评</h4><h3 id="shein测评挂">SHEIN（测评挂）</h3><p>投递日期9.18</p><h4 id="测评-5">9.20测评</h4><h3 id="腾讯云智">腾讯云智</h3><p>投递日期9.18</p><p><ahref="https://app-tc.mokahr.com/campus-recruitment/csig/20001#/job/98974e48-81fd-4192-81d0-c1dcfdf25d62/campus_apply/thanks?jobId=98974e48-81fd-4192-81d0-c1dcfdf25d62&amp;recommendCode=NTAAeBu&amp;codeType=1&amp;applyInfo%5BaimWorkCity%5D=厦门市&amp;applyInfo%5BrecommendCode%5D=NTAAeBu&amp;candidateName=孟海东&amp;candidateId=5280385">云智研发公司- 校园招聘 (mokahr.com)</a></p><h3 id="海尔集团简历挂">海尔集团（简历挂）</h3><p>投递日期9.21</p><p><ahref="https://maker.haier.net/client/campus/mydelivery.html">海尔招聘-海尔官方招聘网站(haier.net)</a></p><h2 id="boss投递-1">boss投递</h2><h3 id="高途简历挂">高途（简历挂）</h3><p>投递日期9.4</p><h3 id="途虎养车简历挂">途虎养车（简历挂）</h3><p>投递日期9.4</p><h4 id="测评-6">测评</h4><p>https://pt.normstar.net/ns-napmtest-web/login/joinlogin/789CCB2BCE2B2E29CD28353237343235B02C4E3635353336340000606F06FD.do</p><h3 id="奇安信简历挂">奇安信（简历挂）</h3><p>投递日期9.5</p><h3 id="boss直聘简历挂">boss直聘（简历挂）</h3><p>投递日期9.13</p><h2 id="牛客投递">牛客投递</h2><h3 id="点点科技笔试挂">点点科技（笔试挂）</h3><p>投递日期9.13</p><h4 id="笔试-10">笔试</h4><p><ahref="https://exam.nowcoder.com/cts/17286274/summary?id=E07EC06D4D7EEC835D2B1AAD67C4DCC3#0/%7B%22uid%22%3A%22E07EC06D4D7EEC835D2B1AAD67C4DCC3%22%7D">点点互动2024校招【游戏服务器开发工程师】笔试A_牛客(nowcoder.com)</a></p><h5 id="算法题-2"><strong>算法题</strong></h5><p>给定两个app版本号version1和version2，请比较它们并返回结果。说明:版本号由一个或多个修订号(revision)组成，修订号之间使用∵'连接。每个修订号由多位数字组成，可能包含前导零。每个版本号至少包含一个字符。例如，2.5.33和0.1都是有效的版本号。比较版本号时，请按从左到右的顺序依次比较它们的修订号。比较修订号时，忽略任何前导零。也就是说，修订号1和修订号001相等。如果版本号中修订号个数不同，认为缺少的修订号等于0。例如，1.001== 1.1;1.0.1 &gt;1.0 ==1.0.0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VersionNum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String version1, String version2)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(version1 == <span class="literal">null</span> || version1.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(version2 == <span class="literal">null</span> || version2.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right1 &lt; version1.length() &amp;&amp; right2 &lt; version2.length())&#123;</span><br><span class="line">            <span class="keyword">while</span>(right1 &lt; version1.length() &amp;&amp;version1.charAt(right1) != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                right1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(version1.charAt(left1) == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                left1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(version2.charAt(right2) != <span class="string">&#x27;.&#x27;</span>)&#123;</span><br><span class="line">                right2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(right2 &lt; version2.length() &amp;&amp; version2.charAt(left2) == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">                left2++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(version1.substring(left1, right1)) &gt; Integer.parseInt(version2.substring(left2, right2)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(version1.substring(left1, right1)) &lt; Integer.parseInt(version2.substring(left2, right2)))&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right1++;</span><br><span class="line">                left1 = right1;</span><br><span class="line"></span><br><span class="line">                right2++;</span><br><span class="line">                left2 = right2;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right1 &lt; version1.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(right2 &lt; version2.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(compare(<span class="string">&quot;05.6&quot;</span>, <span class="string">&quot;5.6.4&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="中小厂试炼v2">中小厂试炼——V2</h1><h2 id="boss投递-2">boss投递</h2><h3 id="海德斯通">海德斯通</h3><p>投递日期：10.9</p><p><ahref="https://app.mokahr.com/m/candidate/applications/deliver-query/tanhai">海德斯通信有限公司- 投递查询 (mokahr.com)</a></p><h3 id="有米云">有米云</h3><p>投递日期：10.19</p><p>岗位：java开发</p><h3 id="广东小天才穿戴一面挂">广东小天才穿戴（一面挂）</h3><p>投递日期：11.21</p><p>岗位：java后端</p><h4 id="笔试-11">11.26笔试</h4><h4 id="一面-1">11.30一面</h4><ol type="1"><li>项目介绍<ol type="1"><li>zset如何实现限流</li></ol></li><li>jdk创建线程的方式</li><li>自定义注解的实现以及原理</li><li>spring常用注解</li><li><span class="citation" data-cites="autowired">@autowired</span> 和<span class="citation"data-cites="resource区别">@resource区别</span></li><li>springboot自动装配的原理</li><li>事务的ACID</li><li><strong>spring开启事务的方式</strong><ol type="1"><li>项目里哪用到事务了</li><li>事务失效的场景</li></ol></li><li>如何查看sql执行效率、优化方式</li><li><strong>索引失效的场景</strong>（不全面）</li><li>redis常用数据结构</li><li><strong>redis怎么实现分布式锁</strong> setNX（这里可能答得不多，应该具体一点怎么实现） 而且只答了一种方法</li><li>如何解决缓存穿透<ol type="1"><li>具体实现逻辑（答得简单）</li></ol></li><li>消息队列<ol type="1"><li>作用</li><li>项目中的体现</li><li><strong>如何解决消息重复发送、重复消费的问题</strong></li></ol></li><li>socket编程有接触过吗（没怎么了解）</li><li>项目有最终上线吗，感觉面试官没什么想问的了...</li></ol><h3 id="七宝">七宝</h3><p>投递日期：10.23</p><p>岗位：后端开发</p><h3 id="奥哲">奥哲</h3><p>投递日期：10.24</p><p>岗位：后端开发</p><h3 id="半糖科技">半糖科技</h3><p>投递日期：10.24</p><p>岗位：后端开发</p><h3 id="任拓数据科技">任拓数据科技</h3><p>投递日期：10.30</p><p>岗位：软件开发</p><h3 id="爱给网一面挂">爱给网（一面挂）</h3><p>投递日期：11.1</p><p>岗位：软件开发</p><h4 id="面试-2">11.23面试</h4><p>实际问的比较多，多实践。</p><h3 id="车300简历挂">车300（简历挂）</h3><p>投递日期：11.1</p><p>岗位：Java开发</p><h3 id="北森云计算测评挂">北森云计算（测评挂）</h3><p>投递日期：11.6</p><p>岗位：后端开发</p><h4 id="测评-7">11.11测评</h4><p>https://bsurl.cn/v2/tagecDFF</p><h3 id="盛趣游戏简历挂">盛趣游戏（简历挂）</h3><p>投递日期：11.6</p><p>岗位：后端开发</p><h3 id="慧策">慧策</h3><p>投递日期：11.7</p><p>岗位：Java开发</p><h4 id="笔试-12">11.20笔试</h4><p>编程题：</p><figure><img src="2023秋招投递记录/image-20231120191738975.png"alt="image-20231120191738975" /><figcaption aria-hidden="true">image-20231120191738975</figcaption></figure><p>选择算法，利用hash表</p><figure><img src="2023秋招投递记录/image-20231120191754036.png"alt="image-20231120191754036" /><figcaption aria-hidden="true">image-20231120191754036</figcaption></figure><p>合并K个链表，但不会处理输入</p><h4 id="一面-2">11.27一面</h4><ol type="1"><li>自我介绍</li><li>实习项目，ERP的流程（在这实习几个月没理解）<ol type="1"><li>SQL优化：什么时候用exist替换in</li><li>单点登录原理</li><li>单点登录保证token安全性 ： 加密算法SHA</li><li>其它系统都是用这个加密算法？ 不同系统之间加密算法应该不一样，SHA原理</li><li><strong>为什么用唯一索引</strong></li></ol></li><li>项目拷打<ol type="1"><li>共享session登录流程，实现流程</li><li>redis设置过期时间的命令</li><li>两条命令原子性问题如何解决</li><li>为什么用redission，比jedis有什么好处</li><li>布隆过滤器原理</li><li>过滤器能保证什么？ 数据一定不存在，可能存在</li><li>场景设计：<strong>如果一开始数据不存在布隆过滤器，那后面突然添加了数据该怎么设计</strong>把对应的位变为1</li></ol></li><li>mysql索引</li><li>mvcc两阶段提交</li><li>ArrayList与LinkedList区别<ol type="1"><li>随机存储访问是什么</li></ol></li><li>springboot的@SpringApplication注解原理</li><li>mybatis原理，二级缓存</li><li>反射</li><li>hashmap底层</li><li><strong>如果一直向hashmap里添加冲突数据，hashmap是先扩容还是先树化</strong>（先扩容）</li><li>扩容因子</li><li>手撕：0...N个数，快速找到不存在的那个数 （用的哈希表）可以用<strong>二次异或法</strong></li></ol><h3 id="图尔兹人满了">图尔兹（人满了）</h3><p>投递日期：11.12</p><p>岗位：Java开发</p><h3 id="游戏精酿">游戏精酿</h3><p>投递日期：11.13</p><p>岗位：Java开发</p><h3 id="万马汇科技">万马汇科技</h3><p>投递日期：11.13</p><p>岗位：Java开发</p><h3 id="石化盈科">石化盈科</h3><p>投递日期：11.14</p><p>岗位：Java开发</p><h4 id="笔试-13">11.30笔试</h4><figure><img src="2023秋招投递记录/image-20231130105804805.png"alt="image-20231130105804805" /><figcaption aria-hidden="true">image-20231130105804805</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">// 注意 hasNext 和 hasNextLine 的区别</span></span><br><span class="line">    <span class="keyword">while</span> (in.hasNextInt()) &#123; <span class="comment">// 注意 while 处理多个 case</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        <span class="type">int</span>[] rowNum = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="type">int</span>[] colNum = <span class="keyword">new</span> <span class="title class_">int</span>[m];</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            list.add(x);</span><br><span class="line">            list.add(y);</span><br><span class="line">            lists.add(list);</span><br><span class="line">            rowNum[x - <span class="number">1</span>]++;</span><br><span class="line">            colNum[y - <span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : lists) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> list.get(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            max = Math.max(max, rowNum[x - <span class="number">1</span>] + colNum[y - <span class="number">1</span>] -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大华简历挂">大华（简历挂）</h3><p>投递日期：11.15</p><p>岗位：研发</p><h3 id="moka">Moka</h3><p>投递日期：11.15</p><p>岗位：后端</p><h3 id="深圳乐巢时代">深圳乐巢时代</h3><p>投递日期：11.16</p><p>岗位：Java开发实习</p><h3 id="立魁科技">立魁科技</h3><p>投递日期：11.16</p><p>岗位：Java开发实习</p><h3 id="扫呗">扫呗</h3><p>投递日期：11.16</p><p>岗位：研发实习</p><h3 id="上海蒙塔">上海蒙塔</h3><p>投递日期：11.16</p><p>岗位：Java实习</p><h3 id="多比特">多比特</h3><p>投递日期：11.17</p><p>岗位：Java实习</p><p><ahref="https://app.mokahr.com/m/candidate/applications/deliver-query/wedobest">武汉市多比特信息科技有限公司- 投递查询 (mokahr.com)</a></p><h3 id="华硕科技">华硕科技</h3><p>投递日期：11.17</p><p>岗位：Java开发</p><h3 id="武汉微云创想">武汉微云创想</h3><p>投递日期：11.17</p><p>岗位：Java开发</p><h3 id="易有料">易有料</h3><p>投递日期：11.17</p><p>岗位：Java开发</p><h3 id="开始送">开始送</h3><p>投递日期：11.19</p><p>岗位：Java开发</p><h3 id="浩宇智创">浩宇智创</h3><p>投递日期：11.19</p><p>岗位：Java开发</p><h3 id="袋鼠云一面挂">袋鼠云（一面挂）</h3><p>投递日期：11.20</p><p>岗位：Java开发</p><h4 id="一面-3">11.27一面</h4><ol type="1"><li>实习项目，单点登录<ol type="1"><li>怎么保证用户唯一标识</li></ol></li><li>实习难点</li><li>多线程批量导入具体实现</li><li>java集合</li><li>hashmap底层</li><li>红黑树的结构</li><li>为什么使用红黑树<ol type="1"><li>红色、黑色有什么用</li></ol></li><li><strong>springboot自动装配原理</strong><ol type="1"><li>pom文件里的依赖，springboot在导入依赖时是一次性导入吗</li></ol></li><li>springIOC<ol type="1"><li>管理bean的数据结构</li><li>为什么使用ConcurrentHashMap</li></ol></li><li>mysql数据结构<ol type="1"><li>建索引有哪些优化，基于B+树</li><li>用其它字段建索引，注意什么</li></ol></li><li>索引失效场景<ol type="1"><li>最左匹配</li></ol></li></ol><h3 id="数新网络">数新网络</h3><p>投递日期：11.20</p><p>岗位：Java开发</p><h3 id="宁致数创">宁致数创</h3><p>投递日期：11.20</p><p>岗位：Java开发</p><h3 id="爱给网一面挂-1">爱给网（一面挂）</h3><p>投递日期：11.20</p><p>岗位：Java开发</p><h4 id="面试-3">11.23面试</h4><ol type="1"><li>面试的优势在哪</li><li>mysql索引优化</li><li>多态的理解</li><li><strong>springMVC注解</strong></li><li>Aop应用场景</li><li>同一个接口有两个或两个以上实现类时，如何注入</li><li>场景题：一个应用程序，前端、后端、数据库，如果存入数据的时候发生乱码，该怎么排查解决</li></ol><h3 id="峰台科技">峰台科技</h3><p>投递日期：11.21</p><p>岗位：Java开发</p><h3 id="烽火">烽火</h3><p>投递日期：11.21</p><p>岗位：Java开发</p><h3 id="浙江御安">浙江御安</h3><p>投递日期：11.22</p><p>岗位：Java开发</p><h3 id="财富趋势科技">财富趋势科技</h3><p>投递日期：11.23</p><p>岗位：Java开发</p><h3 id="小黑盒">小黑盒</h3><p>投递日期：11.24</p><p>岗位：后端开发</p><h4 id="笔试-14">11.24笔试</h4><figure><img src="2023秋招投递记录/image-20231124213552162.png"alt="image-20231124213552162" /><figcaption aria-hidden="true">image-20231124213552162</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> house int整型一维数组 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">FindHouse</span> <span class="params">(<span class="type">int</span>[] house)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; candidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> house.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">answer</span> <span class="operator">=</span> house[i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (answer == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i - answer &gt;= <span class="number">0</span> &amp;&amp; house[i - answer] == -<span class="number">1</span> &amp;&amp; !res.contains(house[i - answer]))&#123;</span><br><span class="line">                res.add(i-answer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i + answer &lt; N &amp;&amp; house[i + answer] == -<span class="number">1</span> &amp;&amp; !res.contains(house[i + answer]))&#123;</span><br><span class="line">                res.add(i + answer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (candidates.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        candidates.sort((a,b) -&gt; a-b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过60%</p><figure><img src="2023秋招投递记录/image-20231124214243352.png"alt="image-20231124214243352" /><figcaption aria-hidden="true">image-20231124214243352</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> S int整型 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prices int整型一维数组 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int整型ArrayList</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title function_">Calc</span> <span class="params">(<span class="type">int</span> S, <span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="comment">// write code here</span></span><br><span class="line">        ArrayList&lt;Integer&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> prices[i];</span><br><span class="line">            left += p/S;</span><br><span class="line">            prices[i] %= <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> left;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            sum += prices[i];</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        left += sum/<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        ans.add(left);</span><br><span class="line">        ans.add(right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过60%</p><figure><img src="2023秋招投递记录/image-20231124220512856.png"alt="image-20231124220512856" /><figcaption aria-hidden="true">image-20231124220512856</figcaption></figure><h3 id="学科网">学科网</h3><p>投递日期：11.24</p><p>岗位：后端开发</p><h3 id="我汇">我汇</h3><p>投递日期：11.29</p><p>岗位：后端开发</p><h4 id="一面-4">11.29一面</h4><ol type="1"><li>自我介绍</li><li>项目拷打<ol type="1"><li>限流怎么做的</li><li>redis为什么快</li><li>缓存穿透、击穿、雪崩的解决方案</li><li>商品表的建立，有没有用到索引（没有）</li></ol></li><li>key在redis可以存在多久，<strong>redis淘汰算法</strong>是怎么样的（忘了）</li><li>rabbitMQ消息发送失败怎么处理</li><li>什么情况下会出现消息堆积，<strong>如何解决</strong>？</li><li>MySQL的索引</li><li>建表怎么创建索引针对数据量大的表（项目里怎么创建的）</li><li>hashmap，线程安全的map，如何保证线程安全</li><li>jvm<ol type="1"><li>内存结构</li><li>垃圾回收算法</li></ol></li><li>线程池参数、工作原理</li><li><strong>阻塞队列原理</strong></li></ol><p>反问：</p><ol type="1"><li>业务</li><li>面试表现</li><li>面试结果</li></ol><h2 id="海投网投递">海投网投递</h2><h3 id="中建三局">中建三局</h3><p>投递日期：11.1</p><p>岗位：软件开发</p><h3 id="苏宁易购">苏宁易购</h3><p>投递日期：11.1</p><p>岗位：软件开发</p><h3 id="华测导航">华测导航</h3><p>投递日期：11.1</p><p>岗位：软件开发</p><h3 id="上海龙骑">上海龙骑</h3><p>投递日期：11.1</p><p>岗位：软件开发</p><h4 id="测评-8">测评</h4><p>https://longcheerzp.ceping.com/pc?aId=38acXCbaMzxcChina25ye/m4WXYMf3FcPow==</p><h4 id="笔试-15">笔试</h4><p>https://bsurl.cn/v2/q9H3qXCT</p><h3 id="广东星辉">广东星辉</h3><p>投递日期：11.1</p><p>岗位：客户端开发</p><h4 id="笔试-16">11.7笔试</h4><p>https://ks.wjx.top/vm/mD3YkRc.aspx#</p><h2 id="官网投递-2">官网投递</h2><h3 id="数梦工厂">数梦工厂</h3><p>投递日期：10.23</p><p>岗位：java开发</p><h3 id="猫眼娱乐">猫眼娱乐</h3><p>投递日期：10.23</p><p>岗位：后端开发</p><h3 id="厦门延趣">厦门延趣</h3><p>投递日期：10.23</p><p>岗位：java游戏开发</p><h3 id="长亭科技笔试挂">长亭科技（笔试挂）</h3><p>投递日期：10.23</p><p>岗位：java开发</p><h4 id="笔试-17">笔试</h4><p><a href="https://oj.chaitin.cn/">oj | Home (chaitin.cn)</a></p><p>1、2 的最小阶</p><p>小明正在实现一个内存分配算法，这个算法对于用户的<code>m</code>字节内存分配请求，分配<code>2^n</code>大小的内存，<code>n</code>是满足<code>2^n &gt;= m</code>的最小非负整数。</p><p>在算法内部，小明大于等于 16 字节的空闲内存块按照 2的阶串联的空闲列表中，并将小于 16 字节的空闲内存块以位图的方式分配。</p><p>小明注意到，若能对于<code>m</code>字节内存分配请求快速地求出对应的 2的阶数<code>n</code>，查找合适大小的空闲列表或位图也能迎刃而解。</p><p>请你设计一个算法，对于用户的<code>m</code>字节内存分配请求，求出符合<code>2^n &gt;= m</code>的最小的非负整数<code>n</code>。</p><p>Input</p><p>第一行为内存分配请求的个数<code>k</code>。</p><p>后续<code>k</code>行每行包含一个整数<code>m</code>，为用户的内存分配请求。</p><p><code>k</code>和<code>m</code>均为 64位非负整数，即<code>0 &lt;= k, m &lt;= 2^64 - 1</code>。</p><p>Output</p><p>输出 k 行符合<code>2^n &gt;= m</code>的最小非负整数<code>n</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> scanner.nextInt(); <span class="comment">// 内存分配请求的个数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">m</span> <span class="operator">=</span> scanner.nextLong(); <span class="comment">// 用户的内存分配请求</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用函数计算2的阶数n</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> calculate(m);</span><br><span class="line">            System.out.println(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">calculate</span><span class="params">(<span class="type">long</span> a)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(a &lt;= <span class="number">16</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="type">long</span> <span class="variable">n</span> <span class="operator">=</span> a - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> n &lt; <span class="number">0</span> ? <span class="number">0</span> : (<span class="type">int</span>)Math.sqrt(n + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一直Runtime error</p><p>5、 排序数组搜索</p><figure><img src="2023秋招投递记录/image-20231102105647031.png"alt="image-20231102105647031" /><figcaption aria-hidden="true">image-20231102105647031</figcaption></figure><p>学到了处理输入的方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">search</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从输入中获取数组</span></span><br><span class="line">        String[] inputArr = scanner.nextLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[inputArr.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; inputArr.length; i++) &#123;</span><br><span class="line">            arr[i] = Integer.parseInt(inputArr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取目标值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用函数并输出结果</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> binarySearchRightmost(arr, target);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearchRightmost</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= j) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> (i + j) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (target &gt;= a[m]) &#123;</span><br><span class="line">                i = m + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="七猫">七猫</h3><p>投递日期：10.31</p><p>岗位：后端开发</p><h3 id="富途">富途</h3><p>投递日期：11.1</p><p>岗位：客户端开发</p><h3 id="柠檬微趣">柠檬微趣</h3><p>投递日期：11.1</p><p>岗位：Java服务端开发</p><h3 id="腾讯音乐">腾讯音乐</h3><p>投递日期：11.1</p><p>岗位：软件开发</p><p><a href="https://join.tencentmusic.com/deliver">我的投递 |腾讯音乐娱乐招聘 (tencentmusic.com)</a></p><h3 id="哈啰">哈啰</h3><p>投递日期：11.3</p><p>岗位：java开发</p><p><a href="https://hellobike.zhiye.com/Portal/Apply/Index">我的申请(zhiye.com)</a></p><h3 id="浪潮">浪潮</h3><p>投递日期：11.3</p><p>岗位：java开发</p><p><ahref="https://inspur.hcmcloud.cn/recruit#/progress_detail?id=_HB4_Mjc0MjA1MQ%3D%3D">浪潮集团招聘(hcmcloud.cn)</a></p><h3 id="叠纸游戏">叠纸游戏</h3><p>投递日期：11.4</p><p>岗位：软件开发</p><p><ahref="https://career.papegames.com/campus/position/application">应聘记录- 叠纸游戏校园招聘 (papegames.com)</a></p><h3 id="疯狂游戏">疯狂游戏</h3><p>投递日期：11.4</p><p>岗位：服务器开发</p><h3 id="广州火羽">广州火羽</h3><p>投递日期：11.4</p><p>岗位：服务器开发</p><h3 id="数禾科技">数禾科技</h3><p>投递日期：11.4</p><p>岗位：Java开发</p><p><ahref="https://shuhegroup1.zhiye.com/personal/deliveryRecord">上海数禾信息科技有限公司(zhiye.com)</a></p><h3 id="省广集团">省广集团</h3><p>投递日期：11.9</p><p>岗位：Java开发</p><h4 id="笔试-18">11.17笔试</h4><p>https://exam.wintalent.cn/toes/GIMC/web/exam/login?lang=zh_CN&amp;accountId=0793473055191</p><figure><img src="2023秋招投递记录/image-20231117192912012.png"alt="image-20231117192912012" /><figcaption aria-hidden="true">image-20231117192912012</figcaption></figure><p>有一个大小为1T的数据文件，存放了3个媒体的投放明细数据，现在要统计每个媒体的数据总量，请给出具体实现方案。</p><h3 id="中电鸿信">中电鸿信</h3><p>投递日期：11.21</p><p>岗位：Java开发</p><h3 id="吉比特简历挂">吉比特（简历挂）</h3><p>投递日期：11.24</p><p>岗位：Java开发</p><p><ahref="https://hr.g-bits.com/web/index.html#/center-web/recruit-query">吉比特&amp;雷霆游戏校园招聘(g-bits.com)</a></p><h3 id="友塔游戏简历挂">友塔游戏（简历挂）</h3><p>投递日期：11.24</p><p>岗位：游戏开发</p><h1 id="大厂冲刺v2">大厂冲刺——V2</h1><figure><img src="2023秋招投递记录/image-20231009234656537.png"alt="image-20231009234656537" /><figcaption aria-hidden="true">image-20231009234656537</figcaption></figure><p>巨人，祖龙，紫龙，英雄，鹰角，库洛，莉莉丝，37，多益，哔哩哔哩，灵犀，盛趣，掌游，心动</p><h2 id="百度">百度</h2><h3 id="秋招">秋招</h3><p>岗位：java开发</p><p>投递日期：10.7，<ahref="https://talent.baidu.com/jobs/center">百度校园招聘(baidu.com)</a></p><h4 id="笔试-19">10.17笔试</h4><h5 id="算法题-3">算法题</h5><p>1、</p><figure><img src="2023秋招投递记录/image-20231017193322334.png"alt="image-20231017193322334" /><figcaption aria-hidden="true">image-20231017193322334</figcaption></figure><p>2、</p><figure><img src="2023秋招投递记录/image-20231017193256663.png"alt="image-20231017193256663" /><figcaption aria-hidden="true">image-20231017193256663</figcaption></figure><p>3、</p><figure><img src="2023秋招投递记录/image-20231017193335749.png"alt="image-20231017193335749" /><figcaption aria-hidden="true">image-20231017193335749</figcaption></figure><h3 id="日常实习简历挂">日常实习（简历挂）</h3><p>投递日期：10.7，<ahref="https://talent.baidu.com/jobs/center">百度校园招聘(baidu.com)</a></p><h2 id="喜马拉雅">喜马拉雅</h2><h3 id="秋招-1">秋招</h3><p>岗位：java后端开发</p><p>投递日期：10.7</p><p><ahref="https://app.mokahr.com/campus-recruitment/himalaya/92431#/candidateHome/applications">喜马拉雅校园招聘(mokahr.com)</a></p><h3 id="实习">实习</h3><p>AIGC java</p><p>投递日期：10.7</p><h2 id="字节跳动">字节跳动</h2><h3 id="秋招-2">秋招</h3><p>岗位：后端开发</p><p>投递日期：10.31</p><p><ahref="https://jobs.bytedance.com/campus/position/application?spread=W5JT3VQ">应聘记录- 加入字节跳动 (bytedance.com)</a></p><h4 id="笔试-20">11.2笔试</h4><h3 id="实习简历挂">实习（简历挂）</h3><p>岗位：后端开发</p><p>投递日期：10.7</p><p><ahref="https://jobs.bytedance.com/campus/position/application?spread=W5JT3VQ">应聘记录- 加入字节跳动 (bytedance.com)</a></p><h2 id="米哈游简历挂">米哈游（简历挂）</h2><h3 id="秋招-3">秋招</h3><p>岗位：云计算后端开发</p><p>投递日期：10.7</p><p><ahref="https://campus.mihoyo.com/#/campus/applyRecord">miHoYo校园招聘</a></p><h2 id="中新赛克">中新赛克</h2><h3 id="秋招-4">秋招</h3><p>岗位：Java后台工程师</p><p>投递日期：10.7</p><p><a href="https://recruit.sinovatio.com/resume/mine">中新赛克招聘官网(sinovatio.com)</a></p><h2 id="大华转岗寄">大华（转岗寄）</h2><h3 id="秋招-5">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.7</p><p><ahref="https://dahua.zhiye.com/personal/deliveryRecord">浙江大华技术股份有限公司(zhiye.com)</a></p><h2 id="万兴喵影简历挂">万兴喵影（简历挂）</h2><h3 id="秋招-6">秋招</h3><p>岗位：后端开发工程师</p><p>投递日期：10.9</p><p><ahref="https://app.mokahr.com/campus-recruitment/wanxingkeji/41591#/candidateHome/applications">万兴科技集团股份有限公司- 校园招聘 (mokahr.com)</a></p><h2 id="bilibili简历挂">Bilibili（简历挂）</h2><h3 id="秋招-7">秋招</h3><p>岗位：C端开发工程师、B端开发工程师</p><p>投递日期：10.9</p><p><ahref="https://jobs.bilibili.com/campus/records?token=9342a260-8d43-4281-81e7-5dc310f99b87&amp;channel=nowcoder">哔哩哔哩-招聘(bilibili.com)</a></p><h2 id="bigo简历挂">BIGO（简历挂）</h2><h3 id="秋招-8">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.9</p><p><ahref="https://recommendation.bigo.sg/recommendation-apply/bigo/1020?recommendCode=NTAY75x&amp;hash=#/job/bb5b0e0b-6101-4423-950c-4ec9a9cc1b66/apply/thanks?jobId=bb5b0e0b-6101-4423-950c-4ec9a9cc1b66&amp;recommendCode=NTAY75x&amp;codeType=1&amp;isRecommendation=false&amp;applyInfo%5BaimWorkCity%5D=广州市&amp;candidateName=孟海东&amp;candidateId=469506945">BIGO- 内部推荐</a></p><h2 id="海信集团人才库">海信集团（人才库）</h2><h3 id="秋招-9">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.9</p><p><ahref="https://jobs.hisense.com/form/friendly?fromPage=job&amp;CategoryId=2&amp;submissionId=360875497">海信集团招聘(hisense.com)</a></p><h2 id="奇安信">奇安信</h2><h3 id="秋招-10">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.11</p><h2 id="满帮集团">满帮集团</h2><h3 id="秋招-11">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.11</p><p><ahref="https://app.mokahr.com/campus-recruitment/manbang/94191#/candidateHome/applications">满帮集团- 校园招聘 (mokahr.com)</a></p><h2 id="oppo">OPPO</h2><h3 id="秋招-12">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.11</p><p><ahref="https://careers.oppo.com/university/oppo/center/history">OPPO招聘- 加入我们 join us</a></p><h2 id="momenta">Momenta</h2><h3 id="秋招简历挂">秋招（简历挂）</h3><p>岗位：Java开发工程师</p><p>投递日期：10.12</p><p><ahref="https://momenta.jobs.feishu.cn/campus/position/application?spread=DVX8DJC">应聘记录- Momenta Campus (feishu.cn)</a></p><h2 id="度小满">度小满</h2><h3 id="秋招-13">秋招</h3><p>岗位：Java开发工程师</p><p>投递日期：10.12</p><p><ahref="https://app.mokahr.com/campus-recruitment/duxiaoman/74050#/candidateHome/applications">度小满2024校园招聘(mokahr.com)</a></p><h2 id="阿里">阿里</h2><h3 id="淘天">淘天</h3><h4 id="秋招-14">秋招</h4><p>岗位：Java开发工程师</p><p>投递日期：10.14</p><p><ahref="https://talent.taotian.com/personal/campus-application?lang=zh">淘天集团招聘官网(taotian.com)</a></p><h3 id="菜鸟">菜鸟</h3><p>岗位：Java研发工程师</p><p>投递日期：10.24</p><h3 id="饿了么">饿了么</h3><p>岗位：Java研发工程师</p><p>投递日期：11.4</p><p><ahref="https://talent.ele.me/personal/campus-application?lang=zh">饿了么招聘官网(ele.me)</a></p><h2 id="绿盟科技">绿盟科技</h2><h3 id="秋招-15">秋招</h3><p>岗位：后端研发工程师</p><p>投递日期：10.14</p><p><ahref="https://app.mokahr.com/campus_apply/nsfocus/29118?recommendCode=DSZh4ePD#/candidateHome/applications">绿盟科技2024校园招聘(mokahr.com)</a></p><h2 id="唯品会">唯品会</h2><h3 id="实习-1">实习</h3><p>岗位：java开发实习生</p><p>投递日期：10.14</p><h2 id="section">360</h2><h3 id="秋招-16">秋招</h3><p>岗位：java后端开发实习生</p><p>投递日期：10.14</p><h4 id="笔试-21">11.11笔试</h4><p><ahref="https://360.acmcoder.com/cand/check?returnUrl=https%3A%2F%2F360.acmcoder.com%2Fcand%2Flogin%3F6dws9jqr#/">赛码设备检测(acmcoder.com)</a></p><figure><img src="2023秋招投递记录/image-20231111154525913.png"alt="image-20231111154525913" /><figcaption aria-hidden="true">image-20231111154525913</figcaption></figure><figure><img src="2023秋招投递记录/image-20231111154957703.png"alt="image-20231111154957703" /><figcaption aria-hidden="true">image-20231111154957703</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecretTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(in.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> in.nextInt();</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.next();</span><br><span class="line">            System.out.println(secretTest(n, s));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">secretTest</span><span class="params">(<span class="type">int</span> n, String s)</span> &#123;</span><br><span class="line">        s = s.substring(<span class="number">0</span>, n);</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(Integer.parseInt(s.substring(<span class="number">0</span>, <span class="number">2</span>)) &gt;= <span class="number">26</span>)&#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Integer.parseInt(s.substring(i-<span class="number">1</span>, i+<span class="number">1</span>) )&lt;= <span class="number">26</span>)&#123;</span><br><span class="line">                dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                dp[i] = dp[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>] % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vivo">VIVO</h2><h3 id="实习生">实习生</h3><p>岗位：后端开发实习生</p><p>投递日期：10.14</p><p><ahref="https://hr.vivo.com/wt/vivo/web/index/vivoWebApplyRecord!listApplyPosition?needStatusFlows=true&amp;operational=6d84f34050c27c0fa86aeca7884590e91532a71c7c938f17c76a939be6df0b8cda337aa4f2c305f9fd2747373b76af9e2189ca075679500856e40756af4788a093c15d9d90376896c438e9a3d98ef6ab339de3b603c10183c638b7d334810f52c7fbc0bc458c980c">投递记录(vivo.com)</a></p><h2 id="金山办公">金山办公</h2><h3 id="秋招-17">秋招</h3><p>岗位：服务端开发工程师（政企营销方向）</p><p>投递日期：10.17</p><p><ahref="https://app.mokahr.com/campus-recruitment/wps/41436#/candidateHome/applications">金山办公软件- 校园招聘 (mokahr.com)</a></p><h2 id="金山云">金山云</h2><h3 id="秋招-18">秋招</h3><p>岗位：java开发工程师</p><p>投递日期：10.17</p><p><ahref="https://app.mokahr.com/campus-recruitment/kingsoft/39364#/candidateHome/applications">金山云- 校园招聘 (mokahr.com)</a></p><h2 id="搜狐畅游简历挂">搜狐畅游（简历挂）</h2><h3 id="秋招-19">秋招</h3><p>岗位：java游戏开发工程师</p><p>投递日期：10.17</p><p><ahref="https://app.mokahr.com/campus-recruitment/cyou-inc/42233#/candidateHome/applications">搜狐畅游- 校园招聘 (mokahr.com)</a></p><h2 id="知乎">知乎</h2><h3 id="秋招-20">秋招</h3><p>岗位：后端开发工程师</p><p>投递日期：10.22</p><h2 id="微博">微博</h2><h3 id="秋招-21">秋招</h3><p>岗位：移动端开发工程师</p><p>投递日期：10.22</p><p><ahref="https://app.mokahr.com/campus-recruitment/sina/43536#/candidateHome/applications">新浪集团- 校园招聘 (mokahr.com)</a></p><h2 id="虎牙直播">虎牙直播</h2><h3 id="秋招-22">秋招</h3><p>岗位：Java后台开发工程师</p><p>投递日期10.24</p><p><ahref="https://app.mokahr.com/campus_apply/huya/4112#/candidateHome/applications">虎牙直播-校园招聘(mokahr.com)</a></p><h2 id="同程旅行">同程旅行</h2><h3 id="秋招简历挂-1">秋招（简历挂）</h3><p>岗位：golang后台开发工程师</p><p>投递日期10.24</p><p><ahref="https://mhr.ly.com/recruit/schoolPortal/#/personal">同程旅行校园招聘(ly.com)</a></p><h2 id="迅雷">迅雷</h2><h3 id="秋招-23">秋招</h3><p>岗位：服务端开发工程师</p><p>投递日期10.24</p><p><ahref="https://campus.xunlei.com/campus_apply/xunlei/26600/#/candidateHome/applications">深圳市迅雷网络技术有限公司- 校园招聘 (xunlei.com)</a></p><h2 id="网易笔试挂">网易（笔试挂）</h2><h3 id="秋招-24">秋招</h3><p>岗位：测试开发工程师</p><p>投递日期10.23</p><h4 id="笔试-22">10.26笔试</h4><h2 id="影子科技">影子科技</h2><h3 id="秋招-25">秋招</h3><p>岗位：软件开发工程师</p><p>投递日期10.23</p><h2 id="华润万家">华润万家</h2><h3 id="秋招-26">秋招</h3><p>岗位：信息化技术管培生</p><p>投递日期10.23</p><p><ahref="https://wecruit.hotjob.cn/SU61500b08bef57c54dcc07957/pb/account.html#/myDeliver">华润万家招聘(hotjob.cn)</a></p><h2 id="蚂蚁集团">蚂蚁集团</h2><h3 id="秋招-27">秋招</h3><p>岗位：java开发</p><p>投递日期11.1</p><p><ahref="https://talent.antgroup.com/personal/campus-application">蚂蚁集团招聘官网(antgroup.com)</a></p><h2 id="小红书">小红书</h2><h3 id="实习-2">实习</h3><p>岗位：java开发</p><p>投递日期11.4</p><p><a href="https://job.xiaohongshu.com/record/intern">投递记录(xiaohongshu.com)</a></p><h2 id="浙江吉利">浙江吉利</h2><h3 id="秋招-28">秋招</h3><p><ahref="https://campus.geely.com/campus-recruitment/geely/98147#/candidateHome/applications">校园招聘- 浙江极氪智能科技有限公司 (geely.com)</a></p><h4 id="曹操出行">曹操出行</h4><p>岗位：研发</p><p>投递日期11.4</p><p><ahref="https://campus.geely.com/campus-recruitment/geely/92136#/candidateHome/applications">杭州优行科技有限公司- 校园招聘 (geely.com)</a></p><h4 id="极氪智能科技">极氪智能科技</h4><p>岗位：后端开发</p><p>投递日期11.4</p><h1 id="中小厂试炼v3">中小厂试炼——V3</h1><h2 id="官网投递-3">官网投递</h2><h2 id="boss投递-3">boss投递</h2><h3 id="中储智运">中储智运</h3><p>岗位：Java开发</p><p>投递日期2023.12.5</p><h4 id="笔试-23">12.6笔试</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;标题上的V？表示用的第几版本简历投递。&lt;/p&gt;
&lt;h1 id=&quot;中小厂试炼v1&quot;&gt;中小厂试炼——V1&lt;/h1&gt;
&lt;h2 id=&quot;boss投递&quot;&gt;boss投递&lt;/h2&gt;
&lt;h3 id=&quot;保融科技笔试挂&quot;&gt;保融科技（笔试挂）&lt;/h3&gt;
&lt;p&gt;投递日期9.14&lt;/p&gt;
</summary>
      
    
    
    
    <category term="求职" scheme="https://vlsmhd.github.io/categories/%E6%B1%82%E8%81%8C/"/>
    
    
    <category term="求职" scheme="https://vlsmhd.github.io/tags/%E6%B1%82%E8%81%8C/"/>
    
    <category term="2023秋招" scheme="https://vlsmhd.github.io/tags/2023%E7%A7%8B%E6%8B%9B/"/>
    
  </entry>
  
</feed>
