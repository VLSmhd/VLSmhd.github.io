<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VLS_Blog</title>
  
  <subtitle>starry sky</subtitle>
  <link href="https://vlsmhd.github.io/atom.xml" rel="self"/>
  
  <link href="https://vlsmhd.github.io/"/>
  <updated>2023-09-10T12:52:35.918Z</updated>
  <id>https://vlsmhd.github.io/</id>
  
  <author>
    <name>Vlong_shen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jenkins</title>
    <link href="https://vlsmhd.github.io/2023/09/10/jenkins/"/>
    <id>https://vlsmhd.github.io/2023/09/10/jenkins/</id>
    <published>2023-09-10T11:18:54.846Z</published>
    <updated>2023-09-10T12:52:35.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ci概念">CI概念</h1><p>持续集成（ Continuous integration ， 简称 CI）指的是，频繁地（一天多次）将代码集成到主干</p><figure><img src="jenkins/image-20210802000658790.png"alt="image-20210802000658790" /><figcaption aria-hidden="true">image-20210802000658790</figcaption></figure><p><strong>持续集成的组成要素</strong></p><p>一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、测试统计等都是自动完成的， 无需人工干预。</p><p>一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。</p><p>一个持续集成服务器， Jenkins就是一个配置简单和使用方便的持续集成服务器。</p><p><strong>持续集成的好处</strong></p><p>1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；2、对系统健康持续检查，减少发布风险带来的问题； 3、减少重复性工作；4、持续部署，提供可部署单元包； 5、持续交付可供使用的版本；6、增强团队信心；</p><h1 id="jenkins安装配置">Jenkins安装配置</h1><h2 id="jenkins介绍">Jenkins介绍</h2><figure><img src="jenkins/image-20210802011553923.png"alt="image-20210802011553923" /><figcaption aria-hidden="true">image-20210802011553923</figcaption></figure><p>Jenkins 是一款流行的开源持续集成（ContinuousIntegration）工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。官网：http://jenkins-ci.org/。</p><p>Jenkins的特征：</p><ul><li>开源的 Java语言开发持续集成工具，支持持续集成，持续部署。</li><li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li><li>消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</li><li>分布式构建：支持 Jenkins能够让多台计算机一起构建/测试。</li><li>文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li><li>丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</li></ul><p>Jenkins安装和持续集成环境配置</p><figure><img src="jenkins/image-20210802011607894.png"alt="image-20210802011607894" /><figcaption aria-hidden="true">image-20210802011607894</figcaption></figure><p>1 ）首先，开发人员每天进行代码提交，提交到Git仓库</p><p>2）然后，Jenkins作为持续集成工具，使用Git工具到Git仓库拉取代码到集成服务器，再配合JDK，Maven等软件完成代码编译，代码测试与审查，测试，打包等工作，在这个过程中每一步出错，都重新再执行一次整个流程。</p><p>3）最后，Jenkins把生成的jar或war包分发到测试服务器或者生产服务器，测试人员或用户就可以访问应用。</p><h2 id="jenkins环境搭建">Jenkins环境搭建</h2><h3 id="jenkins安装配置-1">Jenkins安装配置</h3><p>导入镜像：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器用户名：root   密码：itcast</span><br><span class="line"></span><br><span class="line">jenkins  用户名：itcast   密码：itcast</span><br></pre></td></tr></table></figure><ol type="1"><li><p>采用YUM方式安装</p><p>加入jenkins安装源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo --no-check-certificate</span><br><span class="line"></span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure><p>执行yum命令安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install jenkins</span><br></pre></td></tr></table></figure></li><li><p>采用RPM安装包方式</p><p><ahref="https://pkg.jenkins.io/redhat-stable/">Jenkins安装包下载地址</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://pkg.jenkins.io/redhat-stable/jenkins-2.190.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure><p>执行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jenkins-2.190.1-1.1.noarch.rpm</span><br></pre></td></tr></table></figure></li><li><p>配置：</p><p>修改配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/jenkins</span><br></pre></td></tr></table></figure><p>修改内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改为对应的目标用户， 这里使用的是root</span></span><br><span class="line"><span class="variable">$JENKINS_USER</span>=<span class="string">&quot;root&quot;</span></span><br><span class="line"><span class="comment"># 服务监听端口</span></span><br><span class="line">JENKINS_PORT=<span class="string">&quot;16060&quot;</span></span><br></pre></td></tr></table></figure><p>目录权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> -R root:root /var/lib/jenkins</span><br><span class="line"><span class="built_in">chown</span> -R root:root /var/cache/jenkins</span><br><span class="line"><span class="built_in">chown</span> -R root:root /var/log/jenkins</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart jenkins</span><br></pre></td></tr></table></figure><p>如果启动失败， 出现错误信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Starting Jenkins bash: /usr/bin/java: No such file or directory</span><br></pre></td></tr></table></figure><p>创建JAVA环境的软链接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/jdk/bin/java /usr/bin/java</span><br></pre></td></tr></table></figure></li><li><p>管理后台初始化设置</p><p>http://192.168.200.100:16060/</p><p>需要输入管理密码， 在以下位置查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure><figure><img src="jenkins/image-20210802011625800.png"alt="image-20210802011625800" /><figcaption aria-hidden="true">image-20210802011625800</figcaption></figure><p>按默认设置，把建议的插件都安装上</p><figure><img src="jenkins/image-20210802011638639.png"alt="image-20210802011638639" /><figcaption aria-hidden="true">image-20210802011638639</figcaption></figure><p>这一步等待时间较长， 安装完成之后， 创建管理员用户：</p><figure><img src="jenkins/image-20210802011653454.png"alt="image-20210802011653454" /><figcaption aria-hidden="true">image-20210802011653454</figcaption></figure></li></ol><p>配置访问地址：</p><figure><img src="jenkins/image-20210802011707013.png"alt="image-20210802011707013" /><figcaption aria-hidden="true">image-20210802011707013</figcaption></figure><p>配置完成之后， 会进行重启， 之后可以看到管理后台：</p><figure><img src="jenkins/image-20210802011723835.png"alt="image-20210802011723835" /><figcaption aria-hidden="true">image-20210802011723835</figcaption></figure><h3 id="jenkins插件安装">Jenkins插件安装</h3><p>在实现持续集成之前， 需要确保以下插件安装成功。</p><ul><li>Maven Integration plugin： Maven 集成管理插件。</li><li>Docker plugin： Docker集成插件。</li><li>GitLab Plugin： GitLab集成插件。</li><li>Publish Over SSH：远程文件发布插件。</li><li>SSH: 远程脚本执行插件。</li></ul><p>安装方法：</p><ol type="1"><li><p>进入【系统管理】-【插件管理】</p></li><li><p>点击标签页的【可选插件】</p><p>在过滤框中搜索插件名称</p><figure><img src="jenkins/image-20210802011740056.png"alt="image-20210802011740056" /><figcaption aria-hidden="true">image-20210802011740056</figcaption></figure></li><li><p>勾选插件， 点击直接安装即可。</p></li></ol><blockquote><p>注意，如果没有安装按钮，需要更改配置</p><p>在安装插件的高级配置中，修改升级站点的连接为：http://updates.jenkins.io/update-center.json保存</p><figure><img src="jenkins/image-20210802011758588.png"alt="image-20210802011758588" /><figcaption aria-hidden="true">image-20210802011758588</figcaption></figure></blockquote><h4 id="git安装配置">Git安装配置</h4><ol type="1"><li><p>yum 安装方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure></li><li><p>采用源码包方式安装</p><ul><li><p>安装依赖包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">yum -y install gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></li><li><p>如果之前有安装旧版本， 先做卸载， 没有安装则忽略</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure></li><li><p>下载源码包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-1.8.3.1.tar.gz</span><br><span class="line">tar -xvf git-1.8.3.1.tar.gz</span><br></pre></td></tr></table></figure><p>也可以安装其他版本，地址：https://mirrors.edge.kernel.org/pub/software/scm/git/</p></li><li><p>编译安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-1.8.3.1</span><br><span class="line">make prefix=/usr/local/git all</span><br><span class="line">make prefix=/usr/local/git install</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;export PATH=<span class="variable">$PATH</span>:/usr/local/git/bin&quot;</span> &gt;&gt; /etc/bashrc</span><br><span class="line"><span class="built_in">source</span> /etc/bashrc</span><br></pre></td></tr></table></figure></li></ul></li><li><p>检查git版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost jenkins]<span class="comment"># git version</span></span><br><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure></li></ol><h4 id="maven安装配置">Maven安装配置</h4><ol type="1"><li><p>下载安装包</p><p>下载地址： https://maven.apache.org/download.cgi</p></li><li><p>解压安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local</span><br><span class="line">unzip -o apache-maven-3.6.1.zip </span><br></pre></td></tr></table></figure><p>上传本地仓库并解压</p><figure><img src="jenkins/image-20210802013808080.png"alt="image-20210802013808080" /><figcaption aria-hidden="true">image-20210802013808080</figcaption></figure></li><li><p>配置</p><p>环境变量配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>增加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> MAVEN_HOME=/usr/local/maven/apache-maven-3.6.1</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$MAVEN_HOME</span>/bin</span><br></pre></td></tr></table></figure><p>如果权限不够，则需要增加当前目录的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /usr/local/maven/apache-maven-3.6.1/bin/mvn</span><br></pre></td></tr></table></figure><p>修改镜像仓库配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/maven/apache-maven-3.6.1/conf/settings.xml</span><br></pre></td></tr></table></figure><p>需要把本机的仓库打包上传到服务器上（不上传会自动下载）</p><p>然后指定上传后的仓库配置</p><figure><img src="jenkins/image-20210802013533421.png"alt="image-20210802013533421" /><figcaption aria-hidden="true">image-20210802013533421</figcaption></figure></li></ol><h4 id="docker安装配置">Docker安装配置</h4><ol type="1"><li><p>更新软件包版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></li><li><p>卸载旧版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure></li><li><p>安装软件依赖包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置yum源为阿里云</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>安装后查看docker版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure></li><li><p>启动</p><p>设置开机启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li></ol><h4 id="docker-registry私有仓库安装配置">DockerRegistry私有仓库安装配置</h4><h3 id="jenkins工具配置">Jenkins工具配置</h3><ol type="1"><li><p>进入【系统管理】--&gt; 【全局工具配置】</p><figure><img src="jenkins/image-20210802011944005.png"alt="image-20210802011944005" /><figcaption aria-hidden="true">image-20210802011944005</figcaption></figure></li><li><p>MAVEN配置全局设置</p><figure><img src="jenkins/image-20210802011956261.png"alt="image-20210802011956261" /><figcaption aria-hidden="true">image-20210802011956261</figcaption></figure></li><li><p>指定JDK配置</p><figure><img src="jenkins/image-20210802012010244.png"alt="image-20210802012010244" /><figcaption aria-hidden="true">image-20210802012010244</figcaption></figure></li><li><p>指定MAVEN 目录</p><figure><img src="jenkins/image-20210802012026476.png"alt="image-20210802012026476" /><figcaption aria-hidden="true">image-20210802012026476</figcaption></figure></li><li><p>指定DOCKER目录</p><figure><img src="jenkins/image-20210802012038581.png"alt="image-20210802012038581" /><figcaption aria-hidden="true">image-20210802012038581</figcaption></figure><p>如果不清楚docker的安装的目录，可以使用<code>whereis docker</code>命令查看docker的安装的目录</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ci概念&quot;&gt;CI概念&lt;/h1&gt;
&lt;p&gt;持续集成（ Continuous integration ， 简称 CI
）指的是，频繁地（一天多次）将代码集成到主干&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;jenkins/image-202108020006</summary>
      
    
    
    
    <category term="CI/CD" scheme="https://vlsmhd.github.io/categories/CI-CD/"/>
    
    
  </entry>
  
  <entry>
    <title>Kafka学习</title>
    <link href="https://vlsmhd.github.io/2023/09/03/Kafka%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vlsmhd.github.io/2023/09/03/Kafka%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-09-03T10:19:16.718Z</published>
    <updated>2023-09-03T15:15:14.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念">概念</h1><h2 id="介绍">介绍</h2><p>Kafka是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：http://kafka.apache.org/</p><figure><img src="Kafka学习/image-20210525181028436.png"alt="image-20210525181028436" /><figcaption aria-hidden="true">image-20210525181028436</figcaption></figure><p>kafka介绍-名词解释</p><figure><img src="Kafka学习/image-20210525181100793.png"alt="image-20210525181100793" /><figcaption aria-hidden="true">image-20210525181100793</figcaption></figure><ul><li><p>producer：发布消息的对象称之为主题生产者（Kafka topicproducer）</p></li><li><p>topic：Kafka将消息分门别类，每一类的消息称之为一个主题（Topic）</p></li><li><p>consumer：订阅消息并处理发布的消息的对象称之为主题消费者（consumers）</p></li><li><p>broker：已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理（Broker）。消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。</p></li></ul><h3 id="section"></h3><h1 id="环境搭建">环境搭建</h1><h2 id="docker集成">docker集成</h2><h1 id="使用">使用</h1><h2 id="java简易使用">java简易使用</h2><h2 id="springboot集成">springboot集成</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概念&quot;&gt;概念&lt;/h1&gt;
&lt;h2 id=&quot;介绍&quot;&gt;介绍&lt;/h2&gt;
&lt;p&gt;Kafka
是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：http://kafka.apache.org/&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;K</summary>
      
    
    
    
    <category term="消息队列" scheme="https://vlsmhd.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="Kafka" scheme="https://vlsmhd.github.io/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/Kafka/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode双指针题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/09/02/leetcode%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/09/02/leetcode%E5%8F%8C%E6%8C%87%E9%92%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-09-02T00:23:47.137Z</published>
    <updated>2023-09-06T07:01:06.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="双指针解题规律">双指针解题规律</h2><h3 id="对向指针">对向指针</h3><p>对向搜索：可用于解决有序数组找和的区间，大了右指针移动，小了左指针移动。</p><h3 id="快慢指针">快慢指针</h3><h2 id="题目">题目</h2><h3 id="反转字符串中的元音字母"><ahref="https://leetcode.cn/problems/reverse-vowels-of-a-string/">345.反转字符串中的元音字母</a></h3><p>给你一个字符串 <code>s</code>，仅反转字符串中的所有元音字母，并返回结果字符串。</p><p>元音字母包括<code>'a'</code>、<code>'e'</code>、<code>'i'</code>、<code>'o'</code>、<code>'u'</code>，且可能以大小写两种形式出现不止一次。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;hello&quot;</span><br><span class="line">输出：&quot;holle&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;leetcode&quot;</span><br><span class="line">输出：&quot;leotcede&quot;</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 3 * 105</code></li><li><code>s</code> 由 <strong>可打印的 ASCII</strong> 字符组成</li></ul><h4 id="对向指针-1">对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseVowels</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">char</span>[] arr = s.toCharArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; n &amp;&amp; !isVowel(arr[left])) left++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(right &gt; <span class="number">0</span> &amp;&amp; !isVowel(arr[right])) right--;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line">                <span class="type">char</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[left];</span><br><span class="line">                arr[left] = arr[right];</span><br><span class="line">                arr[right] = tmp;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;a&#x27;</span> || c == <span class="string">&#x27;e&#x27;</span> || c == <span class="string">&#x27;o&#x27;</span> || c == <span class="string">&#x27;i&#x27;</span> || c == <span class="string">&#x27;u&#x27;</span></span><br><span class="line">        || c == <span class="string">&#x27;A&#x27;</span> || c == <span class="string">&#x27;E&#x27;</span> || c == <span class="string">&#x27;I&#x27;</span> || c == <span class="string">&#x27;O&#x27;</span> || c == <span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转字符串中的单词"><ahref="https://leetcode.cn/problems/reverse-words-in-a-string/">151.反转字符串中的单词</a></h3><p>给你一个字符串 <code>s</code> ，请你反转字符串中<strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code>中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong>之间用单个空格连接的结果字符串。</p><p><strong>注意：</strong>输入字符串<code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：反转后的字符串中不能存在前导空格和尾随空格。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。</span><br></pre></td></tr></table></figure><h4 id="快慢指针-1">快慢指针</h4><p>快慢指针指向单词的区间，进行拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        s = s.trim();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">res</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125;</span><br><span class="line">            res.append(s.substring(left + <span class="number">1</span>, right + <span class="number">1</span>));</span><br><span class="line">            res.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">while</span>(left &gt;= <span class="number">0</span> &amp;&amp; s.charAt(left) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                left--;</span><br><span class="line">            &#125;</span><br><span class="line">            right = left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res.toString().trim();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="验证回文串"><ahref="https://leetcode.cn/problems/valid-palindrome/">125.验证回文串</a></h3><p>如果在将所有大写字符转换为小写字符、并移除所有非字母数字字符之后，短语正着读和反着读都一样。则可以认为该短语是一个<strong>回文串</strong> 。</p><p>字母和数字都属于字母数字字符。</p><p>给你一个字符串 <code>s</code>，如果它是 <strong>回文串</strong>，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;A man, a plan, a canal: Panama&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：&quot;amanaplanacanalpanama&quot; 是回文串。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;race a car&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：&quot;raceacar&quot; 不是回文串。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot; &quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：在移除非字母数字字符之后，s 是一个空字符串 &quot;&quot; 。</span><br><span class="line">由于空字符串正着反着读都一样，所以是回文串。</span><br></pre></td></tr></table></figure><h4 id="对向指针-2">对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除除字母以外的其它字符，添加到新字符串中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&#x27;a&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>)&#123;</span><br><span class="line">                str.append(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                str.append((<span class="type">char</span>)(c + <span class="number">32</span>) + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                str.append(c + <span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s = str.toString();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(left) != s.charAt(right))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数之和-ii---输入有序数组"><ahref="https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/">167.两数之和 II - 输入有序数组</a></h3><p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code>，该数组已按 <strong>非递减顺序排列</strong>，请你从数组中找出满足相加之和等于目标数 <code>target</code>的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和<code>numbers[index2]</code> ，则<code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p><p>以长度为 2 的整数数组 <code>[index1, index2]</code>的形式返回这两个整数的下标 <code>index1</code> 和<code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你<strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,7,11,15], target = 9</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [2,3,4], target = 6</span><br><span class="line">输出：[1,3]</span><br><span class="line">解释：2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：numbers = [-1,0], target = -1</span><br><span class="line">输出：[1,2]</span><br><span class="line">解释：-1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h4 id="对向指针-3">对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] numbers, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> numbers.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt;right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(numbers[left] + numbers[right] &gt; target)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(numbers[left] + numbers[right] &lt; target)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;left+<span class="number">1</span>, right+<span class="number">1</span>&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="移动零"><a href="https://leetcode.cn/problems/move-zeroes/">283.移动零</a></h3><p>给定一个数组 <code>nums</code>，编写一个函数将所有 <code>0</code>移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>请注意</strong>，必须在不复制数组的情况下原地对数组进行操作。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: nums = [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><h4 id="二次遍历">二次遍历</h4><p>第一次遍历，把全部不为0的数都弄到前面（保持相对顺序），然后指针停的位置left，用<code>n - left</code>得出0的个数，也就是把后面都赋值为0即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moveZeroes</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="comment">//右指针</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span>  right;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] != <span class="number">0</span>)&#123;</span><br><span class="line">                nums[left] = nums[right];</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            right++;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> left; i &lt; n; i++)&#123;</span><br><span class="line">            nums[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="判断子序列"><ahref="https://leetcode.cn/problems/is-subsequence/">392.判断子序列</a></h3><p>给定字符串 <strong>s</strong> 和 <strong>t</strong> ，判断<strong>s</strong> 是否为 <strong>t</strong> 的子序列。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>"ace"</code>是<code>"abcde"</code>的一个子序列，而<code>"aec"</code>不是）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abc&quot;, t = &quot;ahbgdc&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h4 id="贪心思想">贪心思想</h4><p>优先遍历左边的字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length(), m = t.length();</span><br><span class="line">        <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m &amp;&amp; j &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t.charAt(i) == s.charAt(j))&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j == n;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="盛最多水的容器"><ahref="https://leetcode.cn/problems/container-with-most-water/">11.盛最多水的容器</a></h3><p>给定一个长度为 <code>n</code> 的整数数组 <code>height</code> 。有<code>n</code> 条垂线，第 <code>i</code> 条线的两个端点是<code>(i, 0)</code> 和 <code>(i, height[i])</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code>轴共同构成的容器可以容纳最多的水。</p><p>返回容器可以储存的最大水量。</p><p><strong>说明：</strong>你不能倾斜容器。</p><h4 id="贪心思路">贪心思路</h4><p>双指针一左一右。</p><p>如果左指针指的高度高，那就让右指针移动，反之，让左指针移动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxArea</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> height.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            max = Math.max(max, (right - left) * Math.min(height[right], height[left]));</span><br><span class="line">            <span class="keyword">if</span>(height[left] &lt;= height[right])&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="k-和数对的最大数目"><ahref="https://leetcode.cn/problems/max-number-of-k-sum-pairs/">1679. K和数对的最大数目</a></h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。</p><p>每一步操作中，你需要从数组中选出和为 <code>k</code>的两个整数，并将它们移出数组。</p><p>返回你可以对数组执行的最大操作数。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,4], k = 5</span><br><span class="line">输出：2</span><br><span class="line">解释：开始时 nums = [1,2,3,4]：</span><br><span class="line">- 移出 1 和 4 ，之后 nums = [2,3]</span><br><span class="line">- 移出 2 和 3 ，之后 nums = []</span><br><span class="line">不再有和为 5 的数对，因此最多执行 2 次操作。</span><br></pre></td></tr></table></figure><h4 id="排序贪心对向指针">排序+贪心+对向指针</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxOperations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[left] + nums[right] &gt; k)&#123;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[left] + nums[right] &lt; k)&#123;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                count++;</span><br><span class="line">                left++;</span><br><span class="line">                right--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="压缩字符串"><ahref="https://leetcode.cn/problems/string-compression/">443.压缩字符串</a></h3><p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p><p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组<strong>连续重复字符</strong> ：</p><ul><li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code>中。</li><li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li></ul><p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong>，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为<code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code>数组中会被拆分为多个字符。</p><p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p><p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：chars = [&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;]</span><br><span class="line">输出：返回 6 ，输入数组的前 6 个字符应该是：[&quot;a&quot;,&quot;2&quot;,&quot;b&quot;,&quot;2&quot;,&quot;c&quot;,&quot;3&quot;]</span><br><span class="line">解释：&quot;aa&quot; 被 &quot;a2&quot; 替代。&quot;bb&quot; 被 &quot;b2&quot; 替代。&quot;ccc&quot; 被 &quot;c3&quot; 替代。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：chars = [&quot;a&quot;]</span><br><span class="line">输出：返回 1 ，输入数组的前 1 个字符应该是：[&quot;a&quot;]</span><br><span class="line">解释：唯一的组是“a”，它保持未压缩，因为它是一个字符。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：chars = [&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;]</span><br><span class="line">输出：返回 4 ，输入数组的前 4 个字符应该是：[&quot;a&quot;,&quot;b&quot;,&quot;1&quot;,&quot;2&quot;]。</span><br><span class="line">解释：由于字符 &quot;a&quot; 不重复，所以不会被压缩。&quot;bbbbbbbbbbbb&quot; 被 “b12” 替代。</span><br></pre></td></tr></table></figure><h4 id="快慢指针读写指针">快慢指针（读写指针）</h4><p>写指针在前，写指针要在一个字符出现的最后一个位置处，然后再用一个left记录这个字符开始的位置，这样就能计算字符出现的长度，然后通过辗转相除，取余数转成字符放进去然后反转（因为辗转相除是逆序数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compress</span><span class="params">(<span class="type">char</span>[] chars)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> chars.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> <span class="number">0</span>; read &lt; chars.length; read++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(read == n-<span class="number">1</span> || chars[read] != chars[read + <span class="number">1</span>])&#123;</span><br><span class="line">                chars[write++] = chars[read];</span><br><span class="line">                <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> read - left + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(num &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">numStartIdx</span> <span class="operator">=</span> write;</span><br><span class="line">                    <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        chars[write++] = (<span class="type">char</span>)(num%<span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">                        num /= <span class="number">10</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    reverse(chars, numStartIdx, write - <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                left = read + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> write;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(<span class="type">char</span>[] chars, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[left];</span><br><span class="line">            chars[left] = chars[right];</span><br><span class="line">            chars[right] = temp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三数之和"><a href="https://leetcode.cn/problems/3sum/">15.三数之和</a></h3><p>给你一个整数数组 <code>nums</code> ，判断是否存在三元组<code>[nums[i], nums[j], nums[k]]</code> 满足<code>i != j</code>、<code>i != k</code> 且 <code>j != k</code>，同时还满足 <code>nums[i] + nums[j] + nums[k] == 0</code> 。请</p><p>你返回所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class="line">输出：[[-1,-1,2],[-1,0,1]]</span><br><span class="line">解释：</span><br><span class="line">nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。</span><br><span class="line">nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。</span><br><span class="line">nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。</span><br><span class="line">不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。</span><br><span class="line">注意，输出的顺序和三元组的顺序并不重要。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1]</span><br><span class="line">输出：[]</span><br><span class="line">解释：唯一可能的三元组和不为 0 。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：[[0,0,0]]</span><br><span class="line">解释：唯一可能的三元组和为 0 。</span><br></pre></td></tr></table></figure><h4 id="对向指针-4">对向指针</h4><p>这题注意去重，排序过后，对于相同的相邻元素的处理：直接跳过即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="comment">//剪枝</span></span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//去重</span></span><br><span class="line">            <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i-<span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">                List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span>nums[i] + nums[left] + nums[right];</span><br><span class="line">                <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">                    res.add(Arrays.asList(nums[i], nums[left], nums[right]));</span><br><span class="line">                    <span class="comment">//去重</span></span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) left++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) right--;</span><br><span class="line"></span><br><span class="line">                    left++;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    left++;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    right--;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;双指针解题规律&quot;&gt;双指针解题规律&lt;/h2&gt;
&lt;h3 id=&quot;对向指针&quot;&gt;对向指针&lt;/h3&gt;
&lt;p&gt;对向搜索：可用于解决有序数组找和的区间，大了右指针移动，小了左指针移动。&lt;/p&gt;
&lt;h3 id=&quot;快慢指针&quot;&gt;快慢指针&lt;/h3&gt;
&lt;h2 id=&quot;题目&quot;&gt;题目</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="双指针" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    
  </entry>
  
  <entry>
    <title>2023秋招投递记录</title>
    <link href="https://vlsmhd.github.io/2023/09/01/2023%E7%A7%8B%E6%8B%9B%E6%8A%95%E9%80%92%E8%AE%B0%E5%BD%95/"/>
    <id>https://vlsmhd.github.io/2023/09/01/2023%E7%A7%8B%E6%8B%9B%E6%8A%95%E9%80%92%E8%AE%B0%E5%BD%95/</id>
    <published>2023-09-01T07:53:58.583Z</published>
    <updated>2023-09-12T08:20:19.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="中小厂试炼">中小厂试炼</h1><h2 id="boss投递">boss投递</h2><h3 id="保融科技">保融科技</h3><h3 id="去哪儿网">去哪儿网</h3><p>投递日期9.1</p><p>注意：旧版简历</p><h4 id="测评">9.12测评</h4><h3 id="赛博大象">赛博大象</h3><p>投递日期9.4</p><h3 id="杭州乐刻网络简历挂">杭州乐刻网络（简历挂）</h3><p>投递日期9.4</p><p>简历挂——9.8</p><h3 id="automq">AutoMQ</h3><p>投递日期9.4</p><h4 id="笔试9.4">笔试——9.4</h4><p>https://eztest.org/exam/session/294548/</p><p>一些基础选择题。</p><h4 id="面试资料提交">面试资料提交</h4><p>通过以下代码，在项目工程目录下执行，可以得到本人对项目的提交次数、代码量等等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --author=&quot;mhd&quot; --pretty=tformat: --numstat | awk &#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;;git shortlog --all --numbered --summary --no-merges</span><br></pre></td></tr></table></figure><h3 id="上海嘉银金融科技简历挂">上海嘉银金融科技（简历挂）</h3><p>投递日期9.4</p><p>简历挂——9.5</p><h3 id="创达猎星">创达猎星</h3><p>投递日期9.4</p><h3 id="衡泰技术">衡泰技术</h3><p>投递日期9.6</p><h3 id="九鼎无双">九鼎无双</h3><p>投递日期9.6</p><h3 id="同程数科">同程数科</h3><p>投递日期9.6</p><h3 id="七宝">七宝</h3><p>投递日期9.6</p><h3 id="安徽优质采">安徽优质采</h3><p>投递日期9.6</p><h3 id="科远智慧">科远智慧</h3><p>投递日期9.6</p><h3 id="信也科技">信也科技</h3><p>投递日期9.7</p><h3 id="邦盛科技">邦盛科技</h3><p>投递日期9.7</p><h3 id="同盾科技">同盾科技</h3><p>投递日期9.11</p><p><ahref="https://app.mokahr.com/m/candidate/applications/deliver-query/tongdun">同盾科技- 投递查询 (mokahr.com)</a></p><h3 id="品茗科技">品茗科技</h3><p>投递日期9.11</p><h3 id="信也科技-1">信也科技</h3><p>投递日期9.11</p><h2 id="官网投递">官网投递</h2><h3 id="广联达简历挂">广联达（简历挂）</h3><p>投递日期9.5</p><p>投递地址：<ahref="https://app.mokahr.com/campus-recruitment/glodon/91966?sourceToken=2b78348d1798c5dd95d999db699457d3#/job/2f4c8a53-9061-4aa5-898c-911c6f3a9254/campus_apply/thanks?jobId=2f4c8a53-9061-4aa5-898c-911c6f3a9254&amp;recommendCode=NTAUtTI&amp;codeType=1&amp;applyInfo%5BaimWorkCity%5D=西安市&amp;applyInfo%5BrecommendCode%5D=NTAUtTI&amp;candidateName=孟海东&amp;candidateId=460102903">广联达科技股份有限公司- 校园招聘 (mokahr.com)</a></p><h3 id="得物">得物</h3><p>投递日期9.7</p><p><ahref="https://app.mokahr.com/campus-recruitment/thedu/37483?recommendCode=DSr7mMWw#/job/4f85f728-9ecb-4411-ab30-ed6affff54a7/campus_apply/thanks?jobId=4f85f728-9ecb-4411-ab30-ed6affff54a7&amp;codeType=2&amp;applyInfo%5BaimWorkCity%5D=上海市&amp;applyInfo%5BrecommendCode%5D=DSr7mMWw&amp;candidateName=孟海东&amp;candidateId=461372337">得物App—校园招聘官网(mokahr.com)</a></p><h3 id="section">4399</h3><p>账号：1067853293@qq.com</p><p>密码：LOLVlongshen76</p><p>投递日期9.7</p><p><ahref="https://hr.4399om.com/?r=userCenter/index">个人中心-4399招聘频道(4399om.com)</a></p><h4 id="笔试">9.12笔试</h4><p>地址：<ahref="https://hr.4399om.com/main/?r=CandidateTest/candidateIndex">4399笔试平台(4399om.com)</a></p><p>密码：fKHZ5ItI</p><p><strong>问答题</strong></p><p>在 Centos 7 中，假设你有一个名为 "script.sh"的脚本文件，我们查询到其对应的权限为 -rwxrw-rw-</p><ol type="1"><li><p>这个权限值代表了什么（3分）？</p><p>答：分三组：第一组是文件所有者的权限，可读可写可执行;第二组是所属组权限，可读可写; 第三组是其它外人的权限，可读可写</p></li><li><p>对应的权限码是啥（2分）？</p><p>r(4) w(2) x(1)</p><p>答：766</p></li></ol><p>现在有个简易的电商系统需要增加几个新功能</p><ol type="1"><li><p>给商品支持分类，分类层级至少需要3层（3层分类示例：男装-上衣-短袖），现在请帮忙设计一个分类表来实现，写出对应的建表语句并简述是如何实现多级分类的。（4分）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span> Shops&#123;</span><br><span class="line"></span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line"></span><br><span class="line">    NAME <span class="type">VARCHAR</span>,</span><br><span class="line"></span><br><span class="line">    PARENT_ID <span class="type">INT</span>,</span><br><span class="line"></span><br><span class="line">    LEVEL <span class="type">INT</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">每一行数据包含父节点id和层级属性</span><br></pre></td></tr></table></figure></li><li><p>在商品完成交易后给买卖双方发送短信通知，如果让你设计一个短信发送系统，你会怎么设计？有什么需要注意和拓展的地方？（6分）</p></li></ol><p><strong>算法题</strong></p><ol type="1"><li>4399 出了一款小游戏 《劫富济贫》，游戏中，有多个富商基地，一个侠盗需要夜行从每个富商基地偷到最多的珠宝钻石，并且保证不被安保发现；已知： （1）基地里面的房间是一整排到底的，即仅有一排 n 间房子（2）侠盗已经从 “百晓生” 那里得知了每个房子里面的珠宝数量（3）如果相邻的两间房间同一个晚上被盗窃，侠盗就会被安保发现给定您一个代表每个房屋存放珠宝的非负整数数据，请您编写程序，计算出侠盗一晚能够在不被安保发现的情况下盗取的最大珠宝数量！ 输入示例: 1,2,5,2,1,3,1 输出示例: 9</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxThief</span><span class="params">(<span class="type">int</span>[] nums)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="keyword">if</span>(length &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[length + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= length; i++) &#123;</span><br><span class="line">        dp[i] = Math.max(dp[i-<span class="number">1</span>], nums[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[length];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2" type="1"><li>有n个硬币，每次最多拿走一个或者两个，你有多少种不同的方法拿完全部的硬币？（要求用动态规范解题）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coin</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">method2GetCoins</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[<span class="number">3</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">2</span>] = dp[<span class="number">1</span>] + dp[<span class="number">0</span>];</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">            dp[<span class="number">1</span>] = dp[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            <span class="type">Coin</span> <span class="variable">coin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coin</span>();</span><br><span class="line">            System.out.println(coin.method2GetCoins(n));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3" type="1"><li><p>有一款小游戏，游戏中有N+1座基地——从0到N编号，从左到右排列。每个基地都有不同数量的小兵，编号为i的基地的小兵数量为H(i)个。</p><p>起初，小牙在编号为0的基地处。每一步，它跳到下一个（右边）基地。假设小牙在第k个基地，且它现在的能量值是E,下一步它将跳到第个k+1基地。它将会得到或者失去正比于与H(k+1)与E之差的能量。如果H(k+1) &gt; E 那么小牙就失去 H(k+1) - E 的能量值，否则它将得到 E -H(k+1) 的能量值。</p><p>游戏目标是到达第个N基地，在这个过程中，能量值不能为负数个单位。现在的问题是小牙以多少能量值开始游戏，才可以保证成功完成游戏？</p><p>输入描述： 第一行输入，表示一共有 N 组数据. 第二个是 N个空格分隔的整数，H1, H2, H3, ..., Hn 代表建筑物的高度</p><p>输出描述： 输出一个单独的数表示完成游戏所需的最少单位的初始能量</p><p>输入例子： 5 3 4 3 2 4 输出例子： 4</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="同花顺">同花顺</h3><p>投递时间：9.8</p><p><ahref="http://campus.10jqka.com.cn/userCenter/employRecord">同花顺校园招聘(10jqka.com.cn)</a></p><h4 id="测试">测试</h4><figure><img src="2023秋招投递记录/image-20230908204508384.png"alt="image-20230908204508384" /><figcaption aria-hidden="true">image-20230908204508384</figcaption></figure><h4 id="笔试-1">10.8笔试</h4><h3 id="小红书">小红书</h3><p>投递时间：9.8</p><h3 id="作业帮">作业帮</h3><p>投递时间：9.8</p><p><ahref="https://app.mokahr.com/campus-recruitment/zuoyebang/39595#/candidateHome/applications">作业帮教育科技（北京）有限公司- 校园招聘 (mokahr.com)</a></p><h2 id="牛客投递">牛客投递</h2><h3 id="格灵深瞳">格灵深瞳</h3><p>投递日期9.5</p><h1 id="大厂冲刺">大厂冲刺</h1><figure><img src="2023秋招投递记录/image-20230911134057698.png"alt="image-20230911134057698" /><figcaption aria-hidden="true">image-20230911134057698</figcaption></figure><h2 id="官网投递-1">官网投递</h2><h3 id="新奥集团">新奥集团</h3><p>投递地址：<ahref="https://enn.zhiye.com/form?fromPage=job&amp;jobAdId=bdd992bb-0b63-4745-a65e-8409f385e2de&amp;userId=273749158">新奥集团(zhiye.com)</a></p><p>投递日期9.4</p><h3 id="恒生电子">恒生电子</h3><p>投递地址：<a href="https://campus.hundsun.com/campus/jobs">校园招聘(hundsun.com)</a></p><p>投递日期9.4</p><h3 id="美团">美团</h3><p>投递地址：<ahref="https://zhaopin.meituan.com/web/personalCenter/deliveryRecord?staffSsoId=5817141">个人中心| 美团招聘 (meituan.com)</a></p><p>投递日期9.7</p><h4 id="笔试-2">9.9笔试</h4><p><ahref="https://exam.nowcoder.com/cts/17292034/summary?id=59BBA5D0CE44CD4A5D2B1AAD67C4DCC3">美团2024届秋招第五场笔试【技术】_牛客(nowcoder.com)</a></p><h5 id="修改01串后的最小价值">修改01串后的最小价值</h5><h6 id="思路">思路</h6><p>第一趟遍历先消去能消的，然后剩下的串就是010101这样，然后每个k能减去2。</p><p>边界判断：</p><p>k不能过大，这样rest value-2*K会为负数，同时还要考虑，rest的字符串长度是奇数还是偶数。</p><h6 id="代码">代码</h6><h5 id="加减数组">加减数组</h5><p>前缀和，S数组</p><h5 id="异或和">异或和</h5><h3 id="腾讯">腾讯</h3><p>投递地址：<a href="https://join.qq.com/progress.html">应聘进度 |腾讯校招 (qq.com)</a></p><p>投递日期9.8</p><h4 id="测评-1">测评</h4><p><ahref="https://assessment.tencent.com/assessments?p=SywtybA1VMtMsTU0MDBSyywrAfIKbI2MDNRKkm1DLELNTNISU0zTjMwsjC3MAA">测验任务页_腾讯招聘在线测评(tencent.com)</a></p><h3 id="科大讯飞简历挂">科大讯飞（简历挂）</h3><p>投递日期9.8</p><p><a href="https://campus.iflytek.com/official-pc/delivery">投递记录 -科大讯飞校园招聘 (iflytek.com)</a></p><h3 id="快手">快手</h3><p>投递日期9.8</p><p><a href="https://campus.kuaishou.cn/#/campus/my-apply">快手校招 -快手校招-投递记录 (kuaishou.cn)</a></p><h3 id="京东">京东</h3><p>投递日期9.8</p><p><a href="https://campus.jd.com/#/myDeliver?type=present">京东校招(jd.com)</a></p><h4 id="测评-2">9.9测评</h4><h3 id="虎牙直播">虎牙直播</h3><p>投递日期9.10</p><p><ahref="https://app.mokahr.com/campus_apply/huya/4112#/candidateHome/applications">虎牙直播-校园招聘(mokahr.com)</a></p><h3 id="影石">影石</h3><p>投递日期9.11</p><p><ahref="https://insta360.zhiye.com/campus/jobs">影石创新科技股份有限公司(zhiye.com)</a></p><h3 id="三七互娱">三七互娱</h3><p>投递日期9.11</p><p><ahref="https://app.mokahr.com/campus_apply/37/25238?recommendCode=DSQNKtCs#/candidateHome/applications">三七互娱-校园招聘(mokahr.com)</a></p><h3 id="顺丰">顺丰</h3><p>投递日期9.11</p><p><ahref="https://campus.sf-express.com/m/?channel=29&amp;referCode=4FOLXH#/applyList">投递记录(sf-express.com)</a></p><h4 id="测评-3">9.12测评</h4><h3 id="宇通集团">宇通集团</h3><p>投递日期9.11</p><p><ahref="https://wecruit.hotjob.cn/SU649796b60dcad412ce9c4bbd/pb/account.html#/myDeliver">宇通招聘(hotjob.cn)</a></p><h3 id="滴滴">滴滴</h3><p>投递日期9.11</p><p><ahref="https://campus.didiglobal.com/campus_apply/didiglobal/96064#/candidateHome/applications">滴滴- 校园招聘 (didiglobal.com)</a></p><h2 id="boss投递-1">boss投递</h2><h3 id="高途">高途</h3><p>投递日期9.4</p><h3 id="途虎养车">途虎养车</h3><p>投递日期9.4</p><h4 id="测评-4">测评</h4><p>https://pt.normstar.net/ns-napmtest-web/login/joinlogin/789CCB2BCE2B2E29CD28353237343235B02C4E3635353336340000606F06FD.do</p><h3 id="奇安信">奇安信</h3><p>投递日期9.5</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;中小厂试炼&quot;&gt;中小厂试炼&lt;/h1&gt;
&lt;h2 id=&quot;boss投递&quot;&gt;boss投递&lt;/h2&gt;
&lt;h3 id=&quot;保融科技&quot;&gt;保融科技&lt;/h3&gt;
&lt;h3 id=&quot;去哪儿网&quot;&gt;去哪儿网&lt;/h3&gt;
&lt;p&gt;投递日期9.1&lt;/p&gt;
&lt;p&gt;注意：旧版简历&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="求职" scheme="https://vlsmhd.github.io/categories/%E6%B1%82%E8%81%8C/"/>
    
    
    <category term="求职" scheme="https://vlsmhd.github.io/tags/%E6%B1%82%E8%81%8C/"/>
    
    <category term="2023秋招" scheme="https://vlsmhd.github.io/tags/2023%E7%A7%8B%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode单调栈题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/09/01/leetcode%E5%8D%95%E8%B0%83%E6%A0%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/09/01/leetcode%E5%8D%95%E8%B0%83%E6%A0%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-09-01T07:28:37.928Z</published>
    <updated>2023-09-01T13:08:16.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单调栈">单调栈</h1><p>单调栈中存放的数据应该是有序的，所以单调栈也分为<strong>单调递增栈</strong>和<strong>单调递减栈</strong></p><ul><li>单调递增栈：单调递增栈就是从<strong>栈底到栈顶</strong>数据是从大到小<ul><li>解释：其实就是出栈的顺序单调递增</li><li>操作：如果<strong>栈为空</strong>或<strong>入栈元素值小于栈顶元素值</strong>，则入栈；否则，如果入栈则会破坏栈的单调性，则需要把比入栈元素小的元素全部出栈。</li></ul></li><li>单调递减栈：单调递减栈就是从<strong>栈底到栈顶</strong>数据是从小到大<ul><li>解释：其实就是出栈的顺序单调递减</li><li>操作：如果<strong>栈为空</strong>或<strong>入栈元素值大于栈顶元素值</strong>，则入栈；否则，如果入栈则会破坏栈的单调性，则需要把比入栈元素大的元素全部出栈。</li></ul></li></ul><h2 id="模板">模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处一般需要给数组最后添加结束标志符，具体下面例题会有详细讲解</span></span><br><span class="line"><span class="keyword">for</span> (遍历外来数组)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (栈空 || 栈顶元素大于等于（小于等于）当前比较元素)</span><br><span class="line">&#123;</span><br><span class="line">当前数据入栈;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//核心代码，往往在这边统计单调区间长度</span></span><br><span class="line"><span class="keyword">while</span> (栈不为空 &amp;&amp; 栈顶元素小于（大于）当前元素)</span><br><span class="line">&#123;</span><br><span class="line">栈顶元素出栈;</span><br><span class="line">更新结果;</span><br><span class="line">&#125;</span><br><span class="line">当前数据入栈;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用">应用</h2><p>适合解决一些单调区间的问题。</p><p>比如一段无序数组，从里面找出几个单调区间这样。</p><h1 id="题目">题目</h1><h3 id="每日温度"><ahref="https://leetcode.cn/problems/daily-temperatures/">739.每日温度</a></h3><p>给定一个整数数组 <code>temperatures</code>，表示每天的温度，返回一个数组 <code>answer</code> ，其中<code>answer[i]</code> 是指对于第 <code>i</code>天，下一个更高温度出现在几天后。如果气温在这之后都不会升高，请在该位置用<code>0</code> 来代替。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class="line">输出: [1,1,4,2,1,1,0,0]</span><br></pre></td></tr></table></figure><h4 id="单调递增栈">单调递增栈</h4><p>栈保证：栈底到栈顶的大小顺序是：从大到小。</p><p>这样遇到比栈顶大的元素，循环出栈的时候能通过下标计算结果，因此栈内存结果也是不错的选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> temperatures.length;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//单调栈存下标</span></span><br><span class="line">        <span class="comment">//单调递增栈</span></span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.isEmpty() || temperatures[i] &lt; temperatures[stack.peek()])&#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty() &amp;&amp; temperatures[stack.peek()] &lt; temperatures[i])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> stack.pop();</span><br><span class="line">                    ans[idx] = i - idx;</span><br><span class="line">                &#125;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="股票价格跨度"><ahref="https://leetcode.cn/problems/online-stock-span/">901.股票价格跨度</a></h3><p>设计一个算法收集某些股票的每日报价，并返回该股票当日价格的<strong>跨度</strong> 。</p><p>当日股票价格的 <strong>跨度</strong>被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><ul><li>例如，如果未来 7 天股票的价格是<code>[100,80,60,70,60,75,85]</code>，那么股票跨度将是<code>[1,1,1,2,1,4,6]</code> 。</li></ul><p>实现 <code>StockSpanner</code> 类：</p><ul><li><code>StockSpanner()</code> 初始化类对象。</li><li><code>int next(int price)</code> 给出今天的股价 <code>price</code>，返回该股票当日价格的 <strong>跨度</strong> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">[&quot;StockSpanner&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;, &quot;next&quot;]</span><br><span class="line">[[], [100], [80], [60], [70], [60], [75], [85]]</span><br><span class="line">输出：</span><br><span class="line">[null, 1, 1, 1, 2, 1, 4, 6]</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line">StockSpanner stockSpanner = new StockSpanner();</span><br><span class="line">stockSpanner.next(100); // 返回 1</span><br><span class="line">stockSpanner.next(80);  // 返回 1</span><br><span class="line">stockSpanner.next(60);  // 返回 1</span><br><span class="line">stockSpanner.next(70);  // 返回 2</span><br><span class="line">stockSpanner.next(60);  // 返回 1</span><br><span class="line">stockSpanner.next(75);  // 返回 4 ，因为截至今天的最后 4 个股价 (包括今天的股价 75) 都小于或等于今天的股价。</span><br><span class="line">stockSpanner.next(85);  // 返回 6</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= price &lt;= 105</code></li><li>最多调用 <code>next</code> 方法 <code>104</code> 次</li></ul><h4 id="单调递增栈-1">单调递增栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StockSpanner</span> &#123;</span><br><span class="line">    <span class="comment">//单调递减   栈存下标和值</span></span><br><span class="line">    LinkedList&lt;<span class="type">int</span>[]&gt; stack ;</span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StockSpanner</span><span class="params">()</span> &#123;</span><br><span class="line">        stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//添加哨兵</span></span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;-<span class="number">1</span>, Integer.MAX_VALUE&#125;);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">next</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        idx++;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(stack.peek()[<span class="number">1</span>] &lt;= price)&#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这时候栈首必 &gt; price,直接取下标计算</span></span><br><span class="line">        ans = idx - stack.peek()[<span class="number">0</span>];</span><br><span class="line">        stack.push(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;idx, price&#125;);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单调栈&quot;&gt;单调栈&lt;/h1&gt;
&lt;p&gt;单调栈中存放的数据应该是有序的，所以单调栈也分为&lt;strong&gt;单调递增栈&lt;/strong&gt;和&lt;strong&gt;单调递减栈&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单调递增栈：单调递增栈就是从&lt;strong&gt;栈底到栈顶&lt;/</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="单调栈" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode区间集合题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/31/leetcode%E5%8C%BA%E9%97%B4%E9%9B%86%E5%90%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/31/leetcode%E5%8C%BA%E9%97%B4%E9%9B%86%E5%90%88%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-31T08:12:39.540Z</published>
    <updated>2023-09-12T00:56:47.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题思路">解题思路</h1><p>一般是找不相交的集合，得出答案。基本上都是配合贪心。</p><h3 id="无重叠区间"><ahref="https://leetcode.cn/problems/non-overlapping-intervals/">435.无重叠区间</a></h3><p>给定一个区间的集合 <code>intervals</code> ，其中<code>intervals[i] = [starti, endi]</code> 。返回<em>需要移除区间的最小数量，使剩余区间互不重叠</em> 。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [[1,2],[2,3],[3,4],[1,3]]</span><br><span class="line">输出: 1</span><br><span class="line">解释: 移除 [1,3] 后，剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: intervals = [ [1,2], [1,2], [1,2] ]</span><br><span class="line">输出: 2</span><br><span class="line">解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</span><br></pre></td></tr></table></figure><h4 id="排序贪心">排序+贪心</h4><p>不能一口吃成胖子，说的就是这题，我们一开始找一个右边界很小的区间开始，为什么这样干，因为这样干就能保证要移除的区间最少。为什么？</p><p>因为一开始的区间范围很小，然后接下来走贪心思路，右区间慢慢扩大。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//选取初始区间</span></span><br><span class="line">        Arrays.sort(intervals, (a,b) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span>[] interval = intervals[i];</span><br><span class="line">            <span class="keyword">if</span>(!(interval[<span class="number">1</span>] &lt;= left || interval[<span class="number">0</span>] &gt;= right) )&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left = Math.min(interval[<span class="number">0</span>], left);</span><br><span class="line">                right = Math.max(interval[<span class="number">1</span>], right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用最少数量的箭引爆气球"><ahref="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">452.用最少数量的箭引爆气球</a></h3><p>有一些球形气球贴在一堵用 XY平面表示的墙面上。墙面上的气球记录在整数数组 <code>points</code>，其中<code>points[i] = [xstart, xend]</code> 表示水平直径在<code>xstart</code> 和 <code>xend</code>之间的气球。你不知道气球的确切 y坐标。</p><p>一支弓箭可以沿着 x 轴从不同点 <strong>完全垂直</strong>地射出。在坐标 <code>x</code>处射出一支箭，若有一个气球的直径的开始和结束坐标为<code>x``start</code>，<code>x``end</code>， 且满足<code>xstart ≤ x ≤ x``end</code>，则该气球会被 <strong>引爆</strong>。可以射出的弓箭的数量 <strong>没有限制</strong> 。弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 <code>points</code> ，<em>返回引爆所有气球所必须射出的<strong>最小</strong> 弓箭数</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：points = [[10,16],[2,8],[1,6],[7,12]]</span><br><span class="line">输出：2</span><br><span class="line">解释：气球可以用2支箭来爆破:</span><br><span class="line">-在x = 6处射出箭，击破气球[2,8]和[1,6]。</span><br><span class="line">-在x = 11处发射箭，击破气球[10,16]和[7,12]。</span><br></pre></td></tr></table></figure><p>​ <strong>提示:</strong></p><ul><li><code>1 &lt;= points.length &lt;= 105</code></li><li><code>points[i].length == 2</code></li><li><code>-2^31 &lt;= xstart &lt; xend &lt;= 2^31 - 1</code></li></ul><h4 id="排序贪心-1">排序+贪心</h4><p>像上一题一样，先选个区间作为第一个区间，这题类似，先射一箭，保证这一箭射到最多的气球，然后再慢慢加。这就是贪心的思路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//选取初始区间</span></span><br><span class="line">        Arrays.sort(points, (p1, p2) -&gt; p1[<span class="number">1</span>] &lt; p2[<span class="number">1</span>] ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//射的第一箭</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> points[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//排序后，后面的每个区间的左坐标 </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] point : points)&#123;</span><br><span class="line">            <span class="keyword">if</span>(point[<span class="number">0</span>] &gt; right)&#123;</span><br><span class="line">                right = point[<span class="number">1</span>];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解题思路&quot;&gt;解题思路&lt;/h1&gt;
&lt;p&gt;一般是找不相交的集合，得出答案。基本上都是配合贪心。&lt;/p&gt;
&lt;h3 id=&quot;无重叠区间&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/problems/non-overlapping-intervals/</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="区间集合" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%8C%BA%E9%97%B4%E9%9B%86%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode前缀树题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/29/leetcode%E5%89%8D%E7%BC%80%E6%A0%91%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/29/leetcode%E5%89%8D%E7%BC%80%E6%A0%91%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-29T05:48:14.839Z</published>
    <updated>2023-08-31T13:22:54.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现-trie-前缀树"><ahref="https://leetcode.cn/problems/implement-trie-prefix-tree/">208.实现 Trie (前缀树)</a></h3><p><strong><ahref="https://baike.baidu.com/item/字典树/9825209?fr=aladdin">Trie</a></strong>（发音类似"try"）或者说 <strong>前缀树</strong>是一种树形数据结构，用于高效地存储和检索字符串数据集中的键。这一数据结构有相当多的应用情景，例如自动补完和拼写检查。</p><p>请你实现 Trie 类：</p><ul><li><code>Trie()</code> 初始化前缀树对象。</li><li><code>void insert(String word)</code> 向前缀树中插入字符串<code>word</code> 。</li><li><code>boolean search(String word)</code> 如果字符串<code>word</code> 在前缀树中，返回<code>true</code>（即，在检索之前已经插入）；否则，返回<code>false</code> 。</li><li><code>boolean startsWith(String prefix)</code>如果之前已经插入的字符串 <code>word</code> 的前缀之一为<code>prefix</code> ，返回 <code>true</code> ；否则，返回<code>false</code> 。</li></ul><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line">[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]</span><br><span class="line">[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]</span><br><span class="line">输出</span><br><span class="line">[null, null, true, false, true, null, true]</span><br><span class="line"></span><br><span class="line">解释</span><br><span class="line">Trie trie = new Trie();</span><br><span class="line">trie.insert(&quot;apple&quot;);</span><br><span class="line">trie.search(&quot;apple&quot;);   // 返回 True</span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 False</span><br><span class="line">trie.startsWith(&quot;app&quot;); // 返回 True</span><br><span class="line">trie.insert(&quot;app&quot;);</span><br><span class="line">trie.search(&quot;app&quot;);     // 返回 True</span><br></pre></td></tr></table></figure><h4 id="n叉树">n叉树</h4><p>本题只涉及26个字母，所以我们的字典树（前缀树），只搞长度26即可。</p><p>有点类似DFA的思路，每个字符算一个状态，然后后面有26钟状态可选。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Trie</span> &#123;</span><br><span class="line"></span><br><span class="line">    Trie[] children;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> isEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Trie</span><span class="params">()</span> &#123;</span><br><span class="line">        isEnd = <span class="literal">false</span>;</span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Trie</span>[<span class="number">26</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length();</span><br><span class="line"></span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">//下面这个错误：child是引用的引用，不能代替数组内部的引用</span></span><br><span class="line">            <span class="comment">// Trie child = cur.children[word.charAt(i) - &#x27;a&#x27;];</span></span><br><span class="line">            <span class="keyword">if</span>(cur.children[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                cur.children[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">Trie</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[word.charAt(i) - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cur.isEnd = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">search</span><span class="params">(String word)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> word.length();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!cur.isEnd)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">startsWith</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prefix.length();</span><br><span class="line">        <span class="type">Trie</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(cur == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> prefix.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="搜索推荐系统"><ahref="https://leetcode.cn/problems/search-suggestions-system/">1268.搜索推荐系统</a></h3><p>给你一个产品数组 <code>products</code> 和一个字符串<code>searchWord</code> ，<code>products</code>数组中每个产品都是一个字符串。</p><p>请你设计一个推荐系统，在依次输入单词 <code>searchWord</code>的每一个字母后，推荐 <code>products</code> 数组中前缀与<code>searchWord</code>相同的最多三个产品。如果前缀相同的可推荐产品超过三个，请按字典序返回最小的三个。</p><p>请你以二维列表的形式，返回在输入 <code>searchWord</code>每个字母后相应的推荐产品的列表。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：products = [&quot;mobile&quot;,&quot;mouse&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mousepad&quot;], searchWord = &quot;mouse&quot;</span><br><span class="line">输出：[</span><br><span class="line">[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">[&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;],</span><br><span class="line">[&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">]</span><br><span class="line">解释：按字典序排序后的产品列表是 [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;,&quot;mouse&quot;,&quot;mousepad&quot;]</span><br><span class="line">输入 m 和 mo，由于所有产品的前缀都相同，所以系统返回字典序最小的三个产品 [&quot;mobile&quot;,&quot;moneypot&quot;,&quot;monitor&quot;]</span><br><span class="line">输入 mou， mous 和 mouse 后系统都返回 [&quot;mouse&quot;,&quot;mousepad&quot;]</span><br></pre></td></tr></table></figure><h4 id="字典树排序">字典树+排序</h4><p>排序是因为需要取字典序最小的前三条，可以事先对products数组进行排序，这样添加到字典树之后，也是有序的。</p><p>本题只需字典树，不需要借助前缀树的isEnd字段了，没啥用。</p><p>但是每个字典树需要维护一个集合，这个集合存的元素都是包含当前前缀的产品集合。方便取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TrieNode</span> <span class="variable">root</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">suggestedProducts</span><span class="params">(String[] products, String searchWord)</span> &#123;</span><br><span class="line">        Arrays.sort(products);</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; ans = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String s : products) insert(s);</span><br><span class="line">        <span class="comment">//初始化结果集</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; searchWord.length(); i++)&#123;</span><br><span class="line">            ans.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        search(searchWord, ans);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c - <span class="string">&#x27;a&#x27;</span>] == <span class="literal">null</span>)&#123;</span><br><span class="line">                cur.children[c - <span class="string">&#x27;a&#x27;</span>] = <span class="keyword">new</span> <span class="title class_">TrieNode</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.children[c - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            cur.list.add(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">search</span><span class="params">(String word, List&lt;List&lt;String&gt;&gt; ans)</span>&#123;</span><br><span class="line">        <span class="type">TrieNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> word.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(cur.children[c-<span class="string">&#x27;a&#x27;</span>]==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">            cur = cur.children[c-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">            <span class="comment">//把ans填充</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; Math.min(<span class="number">3</span>, cur.list.size()); j++)&#123;</span><br><span class="line">                ans.get(i).add(cur.list.get(j));</span><br><span class="line">            &#125;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//字典树结点</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">TrieNode</span> &#123;</span><br><span class="line">        TrieNode[] children;</span><br><span class="line">        List&lt;String&gt; list;</span><br><span class="line"></span><br><span class="line">        TrieNode()&#123;</span><br><span class="line">            children = <span class="keyword">new</span> <span class="title class_">TrieNode</span>[<span class="number">26</span>];</span><br><span class="line">            list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实现-trie-前缀树&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/problems/implement-trie-prefix-tree/&quot;&gt;208.
实现 Trie (前缀树)&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;a
href=&quot;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="前缀树" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%89%8D%E7%BC%80%E6%A0%91/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode位运算题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/28/leetcode%E4%BD%8D%E8%BF%90%E7%AE%97%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/28/leetcode%E4%BD%8D%E8%BF%90%E7%AE%97%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-28T02:23:24.268Z</published>
    <updated>2023-08-28T03:22:43.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位运算知识">位运算知识</h1><p>位运算的知识：</p><p>对于十进制整数 x，我们可以用 <code>x &amp; 1</code> 得到 x的二进制表示的最低位，它等价于 x % 2：</p><ul><li><p>例如当 x = 3 时，x 的二进制表示为 11，x &amp; 1 的值为1；</p></li><li><p>例如当 x = 6 时，x 的二进制表示为 110，x &amp; 1 的值为0。</p></li></ul><p>对于十进制整数 x，我们可以用 <code>x &amp; (1 &lt;&lt; k)</code>来判断 x 二进制表示的第 k 位（最低位为第 0 位）是否为1。如果该表达式的值大于零，那么第 k 位为 1：</p><ul><li><p>例如当 x = 3 时，x 的二进制表示为 11，x &amp; (1 &lt;&lt; 1) = 11&amp; 10 = 10 &gt; 0，说明第 1 位为 1；</p></li><li><p>例如当 x = 5 时，x 的二进制表示为 101，x &amp; (1 &lt;&lt; 1) =101 &amp; 10 = 0，说明第 1 位不为 1。</p></li></ul><p>对于十进制整数 x，我们可以用 <code>(x &gt;&gt; k) &amp; 1</code> 得到x 二进制表示的第 k 位（最低位为第 0 位）。如果 x 二进制表示的位数小于k，那么该表达式的值为零：</p><ul><li><p>例如当 x = 3 时，x 的二进制表示为 11，(x &gt;&gt; 1) &amp; 1 = 1&amp; 1 = 1，说明第 1 位为 1；</p></li><li><p>例如当 x = 5 时，x 的二进制表示为 101，(x &gt;&gt; 1) &amp; 1 =10 &amp; 1 = 0，说明第 1 位为 0。</p></li><li><p>例如当 x = 6 时，x 的二进制表示为 110，(x &gt;&gt; 3) &amp; 1 = 0&amp; 1 = 0，说明第 3 位为 0。</p></li></ul><h3 id="比特位计数"><ahref="https://leetcode.cn/problems/counting-bits/">338.比特位计数</a></h3><p>给你一个整数 <code>n</code> ，对于 <code>0 &lt;= i &lt;= n</code>中的每个 <code>i</code> ，计算其二进制表示中 <strong><code>1</code>的个数</strong> ，返回一个长度为 <code>n + 1</code> 的数组<code>ans</code> 作为答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：[0,1,1]</span><br><span class="line">解释：</span><br><span class="line">0 --&gt; 0</span><br><span class="line">1 --&gt; 1</span><br><span class="line">2 --&gt; 10</span><br></pre></td></tr></table></figure><h4 id="简单循环与运算">简单循环与运算</h4><p>传统的处理数的方式：拿当前的数和1进行&amp;判断最后一位是不是1，然后二进制右移一下，判断下一位...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] countBits(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span>(cur &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((cur &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">                    ans[i]++;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">                cur &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="性能">性能</h5><figure><imgsrc="C:\Users\LEGION\AppData\Roaming\Typora\typora-user-images\image-20230828100829993.png"alt="image-20230828100829993" /><figcaption aria-hidden="true">image-20230828100829993</figcaption></figure><h4 id="section"></h4><h3 id="只出现一次的数字"><ahref="https://leetcode.cn/problems/single-number/">136.只出现一次的数字</a></h3><p>给你一个 <strong>非空</strong> 整数数组 <code>nums</code>，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p><p>你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。</p><p><strong>示例 1 ：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2,2,1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h4 id="异或判重">异或判重</h4><p>异或运算：相同为0，不同为1。</p><p>假如两个数^后的结果为0，说明这两个数完全一样，利用这个性质，把数组中全部的元素异或一遍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">singleNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            ans ^= nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="或运算的最小翻转次数"><ahref="https://leetcode.cn/problems/minimum-flips-to-make-a-or-b-equal-to-c/">1318.或运算的最小翻转次数</a></h3><p>给你三个正整数 <code>a</code>、<code>b</code> 和 <code>c</code>。</p><p>你可以对 <code>a</code> 和 <code>b</code>的二进制表示进行位翻转操作，返回能够使按位或运算 <code>a</code> OR<code>b</code> == <code>c</code> 成立的最小翻转次数。</p><p>「位翻转操作」是指将一个数的二进制表示任何单个位上的 1 变成 0 或者 0变成 1 。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode位运算题目专项训练/sample_3_1676.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 2, b = 6, c = 5</span><br><span class="line">输出：3</span><br><span class="line">解释：翻转后 a = 1 , b = 4 , c = 5 使得 a OR b == c</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= a &lt;= 10^9</code></li><li><code>1 &lt;= b &lt;= 10^9</code></li><li><code>1 &lt;= c &lt;= 10^9</code></li></ul><h4 id="枚举位运算">枚举+位运算</h4><p>因为a、b、c的位数最多是30位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minFlips</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> &#123; </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">31</span>; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit_a</span> <span class="operator">=</span> (a &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit_b</span> <span class="operator">=</span> (b &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">bit_c</span> <span class="operator">=</span> (c &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bit_c == <span class="number">0</span>)&#123;</span><br><span class="line">                res += bit_a + bit_b;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//c的某一位是1，要求a或b至少有一位是1</span></span><br><span class="line">                res += (bit_a + bit_b == <span class="number">0</span>? <span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位运算知识&quot;&gt;位运算知识&lt;/h1&gt;
&lt;p&gt;位运算的知识：&lt;/p&gt;
&lt;p&gt;对于十进制整数 x，我们可以用 &lt;code&gt;x &amp;amp; 1&lt;/code&gt; 得到 x
的二进制表示的最低位，它等价于 x % 2：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;例如当 x = </summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="位运算" scheme="https://vlsmhd.github.io/categories/leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode二分查找题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/24/leetcode%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/24/leetcode%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-24T01:28:40.154Z</published>
    <updated>2023-08-25T05:59:47.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解题思路">解题思路</h1><ol type="1"><li>二分的题就是利用二分的特性，找到一个<strong>关键点</strong>，由这个关键点计算出答案。</li><li>二分必须在有序的条件基础上查找，所以我们需要分析有效条件，找到一个有序的区域供我们查找。</li></ol><h3 id="猜数字大小"><ahref="https://leetcode.cn/problems/guess-number-higher-or-lower/">374.猜数字大小</a></h3><p>猜数字游戏的规则如下：</p><ul><li>每轮游戏，我都会从 <strong>1</strong> 到 <strong><em>n</em></strong>随机选择一个数字。 请你猜选出的是哪个数字。</li><li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li></ul><p>你可以通过调用一个预先定义好的接口 <code>int guess(int num)</code>来获取猜测结果，返回值一共有 3种可能的情况（<code>-1</code>，<code>1</code> 或 <code>0</code>）：</p><ul><li>-1：我选出的数字比你猜的数字小 <code>pick &lt; num</code></li><li>1：我选出的数字比你猜的数字大 <code>pick &gt; num</code></li><li>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！<code>pick == num</code></li></ul><p>返回我选出的数字。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 10, pick = 6</span><br><span class="line">输出：6</span><br></pre></td></tr></table></figure><h4 id="平衡版二分">平衡版二分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> <span class="keyword">extends</span> <span class="title class_">GuessGame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">guessNumber</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//数字不重复，先不考虑优化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> n;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left)&gt;&gt;<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">if</span>(guess(mid) &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">                right = mid;<span class="comment">//答案在[left,mid]</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//平衡版本</span></span><br><span class="line">                left = mid + <span class="number">1</span>;<span class="comment">//答案在[mid + 1, right]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="咒语和药水的成功对数"><ahref="https://leetcode.cn/problems/successful-pairs-of-spells-and-potions/">2300.咒语和药水的成功对数</a></h3><p>给你两个正整数数组 <code>spells</code> 和 <code>potions</code>，长度分别为 <code>n</code> 和 <code>m</code> ，其中<code>spells[i]</code> 表示第 <code>i</code>个咒语的能量强度，<code>potions[j]</code> 表示第 <code>j</code>瓶药水的能量强度。</p><p>同时给你一个整数 <code>success</code> 。一个咒语和药水的能量强度<strong>相乘</strong> 如果 <strong>大于等于</strong><code>success</code> ，那么它们视为一对 <strong>成功</strong>的组合。</p><p>请你返回一个长度为 <code>n</code> 的整数数组 <code>pairs</code>，其中<code>pairs[i]</code> 是能跟第 <code>i</code> 个咒语成功组合的<strong>药水</strong> 数目。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：spells = [5,1,3], potions = [1,2,3,4,5], success = 7</span><br><span class="line">输出：[4,0,3]</span><br><span class="line">解释：</span><br><span class="line">- 第 0 个咒语：5 * [1,2,3,4,5] = [5,10,15,20,25] 。总共 4 个成功组合。</span><br><span class="line">- 第 1 个咒语：1 * [1,2,3,4,5] = [1,2,3,4,5] 。总共 0 个成功组合。</span><br><span class="line">- 第 2 个咒语：3 * [1,2,3,4,5] = [3,6,9,12,15] 。总共 3 个成功组合。</span><br><span class="line">所以返回 [4,0,3] 。</span><br></pre></td></tr></table></figure><h4 id="平衡二分">平衡二分</h4><p>本题目的就是找到比success大的数<code>potions[mid] * spells[i]</code>中最小的那个数的下标，然后拿数组长度一减就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] successfulPairs(<span class="type">int</span>[] spells, <span class="type">int</span>[] potions, <span class="type">long</span> success) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> spells.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> potions.length;</span><br><span class="line">        <span class="type">int</span>[] pairs = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        Arrays.sort(potions);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//rightmost版本</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> m - <span class="number">1</span>;<span class="comment">//[left, right]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//拿success当目标</span></span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + ((right - left) &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span>(success &lt;= (<span class="type">long</span>)potions[mid] * spells[i] )&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pairs[i] = m - left;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pairs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="寻找峰值"><ahref="https://leetcode.cn/problems/find-peak-element/">162.寻找峰值</a></h3><p>峰值元素是指其值严格大于左右相邻值的元素。</p><p>给你一个整数数组<code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回<strong>任何一个峰值</strong> 所在位置即可。</p><p>你可以假设 <code>nums[-1] = nums[n] = -∞</code> 。</p><p>你必须实现时间复杂度为 <code>O(log n)</code> 的算法来解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1]</span><br><span class="line">输出：2</span><br><span class="line">解释：3 是峰值元素，你的函数应该返回其索引 2。</span><br></pre></td></tr></table></figure><h4 id="二分">二分</h4><p>根据峰值的特点，峰值左边的元素大于左右两侧的元素，我们每次找到mid就和mid+1处的高度相比，如果小，那说明mid+1有可能是峰值，left要更新到mid+1位置处去，如果比mid+1大，说明当前的mid可能是峰值（当然也可能在左边），right往左边来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findPeakElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(mid + <span class="number">1</span> &lt;= right &amp;&amp; nums[mid] &lt; nums[mid + <span class="number">1</span>])&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="爱吃香蕉的珂珂"><ahref="https://leetcode.cn/problems/koko-eating-bananas/">875.爱吃香蕉的珂珂</a></h3><p>珂珂喜欢吃香蕉。这里有 <code>n</code> 堆香蕉，第 <code>i</code>堆中有 <code>piles[i]</code> 根香蕉。警卫已经离开了，将在 <code>h</code>小时后回来。</p><p>珂珂可以决定她吃香蕉的速度 <code>k</code>（单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 <code>k</code>根。如果这堆香蕉少于 <code>k</code>根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。</p><p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p><p>返回她可以在 <code>h</code> 小时内吃掉所有香蕉的最小速度<code>k</code>（<code>k</code> 为整数）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：piles = [3,6,7,11], h = 8</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><h4 id="二分-1">二分</h4><p>这里我们二分查找piles是没有任何意义的，我们本题的目标是k，k所在的区域为<code>[1, Max(piles)]</code>，很明显是一个递增序列, 因此我们把目光转移到k上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minEatingSpeed</span><span class="params">(<span class="type">int</span>[] piles, <span class="type">int</span> h)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//二分找k</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; piles.length; i++)&#123;</span><br><span class="line">            max = Math.max(max, piles[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> max;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//每一轮计算k = mid的时候吃完香蕉需要的时间</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; piles.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(piles[i] &lt;= mid)&#123;</span><br><span class="line">                    hour ++;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    hour += piles[i]/mid + ((piles[i] % mid) &gt; <span class="number">0</span> ? <span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果超时，k不够</span></span><br><span class="line">            <span class="keyword">if</span>(hour &gt; h)&#123;</span><br><span class="line">                left = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//如果满足，尽可能往左找</span></span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解题思路&quot;&gt;解题思路&lt;/h1&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;二分的题就是利用二分的特性，找到一个&lt;strong&gt;关键点&lt;/strong&gt;，由这个关键点计算出答案。&lt;/li&gt;
&lt;li&gt;二分必须在有序的条件基础上查找，所以我们需要分析有效条件，找到一个有</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="二分查找" scheme="https://vlsmhd.github.io/categories/leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode前缀和题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/23/leetcode%E5%89%8D%E7%BC%80%E5%92%8C%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/23/leetcode%E5%89%8D%E7%BC%80%E5%92%8C%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-23T02:00:59.732Z</published>
    <updated>2023-08-24T01:33:44.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前缀和算法">前缀和算法</h1><h2 id="前缀和一维">前缀和（一维）：</h2><p>对于一个给定的数列 A ，它的前缀和数列 S 中 S[i] 表示从第 1 个元素到第i 个元素的总和。用公式表示为：<span class="math inline">\(S[i] =\displaystyle \sum^i_{j=1}A[j]\)</span></p><p><strong>计算方法：</strong>通过递推的方式。</p><p><span class="math inline">\(S[i] = S[i-1] + A[i]\)</span></p><p>S[i-1]表示前i-1个元素之和。</p><p><strong>应用：</strong></p><p>计算任意区间和：</p><blockquote><p><strong>假设</strong>：有 m 个查询，每个查询给出index： l,r。<strong>需求</strong>：计算从数组（数组长度假设为 n ）第 l 个元素到第 r个元素的和。</p></blockquote><p>前缀和计算区间：<span class="math inline">\([l,r]区间总和为：S[r] -S[l-1]\)</span></p><h1 id="题目">题目</h1><h3 id="找到最高海拔"><ahref="https://leetcode.cn/problems/find-the-highest-altitude/">1732.找到最高海拔</a></h3><p>有一个自行车手打算进行一场公路骑行，这条路线总共由 <code>n + 1</code>个不同海拔的点组成。自行车手从海拔为 <code>0</code> 的点 <code>0</code>开始骑行。</p><p>给你一个长度为 <code>n</code> 的整数数组 <code>gain</code> ，其中<code>gain[i]</code> 是点 <code>i</code> 和点 <code>i + 1</code> 的<strong>净海拔高度差</strong>（<code>0 &lt;= i &lt; n</code>）。请你返回<strong>最高点的海拔</strong> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：gain = [-5,1,5,0,-7]</span><br><span class="line">输出：1</span><br><span class="line">解释：海拔高度依次为 [0,-5,-4,1,1,-6] 。最高海拔为 1 。</span><br></pre></td></tr></table></figure><h4 id="简单一维前缀和">简单一维前缀和</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestAltitude</span><span class="params">(<span class="type">int</span>[] gain)</span> &#123;</span><br><span class="line">        <span class="comment">//h[i+1] - h[i] = gain[i];</span></span><br><span class="line">        <span class="comment">//h[0] = 0</span></span><br><span class="line">        <span class="comment">//h[1] = h[0] + gain[0]</span></span><br><span class="line">        <span class="comment">//h[2] = h[1] + gain[1] = 0 + gain[0] + gain[1]</span></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//也就是说：gain的前n项和，就是第n个点的高度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gain.length; i++)&#123;</span><br><span class="line">            sum += gain[i];</span><br><span class="line">            res = Math.max(sum, res);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="性能">性能</h5><figure><img src="leetcode前缀和题目专项训练/image-20230823103444849.png"alt="image-20230823103444849" /><figcaption aria-hidden="true">image-20230823103444849</figcaption></figure><h3 id="寻找数组的中心下标"><ahref="https://leetcode.cn/problems/find-pivot-index/">724.寻找数组的中心下标</a></h3><p>给你一个整数数组 <code>nums</code> ，请计算数组的<strong>中心下标</strong> 。</p><p>数组 <strong>中心下标</strong>是数组的一个下标，其左侧所有元素相加的和等于右侧所有元素相加的和。</p><p>如果中心下标位于数组最左端，那么左侧数之和视为 <code>0</code>，因为在下标的左侧不存在元素。这一点对于中心下标位于数组最右端同样适用。</p><p>如果数组有多个中心下标，应该返回 <strong>最靠近左边</strong>的那一个。如果数组不存在中心下标，返回 <code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1, 7, 3, 6, 5, 6]</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">中心下标是 3 。</span><br><span class="line">左侧数之和 sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 ，</span><br><span class="line">右侧数之和 sum = nums[4] + nums[5] = 5 + 6 = 11 ，二者相等。</span><br></pre></td></tr></table></figure><h4 id="一维前缀和">一维前缀和</h4><p>先通过nums数组，计算出前缀和数组。</p><p>这里前缀和数组预留一个s[0]代表左边界左边的元素和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pivotIndex</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span>[] s = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        s[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">            s[i+<span class="number">1</span>] = sum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == s[n]-s[i+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前缀和算法&quot;&gt;前缀和算法&lt;/h1&gt;
&lt;h2 id=&quot;前缀和一维&quot;&gt;前缀和（一维）：&lt;/h2&gt;
&lt;p&gt;对于一个给定的数列 A ，它的前缀和数列 S 中 S[i] 表示从第 1 个元素到第
i 个元素的总和。用公式表示为：&lt;span class=&quot;math in</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="前缀和" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode滑动窗口题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/20/leetcode%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/20/leetcode%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-20T05:10:30.242Z</published>
    <updated>2023-09-09T06:39:36.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滑动窗口算法">滑动窗口算法</h2><p>基本概念：</p><p>滑动窗口基于双指针的思想，两个指针指向的元素区间，构成一个窗口。</p><p>种类：</p><ul><li>固定大小，如本题</li><li>可变大小</li></ul><p>应用：</p><p>解题是什么时候会用到滑动窗口？</p><ol type="1"><li>一般数据结构是数组字符串这样的。</li><li>求取某个<strong>子串</strong>或者<strong>子序列最长最短</strong>等最值问题或者求某个目标值时</li><li>该问题本身可以暴力求解</li></ol><p>移动规律：</p><ol type="1"><li>初始化：left和right都指向0位置，区间为[0,0)左闭右开。</li><li>遍历：<ol type="1"><li>右指针开始动，循环遍历整个数组，跳出循环的条件是right指针超过数组长度。</li><li>根据实际情况，看左指针是否需要移动，缩小窗口。</li><li>循环执行第2步</li></ol></li></ol><p>模板伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Get nums|string s</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(right &lt; nums.length)&#123;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> nums[right]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//更新数据</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span>(left need move)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> nums[left];</span><br><span class="line">        <span class="comment">//缩小窗口</span></span><br><span class="line">        left++;</span><br><span class="line">        <span class="comment">//更新数据</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增大窗口</span></span><br><span class="line">right++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="leetcode题目">leetcode题目</h2><h3 id="子数组最大平均数-i"><ahref="https://leetcode.cn/problems/maximum-average-subarray-i/">643.子数组最大平均数 I</a></h3><p>给你一个由 <code>n</code> 个元素组成的整数数组 <code>nums</code>和一个整数 <code>k</code> 。</p><p>请你找出平均数最大且 <strong>长度为 <code>k</code></strong>的连续子数组，并输出该最大平均数。</p><p>任何误差小于 <code>10-5</code> 的答案都将被视为正确答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,12,-5,-6,50,3], k = 4</span><br><span class="line">输出：12.75</span><br><span class="line">解释：最大平均数 (12-5-6+50)/4 = 51/4 = 12.75</span><br></pre></td></tr></table></figure><h4 id="滑动窗口超时版本">滑动窗口超时版本</h4><p>这个写法突出不了滑动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        <span class="type">double</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + k &lt;= n; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + k  -<span class="number">1</span>; j &gt;= i &amp;&amp; j &lt; n; j--)&#123;</span><br><span class="line">                sum += nums[j];</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(<span class="number">1.0</span> * sum / k, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优化版本">优化版本</h4><p>就是滑动的时候，滑动一个添加末尾删除头部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMaxAverage</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span>  <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        System.out.println(n);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">ans</span> <span class="operator">=</span> sum;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + k &lt; n; i++)&#123;</span><br><span class="line">            sum -= nums[i];</span><br><span class="line">            sum += nums[i + k]; </span><br><span class="line">            ans = Math.max(sum, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans * <span class="number">1.0</span> / k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定长子串中元音的最大数目"><ahref="https://leetcode.cn/problems/maximum-number-of-vowels-in-a-substring-of-given-length/">1456.定长子串中元音的最大数目</a></h3><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p><p>请返回字符串 <code>s</code> 中长度为 <code>k</code>的单个子字符串中可能包含的最大元音字母数。</p><p>英文中的 <strong>元音字母</strong> 为（<code>a</code>,<code>e</code>, <code>i</code>, <code>o</code>, <code>u</code>）。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abciiidef&quot;, k = 3</span><br><span class="line">输出：3</span><br><span class="line">解释：子字符串 &quot;iii&quot; 包含 3 个元音字母。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;aeiou&quot;, k = 2</span><br><span class="line">输出：2</span><br><span class="line">解释：任意长度为 2 的子字符串都包含 2 个元音字母。</span><br></pre></td></tr></table></figure><h4 id="哈希set滑动窗口">哈希set+滑动窗口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        HashSet&lt;Character&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        set.add(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">        set.add(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">        set.add(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">        set.add(<span class="string">&#x27;u&#x27;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化窗口</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(s.charAt(i)))&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + k &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(s.charAt(i)))&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(s.charAt(i+k)))&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="条件语句滑动窗口">条件语句+滑动窗口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxVowels</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">// HashSet&lt;Character&gt; set = new HashSet&lt;&gt;();</span></span><br><span class="line">        <span class="comment">// set.add(&#x27;a&#x27;);</span></span><br><span class="line">        <span class="comment">// set.add(&#x27;e&#x27;);</span></span><br><span class="line">        <span class="comment">// set.add(&#x27;i&#x27;);</span></span><br><span class="line">        <span class="comment">// set.add(&#x27;o&#x27;);</span></span><br><span class="line">        <span class="comment">// set.add(&#x27;u&#x27;);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//初始化窗口</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVowel(s.charAt(i)))&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> count;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i + k &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isVowel(s.charAt(i)))&#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(isVowel(s.charAt(i+k)))&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ch == <span class="string">&#x27;a&#x27;</span> || ch == <span class="string">&#x27;e&#x27;</span> || ch == <span class="string">&#x27;i&#x27;</span> || ch == <span class="string">&#x27;o&#x27;</span> || ch == <span class="string">&#x27;u&#x27;</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>相比set，速度快了将近一倍。</li></ul><h3 id="最大连续1的个数-iii"><ahref="https://leetcode.cn/problems/max-consecutive-ones-iii/">1004.最大连续1的个数 III</a></h3><p><a id="1004"></a></p><p>给定一个二进制数组 <code>nums</code> 和一个整数<code>k</code>，如果可以翻转最多 <code>k</code> 个 <code>0</code>，则返回 <em>数组中连续 <code>1</code> 的最大个数</em> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,1,0,0,0,1,1,1,1,0], K = 2</span><br><span class="line">输出：6</span><br><span class="line">解释：[1,1,1,0,0,1,1,1,1,1,1]</span><br><span class="line">粗体数字从 0 翻转到 1，最长的子数组长度为 6。</span><br></pre></td></tr></table></figure><h4 id="滑动窗口脑筋急转弯">滑动窗口+脑筋急转弯</h4><p>我们统计0的个数，如果0的个数超过了k，就说明连续1已经中断（不能再翻转0了），然后左指针慢慢走过来（不能直接越到right这边）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestOnes</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">zeroNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录0的个数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] == <span class="number">0</span>)&#123;</span><br><span class="line">                zeroNum++;</span><br><span class="line">            &#125;   </span><br><span class="line">            <span class="comment">//窗口缩小</span></span><br><span class="line">            <span class="keyword">while</span>(zeroNum &gt; k)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left] == <span class="number">0</span>)&#123;</span><br><span class="line">                    zeroNum--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删掉一个元素以后全为-1-的最长子数组"><ahref="https://leetcode.cn/problems/longest-subarray-of-1s-after-deleting-one-element/">1493.删掉一个元素以后全为 1 的最长子数组</a></h3><p>给你一个二进制数组 <code>nums</code> ，你需要从中删掉一个元素。</p><p>请你在删掉元素的结果数组中，返回最长的且只包含 1的非空子数组的长度。</p><p>如果不存在这样的子数组，请返回 0 。</p><p><strong>提示 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,1,0,1]</span><br><span class="line">输出：3</span><br><span class="line">解释：删掉位置 2 的数后，[1,1,1] 包含 3 个 1 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,1,1,1,0,1,1,0,1]</span><br><span class="line">输出：5</span><br><span class="line">解释：删掉位置 4 的数字后，[0,1,1,1,1,1,0,1] 的最长全 1 子数组为 [1,1,1,1,1] 。</span><br></pre></td></tr></table></figure><h4 id="滑动窗口">滑动窗口</h4><p>和<a href="#1004">1004</a>题目类似，这题不同的是，我们容许里面有一个0存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestSubarray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">zeroNum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>; right &lt; n; right++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[right] == <span class="number">0</span>)&#123;</span><br><span class="line">                zeroNum++;<span class="comment">//0个数的计算一定要在窗口滑动前处理。</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(zeroNum &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[left] == <span class="number">0</span>)&#123;</span><br><span class="line">                    zeroNum--;</span><br><span class="line">                &#125;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            res = Math.max(res, right - left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长度最小的子数组"><ahref="https://leetcode.cn/problems/minimum-size-subarray-sum/">209.长度最小的子数组</a></h3><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数<code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的<strong>连续子数组</strong><code>[numsl, numsl+1, ..., numsr-1, numsr]</code>，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回<code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h4 id="滑动窗口-1">滑动窗口</h4><p>如果当前窗口内的值小于target，那就right指针右移。</p><p>如果当前窗口内的值大于等于target，更新一下结果集，left指针左移去寻找长度更小的连续数组的可能性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right &amp;&amp; right &lt; n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(right &lt; n &amp;&amp; sum &lt; target)&#123;</span><br><span class="line">                right++;</span><br><span class="line">                <span class="keyword">if</span>(right &lt; n)&#123;</span><br><span class="line">                    sum += nums[right];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(left &lt;= right &amp;&amp; sum &gt;= target)&#123;</span><br><span class="line">                ans = Math.min(ans, right - left + <span class="number">1</span>);</span><br><span class="line">                sum -= nums[left];</span><br><span class="line">                left++;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE? <span class="number">0</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无重复字符的最长子串"><ahref="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a></h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h4 id="滑动窗口哈希表">滑动窗口+哈希表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(right &lt; n)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!map.containsKey(s.charAt(right)))&#123;</span><br><span class="line">                map.put(s.charAt(right), right);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//left不能回退</span></span><br><span class="line">                left = Math.max(map.get(s.charAt(right)) + <span class="number">1</span>, left);</span><br><span class="line">                map.put(s.charAt(right), right);</span><br><span class="line">            &#125;</span><br><span class="line">            res = Math.max(res, right - left + <span class="number">1</span>);</span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="串联所有单词的子串"><ahref="https://leetcode.cn/problems/substring-with-concatenation-of-all-words/">30.串联所有单词的子串</a></h3><p>给定一个字符串 <code>s</code> 和一个字符串数组<code>words</code><strong>。</strong> <code>words</code> 中所有字符串<strong>长度相同</strong>。</p><p><code>s</code> 中的 <strong>串联子串</strong> 是指一个包含<code>words</code> 中所有字符串以任意顺序排列连接起来的子串。</p><ul><li>例如，如果 <code>words = ["ab","cd","ef"]</code>， 那么<code>"abcdef"</code>， <code>"abefcd"</code>，<code>"cdabef"</code>，<code>"cdefab"</code>，<code>"efabcd"</code>， 和 <code>"efcdab"</code>都是串联子串。 <code>"acdbef"</code> 不是串联子串，因为他不是任何<code>words</code> 排列的连接。</li></ul><p>返回所有串联子串在 <code>s</code> 中的开始索引。你可以以<strong>任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;barfoothefoobarman&quot;, words = [&quot;foo&quot;,&quot;bar&quot;]</span><br><span class="line">输出：[0,9]</span><br><span class="line">解释：因为 words.length == 2 同时 words[i].length == 3，连接的子字符串的长度必须为 6。</span><br><span class="line">子串 &quot;barfoo&quot; 开始位置是 0。它是 words 中以 [&quot;bar&quot;,&quot;foo&quot;] 顺序排列的连接。</span><br><span class="line">子串 &quot;foobar&quot; 开始位置是 9。它是 words 中以 [&quot;foo&quot;,&quot;bar&quot;] 顺序排列的连接。</span><br><span class="line">输出顺序无关紧要。返回 [9,0] 也是可以的。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;wordgoodgoodgoodbestword&quot;, words = [&quot;word&quot;,&quot;good&quot;,&quot;best&quot;,&quot;word&quot;]</span><br><span class="line">输出：[]</span><br><span class="line">解释：因为 words.length == 4 并且 words[i].length == 4，所以串联子串的长度必须为 16。</span><br><span class="line">s 中没有子串长度为 16 并且等于 words 的任何顺序排列的连接。</span><br><span class="line">所以我们返回一个空数组。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;barfoofoobarthefoobarman&quot;, words = [&quot;bar&quot;,&quot;foo&quot;,&quot;the&quot;]</span><br><span class="line">输出：[6,9,12]</span><br><span class="line">解释：因为 words.length == 3 并且 words[i].length == 3，所以串联子串的长度必须为 9。</span><br><span class="line">子串 &quot;foobarthe&quot; 开始位置是 6。它是 words 中以 [&quot;foo&quot;,&quot;bar&quot;,&quot;the&quot;] 顺序排列的连接。</span><br><span class="line">子串 &quot;barthefoo&quot; 开始位置是 9。它是 words 中以 [&quot;bar&quot;,&quot;the&quot;,&quot;foo&quot;] 顺序排列的连接。</span><br><span class="line">子串 &quot;thefoobar&quot; 开始位置是 12。它是 words 中以 [&quot;the&quot;,&quot;foo&quot;,&quot;bar&quot;] 顺序排列的连接。</span><br></pre></td></tr></table></figure><h4 id="滑动窗口哈希表-1">滑动窗口+哈希表</h4><p>这题关键在于，滑动窗口的起点不固定，这里起点的情况跟单词长度有关。</p><p>为什么要定这样的起点？</p><p>因为我想在窗口滑动的过程中，滑动幅度为单词长度，那这样的话，下面这种情况：</p><figure><img src="leetcode滑动窗口题目专项训练/image-20230908102648532.png"alt="image-20230908102648532" /><figcaption aria-hidden="true">image-20230908102648532</figcaption></figure><p>如果从头滑动，势必会落下结果。</p><p>所以需要多位置启动，滑动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">findSubstring</span><span class="params">(String s, String[] words)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> words.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">wordLen</span> <span class="operator">=</span> words[<span class="number">0</span>].length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">slen</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="comment">//单词划分s，因为这题滑动窗口的起点不固定，起点有wordLen种情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>  <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; wordLen; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i + num * wordLen &gt; slen)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//初始化</span></span><br><span class="line">            <span class="comment">//初始化窗口长度为num * wordlen,哈希表统计窗口的单词</span></span><br><span class="line">            Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; num; j++)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> s.substring(i + j * wordLen, i + (j + <span class="number">1</span>) * wordLen);</span><br><span class="line">                <span class="comment">//统计单词出现次数</span></span><br><span class="line">                map.put(word, map.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//与words这个哈希表对比，看s中截取的单词是否和words对应</span></span><br><span class="line">            <span class="keyword">for</span>(String word : words)&#123;</span><br><span class="line">                map.put(word, map.getOrDefault(word, <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">                <span class="comment">//如果窗口内单词和words里单词匹对了，从哈希表删除</span></span><br><span class="line">                <span class="keyword">if</span>(map.get(word) == <span class="number">0</span>)&#123;</span><br><span class="line">                    map.remove(word);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//窗口开始滑动,滑动速度为一个单词的长度</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i; start &lt;= slen - num*wordLen; start += wordLen)&#123;</span><br><span class="line">                <span class="comment">//剪枝操作</span></span><br><span class="line">                <span class="keyword">if</span>(start != i)&#123;<span class="comment">//跨过第一个单词后就开始滑</span></span><br><span class="line">                    <span class="comment">//右边单词滑进来</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> s.substring(start + (num - <span class="number">1</span>)*wordLen, start + num* wordLen);</span><br><span class="line">                    map.put(word, map.getOrDefault(word, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(map.get(word) == <span class="number">0</span>)&#123;</span><br><span class="line">                        map.remove(word);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//左边单词滑走,因为跨了一个单词，减去一个wordlen即可</span></span><br><span class="line">                    word = s.substring(start - wordLen, start);</span><br><span class="line">                    map.put(word, map.getOrDefault(word, <span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(map.get(word) == <span class="number">0</span>)&#123;</span><br><span class="line">                        map.remove(word);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(map.isEmpty())&#123;</span><br><span class="line">                    res.add(start);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最小覆盖子串"><ahref="https://leetcode.cn/problems/minimum-window-substring/">76.最小覆盖子串</a></h3><p>给你一个字符串 <code>s</code> 、一个字符串 <code>t</code> 。返回<code>s</code> 中涵盖 <code>t</code> 所有字符的最小子串。如果<code>s</code> 中不存在涵盖 <code>t</code>所有字符的子串，则返回空字符串 <code>""</code> 。</p><p><strong>注意：</strong></p><ul><li>对于 <code>t</code>中重复字符，我们寻找的子字符串中该字符数量必须不少于 <code>t</code>中该字符数量。</li><li>如果 <code>s</code> 中存在这样的子串，我们保证它是唯一的答案。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ADOBECODEBANC&quot;, t = &quot;ABC&quot;</span><br><span class="line">输出：&quot;BANC&quot;</span><br><span class="line">解释：最小覆盖子串 &quot;BANC&quot; 包含来自字符串 t 的 &#x27;A&#x27;、&#x27;B&#x27; 和 &#x27;C&#x27;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;a&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br><span class="line">解释：整个字符串 s 是最小覆盖子串。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出: &quot;&quot;</span><br><span class="line">解释: t 中两个字符 &#x27;a&#x27; 均应包含在 s 的子串中，</span><br><span class="line">因此没有符合条件的子字符串，返回空字符串。</span><br></pre></td></tr></table></figure><h4 id="滑动窗口哈希表-2">滑动窗口+哈希表</h4><p>字典表</p><p>还有字典字段标识needCnt：t的字符已经在滑动窗口内出现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">minWindow</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sl</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">tl</span> <span class="operator">=</span> t.length();</span><br><span class="line">        <span class="comment">//哈希表</span></span><br><span class="line">        <span class="type">int</span>[] need = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : t.toCharArray())&#123;</span><br><span class="line">            need[c]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">needCnt</span> <span class="operator">=</span> tl;</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="comment">//记录结果字符的起始位置</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(right &lt; sl)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(right);</span><br><span class="line">            <span class="keyword">if</span>(need[c] &gt; <span class="number">0</span>)&#123;<span class="comment">//说明这个字符还需要，总需要字符数--</span></span><br><span class="line">                needCnt--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//全局哈希表更新</span></span><br><span class="line">            need[c]--;</span><br><span class="line">            <span class="keyword">if</span>(needCnt == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">while</span>(left &lt; right &amp;&amp; (need[s.charAt(left)] &lt; <span class="number">0</span>))&#123;</span><br><span class="line">                    need[s.charAt(left++)] ++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//条件得加上，后面的字符串可能还会有满足条件的，会改变start</span></span><br><span class="line">                <span class="keyword">if</span>(right - left + <span class="number">1</span> &lt; size)&#123;</span><br><span class="line">                    size = Math.min(size, right - left + <span class="number">1</span>);</span><br><span class="line">                    start = left;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//左指针扰动，触发右指针的移动</span></span><br><span class="line">                need[s.charAt(left)]++;</span><br><span class="line">                left++;</span><br><span class="line">                needCnt++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//未满足条件的时候右指针一直走</span></span><br><span class="line">            right++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size == Integer.MAX_VALUE? <span class="string">&quot;&quot;</span> : s.substring(start, start + size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;滑动窗口算法&quot;&gt;滑动窗口算法&lt;/h2&gt;
&lt;p&gt;基本概念：&lt;/p&gt;
&lt;p&gt;滑动窗口基于双指针的思想，两个指针指向的元素区间，构成一个窗口。&lt;/p&gt;
&lt;p&gt;种类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定大小，如本题&lt;/li&gt;
&lt;li&gt;可变大小&lt;/li&gt;
&lt;/ul</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="滑动窗口" scheme="https://vlsmhd.github.io/categories/leetcode/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode图题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/14/leetcode%E5%9B%BE%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/14/leetcode%E5%9B%BE%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-14T04:38:02.219Z</published>
    <updated>2023-09-03T01:21:49.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深度优先搜索">深度优先搜索</h1><h3 id="钥匙和房间"><ahref="https://leetcode.cn/problems/keys-and-rooms/">841.钥匙和房间</a></h3><p>有 <code>n</code> 个房间，房间按从 <code>0</code> 到<code>n - 1</code> 编号。最初，除 <code>0</code>号房间外的其余所有房间都被锁住。你的目标是进入所有的房间。然而，你不能在没有获得钥匙的时候进入锁住的房间。</p><p>当你进入一个房间，你可能会在里面找到一套不同的钥匙，每把钥匙上都有对应的房间号，即表示钥匙可以打开的房间。你可以拿上所有钥匙去解锁其他房间。</p><p>给你一个数组 <code>rooms</code> 其中 <code>rooms[i]</code> 是你进入<code>i</code> 号房间可以获得的钥匙集合。如果能进入<strong>所有</strong> 房间返回 <code>true</code>，否则返回<code>false</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：rooms = [[1],[2],[3],[]]</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">我们从 0 号房间开始，拿到钥匙 1。</span><br><span class="line">之后我们去 1 号房间，拿到钥匙 2。</span><br><span class="line">然后我们去 2 号房间，拿到钥匙 3。</span><br><span class="line">最后我们去了 3 号房间。</span><br><span class="line">由于我们能够进入每个房间，我们返回 true。</span><br></pre></td></tr></table></figure><h4 id="算法分析">算法分析</h4><h5 id="dfs-递归">DFS + 递归</h5><p>我们从第0号房间开始递归，每拿到一把钥匙，就去这个钥匙对应的房间，这就是D的精髓。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canVisitAllRooms</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> rooms.size();</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从第0号房间开始遍历</span></span><br><span class="line">        dfs(rooms, visited, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">boolean</span> visit: visited)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visit)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(List&lt;List&lt;Integer&gt;&gt; rooms, <span class="type">boolean</span>[] visited, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited[key])&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Integer&gt; keys = rooms.get(key);</span><br><span class="line">        visited[key] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k : keys)&#123;</span><br><span class="line">            dfs(rooms, visited, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新规划路线"><ahref="https://leetcode.cn/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero/">1466.重新规划路线</a></h3><p><code>n</code> 座城市，从 <code>0</code> 到 <code>n-1</code>编号，其间共有 <code>n-1</code>条路线。因此，要想在两座不同城市之间旅行只有唯一一条路线可供选择（路线网形成一颗树）。去年，交通运输部决定重新规划路线，以改变交通拥堵的状况。</p><p>路线用 <code>connections</code> 表示，其中<code>connections[i] = [a, b]</code> 表示从城市 <code>a</code> 到<code>b</code> 的一条有向路线。</p><p>今年，城市 0 将会举办一场大型比赛，很多游客都想前往城市 0。请你帮助重新规划路线方向，使每个城市都可以访问城市 0。返回需要变更方向的最小路线数。</p><p>题目数据 <strong>保证</strong>每个城市在重新规划路线方向后都能到达城市 0 。</p><h4 id="建图深搜dfs">建图+深搜DFS</h4><p>题目得出的结论：</p><ol type="1"><li>路线网形成一颗树：图是有路线连通的。</li><li>要求最少规划方案，运用贪心策略，把部分有向边反向一下，就能实现目的。</li><li>采用DFS或者BFS必须的元素：visited</li></ol><p>小技巧：</p><p>反向路径在邻接表存负边值，这样从0正向推进的时候，只要&gt;0就说明路径是从0正向推进的，需要反转这条路。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minReorder</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] connections)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; graph = buildGraph(n, connections);</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];</span><br><span class="line">        dfs(visited, graph, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">boolean</span>[] visited, List&lt;List&lt;Integer&gt;&gt; graph, <span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        visited[idx] = <span class="literal">true</span>;</span><br><span class="line">        List&lt;Integer&gt; list = graph.get(idx);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> neighbor : list)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[Math.abs(neighbor)])&#123;</span><br><span class="line">                <span class="keyword">if</span>(neighbor &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                dfs(visited, graph, Math.abs(neighbor));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构建正向图——邻接表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">buildGraph</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] connections)</span>&#123;</span><br><span class="line">        <span class="comment">// 用邻接表表示有向图</span></span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="comment">// 初始化每个节点的邻居列表</span></span><br><span class="line">            graph.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] connection : connections)&#123;</span><br><span class="line">            <span class="comment">//正向路径</span></span><br><span class="line">            graph.get(connection[<span class="number">0</span>]).add(connection[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">//反向路径</span></span><br><span class="line">            graph.get(connection[<span class="number">1</span>]).add(-connection[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> graph;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="除法求值">**<ahref="https://leetcode.cn/problems/evaluate-division/">399.除法求值</a></h3><p>给你一个变量对数组 <code>equations</code> 和一个实数值数组<code>values</code> 作为已知条件，其中<code>equations[i] = [Ai, Bi]</code> 和 <code>values[i]</code>共同表示等式 <code>Ai / Bi = values[i]</code> 。每个 <code>Ai</code> 或<code>Bi</code> 是一个表示单个变量的字符串。</p><p>另有一些以数组 <code>queries</code> 表示的问题，其中<code>queries[j] = [Cj, Dj]</code> 表示第 <code>j</code>个问题，请你根据已知条件找出 <code>Cj / Dj = ?</code>的结果作为答案。</p><p>返回 <strong>所有问题的答案</strong>。如果存在某个无法确定的答案，则用 <code>-1.0</code>替代这个答案。如果问题中出现了给定的已知条件中没有出现的字符串，也需要用<code>-1.0</code> 替代这个答案。</p><p><strong>注意：</strong>输入总是有效的。你可以假设除法运算中不会出现除数为0 的情况，且不存在任何矛盾的结果。</p><p><strong>注意：</strong>未在等式列表中出现的变量是未定义的，因此无法确定它们的答案。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：equations = [[&quot;a&quot;,&quot;b&quot;],[&quot;b&quot;,&quot;c&quot;]], values = [2.0,3.0], queries = [[&quot;a&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;a&quot;],[&quot;a&quot;,&quot;e&quot;],[&quot;a&quot;,&quot;a&quot;],[&quot;x&quot;,&quot;x&quot;]]</span><br><span class="line">输出：[6.00000,0.50000,-1.00000,1.00000,-1.00000]</span><br><span class="line">解释：</span><br><span class="line">条件：a / b = 2.0, b / c = 3.0</span><br><span class="line">问题：a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?</span><br><span class="line">结果：[6.0, 0.5, -1.0, 1.0, -1.0 ]</span><br><span class="line">注意：x 是未定义的 =&gt; -1.0</span><br></pre></td></tr></table></figure><h4 id="建图-dfs">建图 + DFS</h4><p>如何建图：</p><figure><img src="leetcode图题目专项训练/image-20230903084528732.png"alt="image-20230903084528732" /><figcaption aria-hidden="true">image-20230903084528732</figcaption></figure><p>边的权值 = 起始边/终止边的值。</p><p>如图：边是可以出现反向的情况。</p><p>有向边虽然是a -&gt; b，但是b -&gt; a也成立，结果就是0.5</p><p>用Java的Map建图：</p><p>Map&lt; 分子顶点，&lt;分母顶点， 计算结果&gt;&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//hashmap建图</span></span><br><span class="line"><span class="comment">//初始化Graph(以HashMap形式),一个顶点可能有多个边，所以用list</span></span><br><span class="line">Map&lt;String, List&lt;Cell&gt;&gt; graph = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++)&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> equations.get(i).get(<span class="number">0</span>), s2 = equations.get(i).get(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//正向边 a-&gt;b</span></span><br><span class="line">    graph.computeIfAbsent(s1, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(<span class="keyword">new</span> <span class="title class_">Cell</span>(s2, values[i]));</span><br><span class="line">    <span class="comment">//反向边 b -&gt; a</span></span><br><span class="line">    graph.computeIfAbsent(s2, k -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;()).add(<span class="keyword">new</span> <span class="title class_">Cell</span>(s1, <span class="number">1.0</span> / values[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果集构建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//创建答案result数组以及访问过的HashSet: visited</span></span><br><span class="line"><span class="type">double</span>[] res = <span class="keyword">new</span> <span class="title class_">double</span>[queries.size()];</span><br><span class="line"><span class="comment">//首先将答案中所有答案值置为-1.0，出现(x / x)情况可以直接不用修改</span></span><br><span class="line">Arrays.fill(res, -<span class="number">1.0</span>);</span><br><span class="line"> <span class="comment">//对于每个query中的值调用dfs函数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; queries.size(); i++) &#123;</span><br><span class="line">    dfs(queries.get(i).get(<span class="number">0</span>), queries.get(i).get(<span class="number">1</span>), <span class="number">1.0</span>, graph, res, i, <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><p>DFS函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//src: 当前位置; dst: 答案节点; </span></span><br><span class="line"><span class="comment">//cur: 当前计算值; </span></span><br><span class="line"><span class="comment">//graph: 之前建的图; </span></span><br><span class="line"><span class="comment">//res: 答案array; </span></span><br><span class="line"><span class="comment">//index: 当前遍历到第几个query; </span></span><br><span class="line"><span class="comment">//visited: 查重Set ———————————防止出现环</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String src, String dst, <span class="type">double</span> cur, Map&lt;String, List&lt;Cell&gt;&gt; graph, <span class="type">double</span>[] res, <span class="type">int</span> index, Set&lt;String&gt; visited)</span> &#123;</span><br><span class="line">      <span class="comment">//base case: 在visited中加入当前位置信息；如果加不了代表已经访问过，直接返回</span></span><br><span class="line">      <span class="keyword">if</span>(!visited.add(src)) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//如果当前位置src = 答案节点dst，并且此节点在graph中(避免x/x的情况)，用当前计算值cur来填充答案res[index] </span></span><br><span class="line">      <span class="keyword">if</span>(src.equals(dst) &amp;&amp; graph.containsKey(src)) &#123;</span><br><span class="line">          res[index] = cur;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//对于邻居节点，调用dfs函数</span></span><br><span class="line">      <span class="keyword">for</span>(Cell nei : graph.getOrDefault(src, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())) &#123;</span><br><span class="line">          dfs(nei.str, dst, cur * nei.div, graph, res, index, visited);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="广度优先搜索">广度优先搜索</h1><h2 id="网格模型题目">网格模型题目</h2><h3 id="腐烂的橘子"><ahref="https://leetcode.cn/problems/rotting-oranges/">994.腐烂的橘子</a></h3><p>在给定的 <code>m x n</code> 网格 <code>grid</code>中，每个单元格可以有以下三个值之一：</p><ul><li>值 <code>0</code> 代表空单元格；</li><li>值 <code>1</code> 代表新鲜橘子；</li><li>值 <code>2</code> 代表腐烂的橘子。</li></ul><p>每分钟，腐烂的橘子 <strong>周围 4 个方向上相邻</strong>的新鲜橘子都会腐烂。</p><p>返回<em>直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回<code>-1</code></em> 。</p><p><strong>示例 1：</strong></p><figure><img src="oranges.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[2,1,1],[1,1,0],[0,1,1]]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><h4 id="广搜方格遍历">广搜——方格遍历</h4><p>注意：</p><ol type="1"><li>广搜的队列初始化。</li><li>广搜队列存的值要有意义，比如本题中存下标，可以方便后续进行上下左右的遍历。</li><li>网格搜索会有上下左右四个方向。</li><li>注意本题，每一轮循环是每一分钟，每一分钟腐烂的橘子可以同时感染，所以需要嵌套循环。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">orangesRotting</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> grid.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//队列记录腐烂橘子下标</span></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//初始化新鲜橘子数量，并初始化队列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(count &gt; <span class="number">0</span> &amp;&amp; !queue.isEmpty())&#123;</span><br><span class="line">            <span class="comment">//如果有多个腐烂的橘子，是可以同时感染的，而不是一个一个感染，所以应该嵌套循环</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">                <span class="type">int</span>[] xy = queue.poll();</span><br><span class="line">                <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> xy[<span class="number">0</span>];</span><br><span class="line">                <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> xy[<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//上</span></span><br><span class="line">                <span class="keyword">if</span>(x-<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x-<span class="number">1</span>][y] == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//别忘记感染</span></span><br><span class="line">                    grid[x-<span class="number">1</span>][y] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x-<span class="number">1</span>,y&#125;);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//下</span></span><br><span class="line">                <span class="keyword">if</span>(x+<span class="number">1</span> &lt; m &amp;&amp; grid[x+<span class="number">1</span>][y] == <span class="number">1</span>)&#123;</span><br><span class="line">                    grid[x+<span class="number">1</span>][y] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x+<span class="number">1</span>,y&#125;);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//左</span></span><br><span class="line">                <span class="keyword">if</span>(y-<span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y-<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                    grid[x][y-<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y-<span class="number">1</span>&#125;);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//右</span></span><br><span class="line">                <span class="keyword">if</span>(y+<span class="number">1</span> &lt; n &amp;&amp; grid[x][y+<span class="number">1</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                    grid[x][y+<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x,y+<span class="number">1</span>&#125;);</span><br><span class="line">                    count--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            min++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> min;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迷宫中离入口最近的出口"><ahref="https://leetcode.cn/problems/nearest-exit-from-entrance-in-maze/">1926.迷宫中离入口最近的出口</a></h3><p>给你一个 <code>m x n</code> 的迷宫矩阵 <code>maze</code>（<strong>下标从 0 开始</strong>），矩阵中有空格子（用 <code>'.'</code>表示）和墙（用 <code>'+'</code> 表示）。同时给你迷宫的入口<code>entrance</code> ，用<code>entrance = [entrancerow, entrancecol]</code>表示你一开始所在格子的行和列。</p><p>每一步操作，你可以往<strong>上</strong>，<strong>下</strong>，<strong>左</strong> 或者<strong>右</strong>移动一个格子。你不能进入墙所在的格子，你也不能离开迷宫。你的目标是找到离<code>entrance</code> <strong>最近</strong>的出口。<strong>出口</strong> 的含义是 <code>maze</code><strong>边界</strong> 上的<strong>空格子</strong>。<code>entrance</code> 格子<strong>不算</strong> 出口。</p><p>请你返回从 <code>entrance</code> 到最近出口的最短路径的<strong>步数</strong> ，如果不存在这样的路径，请你返回 <code>-1</code>。</p><p><strong>示例 1：</strong></p><figure><img src="nearest1-grid.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：maze = [[&quot;+&quot;,&quot;+&quot;,&quot;.&quot;,&quot;+&quot;],[&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;+&quot;],[&quot;+&quot;,&quot;+&quot;,&quot;+&quot;,&quot;.&quot;]], entrance = [1,2]</span><br><span class="line">输出：1</span><br><span class="line">解释：总共有 3 个出口，分别位于 (1,0)，(0,2) 和 (2,3) 。</span><br><span class="line">一开始，你在入口格子 (1,2) 处。</span><br><span class="line">- 你可以往左移动 2 步到达 (1,0) 。</span><br><span class="line">- 你可以往上移动 1 步到达 (0,2) 。</span><br><span class="line">从入口处没法到达 (2,3) 。</span><br><span class="line">所以，最近的出口是 (0,2) ，距离为 1 步。</span><br></pre></td></tr></table></figure><h4 id="广搜-距离判断最短">广搜 + 距离判断最短</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nearestExit</span><span class="params">(<span class="type">char</span>[][] maze, <span class="type">int</span>[] entrance)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> maze.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> maze[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//第三个参数为到当前结点移动的距离</span></span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entrance[<span class="number">0</span>], entrance[<span class="number">1</span>], <span class="number">0</span>&#125;);</span><br><span class="line">        <span class="comment">//走过的格子变成墙</span></span><br><span class="line">        maze[entrance[<span class="number">0</span>]][entrance[<span class="number">1</span>]] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span>[] poll = queue.poll();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> poll[<span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> poll[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//上</span></span><br><span class="line">            <span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maze[x-<span class="number">1</span>][y] != <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x-<span class="number">1</span>, y, d + <span class="number">1</span>&#125;);</span><br><span class="line">                maze[x-<span class="number">1</span>][y] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下</span></span><br><span class="line">            <span class="keyword">if</span>(x + <span class="number">1</span> &lt; m &amp;&amp; maze[x+<span class="number">1</span>][y] != <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x+<span class="number">1</span>, y, d + <span class="number">1</span>&#125;);</span><br><span class="line">                maze[x+<span class="number">1</span>][y] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左</span></span><br><span class="line">            <span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; maze[x][y-<span class="number">1</span>] != <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y-<span class="number">1</span>, d + <span class="number">1</span>&#125;);</span><br><span class="line">                maze[x][y-<span class="number">1</span>] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右</span></span><br><span class="line">            <span class="keyword">if</span>(y + <span class="number">1</span> &lt; n &amp;&amp; maze[x][y+<span class="number">1</span>] != <span class="string">&#x27;+&#x27;</span>)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;x, y+<span class="number">1</span>, d + <span class="number">1</span>&#125;);</span><br><span class="line">                maze[x][y+<span class="number">1</span>] = <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>((x == <span class="number">0</span> || x == m-<span class="number">1</span> || y == <span class="number">0</span> || y == n-<span class="number">1</span>) &amp;&amp; !(x == entrance[<span class="number">0</span>] &amp;&amp; y == entrance[<span class="number">1</span>]))&#123;</span><br><span class="line">                min = Math.min(min, d);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> min == Integer.MAX_VALUE? -<span class="number">1</span>:min;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网格模型总结">网格模型总结</h2><p>基本上都是上下左右四个方向遍历，重点在于对队列的使用，队列可存二元组、三元组这样，灵活取舍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">BFS</span><span class="params">(<span class="type">char</span>[][] graph, ...)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> graph.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> graph[<span class="number">0</span>].length;</span><br><span class="line">        <span class="comment">//定义队列</span></span><br><span class="line">        Queue&lt;<span class="type">int</span>[]&gt; queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//如果题目给了初始地点，就加入队列</span></span><br><span class="line">        queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;  n元组  &#125;);</span><br><span class="line"><span class="comment">//offer后的一些处理</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            <span class="type">int</span>[] poll = queue.poll();</span><br><span class="line">            <span class="comment">//对于二维网格，x、y坐标必不可少</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> poll[<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> poll[<span class="number">1</span>];</span><br><span class="line">            <span class="comment">//其它参数</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">            <span class="comment">//接下来往四个方向遍历</span></span><br><span class="line">            <span class="comment">//上</span></span><br><span class="line">            <span class="keyword">if</span>(x - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; ...)&#123;<span class="comment">//在某个格子内，向上走只是x坐标-1，判断一下x坐标是否出界即可，下面同理</span></span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;  n元组  &#125;);</span><br><span class="line">                <span class="comment">//offer后的一些处理</span></span><br><span class="line">        ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//下</span></span><br><span class="line">            <span class="keyword">if</span>(x + <span class="number">1</span> &lt; m &amp;&amp; ...)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;  n元组  &#125;);</span><br><span class="line">                <span class="comment">//offer后的一些处理</span></span><br><span class="line">        ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//左</span></span><br><span class="line">            <span class="keyword">if</span>(y - <span class="number">1</span> &gt;= <span class="number">0</span> &amp;&amp; ...)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;  n元组  &#125;);</span><br><span class="line">                <span class="comment">//offer后的一些处理</span></span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//右</span></span><br><span class="line">            <span class="keyword">if</span>(y + <span class="number">1</span> &lt; n &amp;&amp; ...)&#123;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;  n元组  &#125;);</span><br><span class="line">                <span class="comment">//offer后的一些处理</span></span><br><span class="line">        ...</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//满足结果集的条件</span></span><br><span class="line">            <span class="keyword">if</span>(...)&#123;</span><br><span class="line">                res.add();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="并查集">并查集</h1><h3 id="省份数量"><ahref="https://leetcode.cn/problems/number-of-provinces/">547.省份数量</a></h3><p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市<code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code>与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市<code>c</code> 间接相连。</p><p><strong>省份</strong>是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p><p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中<code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第<code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code>表示二者不直接相连。</p><p>返回矩阵中 <strong>省份</strong> 的数量。</p><p><strong>示例 1：</strong></p><figure><img src="graph1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：isConnected = [[1,1,0],[1,1,0],[0,0,1]]</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><h4 id="等级制-路径压缩优化并查集">等级制 + 路径压缩优化并查集</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findCircleNum</span><span class="params">(<span class="type">int</span>[][] isConnected)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> isConnected.length;</span><br><span class="line">        <span class="type">DisjointSet</span> <span class="variable">disjointSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DisjointSet</span>(n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i != j &amp;&amp; isConnected[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    disjointSet.union(i, j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> disjointSet.unionNums();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DisjointSet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] s;</span><br><span class="line">    <span class="comment">//这里size采用等级制度，侵略完同级的其它结点，自身等级+1</span></span><br><span class="line">    <span class="type">int</span>[] size;</span><br><span class="line">    <span class="comment">//领导数量</span></span><br><span class="line">    <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DisjointSet</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">        s = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="keyword">new</span> <span class="title class_">int</span>[size];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)&#123;</span><br><span class="line">            s[i] = i;</span><br><span class="line">            <span class="built_in">this</span>.size[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == s[x])&#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s[x] = find(s[x]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">union</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="comment">//找到各自的领导</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">ldx</span> <span class="operator">=</span> find(x);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ldy</span> <span class="operator">=</span> find(y);</span><br><span class="line">        <span class="keyword">if</span>(ldx != ldy)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">this</span>.size[ldx] &lt; <span class="built_in">this</span>.size[ldy])&#123;</span><br><span class="line">                s[ldx] = ldy;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">this</span>.size[ldx] &gt; <span class="built_in">this</span>.size[ldy])&#123;</span><br><span class="line">                s[ldy] = ldx;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                s[ldy] = ldx;</span><br><span class="line">                <span class="built_in">this</span>.size[ldx]++;</span><br><span class="line">            &#125;</span><br><span class="line">            count--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">unionNums</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;深度优先搜索&quot;&gt;深度优先搜索&lt;/h1&gt;
&lt;h3 id=&quot;钥匙和房间&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/problems/keys-and-rooms/&quot;&gt;841.
钥匙和房间&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;有 &lt;code&gt;n&lt;/code</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="图" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%9B%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode回溯题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/11/leetcode%E5%9B%9E%E6%BA%AF%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/11/leetcode%E5%9B%9E%E6%BA%AF%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-11T01:54:50.848Z</published>
    <updated>2023-08-23T02:00:17.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯算法">回溯算法</h1><p>一种穷举算法，递归的副产物。。</p><p>递归往深了去，回来的途中进行的操作称为回溯。</p><p>一般解决穷举类问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><p>思路：</p><p>把组合问题抽象为一棵树，根节点就是当前要处理的某个问题.</p><ul><li>树的深度：代表着递归的深度</li><li>树的分支宽度：代表着要进行几轮递归<ul><li>一般横向的分支，在递归函数里用循环代替。</li></ul></li></ul><p>回溯模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(...)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(...)&#123;</span><br><span class="line">res...</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//递进操作</span></span><br><span class="line">backTrack();</span><br><span class="line"><span class="comment">//回溯操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="leetcode典型题目">leetcode典型题目</h1><h3 id="电话号码的字母组合"><ahref="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17.电话号码的字母组合</a></h3><h4 id="简单回溯">简单回溯</h4><p>关于全局变量的设置：</p><p>回溯的关键就在于回，对于全局变量而言有着更好操作的优势。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;Character,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;()&#123;&#123;</span><br><span class="line">            put(<span class="string">&#x27;2&#x27;</span>,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;3&#x27;</span>,<span class="string">&quot;def&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;4&#x27;</span>,<span class="string">&quot;ghi&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;5&#x27;</span>,<span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;6&#x27;</span>,<span class="string">&quot;mno&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;7&#x27;</span>,<span class="string">&quot;pqrs&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;8&#x27;</span>,<span class="string">&quot;tuv&quot;</span>);</span><br><span class="line">            put(<span class="string">&#x27;9&#x27;</span>,<span class="string">&quot;wxyz&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">path</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();;</span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">letterCombinations</span><span class="params">(String digits)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> digits.length();</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        backTrack(digits, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(String digits, <span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="comment">//递归终止条件</span></span><br><span class="line">        <span class="keyword">if</span>(idx == digits.length())&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">String</span>(path.toString()));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> map.get(digits.charAt(idx));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//横向遍历，总共进行几轮递归</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            </span><br><span class="line">            path.append(c);</span><br><span class="line">            <span class="comment">//递归进入下一层</span></span><br><span class="line">            backTrack(digits, idx + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//回溯</span></span><br><span class="line">            path.deleteCharAt(path.length() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合总和-iii"><ahref="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和III</a></h3><p>找出所有相加之和为 <code>n</code> 的 <code>k</code>个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em>。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 7</span><br><span class="line">输出: [[1,2,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 4 = 7</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">1 + 2 + 6 = 9</span><br><span class="line">1 + 3 + 5 = 9</span><br><span class="line">2 + 3 + 4 = 9</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><h4 id="剪枝回溯">剪枝回溯</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.k = k;</span><br><span class="line">        backTrack(n, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        k:一个组合中需要的数字个数</span></span><br><span class="line"><span class="comment">        sum: n - 当前组合中的和    </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span> sum, <span class="type">int</span> idx)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.size() == k &amp;&amp; sum == <span class="number">0</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里i = 1就会重复，path会重复，res里也会重复  i设置成idx，就集合中的元素顺序一直是从小到大，不会回退，就不会存在相同的集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> idx; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            sum -= i;</span><br><span class="line">            backTrack(sum, i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯算法&quot;&gt;回溯算法&lt;/h1&gt;
&lt;p&gt;一种穷举算法，递归的副产物。。&lt;/p&gt;
&lt;p&gt;递归往深了去，回来的途中进行的操作称为回溯。&lt;/p&gt;
&lt;p&gt;一般解决穷举类问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组合问题：N个数里面按一定规则找出k个数的集合&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="回溯" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%9B%9E%E6%BA%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode动态规划题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/07/leetcode%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/07/leetcode%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-07T03:51:57.210Z</published>
    <updated>2023-08-11T01:54:25.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动归规律总结">动归规律总结</h1><p>关键步骤：</p><ol type="1"><li>思考子问题的构造。</li><li>定义dp数组</li><li>初始化dp数组、处理边界问题</li><li>分析子问题状态转移，推导递推方程。（推导子问题有几种状态）</li></ol><h1 id="动归题目">动归题目</h1><h2 id="一维动归">一维动归</h2><h3 id="第-n-个泰波那契数"><ahref="https://leetcode.cn/problems/n-th-tribonacci-number/">1137. 第 N个泰波那契数</a></h3><p>泰波那契序列 Tn 定义如下：</p><p>T0 = 0, T1 = 1, T2 = 1, 且在 n &gt;= 0 的条件下 Tn+3 = Tn + Tn+1 +Tn+2</p><p>给你整数 <code>n</code>，请返回第 n 个泰波那契数 Tn 的值。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">T_3 = 0 + 1 + 1 = 2</span><br><span class="line">T_4 = 1 + 1 + 2 = 4</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动态规划">动态规划</h4><h5 id="on空间复杂度">O(n)空间复杂度</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>] + dp[i-<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="优化内存o1">优化内存O(1)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            d = a+b+c;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">            c = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用最小花费爬楼梯"><ahref="https://leetcode.cn/problems/min-cost-climbing-stairs/">746.使用最小花费爬楼梯</a></h3><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code>是从楼梯第 <code>i</code>个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code>的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：cost = [10,15,20]</span><br><span class="line">输出：15</span><br><span class="line">解释：你将从下标为 1 的台阶开始。</span><br><span class="line">- 支付 15 ，向上爬两个台阶，到达楼梯顶部。</span><br><span class="line">总花费为 15 。</span><br></pre></td></tr></table></figure><h4 id="动态规划-1">动态规划</h4><h5 id="普通版">普通版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cost.length;</span><br><span class="line">        <span class="comment">//dp[i]含义：到达第i个台阶要花费的最低花费</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];<span class="comment">//这里到达最终台阶要比cost的长度大1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//递推公式</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n ; i++)&#123;</span><br><span class="line">            dp[i] = Math.min(dp[i-<span class="number">1</span>] + cost[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + cost[i-<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="打家劫舍"><ahref="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。<strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：[1,2,3,1]</span><br><span class="line">输出：4</span><br><span class="line">解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。</span><br><span class="line">     偷窃到的最高金额 = 1 + 3 = 4 。</span><br></pre></td></tr></table></figure><h4 id="动态规划-2">动态规划</h4><h5 id="普通版-1">普通版</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//dp[i] 在当前屋子里能偷到的最大金额</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//子问题k间屋子：  最后一间偷不偷</span></span><br><span class="line">            <span class="comment">//如果最后一间偷了，前一间不能头，dp[i-2]</span></span><br><span class="line">            <span class="comment">//如果最后一间不偷，偷前一间之前的，dp[i-1]</span></span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; n; i++)&#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>], dp[i-<span class="number">2</span>] + nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="性能分析">性能分析：</h6><figure><img src="leetcode动态规划题目专项训练/image-20230808095152608.png"alt="image-20230808095152608" /><figcaption aria-hidden="true">image-20230808095152608</figcaption></figure><h3 id="多米诺和托米诺平铺"><ahref="https://leetcode.cn/problems/domino-and-tromino-tiling/">790.多米诺和托米诺平铺</a></h3><p>有两种形状的瓷砖：一种是 <code>2 x 1</code> 的多米诺形，另一种是形如"L" 的托米诺形。两种形状都可以旋转。</p><figure><img src="leetcode动态规划题目专项训练/lc-domino.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>给定整数 n ，返回可以平铺 <code>2 x n</code>的面板的方法的数量。<strong>返回对</strong> <code>109 + 7</code><strong>取模</strong> 的值。</p><p>平铺指的是每个正方形都必须有瓷砖覆盖。两个平铺不同，当且仅当面板上有四个方向上的相邻单元中的两个，使得恰好有一个平铺有一个瓷砖占据两个正方形。</p><p><strong>示例 1:</strong></p><figure><img src="leetcode动态规划题目专项训练/lc-domino1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 3</span><br><span class="line">输出: 5</span><br><span class="line">解释: 五种不同的方法如上所示。</span><br></pre></td></tr></table></figure><h4 id="动态规划-3">动态规划</h4><h5 id="一维找规律">一维+找规律</h5><p>这里找规律的图借鉴：灵茶山大佬...</p><p>大佬不仅脑子好，画图水平也是一流。</p><figure><img src="leetcode动态规划题目专项训练/1668157188-nBzesC-790-5.png"alt="790-5.png" /><figcaption aria-hidden="true">790-5.png</figcaption></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MOD</span> <span class="operator">=</span> (<span class="type">long</span>) <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numTilings</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span>[] dp = <span class="keyword">new</span> <span class="title class_">long</span>[n+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            dp[i] = (dp[i-<span class="number">1</span>] * <span class="number">2</span> + dp[i-<span class="number">3</span>]) % MOD;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维动归">二维动归</h2><h3 id="不同路径"><ahref="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></h3><p>一个机器人位于一个 <code>m x n</code> 网格的左上角（起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><strong>示例 1：</strong></p><figure><img src="leetcode动态规划题目专项训练/robot_maze.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：m = 3, n = 7</span><br><span class="line">输出：28</span><br></pre></td></tr></table></figure><h4 id="二维动归-1">二维动归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">//dp[i][j]表示到达(i,j)位置处有多少种路径</span></span><br><span class="line">        <span class="type">int</span>[][] dp  = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] =  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] =  <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++)&#123;</span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i][j-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长公共子序列"><ahref="https://leetcode.cn/problems/longest-common-subsequence/">1143.最长公共子序列</a></h3><p>给定两个字符串 <code>text1</code> 和<code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong>的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code>。</p><p>一个字符串的 <strong>子序列</strong>是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>"ace"</code> 是 <code>"abcde"</code> 的子序列，但<code>"aec"</code> 不是 <code>"abcde"</code> 的子序列。</li></ul><p>两个字符串的 <strong>公共子序列</strong>是这两个字符串所共同拥有的子序列。</p><h4 id="二维动归-2">二维动归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        <span class="comment">//dp数组含义：两个字符串的子串长度各达到a、b的时候，最长公共子序列</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[a+<span class="number">1</span>][b+<span class="number">1</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= a; i++)&#123;</span><br><span class="line">            <span class="comment">//把字符在这边提前创建好，能优化效率两倍。</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">a1</span> <span class="operator">=</span> text1.charAt(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= b; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a1 == text2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">//字符串相同，之前的状态+1</span></span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//延续之前的状态（最大）</span></span><br><span class="line">                    dp[i][j] = Math.max(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[a][b];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="买卖股票的最佳时机含手续费"><ahref="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">714.买卖股票的最佳时机含手续费</a></h3><p>给定一个整数数组 <code>prices</code>，其中<code>prices[i]</code>表示第 <code>i</code> 天的股票价格 ；整数<code>fee</code> 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p><strong>注意：</strong>这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入：prices = [1, 3, 2, 8, 4, 9], fee = 2</span><br><span class="line">输出：8</span><br><span class="line">解释：能够达到的最大利润:  </span><br><span class="line">在此处买入 prices[0] = 1</span><br><span class="line">在此处卖出 prices[3] = 8</span><br><span class="line">在此处买入 prices[4] = 4</span><br><span class="line">在此处卖出 prices[5] = 9</span><br><span class="line">总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8</span><br></pre></td></tr></table></figure><h4 id="二维动归-3">二维动归</h4><p>这里的第二维度只是为了方便状态判断。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dp[i][0]表示：第i天，持有股票，能获得的最大利润</span><br><span class="line">dp[i][1]表示：第i天，不持有股票，能获得的最大利润</span><br></pre></td></tr></table></figure><p>还有注意手续费：一次交易只需付一次手续费，只要在买入或者卖出的时候交一次fee就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="comment">//第i天如果持有股票，能到达的最大利润     +   不持有，能到达的最大利润</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="comment">//今天持有，之前状态：之前一直持有、 昨天不持有，今天买入</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>], dp[i-<span class="number">1</span>][<span class="number">1</span>] - prices[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//由于手续费只要交一次，可以选择买入时交，也可以卖出时交，如果两个式子都带-fee，最终结果会差个手续费</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//今天不持有，之前状态：  昨天不持有，  昨天持有，今天卖了</span></span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>], dp[i-<span class="number">1</span>][<span class="number">0</span>] + prices[i] - fee );</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Math.max(dp[n-<span class="number">1</span>][<span class="number">0</span>], dp[n-<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编辑距离"><ahref="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><p>给你两个单词 <code>word1</code> 和 <code>word2</code>， <em>请返回将<code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em>。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;horse&quot;, word2 = &quot;ros&quot;</span><br><span class="line">输出：3</span><br><span class="line">解释：</span><br><span class="line">horse -&gt; rorse (将 &#x27;h&#x27; 替换为 &#x27;r&#x27;)</span><br><span class="line">rorse -&gt; rose (删除 &#x27;r&#x27;)</span><br><span class="line">rose -&gt; ros (删除 &#x27;e&#x27;)</span><br></pre></td></tr></table></figure><h4 id="二维动归-4">二维动归</h4><p>这里二维就像最长公共子序列那样。</p><p>来注意状态的转移：</p><p>遍历两边字符串的时候，当两个字符相同的时候，不做任何操作，由<code>dp[i-1][j-1]</code>推进</p><p>字符串不相同：</p><ul><li><code>dp[i][j-1]</code>：在表示word1前i个字符转换到word2前j-1个字符的距离，在此基础上，word2增加一个字符与word1的第i个字符相同，等价于word1删。</li><li><code>dp[i][j-1]</code>：...</li><li><code>dp[i-1][j-1]</code>：把两个字符修改成一样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> word1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> word2.length();</span><br><span class="line">        <span class="comment">//空值判断</span></span><br><span class="line">        <span class="keyword">if</span>(a * b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//两个字符的子串,下标分别到达a,b的时候，最小编辑距离</span></span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[a+<span class="number">1</span>][b+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= a; i++)&#123;</span><br><span class="line">            <span class="comment">//当word2子串为空，编辑距离就是把word1的每个子串变成空串所经历的步骤数</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= b; j++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][j] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= a; i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> word1.charAt(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= b; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(c1 == word2.charAt(j-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">//当前字符相同，则都由前一个字符处转移过来</span></span><br><span class="line">                    dp[i][j] = dp[i-<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j-<span class="number">1</span>],dp[i-<span class="number">1</span>][j]), dp[i][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[a][b];  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动归规律总结&quot;&gt;动归规律总结&lt;/h1&gt;
&lt;p&gt;关键步骤：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;思考子问题的构造。&lt;/li&gt;
&lt;li&gt;定义dp数组&lt;/li&gt;
&lt;li&gt;初始化dp数组、处理边界问题&lt;/li&gt;
&lt;li&gt;分析子问题状态转移，推导递推方程</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="动态规划" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode脑筋急转弯题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/08/07/leetcode%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/08/07/leetcode%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-08-07T03:44:18.504Z</published>
    <updated>2023-08-07T03:51:14.147Z</updated>
    
    <content type="html"><![CDATA[<h3 id="判断是否能拆分数组"><ahref="https://leetcode.cn/problems/check-if-it-is-possible-to-split-array/">2811.判断是否能拆分数组</a></h3><p>给你一个长度为 <code>n</code> 的数组 <code>nums</code> 和一个整数<code>m</code> 。请你判断能否执行一系列操作，将数组拆分成 <code>n</code>个 <strong>非空</strong> 数组。</p><p>在每一步操作中，你可以选择一个 <strong>长度至少为 2</strong>的现有数组（之前步骤的结果） 并将其拆分成 <strong>2</strong>个子数组，而得到的 <strong>每个</strong> 子数组，<strong>至少</strong>需要满足以下条件之一：</p><ul><li><p>子数组的长度为 1 ，或者</p></li><li><p>子数组元素之和 <strong>大于或等于</strong> <code>m</code>。</p></li></ul><p>如果你可以将给定数组拆分成 <code>n</code> 个满足要求的数组，返回<code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>注意：</strong>子数组是数组中的一个连续非空元素序列。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2, 2, 1], m = 4</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">第 1 步，将数组 nums 拆分成 [2, 2] 和 [1] 。</span><br><span class="line">第 2 步，将数组 [2, 2] 拆分成 [2] 和 [2] 。</span><br><span class="line">因此，答案为 true 。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [2, 1, 3], m = 5 </span><br><span class="line">输出：false</span><br><span class="line">解释：</span><br><span class="line">存在两种不同的拆分方法：</span><br><span class="line">第 1 种，将数组 nums 拆分成 [2, 1] 和 [3] 。</span><br><span class="line">第 2 种，将数组 nums 拆分成 [2] 和 [1, 3] 。</span><br><span class="line">然而，这两种方法都不满足题意。因此，答案为 false 。</span><br></pre></td></tr></table></figure><h4 id="算法分析">算法分析</h4><h5 id="剥洋葱">剥洋葱</h5><p>根据题意的理解，可以很容易知道</p><ul><li>对于长度低于3的数组，那就是满足，早晚能拆分成两个子数组长度为1</li><li>对于长度&gt;=3的数组，一层一层剥洋葱，每次删除首尾元素的其中一个，变成一个元素+一个子数组。最终我们一定能剥到只剩下两个元素的数组，只要这两个元素&gt;=m那么其它全部包含这两个元素的子数组都符合条件。</li></ul><p>于是问题转化为，找是否存在相邻两个元素之和&gt;=m</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canSplitArray</span><span class="params">(List&lt;Integer&gt; nums, <span class="type">int</span> m)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//有连续两个数字&gt;m就成</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums.get(i-<span class="number">1</span>) + nums.get(i) &gt;= m)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;判断是否能拆分数组&quot;&gt;&lt;a
href=&quot;https://leetcode.cn/problems/check-if-it-is-possible-to-split-array/&quot;&gt;2811.
判断是否能拆分数组&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;给你一个长度为 &lt;co</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="脑筋急转弯" scheme="https://vlsmhd.github.io/categories/leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>java面试整理</title>
    <link href="https://vlsmhd.github.io/2023/07/31/java%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/"/>
    <id>https://vlsmhd.github.io/2023/07/31/java%E9%9D%A2%E8%AF%95%E6%95%B4%E7%90%86/</id>
    <published>2023-07-31T09:19:49.814Z</published>
    <updated>2023-09-12T08:33:04.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础语法">基础语法</h1><h2 id="基本数据类型">基本数据类型</h2><h3 id="几种基本数据类型">几种基本数据类型</h3><p>8种数据类型：</p><ul><li>6 种数字类型：<ul><li>4种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li><li>2 种浮点型：<code>float</code>、<code>double</code></li></ul></li><li>1 种字符类型：<code>char</code></li><li>1 种布尔型：<code>boolean</code>。</li></ul><p>它们所占空间：</p><p><a id="基本类型表"></a></p><table><colgroup><col style="width: 12%" /><col style="width: 5%" /><col style="width: 17%" /><col style="width: 9%" /><col style="width: 56%" /></colgroup><thead><tr class="header"><th style="text-align: left;">基本类型</th><th style="text-align: left;">位数</th><th style="text-align: left;">字节</th><th style="text-align: left;">默认值</th><th>取值范围</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>byte</code></td><td style="text-align: left;">8</td><td style="text-align: left;">1</td><td style="text-align: left;">0</td><td>-128 ~ 127</td></tr><tr class="even"><td style="text-align: left;"><code>short</code></td><td style="text-align: left;">16</td><td style="text-align: left;">2</td><td style="text-align: left;">0</td><td>-32768 ~ 32767</td></tr><tr class="odd"><td style="text-align: left;"><code>int</code></td><td style="text-align: left;">32</td><td style="text-align: left;">4</td><td style="text-align: left;">0</td><td>-2147483648 ~ 2147483647</td></tr><tr class="even"><td style="text-align: left;"><code>long</code></td><td style="text-align: left;">64</td><td style="text-align: left;">8</td><td style="text-align: left;">0L</td><td>-9223372036854775808 ~ 9223372036854775807</td></tr><tr class="odd"><td style="text-align: left;"><code>char</code></td><td style="text-align: left;">16</td><td style="text-align: left;">2</td><td style="text-align: left;">'u0000'</td><td>0 ~ 65535</td></tr><tr class="even"><td style="text-align: left;"><code>float</code></td><td style="text-align: left;">32</td><td style="text-align: left;">4</td><td style="text-align: left;">0f</td><td>1.4E-45 ~ 3.4028235E38</td></tr><tr class="odd"><td style="text-align: left;"><code>double</code></td><td style="text-align: left;">64</td><td style="text-align: left;">8</td><td style="text-align: left;">0d</td><td>4.9E-324 ~ 1.7976931348623157E308</td></tr><tr class="even"><td style="text-align: left;"><code>boolean</code></td><td style="text-align: left;">1</td><td style="text-align: left;">依赖于JVM厂商</td><td style="text-align: left;">false</td><td>true、false</td></tr></tbody></table><p>跨平台特性也有一部分原因是因为java里基础类型大小不变的这一特性。</p><h3 id="基本类型和包装类型的区别">基本类型和包装类型的区别</h3><p><strong>用途：</strong></p><p>基本类型：常量的设定、局部变量</p><p>包装类型：包装类型可用于泛型、方法参数、对象属性等</p><p><strong>存储类型：</strong></p><p>基本类型：</p><ul><li>局部变量存放在 Java <strong>虚拟机栈</strong>中的局部变量表中。</li><li>成员变量放在堆中</li></ul><p>包装类型：属于对象类型，几乎都在堆里。</p><p><strong>占用空间：</strong></p><p>包装 &gt; 基本</p><p><strong>默认值：</strong></p><p>包装：不赋值就是null 基本：都有基础默认值，具体见<ahref="#基本类型表">上表</a>。</p><p><strong>比较方式：</strong></p><p>基本数据类型：==<code>比较的是值。</code></p><p>包装数据类型：<code>==</code>比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用<code>equals()</code> 方法。</p><h3 id="包装类型的缓存机制">包装类型的缓存机制</h3><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。</p><p><code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code>这 4 种包装类默认创建了数值 <strong>[-128，127]</strong>的相应类型的缓存数据，<code>Character</code> 创建了数值在<strong>[0,127]</strong> 范围的缓存数据，<code>Boolean</code> 直接返回<code>True</code> or <code>False</code>。</p><p><strong><code>Character</code> 缓存源码:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Character <span class="title function_">valueOf</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (c &lt;= <span class="number">127</span>) &#123; <span class="comment">// must cache</span></span><br><span class="line">      <span class="keyword">return</span> CharacterCache.cache[(<span class="type">int</span>)c];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Character</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CharacterCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">CharacterCache</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Character cache[] = <span class="keyword">new</span> <span class="title class_">Character</span>[<span class="number">127</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; cache.length; i++)</span><br><span class="line">            cache[i] = <span class="keyword">new</span> <span class="title class_">Character</span>((<span class="type">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Integer 缓存源码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// high value may be configured by property</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>值比较：对于Integer类型，处在[-128 ,127]之间的值可以用==比较，因为就在缓存中，可以复用。而以外的值会存放在堆中，不会复用已有的对象，推荐用equals比较。</li></ul><p>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。</p><h3 id="自动装箱与拆箱">自动装箱与拆箱</h3><ul><li><strong>装箱</strong>：将基本类型用它们对应的引用类型包装起来；</li><li><strong>拆箱</strong>：将包装类型转换为基本数据类型；</li></ul><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;  <span class="comment">//装箱   Integer.valueOf </span></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> i;   <span class="comment">//拆箱Integer.intValue</span></span><br></pre></td></tr></table></figure><p>解析字节码文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">L1</span><br><span class="line"></span><br><span class="line">   LINENUMBER 8 L1</span><br><span class="line"></span><br><span class="line">   ALOAD 0</span><br><span class="line"></span><br><span class="line">   BIPUSH 10</span><br><span class="line"></span><br><span class="line">   INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">   PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">  L2</span><br><span class="line"></span><br><span class="line">   LINENUMBER 9 L2</span><br><span class="line"></span><br><span class="line">   ALOAD 0</span><br><span class="line"></span><br><span class="line">   ALOAD 0</span><br><span class="line"></span><br><span class="line">   GETFIELD AutoBoxTest.i : Ljava/lang/Integer;</span><br><span class="line"></span><br><span class="line">   INVOKEVIRTUAL java/lang/Integer.intValue (I)</span><br><span class="line"></span><br><span class="line">   PUTFIELD AutoBoxTest.n : I</span><br><span class="line"></span><br><span class="line">   RETURN</span><br></pre></td></tr></table></figure><h3 id="浮点数运算的精度丢失">浮点数运算的精度丢失</h3><p>计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。</p><p>解决：</p><p>使用BigDecimal</p><h2 id="变量">变量</h2><h3 id="成员变量与局部变量的区别">成员变量与局部变量的区别</h3><p><strong>语法：</strong></p><ul><li>成员变量：属于类、可被权限修饰符修饰</li><li>局部变量：代码块、方法区、方法参数等</li></ul><p><strong>存储方式：</strong></p><ul><li>成员变量：<ul><li>使用static修饰：属于类</li><li>不使用：属于对象，在堆里存储</li></ul></li><li>局部变量：<strong>存在于栈内存</strong>。</li></ul><p><strong>生命周期：</strong></p><ul><li>成员变量：和对象的生存时间一致</li><li>局部变量：方法调用开始 -&gt; 结束、或者代码块执行结束</li></ul><p><strong>默认值：</strong></p><ul><li>成员变量：按默认值赋值</li><li>局部变量：必须手动赋值</li></ul><h2 id="方法">方法</h2><h3id="静态方法为什么不能调用非静态成员">静态方法为什么不能调用非静态成员</h3><ol type="1"><li>静态方法属于类，在类加载的时候就分配栈内存，可以用类名直接访问，但是非静态成员是对象的信息范畴，必须创建对象实例才能访问。</li><li>在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。</li></ol><h3 id="重载和重写有什么区别">重载和重写有什么区别</h3><p>重载就是同样的一个方法能够根据输入输出数据类型的不同，做出不同的处理</p><p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要<strong>覆盖</strong>父类方法</p><h4 id="重载">重载</h4><p>发生在同一个类中（或者父类和子类之间），<strong>方法名必须相同</strong>，<strong>参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符</strong>可以不同。</p><table><colgroup><col style="width: 12%" /><col style="width: 10%" /><col style="width: 76%" /></colgroup><thead><tr class="header"><th style="text-align: left;">区别点</th><th style="text-align: left;">重载方法</th><th style="text-align: left;">重写方法</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">发生范围</td><td style="text-align: left;">同一个类</td><td style="text-align: left;">子类</td></tr><tr class="even"><td style="text-align: left;">参数列表</td><td style="text-align: left;">必须修改</td><td style="text-align: left;">一定不能修改</td></tr><tr class="odd"><td style="text-align: left;">返回类型</td><td style="text-align: left;">可修改</td><tdstyle="text-align: left;">子类方法返回值类型应比父类方法返回值类型更小或相等（子类）</td></tr><tr class="even"><td style="text-align: left;">异常</td><td style="text-align: left;">可修改</td><tdstyle="text-align: left;">子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</td></tr><tr class="odd"><td style="text-align: left;">访问修饰符</td><td style="text-align: left;">可修改</td><tdstyle="text-align: left;">一定不能做更严格的限制（可以降低限制）</td></tr><tr class="even"><td style="text-align: left;">发生阶段</td><td style="text-align: left;">编译期</td><td style="text-align: left;">运行期</td></tr></tbody></table><h3id="深拷贝和浅拷贝区别什么是引用拷贝">深拷贝和浅拷贝区别，什么是引用拷贝？</h3><p><strong>浅拷贝</strong>：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象<strong>内部的属性是引用类型</strong>的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象<strong>共用</strong>同一个内部对象。</p><p><strong>深拷贝</strong>：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。</p><figure><img src="java面试整理/shallow&amp;deep-copy.png"alt="浅拷贝、深拷贝、引用拷贝示意图" /><figcaptionaria-hidden="true">浅拷贝、深拷贝、引用拷贝示意图</figcaption></figure><h2 id="object">Object</h2><h3 id="常见方法">常见方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，用于创建并返回当前对象的一份拷贝。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例被垃圾回收器回收的时候触发的操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="和-equals-的区别">== 和 equals() 的区别</h3><p>==：</p><ul><li>基本类型：比值</li><li>引用类型：<code>==</code> 比较的是对象的内存地址。</li></ul><blockquote><p>对于 ==来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。</p></blockquote><p>equals()：只能用来判断两个对象是否相等。</p><ul><li><strong>类没有重写<code>equals()</code>方法</strong>：通过<code>equals()</code>比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是<code>Object</code>类<code>equals()</code>方法。</li><li><strong>类重写了 <code>equals()</code>方法</strong>：一般我们都重写<code>equals()</code>方法来比较两个对象中的<strong>属性</strong>是否相等；若它们的属性相等，则返回true(即，认为这两个对象相等)。</li></ul><h4 id="string的equals方法">String的equals()方法</h4><p>String类的equals()方法被重写过，会判断两个字符串的值是否相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>[] value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object anObject)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">anotherString</span> <span class="operator">=</span> (String)anObject;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="type">char</span> v1[] = value;</span><br><span class="line">            <span class="type">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="hashcode-方法">hashCode() 方法</h3><p>方法是本地方法，利用C / C++实现。</p><p>作用：为每个对象生成独特的编码，确定对象在哈希表中的索引，方便从哈希表中快速查找。</p><h4 id="hashcode存在的意义">hashCode存在的意义</h4><p>“<code>HashSet</code> 如何检查重复”</p><blockquote><p>当你把对象加入 <code>HashSet</code> 时，<code>HashSet</code>会先计算对象的 <code>hashCode</code>值来判断对象加入的位置，同时也会与其他已经加入的对象的<code>hashCode</code> 值作比较，如果没有相符的<code>hashCode</code>，<code>HashSet</code>会假设对象没有重复出现。但是如果发现有相同 <code>hashCode</code>值的对象，这时会调用 <code>equals()</code> 方法来检查<code>hashCode</code>相等的对象是否真的相同。如果两者相同，<code>HashSet</code>就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了<code>equals</code> 的次数，相应就大大提高了执行速度。</p></blockquote><p>hashcode()其实也是用于判断两个对象是否相同，如果两个对象连哈希码都不相同，那就不用进行equals比较了。在一定程度上提高了集合审查元素的效率。</p><p><strong>为什么hashcode()过后还要equals比较？</strong></p><p>hashcode可能会发生哈希冲突，所以保险起见，满足这两个方法这两个对象就是相同的。</p><ul><li>hashcode() &amp;&amp; equals : 相同</li><li>!hashcode() ： 一定不相同。</li></ul><p>所以说，重写equals方法也必须重写hashcode方法，防止出现两个对象equal但是hashcode值不一样。</p><h2 id="string">String</h2><h3id="stringstringbufferstringbuilder-的区别">String、StringBuffer、StringBuilder的区别</h3><p>可变性：</p><ul><li>String不可变</li><li><code>StringBuilder</code> 与 <code>StringBuffer</code> 都继承自<code>AbstractStringBuilder</code> 类，在<code>AbstractStringBuilder</code>中也是使用字符数组保存字符串，不过没有使用 <code>final</code> 和<code>private</code> 关键字修饰，最关键的是这个<code>AbstractStringBuilder</code> 类还提供了很多修改字符串的方法比如<code>append</code> 方法。</li></ul><p>线程安全性：</p><ul><li><p><code>String</code>中的对象是不可变的，也就可以理解为常量，线程安全。</p></li><li><p><code>StringBuffer</code>对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。</p></li><li><p><code>StringBuilder</code>并没有对方法进行加同步锁，所以是非线程安全的。</p></li></ul><p>性能：</p><p>StringBuilder &gt; StringBuffer</p><ol type="1"><li>操作少量的数据: 适用 <code>String</code></li><li>单线程操作字符串缓冲区下操作大量数据: 适用<code>StringBuilder</code></li><li>多线程操作字符串缓冲区下操作大量数据: 适用<code>StringBuffer</code></li></ol><h3 id="string-为什么是不可变的">String 为什么是不可变的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">String</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol type="1"><li>final修饰内部的char数组，即使这个char引用指针能变，但这个成员变量是私有的，不会暴露给外界。</li><li><code>String</code> 类被 <code>final</code>修饰导致其不能被继承，进而避免了子类破坏 <code>String</code>不可变。</li></ol><h3 id="字符串拼接用-还是-stringbuilder">字符串拼接用“+” 还是StringBuilder</h3><p>Java 语言本身并不支持运算符重载，“+”和“+=”是专门为 String类重载过的运算符，也是 Java 中仅有的两个重载过的运算符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;he&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;llo&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">str4</span> <span class="operator">=</span> str1 + str2 + str3;</span><br></pre></td></tr></table></figure><figure><img src="java面试整理/image-20220422161637929.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>字符串对象通过“+”的字符串拼接方式，实际上是通过<code>StringBuilder</code> 调用 <code>append()</code>方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个<code>String</code> 对象 。</p><h3 id="字符串常量池的作用">字符串常量池的作用</h3><p><strong>字符串常量池</strong> 是 JVM为了提升性能和减少内存消耗针对字符串（String类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p><h4 id="string-s1-new-stringabc这句话创建了几个字符串对象">String s1 =new String("abc");这句话创建了几个字符串对象</h4><ol type="1"><li>如果常量池没有"abc"这个字符串，会先创建"abc"实例，然后再创建s1引用对象</li><li>如果有，只创建s1引用对象</li></ol><h3 id="stringintern-方法有什么作用">String#intern 方法有什么作用</h3><p><code>String.intern()</code> 是一个native（本地）方法，其作用是<strong>将指定的字符串对象的引用保存在字符串常量池</strong>中</p><ul><li>如果字符串常量池中保存了对应的字符串对象的引用，就直接返回该引用。</li><li>如果字符串常量池中没有保存对应的字符串对象的引用，那就在常量池中创建一个指向该字符串对象的引用并返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在堆中创建字符串对象”Java“</span></span><br><span class="line"><span class="comment">// 将字符串对象”Java“的引用保存在字符串常量池中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Java&quot;</span>;</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s1.intern();</span><br><span class="line"><span class="comment">// 在堆中在单独创建一个字符串对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"><span class="comment">// 直接返回字符串常量池中字符串对象”Java“对应的引用，不同于s3，这是往常量池找</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> s3.intern();</span><br><span class="line"><span class="comment">// s1 和 s2 指向的是堆中的同一个对象</span></span><br><span class="line">System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// s3 和 s4 指向的是堆中不同的对象</span></span><br><span class="line">System.out.println(s3 == s4); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// s1 和 s4 指向的是堆中的同一个对象</span></span><br><span class="line">System.out.println(s1 == s4); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="string-类型的变量和常量做运算时发生了什么">String类型的变量和常量做“+”运算时发生了什么</h3><p>对于<strong>编译期可以确定值的字符串</strong>，也就是常量字符串（被写死的值），jvm 会将其存入字符串常量池。</p><p>并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化——常量折叠。</p><p><strong>常量折叠：</strong></p><p>对于 <code>String str3 = "str" + "ing";</code> 编译器会给你优化成<code>String str3 = "string";</code> 。</p><p>引用类型的值无法在编译器确定，无法优化。</p><p>对象引用和“+”的字符串拼接方式，实际上是通过<code>StringBuilder</code> 调用 <code>append()</code>方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个<code>String</code> 对象 。</p><p>但是String引用类型被final修饰后，可以让编译器当成常量处理。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line"><span class="comment">// 下面两个表达式其实是等价的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">// 常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> str1 + str2; <span class="comment">// 常量池中的对象</span></span><br><span class="line">System.out.println(c == d);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>如果，编译器在运行时才能知道其确切值的话，就无法对其优化。下面就不行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> getStr();</span><br><span class="line"><span class="type">String</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;str&quot;</span> + <span class="string">&quot;ing&quot;</span>;<span class="comment">// 常量池中的对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">d</span> <span class="operator">=</span> str1 + str2; <span class="comment">// 在堆上创建的新的对象</span></span><br><span class="line">System.out.println(c == d);<span class="comment">// false</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStr</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;ing&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常">异常</h2><p><strong>Java 异常类层次结构图</strong></p><figure><img src="java面试整理/image-20230802210612642.png"alt="image-20230802210612642" /><figcaption aria-hidden="true">image-20230802210612642</figcaption></figure><h3 id="exception-和-error-有什么区别">Exception 和 Error有什么区别</h3><ul><li><p>Exception：可catch捕获、可处理</p><ul><li><p>Checked Exception (受检查异常，必须处理)：没被catch通不过编译。</p><ul><li>(除了运行时异常以外，都是受查异常)</li></ul></li><li><p>Unchecked Exception (不受检查异常，可以不处理)：</p><ul><li><p>常见的非受查异常：</p><ul><li><p><code>NullPointerException</code>(空指针错误)</p></li><li><p><code>IllegalArgumentException</code>(参数错误比如方法入参类型错误)</p></li><li><p><code>NumberFormatException</code>（字符串转换为数字格式错误，<code>IllegalArgumentException</code>的子类）</p></li><li><p><code>ArrayIndexOutOfBoundsException</code>（数组越界错误）</p></li><li><p><code>ClassCastException</code>（类型转换错误）</p></li><li><p><code>ArithmeticException</code>（算术错误）</p></li><li><p><code>SecurityException</code> （安全错误比如权限不够）</p></li><li><p><code>UnsupportedOperationException</code>(不支持的操作错误比如重复创建同一用户)</p></li></ul></li></ul></li></ul></li><li><p>error：不建议catch捕获，遇到线程终止处理。</p><ul><li>常见：OOM、SOF</li></ul></li></ul><h3 id="throwable-类常用方法有哪些">Throwable 类常用方法有哪些</h3><ul><li><code>String getMessage()</code>: 返回异常发生时的简要描述</li><li><code>String toString()</code>: 返回异常发生时的详细信息</li><li><code>String getLocalizedMessage()</code>:返回异常对象的本地化信息。使用 <code>Throwable</code>的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与<code>getMessage()</code>返回的结果相同</li><li><code>void printStackTrace()</code>: 在控制台上打印<code>Throwable</code> 对象封装的异常信息</li></ul><h3 id="try-catch-finally-使用">try-catch-finally 使用</h3><ul><li><code>try</code>块：用于捕获异常。其后可接零个或多个<code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个<code>finally</code> 块。</li><li><code>catch</code>块：用于处理 try 捕获到的异常。</li><li><code>finally</code>块：无论是否捕获或处理异常，<code>finally</code>块里的语句<strong>都会被执行</strong>。<ul><li>当在 <code>try</code> 块或 <code>catch</code> 块中遇到<code>return</code> 语句时，<code>finally</code>语句块将在方法返回之前被执行。</li><li><strong>注意：不要在 finally 语句块中使用 return!</strong> 当 try语句和 finally 语句中都有 return 语句时，try 语句块中的 return语句会被忽略。这是因为 try 语句中的 return返回值会先被暂存在一个<strong>本地变量</strong>中，当执行到 finally语句中的 return 之后，会覆盖掉try块里的return返回值。</li></ul></li></ul><h3 id="finally-中的代码是否一定会执行">finally中的代码是否一定会执行</h3><p>基本上都是外界环境出问题所导致的：</p><ol type="1"><li>finally 之前虚拟机被终止运行的话，finally中的代码就不会被执行。</li><li>程序所在的线程死亡。</li><li>CPU关闭</li></ol><h3 id="使用-try-with-resources-代替try-catch-finally">使用<code>try-with-resources</code> 代替<code>try-catch-finally</code></h3><ul><li><strong>适用范围（资源的定义）：</strong> 任何实现<code>java.lang.AutoCloseable</code>或者 <code>java.io.Closeable</code>的对象</li><li><strong>关闭资源和 finally 块的执行顺序：</strong> 在<code>try-with-resources</code> 语句中，任何 catch 或 finally块在声明的资源关闭后运行。</li></ul><p>类似于<code>InputStream</code>、<code>OutputStream</code>、<code>Scanner</code>、<code>PrintWriter</code>等的资源都需要我们调用<code>close()</code>方法来手动关闭，一般情况下我们都是通过<code>try-catch-finally</code>语句来实现这个需求，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取文本文件的内容</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    scanner = <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D://read.txt&quot;</span>));</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (scanner != <span class="literal">null</span>) &#123;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 Java 7 之后的 <code>try-with-resources</code>语句改造上面的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">        System.out.println(scanner.nextLine());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException fnfe) &#123;</span><br><span class="line">    fnfe.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个资源需要关闭的时候，使用 <code>try-with-resources</code>实现，通过使用分号分隔，可以在<code>try-with-resources</code>块中声明多个资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">     <span class="type">BufferedOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;out.txt&quot;</span>)))) &#123;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line">    <span class="keyword">while</span> ((b = bin.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bout.write(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3id="异常使用有哪些需要注意的地方">异常使用有哪些需要注意的地方？</h3><ul><li>不要把异常定义为静态变量，因为这样会导致异常栈信息错乱。每次手动抛出异常，我们都需要手动new 一个异常对象抛出。</li><li>抛出的异常信息一定要有意义。</li><li>建议抛出更加具体的异常比如字符串转换为数字格式错误的时候应该抛出<code>NumberFormatException</code>而不是其父类<code>IllegalArgumentException</code>。</li><li>使用日志打印异常之后就不要再抛出异常了（两者不要同时存在一段代码逻辑中）。</li></ul><h2 id="泛型">泛型</h2><h3 id="泛型的使用方式">泛型的使用方式</h3><h4 id="泛型类">泛型类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Generic</span>&lt;T&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Generic</span><span class="params">(T key)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getKey</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型接口">泛型接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Generator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，不指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现泛型接口，指定类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GeneratorImpl</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Generator</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型方法">泛型方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">( E[] inputArray )</span></span><br><span class="line"> &#123;</span><br><span class="line">       <span class="keyword">for</span> ( E element : inputArray )&#123;</span><br><span class="line">          System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组：Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">String[] stringArray = &#123; <span class="string">&quot;Hello&quot;</span>, <span class="string">&quot;World&quot;</span> &#125;;</span><br><span class="line">printArray( intArray  );</span><br><span class="line">printArray( stringArray  );</span><br></pre></td></tr></table></figure><blockquote><p>注意:<code>public static &lt; E &gt; void printArray( E[] inputArray )</code>一般被称为静态泛型方法;在 java中泛型只是一个占位符，必须在传递类型后才能使用。类在实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，也就是说类中的泛型还没有传递真正的类型参数，静态的方法的加载就已经完成了，所以静态泛型方法是没有办法使用类上声明的泛型的。只能使用自己声明的<code>&lt;E&gt;</code></p></blockquote><h3 id="项目中哪里用到了泛型">项目中哪里用到了泛型</h3><ul><li>自定义接口通用返回结果 <code>CommonResult&lt;T&gt;</code> 通过参数<code>T</code> 可根据具体的返回类型动态指定结果的数据类型</li><li>定义 <code>Excel</code> 处理类 <code>ExcelUtil&lt;T&gt;</code>用于动态指定 <code>Excel</code> 导出的数据类型</li><li>构建集合工具类（参考 <code>Collections</code> 中的<code>sort</code>, <code>binarySearch</code> 方法）。</li></ul><h2 id="反射">反射</h2><h3 id="获取-class-对象的四种方式">获取 Class 对象的四种方式</h3><p>利用class类对象，将一个类的方法、变量信息提取出来。</p><ol type="1"><li><p>知道具体类情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> TargetObject.class;</span><br></pre></td></tr></table></figure></li><li><p><strong>通过<code>Class.forName()</code>传入类的全路径获取：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass1</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>通过对象实例<code>instance.getClass()</code>获取：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TargetObject</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TargetObject</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">alunbarClass2</span> <span class="operator">=</span> o.getClass();</span><br></pre></td></tr></table></figure></li><li><p><strong>通过类加载器<code>xxxClassLoader.loadClass()</code>传入类路径获取:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader.getSystemClassLoader().loadClass(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="反射基本操作">反射基本操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TargetObject</span> &#123;</span><br><span class="line">       <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="title function_">TargetObject</span><span class="params">()</span> &#123;</span><br><span class="line">           value = <span class="string">&quot;JavaGuide&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publicMethod</span><span class="params">(String s)</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;I love &quot;</span> + s);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">privateMethod</span><span class="params">()</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;value is &quot;</span> + value);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Class&lt;?&gt; targetClass = Class.forName(<span class="string">&quot;cn.javaguide.TargetObject&quot;</span>);</span><br><span class="line">   <span class="type">TargetObject</span> <span class="variable">targetObject</span> <span class="operator">=</span> (TargetObject) targetClass.newInstance();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取 TargetObject 类中定义的所有方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Method[] methods = targetClass.getDeclaredMethods();</span><br><span class="line">   <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">       System.out.println(method.getName());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取指定方法并调用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">Method</span> <span class="variable">publicMethod</span> <span class="operator">=</span> targetClass.getDeclaredMethod(<span class="string">&quot;publicMethod&quot;</span>,</span><br><span class="line">           String.class);</span><br><span class="line"></span><br><span class="line">   publicMethod.invoke(targetObject, <span class="string">&quot;JavaGuide&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取指定参数并对参数进行修改</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> targetClass.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">   <span class="comment">//为了对类中的参数进行修改我们取消安全检查</span></span><br><span class="line">   field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">   field.set(targetObject, <span class="string">&quot;JavaGuide&quot;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 调用 private 方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="type">Method</span> <span class="variable">privateMethod</span> <span class="operator">=</span> targetClass.getDeclaredMethod(<span class="string">&quot;privateMethod&quot;</span>);</span><br><span class="line">   <span class="comment">//为了调用private方法我们取消安全检查</span></span><br><span class="line">   privateMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">   privateMethod.invoke(targetObject);</span><br></pre></td></tr></table></figure><p>​</p><h2 id="注解">注解</h2><p><code>Annotation</code> （注解） 是 Java5开始引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p><p>注解本质是一个继承了<code>Annotation</code> 的特殊接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Override</span> <span class="keyword">extends</span> <span class="title class_">Annotation</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解的解析方法有哪几种">注解的解析方法有哪几种</h3><p>注解只有被解析之后才会生效，常见的解析方法有两种：</p><ul><li><strong>编译期直接扫描</strong>：编译器在编译 Java代码的时候扫描对应的注解并处理，比如某个方法使用<code>@Override</code>注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</li><li><strong>运行期通过反射处理</strong>：像框架中自带的注解(比如 Spring框架的<code>@Value</code>、<code>@Component</code>)都是通过反射来进行处理的。</li></ul><h3 id="spi">SPI</h3><p>SPI 即 Service Provider Interface，字面意思就是：“服务提供者的接口”。我的理解是：自己能做的东西，做明白的东西外包</p><p>与API的区别：</p><figure><imgsrc="java面试整理/1ebd1df862c34880bc26b9d494535b3dtplv-k3u1fbpfcp-watermark.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h2 id="序列化和反序列化">序列化和反序列化</h2><ul><li><strong>序列化</strong>：将数据结构或对象转换成二进制字节流的过程</li><li><strong>反序列化</strong>：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li></ul><p>应用场景：</p><ul><li>对象在进行网络传输（比如远程方法调用 RPC的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；</li><li>将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；</li><li>将对象存储到数据库（如Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；</li><li>将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。</li></ul><p>序列化属于OSI七层模型的应用层。</p><p><strong>对某些字段不进行序列化：</strong></p><p>使用 <code>transient</code> 关键字修饰。</p><p><code>transient</code>关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被<code>transient</code> 修饰的变量值不会被持久化和恢复。</p><p>关于 <code>transient</code> 还有几点注意：</p><ul><li><code>transient</code> 只能修饰变量，不能修饰类和方法。</li><li><code>transient</code>修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰<code>int</code> 类型，那么反序列后结果就是 <code>0</code>。</li><li><code>static</code> 变量因为不属于任何对象(Object)，所以无论有没有<code>transient</code> 关键字修饰，均不会被序列化。</li></ul><h2 id="语法糖">语法糖</h2><p>方便程序员开发程序而设计的一种特殊语法——语法糖。</p><p>主要有泛型、自动拆装箱、变长参数、枚举、内部类、增强 for循环、try-with-resources 语法、lambda 表达式等。</p><p>JVM 其实并不能识别语法糖，Java语法糖要想被正确执行，需要先通过编译器进行<strong>解糖</strong>，编译阶段变成可识别的语法。</p><h1 id="集合">集合</h1><p>集合框架族：</p><figure><img src="java面试整理/java-collection-hierarchy.png"alt="Java 集合框架概览" /><figcaption aria-hidden="true">Java 集合框架概览</figcaption></figure><h2 id="list">List</h2><h3 id="arraylist">ArrayList</h3><h4 id="特性">特性</h4><ul><li>arrayList基于动态数组<ul><li>创建不用指定大小</li><li>动态扩容</li></ul></li><li>arrayList有丰富API</li><li>arrayList只能存储对象类型，不能存储基础类型。</li><li>arrayList可以存储空值。</li></ul><h4 id="各类操作的效率">各类操作的效率</h4><p>插入：</p><ul><li>头插：后面元素需要往后移动，复杂度O(n)</li><li>尾插：O(1)</li><li>中间插：随机位置的话，O(n/2) -&gt; O(n)</li><li>扩容：O(n)</li></ul><p>删除：</p><ul><li>头删：涉及移动元素，后面的元素移动到前面。O(n)</li><li>尾删：O(1)</li><li>中间删：O(n/2) -&gt; O(n)</li></ul><h4 id="源码分析">源码分析</h4><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>List&lt;E&gt;</code>：</li><li><code>RandomAccess</code>：标志接口，支持快速随机访问</li><li><code>Cloneable</code>：可进行深拷贝、浅拷贝</li><li><code>Serializable</code></li></ul><p>类图：</p><figure><img src="java面试整理/arraylist-class-diagram.png"alt="ArrayList 类图" /><figcaption aria-hidden="true">ArrayList 类图</figcaption></figure><h5 id="扩容机制">扩容机制</h5><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 默认初始容量大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_CAPACITY</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  *默认构造函数，使用初始容量10构造一个空列表(无参数构造)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 带初始容量参数的构造函数。（用户自己指定容量）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;<span class="comment">//初始容量大于0</span></span><br><span class="line">         <span class="comment">//创建initialCapacity大小的数组</span></span><br><span class="line">         <span class="built_in">this</span>.elementData = <span class="keyword">new</span> <span class="title class_">Object</span>[initialCapacity];</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;<span class="comment">//初始容量等于0</span></span><br><span class="line">         <span class="comment">//创建空数组</span></span><br><span class="line">         <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;<span class="comment">//初始容量小于0，抛出异常</span></span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                            initialCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *构造包含指定collection元素的列表，这些元素利用该集合的迭代器按顺序返回</span></span><br><span class="line"><span class="comment"> *如果指定的集合为null，throws NullPointerException。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">     elementData = c.toArray();</span><br><span class="line">     <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">         <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">         <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">             elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// replace with empty array.</span></span><br><span class="line">         <span class="built_in">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果创建的时候未指定大小，默认给一个空数组不占空间，然后真正用到的时候，比如添加第一个元素，会扩容到10</li></ul><p>add方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 将指定的元素追加到此列表的末尾。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line"><span class="comment">//添加元素之前，先调用ensureCapacityInternal方法</span></span><br><span class="line">     ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">     <span class="comment">//这里看到ArrayList添加元素的实质就相当于为数组赋值</span></span><br><span class="line">     elementData[size++] = e;</span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>ensureCapacityInternal()</code>方法，获取最小需求量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//得到最小扩容量</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureCapacityInternal</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           <span class="comment">// 获取默认的容量和传入参数的较大值</span></span><br><span class="line">         minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     ensureExplicitCapacity(minCapacity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>判断是否需要扩容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断是否需要扩容</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">ensureExplicitCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           <span class="comment">//调用grow方法进行扩容，调用此方法代表已经开始扩容了</span></span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>添加第一个元素，开始创建大小为10的数组</li><li>添加元素到第10个</li><li>add第11个元素，先执行<code>ensureCapacityInternal()</code>方法，，得知最小需求量已经为11，然后调用<code>ensureExplicitCapacity</code>方法判断是否需要扩容，发现11&gt; 原本的数量10，所以需要扩容。</li></ul><p>实际扩容方法<code>grow()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 要分配的最大数组大小</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ARRAY_SIZE</span> <span class="operator">=</span> Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * ArrayList扩容的核心方法。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">grow</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">     <span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">oldCapacity</span> <span class="operator">=</span> elementData.length;</span><br><span class="line">     <span class="comment">//将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">     <span class="comment">//位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">     <span class="type">int</span> <span class="variable">newCapacity</span> <span class="operator">=</span> oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">     <span class="comment">//然后检查新容量是否大于最小需要容量，若还是小于最小需要容量，那么就把最小需要容量当作数组的新容量，</span></span><br><span class="line">     <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 如果新容量大于 MAX_ARRAY_SIZE,进入(执行) `hugeCapacity()` 方法来比较 minCapacity 和 MAX_ARRAY_SIZE，</span></span><br><span class="line">    <span class="comment">//如果minCapacity大于最大容量，则新容量则为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`。</span></span><br><span class="line">     <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">         newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">     <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">     elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>当 add 第 1 个元素时，oldCapacity 为 0，经比较后第一个 if判断成立，newCapacity = minCapacity(为 10)。但是第二个 if判断不会成立，即 newCapacity 不比 MAX_ARRAY_SIZE 大，则不会进入<code>hugeCapacity</code> 方法。数组容量为 10，add 方法中 returntrue,size 增为 1。</li><li>当 add 第 11 个元素进入 grow 方法时，newCapacity 为 15，比minCapacity（为 11）大，第一个 if 判断不成立。新容量没有大于数组最大size，不会进入 hugeCapacity 方法。数组容量扩为 15，add 方法中 returntrue,size 增为 11。</li><li>以此类推······</li></ul><p><code>hugeCapacity()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">hugeCapacity</span><span class="params">(<span class="type">int</span> minCapacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">OutOfMemoryError</span>();</span><br><span class="line">    <span class="comment">//对minCapacity和MAX_ARRAY_SIZE进行比较</span></span><br><span class="line">    <span class="comment">//若minCapacity大，将Integer.MAX_VALUE作为新数组的大小</span></span><br><span class="line">    <span class="comment">//若MAX_ARRAY_SIZE大，将MAX_ARRAY_SIZE作为新数组的大小</span></span><br><span class="line">    <span class="comment">//MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;</span></span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">        MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linkedlist">LinkedList</h3><h4 id="特性-1">特性</h4><ul><li>底层双向链表。</li><li>每个元素存储额外的字段占用空间</li><li>头尾插入删除效率很高</li></ul><h4 id="各类操作的效率-1">各类操作的效率</h4><ul><li>头插头删、尾插尾删：O(1)</li><li>指定位置插入：O(n/2) -&gt; O(n)</li></ul><h3 id="linkedlist与arraylist区别">LinkedList与ArrayList区别</h3><p><strong>线程安全</strong></p><p>两者都不安全。</p><p><strong>内存</strong></p><ul><li>ArrayList空间浪费在扩容后预留的空间。</li><li>LinkedList空间浪费在每个结点的额外存储指针所占有的空间</li></ul><p><strong>快速随机访问</strong></p><p>快速随机访问就是通过元素的序号快速获取元素对象，如<code>get(int index)</code>方法</p><ul><li>LinkedList底层不是数组，不支持根据索引快速查找，所以随机访问的性能不高</li><li>ArrayList支持。</li></ul><p><strong>插入删除的位置是否受容器内部元素位置的影响</strong></p><ul><li>ArrayList：尾插无所谓，但是其它情况都是O(N)</li><li>LinkedList：头尾插都无所谓，中间插O(N)</li></ul><p><strong>底层数据结构</strong></p><p><code>ArrayList</code> 底层使用的是 <strong><code>Object</code>数组</strong>；</p><p><code>LinkedList</code> 底层使用的是 <strong>双向链表</strong>数据结构</p><h2 id="queue">Queue</h2><p><code>Queue</code>是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循<strong>先进先出（FIFO）</strong> 规则。</p><p><code>Queue</code> 扩展了 <code>Collection</code> 的接口，根据<strong>因为容量问题而导致操作失败后处理方式的不同</strong>可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。</p><table><thead><tr class="header"><th><code>Queue</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr class="odd"><td>插入队尾</td><td>add(E e)</td><td>offer(E e)</td></tr><tr class="even"><td>删除队首</td><td>remove()</td><td>poll()</td></tr><tr class="odd"><td>查询队首元素</td><td>element()</td><td>peek()</td></tr></tbody></table><p><code>Deque</code> 是双端队列，在队列的两端均可以插入或删除元素。</p><p><code>Deque</code> 扩展了 <code>Queue</code> 的接口,增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：</p><table><thead><tr class="header"><th><code>Deque</code> 接口</th><th>抛出异常</th><th>返回特殊值</th></tr></thead><tbody><tr class="odd"><td>插入队首</td><td>addFirst(E e)</td><td>offerFirst(E e)</td></tr><tr class="even"><td>插入队尾</td><td>addLast(E e)</td><td>offerLast(E e)</td></tr><tr class="odd"><td>删除队首</td><td>removeFirst()</td><td>pollFirst()</td></tr><tr class="even"><td>删除队尾</td><td>removeLast()</td><td>pollLast()</td></tr><tr class="odd"><td>查询队首元素</td><td>getFirst()</td><td>peekFirst()</td></tr><tr class="even"><td>查询队尾元素</td><td>getLast()</td><td>peekLast()</td></tr></tbody></table><p><code>Deque</code> 还提供有 <code>push()</code> 和 <code>pop()</code>等其他方法，可用于模拟栈.</p><h4 id="arraydeque-与-linkedlist-的区别">ArrayDeque 与 LinkedList的区别</h4><ul><li><code>ArrayDeque</code> 是基于可变长的数组和双指针来实现，而<code>LinkedList</code> 则通过链表来实现。</li><li><code>ArrayDeque</code> 不支持存储 <code>NULL</code> 数据，但<code>LinkedList</code> 支持。</li><li><code>ArrayDeque</code> 是在 JDK1.6才被引入的，而<code>LinkedList</code> 早在 JDK1.2 时就已经存在。</li><li><code>ArrayDeque</code> 插入时可能存在扩容过程,不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code>不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。</li></ul><p>arrayDeque性能高一点。</p><h2 id="map">Map</h2><h3 id="hashmap-和-hashtable-的区别">HashMap 和 Hashtable 的区别</h3><p><strong>线程安全：</strong></p><ul><li>hashmap线程不安全</li><li>hashtable整个表加锁</li></ul><p><strong>效率</strong>：</p><ul><li>hashmap正常</li><li>hashtable阳慢，建议不用</li></ul><p><strong>null key的支持：</strong></p><ul><li>hashmap支持单个null key，值的null可以有多个</li><li>hashtable不支持</li></ul><p><strong>默认容量、扩容：</strong></p><ul><li>hashmap默认容量：16 hashtable默认容量：11</li><li>给定容量：hashmap将给定的容量转化为最近的2的n次方幂，hashtable直接用。</li><li>hashmap达到负载因子扩容为原来的二倍，hashtable扩容为2n+1</li></ul><p>底层数据结构：</p><ul><li>hashmap：数组、链表|红黑树</li><li>hashtable：数组</li></ul><h3 id="hashmap-的长度为什么是-2-的幂次方">HashMap 的长度为什么是 2的幂次方</h3><p>假设hashmap的长度是n，假设元素的hash值已经计算就是hash。</p><p>如果要确定数据要存放的具体位置，通过<code>hash % n</code>这个公式计算。但是二进制计算的效率要比%效率高得多，那么把这个公式转换一下，就是<code>hash &amp; (n - 1)</code>。</p><p>但是有个大前提：<strong>数组长度必须是2的n次方。</strong>所以...</p><h3 id="hashmap-和-hashset-区别">HashMap 和 HashSet 区别</h3><p><code>HashSet</code> 底层就是基于 <code>HashMap</code> 实现的。</p><table><colgroup><col style="width: 38%" /><col style="width: 61%" /></colgroup><thead><tr class="header"><th style="text-align: center;"><code>HashMap</code></th><th style="text-align: center;"><code>HashSet</code></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">实现了 <code>Map</code> 接口</td><td style="text-align: center;">实现 <code>Set</code> 接口</td></tr><tr class="even"><td style="text-align: center;">存储键值对</td><td style="text-align: center;">仅存储对象</td></tr><tr class="odd"><td style="text-align: center;">调用 <code>put()</code>向 map中添加元素</td><td style="text-align: center;">调用 <code>add()</code>方法向<code>Set</code> 中添加元素</td></tr><tr class="even"><td style="text-align: center;"><code>HashMap</code> 使用键（Key）计算<code>hashcode</code></td><td style="text-align: center;"><code>HashSet</code> 使用成员对象来计算<code>hashcode</code> 值，对于两个对象来说 <code>hashcode</code>可能相同，所以<code>equals()</code>方法用来判断对象的相等性</td></tr></tbody></table><h3 id="hashset-如何检查重复">HashSet 如何检查重复</h3><p>添加对象的时候，hashset先计算对象的hashcode，通过hashcode判断对象要添加的位置在哪里，假如这个位置有空，添加进去，否则添加失败。（hashcode+ equals）</p><p>add源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回值：当 set 中没有包含 add 的元素时返回真</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="treemap-相比于hashmap特性">TreeMap 相比于HashMap特性</h3><figure><img src="java面试整理/treemap_hierarchy.png"alt="TreeMap 继承关系图" /><figcaption aria-hidden="true">TreeMap 继承关系图</figcaption></figure><p>实现 <code>NavigableMap</code> 接口有了对集合内元素的搜索的能力。</p><p>实现<code>SortedMap</code>接口让 <code>TreeMap</code>有了对集合中的元素<strong>根据键排序</strong>的能力</p><h3 id="hashmap-常见的遍历方式">HashMap 常见的遍历方式</h3><ol type="1"><li><p>使用迭代器（Iterator）EntrySet 的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;Integer, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;Integer, String&gt; entry = iterator.next();</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">    System.out.println(entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用迭代器（Iterator）KeySet 的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 For Each EntrySet 的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">    System.out.println(entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 For Each KeySet 的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key);</span><br><span class="line">    System.out.println(map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 Lambda 表达式的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.foreach((key,value) -&gt; &#123;</span><br><span class="line">System.out.println(key);</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用 Streams API 单线程的方式进行遍历；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.entrySet().stream().forEach((entry) -&gt; &#123;</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">    System.out.println(entry.getValue());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用 Streams API 多线程的方式进行遍历。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map.entrySet().parallelStream().forEach((entry) -&gt; &#123;</span><br><span class="line">    System.out.println(entry.getKey());</span><br><span class="line">    System.out.println(entry.getValue());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="hashmap底层源码实现">HashMap底层源码实现</h3><p>数据结构：</p><ul><li>1.8之前是数组+链表</li><li>1.8之后是数组+链表|红黑树<ul><li>树化：</li><li>退化：</li><li>树化阈值：</li><li>扩容</li></ul></li></ul><p>扰动函数：哈希表为了减少冲突所定义的一种函数。</p><p>hashcode()是每个对象都有的获取本身独一无二标识码的一种方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">      <span class="type">int</span> h;</span><br><span class="line">      <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">      <span class="comment">// ^：按位异或</span></span><br><span class="line">      <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">      <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="构造方法">构造方法：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all   other fields defaulted</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 包含另一个“Map”的构造函数</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">     </span><br><span class="line">     putMapEntries(m, <span class="literal">false</span>);<span class="comment">//下面会分析到这个方法</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 指定“容量大小”和“负载因子”的构造函数</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">         initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">     <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">     <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">     <span class="comment">// 初始容量暂时存放到 threshold ，在resize中再赋值给 newCap 进行table初始化</span></span><br><span class="line">     <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li><p>putMapEntries方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="literal">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 未初始化，s为m的实际元素个数，ft=s/loadFactor =&gt; s=ft*loadFactor, 跟我们前面提到的</span></span><br><span class="line"><span class="comment">             * 阈值=容量*负载因子 是不是很像，是的，ft指的是要添加s个元素所需的最小的容量</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> ((<span class="type">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> ((ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                    (<span class="type">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 根据构造函数可知，table未初始化，threshold实际上是存放的初始化容量，如果添加s个元素所</span></span><br><span class="line"><span class="comment">             * 需的最小容量大于初始化容量，则将最小容量扩容为最接近的2的幂次方大小作为初始化。</span></span><br><span class="line"><span class="comment">             * 注意这里不是初始化阈值</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 将m中的所有元素添加至HashMap中，如果table未初始化，putVal中会调用resize初始化或扩容</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet()) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="put方法">put方法</h4><p><img src="java面试整理/put.png" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">// table未初始化或者长度为0，进行扩容</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">// (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 桶中已经存在元素（处理hash冲突）</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">//快速判断第一个节点table[i]的key是否与插入的key一样，若相同就直接使用插入的值p替换掉旧的值e。</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// 判断插入的是否是红黑树节点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 不是红黑树节点则说明为链表结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在链表最末插入结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">// 到达链表的尾部</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 在尾部插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 结点数量达到阈值(默认为 8 )，执行 treeifyBin 方法</span></span><br><span class="line">                    <span class="comment">// 这个方法会根据 HashMap 数组来决定是否转换为红黑树。</span></span><br><span class="line">                    <span class="comment">// 只有当数组长度大于或者等于 64 的情况下，才会执行转换红黑树操作，以减少搜索时间。否则，就是只是对数组扩容。</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 判断链表中结点的key值与插入的元素的key值是否相等</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结构性修改</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 实际大小大于阈值则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get方法">get方法</h4><p>大致流程：</p><ol type="1"><li>根据key，调用hash方法算出hash码，然后通过哈希码hash调用内部方法getNode。</li><li>通过哈希码算出这个元素应在的位置，去这个位置寻找。</li><li>假如这个位置的第一个结点和要找的结点不一致：<ol type="1"><li>可能在链表结点中</li><li>可能在树节点中</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 数组元素相等</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 桶中不止一个节点</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 在树中get</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="comment">// 在链表中get</span></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resize扩容">resize扩容</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没超过最大值，就扩充为原来的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></span><br><span class="line">        <span class="comment">// 创建对象时初始化容量大小放在threshold中，此时只需要将其作为新的数组容量</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// signifies using defaults 无参构造函数创建的对象在这里计算容量和阈值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建时指定了初始化容量或者负载因子，在这里进行阈值初始化，</span></span><br><span class="line">    <span class="comment">// 或者扩容前的旧容量小于16，在这里计算新的resize上限</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ? (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">// 只有一个节点，直接计算元素新的位置即可</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">// 将红黑树拆分成2棵子树，如果子树节点数小于等于 UNTREEIFY_THRESHOLD（默认为 6），则将子树转换为链表。</span></span><br><span class="line">                    <span class="comment">// 如果子树节点数大于 UNTREEIFY_THRESHOLD，则保持子树的树结构。</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="并发编程">并发编程</h1><h2 id="基础概念">基础概念</h2><h3 id="进程">进程</h3><p>系统运行程序的基本单位。针对一个个的应用程序。</p><p>java应用程序进程：main()函数为入口，启动main函数就是启动了一个jvm进程。</p><h3 id="线程">线程</h3><p>粒度：比进程小，进程包含多个线程。</p><p>资源共享：共享进程的堆、方法区信息。每个线程有独立的程序计数器、虚拟机栈、本地方法栈。</p><h3 id="程序计数器为什么线程私有">程序计数器为什么线程私有</h3><p>一串代码可能交由多个线程去执行，然后单个CPU在运行多个线程的时候，是以时间片轮转调度来执行的，所以会有不间断的线程上下文的切换，那么每个线程必须要记录自己的代码执行到哪一行了，不然下次上下文切换到自己，自己不知道代码运行到哪就尴尬了。</p><p>主要就是为了：<strong>线程切换后能能恢复到正确的执行位置。</strong></p><h3id="虚拟机栈和本地方法栈为什么是私有的">虚拟机栈和本地方法栈为什么是私有的</h3><p><strong>虚拟机栈：</strong> 每个 Java方法在执行之前会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在Java 虚拟机栈中入栈和出栈的过程。</p><p><strong>本地方法栈：</strong>和虚拟机栈所发挥的作用非常相似，区别是：<strong>虚拟机栈为虚拟机执行Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native方法服务。</strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。</p><p>保证方法中的局部变量不会被其它执行的线程所影响。</p><h3 id="并发和并行">并发和并行</h3><p>并发：多个作业在同一时间段工作。单CPU运行多线程。</p><p>并行：多个作业在同一时刻工作。例如：多CPU运行多线程</p><h3 id="同步和异步">同步和异步</h3><p><strong>同步</strong>：发出一个调用之后，在没有得到结果之前，该调用就不可以返回，一直等待。</p><p><strong>异步</strong>：调用在发出之后，不用等待返回结果，该调用直接返回。</p><ul><li>提高系统响应能力的手段</li></ul><h3 id="线程的生命周期和状态">线程的生命周期和状态</h3><p>在java中，线程有如下6个状态：</p><ul><li>new：初始状态</li><li>runnable：运行态</li><li>waiting：等待状态</li><li>time_waiting：超时等待<ul><li>等待一段时间后，自动唤醒</li></ul></li><li>blocking：阻塞状态<ul><li>线程在没有锁的情况下，争抢被加锁的资源</li></ul></li><li>terminated：终止状态</li></ul><figure><img src="java面试整理/640-1692712751157-1.png"alt="Java 线程状态变迁图" /><figcaption aria-hidden="true">Java 线程状态变迁图</figcaption></figure><h4 id="java中线程状态与操作系统对比">java中线程状态与操作系统对比</h4><p>操作系统包含：</p><ul><li>ready：就绪态</li><li>running：运行态</li></ul><p>java仅有runnable态，原因：</p><p>现如今的时分系统，时间片精确到10~20ms，切换很快，没必要为每个线程再多拓展这两个状态，直接用runnable即可。</p><h3 id="线程的上下文切换">线程的上下文切换</h3><p>保留当前线程的上下文信息，留到下次切换该线程时做准备，并加载下一个要执行的线程的上下文信息。</p><h3 id="死锁">死锁</h3><p>定义：多个线程同时阻塞，都在等待某个资源被释放。线程被无限期终止，程序不可能停止。</p><figure><img src="java面试整理/2019-4死锁1.png" alt="线程死锁示意图" /><figcaption aria-hidden="true">线程死锁示意图</figcaption></figure><p>模拟死锁代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//资源 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">resource2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();<span class="comment">//资源 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>死锁的四大条件：</p><ol type="1"><li>互斥：该资源任意一个时刻只由一个线程占用。</li><li>请求与保持：线程请求其他资源阻塞的时候，会持有当前的资源不放</li><li>不剥夺：线程已获得的资源在未使用完之前不能被其他线程强行剥夺，只有自己使用完毕后才释放资源。</li><li>循环等待：若干线程之间形成一种头尾相接的循环等待资源关系。</li></ol><h4 id="避免死锁预防死锁">避免死锁、预防死锁</h4><p>预防：</p><ol type="1"><li><strong>破坏请求与保持条件</strong>：一次性申请所有的资源。</li><li><strong>破坏不剥夺条件</strong>：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。</li><li><strong>破坏循环等待条件</strong>：靠<strong>按序申请资源</strong>来预防。按某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。</li></ol><p>避免死锁：</p><p>资源分配的时候，对资源分配进行计算评估（银行家算法），使其进入安全状态。</p><blockquote><p><strong>安全状态</strong>指的是系统能够按照某种线程推进顺序（P1、P2、P3.....Pn）来为每个线程分配所需资源，直到满足每个线程对资源的最大需求，使每个线程都可顺利完成。称<code>&lt;P1、P2、P3.....Pn&gt;</code> 序列为安全序列。</p></blockquote><p>修改线程2的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (resource1) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;get resource1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread() + <span class="string">&quot;waiting get resource2&quot;</span>);</span><br><span class="line">                <span class="keyword">synchronized</span> (resource2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread() + <span class="string">&quot;get resource2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程 2&quot;</span>).start();</span><br></pre></td></tr></table></figure><h3 id="sleep方法与wait方法">sleep()方法与wait()方法</h3><p>两者都会暂停线程的运行，但是有很大区别：</p><table><colgroup><col style="width: 19%" /><col style="width: 30%" /><col style="width: 49%" /></colgroup><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: center;">sleep</th><th style="text-align: center;">wait</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">是否会释放锁</td><td style="text-align: center;">否</td><td style="text-align: center;">是</td></tr><tr class="even"><td style="text-align: left;">方法类型</td><td style="text-align: center;"><code>Thread</code>类的静态本地方法</td><td style="text-align: center;"><code>Object</code> 类的本地方法</td></tr><tr class="odd"><td style="text-align: left;">休眠后，如何唤醒</td><td style="text-align: center;">自动唤醒</td><td style="text-align: center;">botify()唤醒，或者使用wart(longtimeout)</td></tr><tr class="even"><td style="text-align: left;">用途</td><td style="text-align: center;">线程休眠</td><td style="text-align: center;">线程间交互通信</td></tr></tbody></table><h4 id="为什么wait是object方法">为什么wait是object方法：</h4><p>wait是想让线程释放某个对象锁，从而进入阻塞等锁状态，那我们操作目标应该是对象，而非线程本身。</p><h2 id="jmmjava-内存模型详解">JMM（Java 内存模型）详解</h2><h3 id="cpu缓存">CPU缓存</h3><p><strong>缓存：</strong>解决某两个或两个以上系统之间速度不匹配的问题。</p><ul><li><strong>CPU 缓存则是为了解决 CPU处理速度和内存处理速度不对等的问题。</strong></li><li><strong>内存就是外存的告诉缓存。</strong></li></ul><p>多核CPU下的缓存图：</p><figure><img src="java面试整理/cpu-cache-protocol.png" alt="缓存一致性协议" /><figcaption aria-hidden="true">缓存一致性协议</figcaption></figure><p>CPU cache的工作方式：先复制一份数据到 CPUcache中，然后需要时去里面取，进行运算，运算结束再写回到 MainMemory中。</p><p>但是会出现缓存不一致的问题。</p><p><strong>缓存不一致</strong>:通过协议规范解决</p><h3 id="指令重排序">指令重排序</h3><p>定义：系统在执行代码的过程中，会更改一些语句间的执行顺序（不会按照你写的顺序来），前提是保证语义正确的情况下。</p><ul><li><strong>指令重排序可以保证串行语义一致，但是没有义务保证多线程间的语义也一致</strong>，所以在多线程下，指令重排序可能会导致一些问题。</li></ul><p>种类：</p><ul><li>编译器优化重排：JVM、JIT等，</li><li>指令并行重排：指令级并行技术(Instruction-LevelParallelism，ILP)来将多条指令重叠执行</li></ul><p>Java 源代码会经历 <strong>编译器优化重排 —&gt; 指令并行重排 —&gt;内存系统重排</strong>，最后变成操作系统可执行的指令序列。</p><h3 id="jmm">JMM</h3><h4 id="jmm出现的意义">JMM出现的意义</h4><ol type="1"><li>java跨平台，那就要有自己的一套内存模型。因为不同的操作系统之间的内存结构都不一样。</li><li>java定义的一组并发编程的规范，里面有许多规范原则，简化了并发编程的开发。</li></ol><h4 id="jmm-如何抽象线程和主内存之间的关系">JMM如何抽象线程和主内存之间的关系</h4><p>类似CPU缓存。</p><figure><img src="java面试整理/jmm.png" alt="JMM(Java 内存模型)" /><figcaption aria-hidden="true">JMM(Java 内存模型)</figcaption></figure><p>把变量从主存中拷贝到自己的本地内存中，称为共享变量副本。</p><p>并发问题：当一个线程正在修改这个副本，还没有往主存中同步，但是另一个线程要取这个变量，但是它看到的变量还是自己刚刚拷贝的旧副本。</p><p><strong>主内存：</strong>所有线程创建的实例对象都存放在主内存中，不管该实例对象是成员变量还是方法中的本地变量(也称局部变量)</p><p><strong>本地内存：</strong>每个线程都有一个私有的本地内存来存储共享变量的<strong>副本</strong>，</p><ul><li>隔离性：每个线程只能访问自己的本地内存，无法访问其他线程的本地内存。</li></ul><p>线程间的通信步骤：</p><ol type="1"><li>线程 1把本地内存中修改过的共享变量副本的值<strong>同步</strong>到主内存中去。</li><li>线程 2 到主存中读取对应的共享变量的值。</li></ol><p><strong>主内存与工作内存（线程间私有内存）之间的通信协议</strong>：</p><p>同步操作：</p><ul><li><strong>锁定（lock）</strong>:作用于主内存中的变量，将他标记为一个线程独享变量。</li><li><strong>解锁（unlock）</strong>:作用于主内存中的变量，解除变量的锁定状态，被解除锁定状态的变量才能被其他线程锁定。</li><li><strong>read（读取）</strong>：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load 动作使用。</li><li><strong>load(载入)</strong>：把 read操作从主内存中得到的变量值放入工作内存的变量的副本中。</li><li><strong>use(使用)</strong>：把工作内存中的一个变量的值传给执行引擎，每当虚拟机遇到一个使用到变量的指令时都会使用该指令。</li><li><strong>assign（赋值）</strong>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</li><li><strong>store（存储）</strong>：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write 操作使用。</li><li><strong>write（写入）</strong>：作用于主内存的变量，它把 store操作从工作内存中得到的变量的值放入主内存的变量中。</li></ul><p>规则：</p><ul><li>不允许一个线程无原因地（没有发生过任何 assign操作）把数据从线程的工作内存同步回主内存中。</li><li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load 或assign）的变量，换句话说就是对一个变量实施 use 和 store操作之前，必须先执行过了 assign 和 load 操作。</li><li>一个变量在同一个时刻只允许一条线程对其进行 lock 操作，但 lock操作可以被同一条线程重复执行多次，多次执行 lock 后，只有执行相同次数的unlock 操作，变量才会被解锁。</li><li>如果对一个变量执行 lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load 或 assign 操作初始化变量的值。</li><li>如果一个变量事先没有被 lock 操作锁定，则不允许对它执行 unlock操作，也不允许去 unlock 一个被其他线程锁定住的变量。</li></ul><h4 id="设计思想">设计思想</h4><figure><img src="java面试整理/image-20220731155332375.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h3 id="happens-before-原则">happens-before 原则</h3><p>第一个逻辑时钟算法。</p><p>作用： happens-before原则的诞生是为了程序员和编译器、处理器之间的平衡。程序员追求的是易于理解和编程的强内存模型，遵守既定规则编码即可。编译器和处理器追求的是较少约束的弱内存模型，让它们尽己所能地去优化性能，让性能最大化。</p><p>设计思想：</p><ul><li>对于编译器、处理器的约束尽可能少，只要不改变程序执行结果，随便指令怎么排序都行</li><li>拒绝一切影响程序运行结果的指令重排序。</li></ul><p>运用：</p><p>1 happens-before 2</p><ul><li>表层含义：1的操作要在2的操作前执行。</li><li>实际深层含义：1的操作要对2的操作是可见的。</li></ul><h4 id="常见规则">常见规则</h4><ul><li><strong>程序顺序规则</strong>：一个线程内，按照代码顺序，书写在前面的操作happens-before 于书写在后面的操作；</li><li><strong>解锁规则</strong>：解锁 happens-before 于加锁；</li><li><strong>volatile 变量规则</strong>：对一个 volatile 变量的写操作happens-before 于后面对这个 volatile 变量的读操作。说白了就是对 volatile变量的写操作的结果对于发生于其后的任何操作都是可见的。</li><li><strong>传递规则</strong>：如果 A happens-before B，且 Bhappens-before C，那么 A happens-before C；</li><li><strong>线程启动规则</strong>：Thread 对象的<code>start()</code>方法 happens-before 于此线程的每一个动作</li></ul><h3 id="并发三特性">并发三特性</h3><h4 id="原子性">原子性</h4><p>n次操作，要么同时执行，执行过程中不受任何干扰导致其终止，不然要么都不执行。</p><p>实现：</p><ul><li>悲观锁</li></ul><h4 id="可见性">可见性</h4><p>当一个线程对共享变量修改，其它线程可见。</p><p>实现：</p><ul><li>volatile：将变量声明为 <code>volatile</code> ，这就指示JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</li><li>悲观锁</li><li>乐观锁</li></ul><h4 id="有序性">有序性</h4><p>由于指令重排序问题，代码的执行顺序未必就是编写代码时候的顺序。</p><p>volatile禁止指令重排序。</p><h2 id="重要的锁">重要的锁</h2><h3 id="volatile关键字">volatile关键字</h3><h4 id="如何保证可见性">如何保证可见性</h4><p>将变量声明为 <strong><code>volatile</code></strong> ，这就指示JVM，这个变量是共享且不稳定的，每次使用它都<strong>到主存中进行读取</strong>。</p><h4 id="为什么禁止指令重排序">为什么禁止指令重排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Singleton <span class="title function_">getUniqueInstance</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">//先判断对象是否已经实例过，没有实例化过才进入加锁代码</span></span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//类对象加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uniqueInstance = new Singleton();</code>这段代码其实是分为三步执行：</p><ol type="1"><li>为 <code>uniqueInstance</code> 分配内存空间</li><li>初始化 <code>uniqueInstance</code></li><li>将 <code>uniqueInstance</code> 指向分配的内存地址</li></ol><p>这三个指令如果发生重排，假如变成1 -&gt; 3 -&gt; 2的顺序。</p><p>例如，线程 T1 执行了 1 和 3，此时 T2 调用<code>getUniqueInstance</code>() 后发现 <code>uniqueInstance</code>不为空，因此返回 <code>uniqueInstance</code>，但此时<code>uniqueInstance</code> 还未被初始化。</p><h3 id="悲观锁">悲观锁</h3><p>悲观为主，做好最坏的打算，因此共享变量加锁每次只让一个线程操作。</p><p>缺点：高并发的场景下，激烈的锁竞争会造成线程阻塞，大量阻塞线程会导致系统的上下文切换，增加系统的性能开销。并且，悲观锁还可能会存在死锁问题，影响代码的正常运行。</p><p>应用：写多读少</p><h3 id="乐观锁">乐观锁</h3><p>缺陷：冲突频繁发生（写占比非常多的情况），会频繁失败和重试，会非常影响性能，导致CPU 飙升。</p><p>应用：读多写少</p><h4 id="版本号机制实现">版本号机制实现</h4><p>在数据表中加上一个数据版本号 <code>version</code>字段，表示数据被修改的次数。当数据被修改时，<code>version</code>值会加一。当线程 A 要更新数据值时，在读取数据的同时也会读取<code>version</code> 值.</p><p>在<strong>提交更新</strong>时，若刚才读取到的 version值为当前数据库中的 <code>version</code>值相等时才更新，否则重试更新操作，直到更新成功。</p><h4 id="cas实现">CAS实现</h4><p>全称Compare and Swap ， 底层是一个原子指令。</p><p>思想：用预期值和要更新的变量值比较，相等才会更新。</p><p>CAS 涉及到三个操作数：</p><ul><li><strong>V</strong>：要更新的变量值(Var)</li><li><strong>E</strong>：预期值(Expected)</li><li><strong>N</strong>：拟写入的新值(New)</li></ul><p>案例：线程 A 要修改变量 i 的值为 6，i 原值为 1（V =1，E=1，N=6，假设不存在 ABA 问题）。</p><ol type="1"><li>i 与 1 进行比较，如果相等， 则说明没被其他线程修改，可以被设置为 6。</li><li>i 与 1进行比较，如果不相等，则说明被其他线程修改，当前线程放弃更新，CAS操作失败。</li></ol><h4 id="乐观锁存在的问题">乐观锁存在的问题</h4><h5 id="aba问题">ABA问题</h5><p>如果一个变量初始是A值，准备修改他的时候还是A值，但是这中间可能发生其它修改，这是未知的。</p><h5 id="循环等待时长久">循环等待时长久</h5><p>CAS经常会用到自旋操作来进行重试，也就是不成功就一直循环执行直到成功。如果长时间不成功，会给CPU 带来非常大的执行开销。</p><p>如果 JVM 能支持处理器提供的 pause 指令那么效率会有一定的提升，pause指令有两个作用：</p><ol type="1"><li>可以延迟流水线执行指令，使 CPU不会消耗过多的执行资源，延迟的时间取决于具体实现的版本，在一些处理器上延迟时间是零。</li><li>可以避免在退出循环的时候因内存顺序冲而引起 CPU流水线被清空，从而提高 CPU 的执行效率。</li></ol><h3 id="公平锁和非公平锁">公平锁和非公平锁</h3><ul><li>公平锁：锁被释放之后，先申请的线程先得到锁。<ul><li>性能不好，但公平</li></ul></li><li>非公平锁：锁被释放之后，后申请的线程可能会先获取到锁，是<strong>随机</strong>或者按照其他优先级排序的。<ul><li>性能好，但会出现饿死</li></ul></li></ul><h3 id="可中断锁和不可中断锁">可中断锁和不可中断锁</h3><ul><li><strong>可中断锁</strong>：<strong>获取锁的过程</strong>中可以被中断，不需要一直等到获取锁之后才能进行其他逻辑处理。<code>ReentrantLock</code> 就属于是可中断锁。</li><li><strong>不可中断锁</strong>：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。<code>synchronized</code> 就属于是不可中断锁。</li></ul><h3 id="共享锁和独占锁">共享锁和独占锁</h3><ul><li><strong>共享锁</strong>：一把锁可以被多个线程同时获得。</li><li><strong>独占锁</strong>：一把锁只能被一个线程获得。</li></ul><h3 id="自旋锁">自旋锁</h3><h3 id="synchronized-锁">synchronized 锁</h3><h4 id="使用">使用</h4><p><strong>1、修饰实例方法</strong> （锁当前对象实例）</p><p>给当前对象实例加锁，进入同步代码前要获得<strong>当前对象实例的锁</strong> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、修饰静态方法</strong> （锁当前类）</p><p>给当前类加锁，会作用于类的所有对象实例 ，进入同步代码前要获得<strong>当前 class 的锁</strong>。</p><p>这是因为静态成员不属于任何一个实例对象，归整个类所有，不依赖于类的特定实例，被类的所有实例共享。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态 <code>synchronized</code> 方法和非静态 <code>synchronized</code>方法之间的调用互斥么？不互斥！如果一个线程 A 调用一个实例对象的非静态<code>synchronized</code> 方法，而线程 B需要调用这个实例对象所属类的静态 <code>synchronized</code>方法，是允许的，不会发生互斥现象，因为访问静态 <code>synchronized</code>方法占用的锁是当前类的锁，而访问非静态 <code>synchronized</code>方法占用的锁是当前实例对象锁。</p><p><strong>3、修饰代码块</strong> （锁指定对象/类）</p><p>对括号里指定的对象/类加锁：</p><ul><li><code>synchronized(object)</code> 表示进入同步代码库前要获得<strong>给定对象的锁</strong>。</li><li><code>synchronized(类.class)</code> 表示进入同步代码前要获得<strong>给定 Class 的锁</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line">    <span class="comment">//业务代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="底层原理">底层原理</h4><p><code>synchronized</code> 同步语句块的实现使用的是<code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中<code>monitorenter</code>指令指向同步代码块的开始位置，<code>monitorexit</code>指令则指明同步代码块的结束位置。</p><figure><img src="java面试整理/synchronized-get-lock-code-block.png"alt="执行 monitorenter 获取锁" /><figcaption aria-hidden="true">执行 monitorenter 获取锁</figcaption></figure><p>锁计数器。</p><p>解锁：</p><figure><img src="java面试整理/synchronized-release-lock-block.png"alt="执行 monitorexit 释放锁" /><figcaption aria-hidden="true">执行 monitorexit 释放锁</figcaption></figure><h3 id="reentrantlock">ReentrantLock</h3><p>实现了 <code>Lock</code> 接口，是一个可重入且独占式的锁</p><h3 id="reentrantreadwritelock">ReentrantReadWriteLock</h3><p>可重入的读写锁，实现了读读不互斥、读写互斥、写写互斥（只有读读不互斥）。</p><p>两把锁：</p><ul><li>WriteLock：一个线程持有</li><li>ReadLock：多个线程持有</li></ul><p>适合<strong>读多写少</strong>的场景</p><p>能否同时拥有两把锁：</p><ul><li>拥有读锁的情况下，不能获得写锁：读锁不能升级为写锁</li><li>拥有写锁的情况下，不能获得读锁</li></ul><h2 id="threadlocal">ThreadLocal</h2><p>作用：保证每一个线程拥有自己独立的本地变量</p><h3 id="原理">原理</h3><p>俩容器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">threadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span></span><br><span class="line">    ThreadLocal.<span class="type">ThreadLocalMap</span> <span class="variable">inheritableThreadLocals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上ThreadLocal就是对hashmap容器的一个封装。</p><p>set方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123;</span><br><span class="line">    <span class="comment">//获取当前请求的线程</span></span><br><span class="line">    <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">    <span class="comment">//取出 Thread 类内部的 threadLocals 变量(哈希表结构)</span></span><br><span class="line">    <span class="type">ThreadLocalMap</span> <span class="variable">map</span> <span class="operator">=</span> getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 将需要存储的值放入到这个哈希表中</span></span><br><span class="line">        map.set(<span class="built_in">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line">ThreadLocalMap <span class="title function_">getMap</span><span class="params">(Thread t)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面得出结论，最终要存的变量，放在了<strong><code>ThreadLocalMap</code></strong>中，key就是<code>ThreadLocal</code>对象 ,value就是Object类对象。</p><p>抛开<code>ThreadLocal</code>，每个线程其实是有一个<code>ThreadLocalMap</code>，可以存多个ThreadLocal对象</p><figure><img src="java面试整理/threadlocal-data-structure.png"alt="ThreadLocal 数据结构" /><figcaption aria-hidden="true">ThreadLocal 数据结构</figcaption></figure><h3 id="内存泄露问题">内存泄露问题</h3><p>Entry是一个弱引用，如果 <code>ThreadLocal</code>没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value不会被清理掉。</p><p>这样就会出现许多key为null的Entry，占用空间。</p><p>解决：手动调用remove（）方法。</p><h2 id="线程池">线程池</h2><p>使用好处：</p><ul><li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li><li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li><li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li></ul><h3 id="创建线程池的方式">创建线程池的方式</h3><ol type="1"><li><p><strong>通过<code>ThreadPoolExecutor</code>构造函数来创建（推荐）。</strong></p></li><li><p><strong>通过 <code>Executor</code> 框架的工具类<code>Executors</code> 来创建。</strong></p></li></ol><h3 id="线程池参数">线程池参数</h3><p><strong><code>ThreadPoolExecutor</code> 3个最重要的参数：</strong></p><ul><li><strong><code>corePoolSize</code></strong> ：核心线程数</li><li><strong><code>maximumPoolSize</code></strong> ：最大线程数</li><li><strong><code>workQueue</code></strong>：工作队列。新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li></ul><p>其它参数：</p><p><strong><code>keepAliveTime</code></strong>：存活时间：线程池中的线程数量大于<code>corePoolSize</code>的时候，这部分线程如果没有要执行的任务，会等待这个keepAliveTime时间后销毁。属于救急线程</p><p><strong><code>unit</code></strong>： <code>keepAliveTime</code>参数的时间单位。</p><p><strong><code>threadFactory</code></strong> ：产生线程的工厂</p><p><strong><code>handler</code></strong> ：拒绝策略</p><p>工作原理：</p><figure><img src="java面试整理/image-20210831093204388.png"alt="image-20210831093204388" /><figcaption aria-hidden="true">image-20210831093204388</figcaption></figure><p>流程：</p><figure><img src="java面试整理/图解线程池实现原理.png"alt="图解线程池实现原理" /><figcaption aria-hidden="true">图解线程池实现原理</figcaption></figure><h4 id="四种拒绝策略">四种拒绝策略</h4><ol type="1"><li>抛异常 java.util.concurrent.ThreadPoolExecutor.AbortPolicy</li><li>由调用者执行任务java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy</li><li>丢弃任务 java.util.concurrent.ThreadPoolExecutor.DiscardPolicy</li><li>丢弃最早排队任务java.util.concurrent.ThreadPoolExecutor.DiscardOldestPolicy</li></ol><h3 id="常用的阻塞队列">常用的阻塞队列</h3><ul><li>容量为 <code>Integer.MAX_VALUE</code> 的<code>LinkedBlockingQueue</code>（无界队列）：<code>FixedThreadPool</code>和 <code>SingleThreadExector</code>。由于队列永远不会被放满，因此<code>FixedThreadPool</code>最多只能创建核心线程数的线程。</li><li><code>SynchronousQueue</code>（同步队列）：<code>CachedThreadPool</code>。<code>SynchronousQueue</code>没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，<code>CachedThreadPool</code>的最大线程数是 <code>Integer.MAX_VALUE</code>，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致OOM。</li><li><code>DelayedWorkQueue</code>（延迟阻塞队列）：<code>ScheduledThreadPool</code>和 <code>SingleThreadScheduledExecutor</code>。<code>DelayedWorkQueue</code>的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。<code>DelayedWorkQueue</code>添加元素满了之后会自动扩容原来容量的 1/2，即永远不会阻塞，最大扩容可达<code>Integer.MAX_VALUE</code>，所以最多只能创建核心线程数的线程。</li></ul><h2 id="aqs">AQS</h2><h3 id="aqs底层">AQS底层</h3><p>AQS 的全称为 <code>AbstractQueuedSynchronizer</code>，翻译过来的意思就是抽象队列同步器</p><h4 id="思想">思想</h4><p>看共享资源状态：</p><ul><li>共享资源空闲：将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。</li><li>被请求的共享资源被占用：需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS 是基于 <strong>CLH 锁</strong> （Craig, Landin, and Hagerstenlocks） 实现的。</li></ul><p>共享资源方式：</p><ul><li><code>Exclusive</code>：独占，如<code>ReentrantLock</code></li><li><code>Share</code>：共享，如<code>Semaphore</code>/<code>CountDownLatch</code></li></ul><h5 id="clh队列">CLH队列</h5><p>数据结构：双向链表</p><figure><img src="java面试整理/CLH.png" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>对于资源state的操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 共享变量，使用volatile修饰保证线程可见性</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回同步状态的当前值</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 设置同步状态的值</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> newState)</span> &#123;</span><br><span class="line">     state = newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//原子地（CAS操作）将同步状态值设置为给定值update如果当前同步状态的值等于expect（期望值）</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetState</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取资源的过程：</p><p>以 <code>ReentrantLock</code> 为例，<code>state</code> 初始值为0，表示未锁定状态。</p><p>A线程调用lock()，state+1，获取锁成功。其它线程发现这个state !=0，获取锁失败，A释放锁的时候，state--，变为0。</p><p><strong>可重入：</strong>A在执行业务的时候，想重复获取锁，state会继续++，同样释放的时候也是由内而外释放锁。</p><h5 id="自定义同步器">自定义同步器</h5><p>基于模板方法模式</p><ol type="1"><li>使用者继承 <code>AbstractQueuedSynchronizer</code>并重写指定的方法。</li><li>将 AQS组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line"><span class="comment">//独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line"><span class="comment">//共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line"><span class="comment">//共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span>)</span></span><br><span class="line"><span class="comment">//该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h2 id="同步工具类">同步工具类</h2><h3 id="semaphore信号量">Semaphore(信号量)</h3><p>可以控制多个访问同一资源的线程。</p><p><strong>使用：</strong></p><p>假设有 <code>N(N&gt;5)</code> 个线程来获取 <code>Semaphore</code>中的共享资源：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始共享资源数量</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 获取1个许可</span></span><br><span class="line">semaphore.acquire();</span><br><span class="line"><span class="comment">// 释放1个许可</span></span><br><span class="line">semaphore.release();</span><br></pre></td></tr></table></figure><p>只有这五个线程能访问到特定的资源。获取到共享资源的线程才能执行。</p><blockquote><p>如果资源只有一个，那就跟lock这种排它锁没区别。</p></blockquote><p><strong>模式</strong>：</p><ul><li>公平模式：调用 <code>acquire()</code>方法的顺序就是获取许可证的顺序，遵循 FIFO；</li><li>非公平模式：抢占式的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> <span class="keyword">permits</span>)</span> &#123;</span><br><span class="line">  sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(<span class="keyword">permits</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定是否公平</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> <span class="keyword">permits</span>, <span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">  sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>(<span class="keyword">permits</span>) : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(<span class="keyword">permits</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>应用：</strong>单机限流。</p><h4 id="原理-1">原理</h4><p>AQS实现，将构造方法传来的permits，当做state的值。</p><figure><img src="java面试整理/image-20230908184053505.png"alt="image-20230908184053505" /><figcaption aria-hidden="true">image-20230908184053505</figcaption></figure><h3 id="countdownlatch-倒计时器">CountDownLatch （倒计时器）</h3><p><code>CountDownLatch</code> 允许 <code>count</code>个线程阻塞在一个地方，直至所有线程的任务都执行完毕。</p><p>一次性使用工具，使用完即销毁。</p><h4 id="原理-2">原理</h4><p>默认构造 AQS 的 <code>state</code> 值为 <code>count</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CountDownLatch</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.sync = <span class="keyword">new</span> <span class="title class_">Sync</span>(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">    Sync(<span class="type">int</span> count) &#123;</span><br><span class="line">        setState(count);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程调用 <code>countDown()</code>时，其实使用了<code>tryReleaseShared</code>方法以 CAS 的操作来减少<code>state</code>，state为0时，表示所有的线程都调用了<code>countDown</code> 方法，在 <code>CountDownLatch</code>上等待的线程就会被唤醒并继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countDown</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.releaseShared(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放共享锁，AbstractQueuedSynchronizer 默认实现</span></span><br><span class="line"><span class="comment">// 如果 tryReleaseShared 返回 true，就唤醒等待队列中的一个或多个线程。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">//释放共享锁</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">      <span class="comment">//释放当前节点的后置等待节点</span></span><br><span class="line">      doReleaseShared();</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 state 进行递减，直到 state 变成 0；</span></span><br><span class="line"><span class="comment">// 只有 count 递减到 0 时，countDown 才会返回 true</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryReleaseShared</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">    <span class="comment">// 自选检查 state 是否为 0</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="comment">// 如果 state 已经是 0 了，直接返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 对 state 进行递减</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c-<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// CAS 操作更新 state 的值</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(c, nextc))</span><br><span class="line">            <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待（也可以叫做加锁）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有超时时间的等待</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">await</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">return</span> sync.tryAcquireSharedNanos(<span class="number">1</span>, unit.toNanos(timeout));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试获取锁，获取成功则返回，失败则加入等待队列，挂起线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireSharedInterruptibly</span><span class="params">(<span class="type">int</span> arg)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        <span class="comment">// 尝试获得锁，获取成功则返回</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">      <span class="comment">// 获取失败加入等待队列，挂起线程</span></span><br><span class="line">      doAcquireSharedInterruptibly(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">tryAcquireShared</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (getState() == <span class="number">0</span>) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="应用">应用</h4><ol type="1"><li><p>某一线程在开始运行前等待 n 个线程执行完毕 : 将<code>CountDownLatch</code> 的计数器初始化为 n（<code>new CountDownLatch(n)</code>），每当一个任务线程执行完毕，就将计数器减1 （<code>countdownlatch.countDown()</code>），当计数器的值变为 0 时，在<code>CountDownLatch 上 await()</code>的线程就会被唤醒。一个典型应用场景就是<strong>启动一个服务时，主线程需要等待多个组件加载完毕，之后再继续执行</strong>。</p></li><li><p>多个线程开始执行任务的最大并行性：注意是并行性，不是并发，强调的是<strong>多个线程在某一时刻同时开始执行</strong>。类似于赛跑，将多个线程放到起点，等待发令枪响，然后同时开跑。做法是初始化一个共享的<code>CountDownLatch</code> 对象，将其<strong>计数器初始化为 1</strong>（<code>new CountDownLatch(1)</code>），多个线程在开始执行任务前首先<code>coundownlatch.await()</code>，当<strong>主线程调用</strong><code>countDown()</code> 时，计数器变为 0，多个线程同时被唤醒。</p></li></ol><h2 id="atomic-原子类">Atomic 原子类</h2><h1 id="io">IO</h1><p>Input/Output，针对内存，数据输入到内存就叫输入，数据输出到外部存储（比如数据库，文件，远程主机）的过程即输出。</p><p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。</p><ul><li><code>InputStream</code>/<code>Reader</code>:所有的输入流的基类，前者是字节输入流，后者是字符输入流。</li><li><code>OutputStream</code>/<code>Writer</code>:所有输出流的基类，前者是字节输出流，后者是字符输出流。</li></ul><h2 id="基础">基础</h2><h3 id="字节流">字节流</h3><h4 id="字节输入流inputstream">字节输入流InputStream</h4><p><code>InputStream</code>用于从源头（通常是文件）读取数据（字节信息）<strong>到内存</strong>中，<code>java.io.InputStream</code>抽象类是所有字节输入流的父类。</p><p><code>InputStream</code> 常用方法：</p><ul><li><code>read()</code>：返回输入流中下一个字节的数据。返回的值介于 0 到255 之间。如果未读取任何字节，则代码返回 <code>-1</code>，表示文件结束。</li><li><code>read(byte b[ ])</code> : 从输入流中读取一些字节存储到数组<code>b</code> 中。如果数组 <code>b</code>的长度为零，则不读取。如果没有可用字节读取，返回<code>-1</code>。如果有可用字节读取，则最多读取的字节数最多等于<code>b.length</code> ， 返回读取的字节数。这个方法等价于<code>read(b, 0, b.length)</code>。</li><li><code>read(byte b[], int off, int len)</code>：在<code>read(byte b[ ])</code>方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code>参数（要读取的最大字节数）。</li><li><code>skip(long n)</code>：忽略输入流中的 n 个字节,返回实际忽略的字节数。</li><li><code>available()</code>：返回输入流中可以读取的字节数。</li><li><code>close()</code>：关闭输入流释放相关的系统资源。</li></ul><p>从 Java 9 开始，<code>InputStream</code> 新增加了多个实用的方法：</p><ul><li><code>readAllBytes()</code>：读取输入流中的所有字节，返回字节数组。</li><li><code>readNBytes(byte[] b, int off, int len)</code>：阻塞直到读取<code>len</code> 个字节。</li><li><code>transferTo(OutputStream out)</code>：将所有字节从一个输入流传递到一个输出流。</li></ul><p><code>FileInputStream</code>是一个比较常用的字节输入流对象，可直接指定文件路径，可以直接读取单字节数据，也可以读取至字节数组中。</p><p>配合 <code>BufferedInputStream</code>使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 BufferedInputStream 对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line"><span class="comment">// 读取文件的内容并复制到 String 对象中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bufferedInputStream.readAllBytes());</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p><code>DataInputStream</code>用于读取指定类型数据，不能单独使用，必须结合其它流，比如<code>FileInputStream</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>);</span><br><span class="line"><span class="comment">//必须将fileInputStream作为构造参数才能使用</span></span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">dataInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(fileInputStream);</span><br><span class="line"><span class="comment">//可以读取任意具体的类型数据</span></span><br><span class="line">dataInputStream.readBoolean();</span><br><span class="line">dataInputStream.readInt();</span><br><span class="line">dataInputStream.readUTF();</span><br></pre></td></tr></table></figure><p><code>ObjectInputStream</code> 用于从输入流中读取 Java对象（反序列化），<code>ObjectOutputStream</code>用于将对象写入到输出流(序列化)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;object.data&quot;</span>));</span><br><span class="line"><span class="type">MyClass</span> <span class="variable">object</span> <span class="operator">=</span> (MyClass) input.readObject();</span><br><span class="line">input.close();</span><br></pre></td></tr></table></figure><h4 id="字节输出流outputstream">字节输出流OutputStream</h4><p><code>OutputStream</code>用于将数据（字节信息）写入到目的地（通常是文件），<code>java.io.OutputStream</code>抽象类是<strong>所有字节输出流的父类</strong>。</p><p><code>OutputStream</code> 常用方法：</p><ul><li><code>write(int b)</code>：将特定字节写入输出流。</li><li><code>write(byte b[ ])</code> : 将数组<code>b</code>写入到输出流，等价于 <code>write(b, 0, b.length)</code> 。</li><li><code>write(byte[] b, int off, int len)</code> :在<code>write(byte b[ ])</code> 方法的基础上增加了 <code>off</code>参数（偏移量）和 <code>len</code> 参数（要读取的最大字节数）。</li><li><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字节。</li><li><code>close()</code>：关闭输出流释放相关的系统资源。</li></ul><p><code>FileOutputStream</code>是最常用的字节输出流对象，可直接指定文件路径，可以直接输出单字节数据，也可以输出指定的字节数组。</p><p>配合 <code>BufferedOutputStream</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>);</span><br><span class="line"><span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(fileOutputStream)</span><br></pre></td></tr></table></figure><p><strong><code>DataOutputStream</code></strong>用于写入指定类型数据，不能单独使用，必须结合其它流，比如<code>FileOutputStream</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输出流</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;out.txt&quot;</span>);</span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">dataOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(fileOutputStream);</span><br><span class="line"><span class="comment">// 输出任意数据类型</span></span><br><span class="line">dataOutputStream.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">dataOutputStream.writeByte(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><code>ObjectOutputStream</code>将对象写入到输出流(<code>ObjectOutputStream</code>，序列化)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;file.txt&quot;</span>)</span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Guide哥&quot;</span>, <span class="string">&quot;JavaGuide作者&quot;</span>);</span><br><span class="line">output.writeObject(person);</span><br></pre></td></tr></table></figure><h3 id="字符流">字符流</h3><p>为什么会有字符流：</p><ul><li>如果不知道编码类型就很容易出现乱码问题。</li></ul><p>字符流默认采用的是 <code>Unicode</code>编码，我们可以通过构造方法自定义编码。</p><p><code>utf8</code> :英文占 1 字节，中文占 3字节，<code>unicode</code>：任何字符都占 2个字节，<code>gbk</code>：英文占 1 字节，中文占 2 字节。</p><h4 id="reader字符输入流">Reader（字符输入流）</h4><p><code>Reader</code>用于从源头（通常是文件）读取数据（字符信息）到内存中，<code>java.io.Reader</code>抽象类是所有字符输入流的父类。</p><p><code>Reader</code> 用于读取文本， <code>InputStream</code>用于读取原始字节。</p><p><code>Reader</code> 常用方法：</p><ul><li><code>read()</code> : 从输入流读取一个字符。</li><li><code>read(char[] cbuf)</code> :从输入流中读取一些字符，并将它们存储到字符数组<code>cbuf</code>中，等价于 <code>read(cbuf, 0, cbuf.length)</code>。</li><li><code>read(char[] cbuf, int off, int len)</code>：在<code>read(char[] cbuf)</code>方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code>参数（要读取的最大字符数）。</li><li><code>skip(long n)</code>：忽略输入流中的 n 个字符,返回实际忽略的字符数。</li><li><code>close()</code> : 关闭输入流并释放相关的系统资源。</li></ul><p><code>InputStreamReader</code> 是字节流转换为字符流的桥梁，其子类<code>FileReader</code> 是基于该基础上的封装，可以直接操作字符文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字节流转换为字符流的桥梁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于读取字符文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileReader</span> <span class="keyword">extends</span> <span class="title class_">InputStreamReader</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileReader</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;input.txt&quot;</span>);) &#123;</span><br><span class="line">    <span class="type">int</span> content;</span><br><span class="line">    <span class="type">long</span> <span class="variable">skip</span> <span class="operator">=</span> fileReader.skip(<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;The actual number of bytes skipped:&quot;</span> + skip);</span><br><span class="line">    System.out.print(<span class="string">&quot;The content read from file:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((content = fileReader.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        System.out.print((<span class="type">char</span>) content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="section"></h3><h4 id="writer字符输出流">Writer（字符输出流）</h4><p><code>Writer</code>用于将数据（字符信息）写入到目的地（通常是文件），<code>java.io.Writer</code>抽象类是所有字符输出流的父类。</p><p><code>Writer</code> 常用方法：</p><ul><li><code>write(int c)</code> : 写入单个字符。</li><li><code>write(char[] cbuf)</code>：写入字符数组<code>cbuf</code>，等价于<code>write(cbuf, 0, cbuf.length)</code>。</li><li><code>write(char[] cbuf, int off, int len)</code>：在<code>write(char[] cbuf)</code>方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code>参数（要读取的最大字符数）。</li><li><code>write(String str)</code>：写入字符串，等价于<code>write(str, 0, str.length())</code> 。</li><li><code>write(String str, int off, int len)</code>：在<code>write(String str)</code>方法的基础上增加了 <code>off</code> 参数（偏移量）和 <code>len</code>参数（要读取的最大字符数）。</li><li><code>append(CharSequence csq)</code>：将指定的字符序列附加到指定的<code>Writer</code> 对象并返回该 <code>Writer</code> 对象。</li><li><code>append(char c)</code>：将指定的字符附加到指定的<code>Writer</code> 对象并返回该 <code>Writer</code> 对象。</li><li><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字符。</li><li><code>close()</code>:关闭输出流释放相关的系统资源。</li></ul><p><code>OutputStreamWriter</code> 是字符流转换为字节流的桥梁，其子类<code>FileWriter</code>是基于该基础上的封装，可以直接将字符写入到文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符流转换为字节流的桥梁</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于写入字符到文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWriter</span> <span class="keyword">extends</span> <span class="title class_">OutputStreamWriter</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FileWriter</code> 代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">Writer</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;output.txt&quot;</span>)) &#123;</span><br><span class="line">    output.write(<span class="string">&quot;你好。&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字节缓冲流">字节缓冲流</h3><p>IO操作消耗性能的，缓冲流将数据加载至缓冲区，<strong>一次性读取/写入多个字节</strong>，从而避免频繁的IO 操作，提高流的传输效率。</p><p>字节缓冲流这里采用了<strong>装饰器模式</strong>来增强<code>InputStream</code>和<code>OutputStream</code><strong>子类对象</strong>的功能。</p><p>通过 <code>BufferedInputStream</code>（字节缓冲输入流）来增强<code>FileInputStream</code> 的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个 BufferedInputStream 对象</span></span><br><span class="line"><span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br></pre></td></tr></table></figure><p>字节流和字节缓冲流的性能差别： <code>write(int b)</code> 和<code>read()</code>这两个一次只读取一个字节的方法，由于字节缓冲流内部有缓冲区，因此，字节缓冲流会先将读取到的字节存放在缓存区，大幅减少IO 次数，提高读取效率。</p><p>使用 <code>write(int b)</code> 和 <code>read()</code>方法，复制大文件性能对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_buffer_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>));</span><br><span class="line">         <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>))) &#123;</span><br><span class="line">        <span class="type">int</span> content;</span><br><span class="line">        <span class="keyword">while</span> ((content = bis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用缓冲流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>);</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> content;</span><br><span class="line">        <span class="keyword">while</span> ((content = fis.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用普通流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用缓冲流复制PDF文件总耗时:15428 毫秒</span><br><span class="line">使用普通字节流复制PDF文件总耗时:2555062 毫秒</span><br></pre></td></tr></table></figure><p>调用 <code>read(byte b[])</code> 和<code>write(byte b[], int off, int len)</code>这两个写入一个字节数组的方法的话，只要字节数组的大小合适，两者的性能差距其实不大：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_with_byte_array_buffer_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>));</span><br><span class="line">         <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>))) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//每次写入4M的量</span></span><br><span class="line">            bos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用缓冲流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">copy_pdf_to_another_pdf_with_byte_array_stream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;深入理解计算机操作系统.pdf&quot;</span>);</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;深入理解计算机操作系统-副本.pdf&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span> * <span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len = fis.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fos.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    System.out.println(<span class="string">&quot;使用普通流复制PDF文件总耗时:&quot;</span> + (end - start) + <span class="string">&quot; 毫秒&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4id="bufferedinputstream字节缓冲输入流">BufferedInputStream（字节缓冲输入流）</h4><p><code>BufferedInputStream</code>从源头（通常是文件）读取数据（字节信息）到内存的过程中<strong>不会一个字节一个字节的读取</strong>，而是会先<strong>将读取到的字节存放在缓存区</strong>，并从内部缓冲区中单独读取字节。这样大幅减少了IO 次数，提高了读取效率。</p><p><code>BufferedInputStream</code>内部维护了一个缓冲区，这个<strong>缓冲区实际就是一个字节数组</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BufferedInputStream</span> <span class="keyword">extends</span> <span class="title class_">FilterInputStream</span> &#123;</span><br><span class="line">    <span class="comment">// 内部缓冲区数组</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">volatile</span> <span class="type">byte</span> buf[];</span><br><span class="line">    <span class="comment">// 缓冲区的默认大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEFAULT_BUFFER_SIZE</span> <span class="operator">=</span> <span class="number">8192</span>;</span><br><span class="line">    <span class="comment">// 使用默认的缓冲区大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(in, DEFAULT_BUFFER_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自定义缓冲区大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BufferedInputStream</span><span class="params">(InputStream in, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Buffer size &lt;= 0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        buf = <span class="keyword">new</span> <span class="title class_">byte</span>[size];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓冲区的大小默认为 <strong>8192</strong> 字节，也可以通过<code>BufferedInputStream(InputStream in, int size)</code>这个构造方法来指定缓冲区的大小。</p><h4id="bufferedoutputstream字节缓冲输出流">BufferedOutputStream（字节缓冲输出流）</h4><p><code>BufferedOutputStream</code>将数据（字节信息）写入到目的地（通常是文件）的过程中不会一个字节一个字节的写入，而是会先将要写入的字节存放在缓存区，并从内部缓冲区中单独写入字节。这样大幅减少了IO 次数，提高了读取效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;output.txt&quot;</span>))) &#123;</span><br><span class="line">    <span class="type">byte</span>[] array = <span class="string">&quot;JavaGuide&quot;</span>.getBytes();</span><br><span class="line">    bos.write(array);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似于 <code>BufferedInputStream</code>，<code>BufferedOutputStream</code>内部也维护了一个缓冲区，并且，这个缓存区的大小也是 <strong>8192</strong>字节。</p><h3 id="字符缓冲流">字符缓冲流</h3><p><code>BufferedReader</code> （字符缓冲输入流）和<code>BufferedWriter</code>（字符缓冲输出流）类似于<code>BufferedInputStream</code>（字节缓冲输入流）和<code>BufferedOutputStream</code>（字节缓冲输入流），内部都维护了一个字节数组作为缓冲区。不过，前者主要是用来操作字符信息。</p><h3 id="打印流输出流的一种">打印流——输出流的一种</h3><p>sout原理：获取一个PrintStream对象，<code>print</code>方法实际调用的是<code>PrintStream</code> 对象的 <code>write</code>方法。<code>PrintStream</code> 属于字节打印流，与之对应的是<code>PrintWriter</code> （字符打印流）。</p><h3 id="随机访问流">随机访问流</h3><p>定义：随意跳转到文件的任意位置进行读写的<code>RandomAccessFile</code> 。</p><p>RandomAccessFile构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// openAndDelete 参数默认为 false 表示打开文件并且这个文件不会被删除</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RandomAccessFile</span><span class="params">(File file, String mode)</span></span><br><span class="line">    <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="built_in">this</span>(file, mode, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 私有方法</span></span><br><span class="line"><span class="keyword">private</span> <span class="title function_">RandomAccessFile</span><span class="params">(File file, String mode, <span class="type">boolean</span> openAndDelete)</span>  <span class="keyword">throws</span> FileNotFoundException&#123;</span><br><span class="line">  <span class="comment">// 省略大部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以指定读写模式：</p><ul><li><code>r</code> : 只读模式。</li><li><code>rw</code>: 读写模式</li><li><code>rws</code>: 相对于 <code>rw</code>，<code>rws</code>同步更新对“文件的内容”或“元数据”的修改到外部存储设备。</li><li><code>rwd</code> : 相对于 <code>rw</code>，<code>rwd</code>同步更新对“文件的内容”的修改到外部存储设备。</li></ul><blockquote><p>文件内容指的是文件中实际保存的数据，元数据则是用来描述文件属性比如文件的大小信息、创建和修改时间。</p></blockquote><p><code>RandomAccessFile</code>中有一个<strong>文件指针</strong>用来表示下一个将要被写入或者读取的字节所处的位置。我们可以通过<code>RandomAccessFile</code> 的 <code>seek(long pos)</code>方法来设置文件指针的偏移量（距文件开头 <code>pos</code>个字节处）。如果想要获取文件指针当前的位置的话，可以使用<code>getFilePointer()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;input.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取之前的偏移量：&quot;</span> + randomAccessFile.getFilePointer() + <span class="string">&quot;,当前读取到的字符&quot;</span> + (<span class="type">char</span>) randomAccessFile.read() + <span class="string">&quot;，读取之后的偏移量：&quot;</span> + randomAccessFile.getFilePointer());</span><br><span class="line"><span class="comment">// 指针当前偏移量为 6</span></span><br><span class="line">randomAccessFile.seek(<span class="number">6</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取之前的偏移量：&quot;</span> + randomAccessFile.getFilePointer() + <span class="string">&quot;,当前读取到的字符&quot;</span> + (<span class="type">char</span>) randomAccessFile.read() + <span class="string">&quot;，读取之后的偏移量：&quot;</span> + randomAccessFile.getFilePointer());</span><br><span class="line"><span class="comment">// 从偏移量 7 的位置开始往后写入字节数据</span></span><br><span class="line">randomAccessFile.write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 指针当前偏移量为 0，回到起始位置</span></span><br><span class="line">randomAccessFile.seek(<span class="number">0</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;读取之前的偏移量：&quot;</span> + randomAccessFile.getFilePointer() + <span class="string">&quot;,当前读取到的字符&quot;</span> + (<span class="type">char</span>) randomAccessFile.read() + <span class="string">&quot;，读取之后的偏移量：&quot;</span> + randomAccessFile.getFilePointer());</span><br></pre></td></tr></table></figure><p>假设文件内容为：ABCDEFG，运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读取之前的偏移量：0,当前读取到的字符A，读取之后的偏移量：1</span><br><span class="line">读取之前的偏移量：6,当前读取到的字符G，读取之后的偏移量：7</span><br><span class="line">读取之前的偏移量：0,当前读取到的字符A，读取之后的偏移量：1</span><br></pre></td></tr></table></figure><p>写覆盖：</p><p><code>RandomAccessFile</code> 的 <code>write</code>方法在写入对象的时候如果对应的位置已经有数据的话，会将其覆盖掉。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">randomAccessFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;input.txt&quot;</span>), <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">randomAccessFile.write(<span class="keyword">new</span> <span class="title class_">byte</span>[]&#123;<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p>假设运行上面这段程序之前 <code>input.txt</code> 文件内容变为<code>ABCD</code> ，运行之后则变为 <code>HIJK</code> 。</p><p>断点续传：</p><p>上传文件中途暂停或失败（比如遇到网络问题）之后，不需要重新上传，只需要上传那些未成功上传的文件<strong>分片</strong>即可。分片（先将文件切分成多个文件分片）上传是断点续传的基础。</p><h2 id="涉及设计模式">涉及设计模式</h2><h3 id="装饰器模式">装饰器模式</h3><p><strong>装饰器（Decorator）模式</strong>可以在不改变原有对象的情况下拓展其功能。</p><p>组合替代继承来扩展原始类的功能，一些继承关系比较复杂的场景（IO这一场景各种类的继承关系就比较复杂）更加实用。</p><p>装饰器的抽象装饰：<code>FilterInputStream</code>（对应输入流）和<code>FilterOutputStream</code>（对应输出流）是装饰器模式的核心</p><ul><li>用于增强 <code>InputStream</code>和<code>OutputStream</code>子类对象的功能。</li></ul><p>具体装饰类：<code>BufferedInputStream</code>(字节缓冲输入流)、<code>DataInputStream</code>等等都是<code>FilterInputStream</code>的子类，<code>BufferedOutputStream</code>（字节缓冲输出流）、<code>DataOutputStream</code>等等都是<code>FilterOutputStream</code>的子类。</p><p>案例：通过 <code>BufferedInputStream</code>（字节缓冲输入流）来增强<code>FileInputStream</code> 的功</p><h3 id="适配器模式">适配器模式</h3><p><code>InputStreamReader</code> 和 <code>OutputStreamWriter</code>就是两个适配器(Adapter)，同时，它们两个也是<strong>字节流和字符流之间的桥梁</strong>。</p><p><code>InputStreamReader</code> 使用 <code>StreamDecoder</code>（流解码器）对字节进行解码，<strong>实现字节流到字符流的转换，</strong></p><p><code>OutputStreamWriter</code>使用<code>StreamEncoder</code>（流编码器）对字符进行编码，实现字符流到字节流的转换</p><p><code>InputStream</code> 和 <code>OutputStream</code>的子类是被适配者， <code>InputStreamReader</code> 和<code>OutputStreamWriter</code>是适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// InputStreamReader 是适配器，FileInputStream 是被适配的类</span></span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName), <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line"><span class="comment">// BufferedReader 增强 InputStreamReader 的功能（装饰器模式）</span></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br></pre></td></tr></table></figure><p><code>java.io.InputStreamReader</code> 部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InputStreamReader</span> <span class="keyword">extends</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line"><span class="comment">//用于解码的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> StreamDecoder sd;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InputStreamReader</span><span class="params">(InputStream in)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 StreamDecoder 对象</span></span><br><span class="line">            sd = StreamDecoder.forInputStreamReader(in, <span class="built_in">this</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 StreamDecoder 对象做具体的读取工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> sd.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>java.io.OutputStreamWriter</code> 部分源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutputStreamWriter</span> <span class="keyword">extends</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line">    <span class="comment">// 用于编码的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StreamEncoder se;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OutputStreamWriter</span><span class="params">(OutputStream out)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(out);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">// 获取 StreamEncoder 对象</span></span><br><span class="line">            se = StreamEncoder.forOutputStreamWriter(out, <span class="built_in">this</span>, (String)<span class="literal">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用 StreamEncoder 对象做具体的写入工作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(<span class="type">int</span> c)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        se.write(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="观察者模式">观察者模式</h3><p>NIO 中的文件目录监听服务使用到了观察者模式。</p><p>观察者：WatchService</p><p>被观察者：Watchable</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Path</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;Path&gt;, Iterable&lt;Path&gt;, Watchable&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Watchable 接口定义了一个用于将对象注册到 WatchService（监控服务） 并绑定监听事件的方法 register 。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Watchable</span> &#123;</span><br><span class="line">    WatchKey <span class="title function_">register</span><span class="params">(WatchService watcher,</span></span><br><span class="line"><span class="params">                      WatchEvent.Kind&lt;?&gt;[] events,</span></span><br><span class="line"><span class="params">                      WatchEvent.Modifier... modifiers)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WatchService</code> 用于监听文件目录的变化，同一个<code>WatchService</code> 对象能够监听多个文件目录。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 WatchService 对象</span></span><br><span class="line"><span class="type">WatchService</span> <span class="variable">watchService</span> <span class="operator">=</span> FileSystems.getDefault().newWatchService();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个被监控文件夹的 Path 类:</span></span><br><span class="line"><span class="type">Path</span> <span class="variable">path</span> <span class="operator">=</span> Paths.get(<span class="string">&quot;workingDirectory&quot;</span>);</span><br><span class="line"><span class="comment">// 将这个 path 对象注册到 WatchService（监控服务） 中去</span></span><br><span class="line"><span class="type">WatchKey</span> <span class="variable">watchKey</span> <span class="operator">=</span> path.register(</span><br><span class="line">watchService, StandardWatchEventKinds...);</span><br></pre></td></tr></table></figure><p><code>Path</code> 类 <code>register</code> 方法的第二个参数<code>events</code>（需要监听的事件）为可变长参数，也就是说我们可以同时监听多种事件。</p><p><code>WatchService</code> 内部是通过一个 daemonthread（守护线程）采用定期轮询的方式来检测文件的变化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PollingWatchService</span></span><br><span class="line">    <span class="keyword">extends</span> <span class="title class_">AbstractWatchService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义一个 daemon thread（守护线程）轮询检测文件变化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ScheduledExecutorService scheduledExecutor;</span><br><span class="line"></span><br><span class="line">    PollingWatchService() &#123;</span><br><span class="line">        scheduledExecutor = Executors</span><br><span class="line">            .newSingleThreadScheduledExecutor(<span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                 <span class="meta">@Override</span></span><br><span class="line">                 <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                     <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line">                     t.setDaemon(<span class="literal">true</span>);</span><br><span class="line">                     <span class="keyword">return</span> t;</span><br><span class="line">                 &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">enable</span><span class="params">(Set&lt;? extends WatchEvent.Kind&lt;?&gt;&gt; events, <span class="type">long</span> period)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">      <span class="comment">// 更新监听事件</span></span><br><span class="line">      <span class="built_in">this</span>.events = events;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开启定期轮询</span></span><br><span class="line">      <span class="type">Runnable</span> <span class="variable">thunk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123; <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; poll(); &#125;&#125;;</span><br><span class="line">      <span class="built_in">this</span>.poller = scheduledExecutor</span><br><span class="line">        .scheduleAtFixedRate(thunk, period, period, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="io模型">I/O模型</h2><h1 id="常用框架">常用框架</h1><h2 id="spring">Spring</h2><h3 id="spring模块">Spring模块</h3><figure><img src="java面试整理/20200831175708.png" alt="Spring5.x主要模块" /><figcaption aria-hidden="true">Spring5.x主要模块</figcaption></figure><figure><img src="java面试整理/20200902100038.png"alt="Spring 各个模块的依赖关系" /><figcaption aria-hidden="true">Spring 各个模块的依赖关系</figcaption></figure><h4 id="core-container">Core Container</h4><p>Spring 框架的核心模块，也可以说是基础模块，主要提供 IoC依赖注入功能的支持。Spring其他所有的功能基本都需要依赖于该模块，我们从上面那张 Spring各个模块的依赖关系图就可以看出来。</p><ul><li><strong>spring-core</strong>：Spring 框架基本的核心工具类。</li><li><strong>spring-beans</strong>：提供对 bean的创建、配置和管理等功能的支持。</li><li><strong>spring-context</strong>：提供对国际化、事件传播、资源加载等功能的支持。</li><li><strong>spring-expression</strong>：提供对表达式语言（SpringExpression Language） SpEL 的支持，只依赖于 core模块，不依赖于其他模块，可以单独使用。</li></ul><h4 id="aop">AOP</h4><ul><li><strong>spring-aspects</strong>：该模块为与 AspectJ的集成提供支持。</li><li><strong>spring-aop</strong>：提供了面向切面的编程实现。</li><li><strong>spring-instrument</strong>：提供了为 JVM添加代理（agent）的功能。 具体来讲，它为 Tomcat提供了一个织入代理，能够为 Tomcat 传递类文件，就像这些文件是被类加载器加载的一样。没有理解也没关系，这个模块的使用场景非常有限.</li></ul><h4 id="data-accessintegration">Data Access/Integration</h4><ul><li><strong>spring-jdbc</strong>：提供了对数据库访问的抽象JDBC。不同的数据库都有自己独立的 API 用于操作数据库，而 Java程序只需要和 JDBC API 交互，这样就屏蔽了数据库的影响。</li><li><strong>spring-tx</strong>：提供对事务的支持。</li><li><strong>spring-orm</strong>：提供对 Hibernate、JPA、iBatis 等 ORM框架的支持。</li><li><strong>spring-oxm</strong>：提供一个抽象层支撑OXM(Object-to-XML-Mapping)，例如：JAXB、Castor、XMLBeans、JiBX 和XStream 等。</li><li><strong>spring-jms</strong> : 消息服务。自 Spring Framework 4.1以后，它还提供了对 spring-messaging 模块的继承。</li></ul><h4 id="spring-web">Spring Web</h4><ul><li><strong>spring-web</strong>：对 Web功能的实现提供一些最基础的支持。</li><li><strong>spring-webmvc</strong>：提供对 Spring MVC 的实现。</li><li><strong>spring-websocket</strong>：提供了对 WebSocket的支持，WebSocket 可以让客户端和服务端进行双向通信。</li><li><strong>spring-webflux</strong>：提供对 WebFlux 的支持。WebFlux 是Spring Framework 5.0 中引入的新的响应式框架。与 Spring MVC不同，它不需要 Servlet API，是完全异步。</li></ul><h4 id="spring-test">Spring Test</h4><p>Spring 团队提倡测试驱动开发（TDD）。有了控制反转(IoC)的帮助，单元测试和集成测试变得更简单。</p><p>Spring 的测试模块对 JUnit（单元测试框架）、TestNG（类似JUnit）、Mockito（主要用来 Mock 对象）、PowerMock（解决 Mockito的问题比如无法模拟 final, static， private方法）等等常用的测试框架支持的都比较好。</p><h3 id="ioc">Ioc</h3><p><strong>IoC（Inversion ofControl:控制反转）</strong>：一种设计思想，就是我们把创建对象的控制权交给容器管理。</p><ul><li>控制：对象创建的行为，包括对象间的依赖关系，都交由spring容器来管理。</li><li>反转：交给外部环境</li></ul><p>本质：map集合。</p><h4 id="源码解析">源码解析</h4><p><a href="https://javadoop.com/post/spring-ioc">Spring IOC容器源码分析_Javadoop</a></p><h4 id="spring-bean">Spring Bean</h4><p>IoC 容器所管理的对象。</p><h5 id="类声明为bean的注解">类声明为bean的注解</h5><ul><li><code>@Component</code>：通用的注解，可标注任意类为<code>Spring</code> 组件。如果一个 <strong>Bean不知道属于哪个层</strong>，可以使用<code>@Component</code>注解标注。</li><li><code>@Repository</code> : 对应持久层即 Dao层，主要用于数据库相关操作。</li><li><code>@Service</code> : 对应服务层，主要涉及一些复杂的逻辑，需要用到Dao 层。</li><li><code>@Controller</code> : 对应 Spring MVC控制层，主要用于接受用户请求并调用 <code>Service</code>层返回数据给前端页面。</li></ul><h5 id="component-和-bean-的区别"><span class="citation"data-cites="Component">@Component</span> 和 <span class="citation"data-cites="Bean">@Bean</span> 的区别</h5><table><colgroup><col style="width: 6%" /><col style="width: 46%" /><col style="width: 46%" /></colgroup><thead><tr class="header"><th></th><th><span class="citation" data-cites="Bean">@Bean</span></th><th><span class="citation" data-cites="Component">@Component</span></th></tr></thead><tbody><tr class="odd"><td>作用域</td><td>作用在方法上</td><td>作用在类上</td></tr><tr class="even"><td>含义</td><td>标有该注解的方法中定义产生这个 bean,<code>@Bean</code>告诉了 Spring这是某个类的实例，当我需要用它的时候还给我。</td><td><code>@Component</code>通常是通过类路径扫描来自动侦测以及自动装配到Spring 容器中（我们可以使用 <code>@ComponentScan</code>注解定义要扫描的路径从中找出标识了需要装配的类自动装配到 Spring 的 bean容器中）。</td></tr><tr class="odd"><td>自定义性</td><td>很强，通常外部导入的组件都用这个注解</td><td>一般用于配置类这种。</td></tr></tbody></table><h5 id="注入bean的注解">注入bean的注解</h5><table><thead><tr class="header"><th>Annotaion</th><th>Package</th><th>Source</th></tr></thead><tbody><tr class="odd"><td><code>@Autowired</code></td><td><code>org.springframework.bean.factory</code></td><td>Spring 2.5+</td></tr><tr class="even"><td><code>@Resource</code></td><td><code>javax.annotation</code></td><td>Java JSR-250</td></tr><tr class="odd"><td><code>@Inject</code></td><td><code>javax.inject</code></td><td>Java JSR-330</td></tr></tbody></table><p><code>@Autowired</code>和<code>@Resource</code>使用的比较多一些。</p><h5 id="autowired-和的区别"><code>@Autowired</code> 和``的区别</h5><table><colgroup><col style="width: 6%" /><col style="width: 46%" /><col style="width: 46%" /></colgroup><thead><tr class="header"><th></th><th><span class="citation" data-cites="Autowired">@Autowired</span></th><th><span class="citation" data-cites="Resource">@Resource</span></th></tr></thead><tbody><tr class="odd"><td>提供者</td><td>spring</td><td>java</td></tr><tr class="even"><td>注入方式</td><td>默认byType，可以通过 <code>@Qualifier</code>注解来显式指定名称Byname</td><td>默认ByName，当然两个都行，看配置</td></tr><tr class="odd"><td>使用范围</td><td>支持在构造函数、方法、字段和参数上使用</td><td>主要用于字段和方法上的注入，不支持在构造函数或参数上使用。</td></tr></tbody></table><ul><li><code>ByType</code>存在的问题：当一个接口存在多个实现类，如果不指定名称，那编译器就不知道该使用这个接口的哪一个抽象类。于是会根据你定义的<strong>成员变量名</strong>匹配</li></ul><h5 id="bean的作用域">bean的作用域</h5><ul><li>singleton：单例</li><li>prototype：多例</li><li><strong>request</strong> （仅 Web 应用可用）: 每一次 HTTP请求都会产生一个新的 bean（请求 bean），该 bean 仅在当前 HTTP request内有效。</li><li><strong>session</strong> （仅 Web 应用可用） : 每一次来自新 session的 HTTP 请求都会产生一个新的 bean（会话 bean），该 bean 仅在当前 HTTPsession 内有效。</li><li><strong>application/global-session</strong> （仅 Web应用可用）：每个 Web 应用在启动时创建一个 Bean（应用 Bean），该 bean仅在当前应用启动时间内有效。</li><li><strong>websocket</strong> （仅 Web 应用可用）：每一次 WebSocket会话产生一个新的 bean</li></ul><h5 id="bean是否线程安全">bean是否线程安全</h5><p>单例bean：如果这个bean存在状态，那么就是可能会出现竞争情况下的并发安全问题。</p><ul><li>状态：就是使用过程中会不会改变它的一些属性等等，一般项目中的bean如Dao、service了，我们只是简单的使用这个接口去调用它的方法并不会改变它的属性值</li></ul><p>多例bean：不会存在线程安全问题，因为每次获取都会创建一个新的 bean实例</p><h5 id="bean的生命周期">bean的生命周期</h5><p>bean的加载</p><ul><li>Bean 容器找到配置文件中 Spring Bean 的<strong>定义</strong>。</li><li>Bean 容器利用 Java Reflection API <strong>创建一个 Bean的实例。</strong></li><li>如果涉及到一些属性值 利用<code>set()</code>方法设置一些属性值。</li></ul><p>Aware</p><ul><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用<code>setBeanName()</code>方法，传入 Bean 的名字。</li><li>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用<code>setBeanClassLoader()</code>方法，传入<code>ClassLoader</code>对象的实例。</li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，调用<code>setBeanFactory()</code>方法，传入<code>BeanFactory</code>对象的实例。</li><li>与上面的类似，如果实现了其他<code>*.Aware</code>接口，就调用相应的方法。</li></ul><p>前置处理</p><ul><li>如果有和加载这个 Bean 的 Spring 容器相关的<code>BeanPostProcessor</code>对象，执行<code>postProcessBeforeInitialization()</code> 方法</li></ul><p>init</p><ul><li>如果 Bean实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</li><li>如果 Bean 在配置文件中的定义包含 init-method属性，执行指定的方法。</li></ul><p>后置处理</p><ul><li>如果有和加载这个 Bean 的 Spring 容器相关的<code>BeanPostProcessor</code>对象，执行<code>postProcessAfterInitialization()</code> 方法</li></ul><p>善后</p><ul><li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code>接口，执行 <code>destroy()</code> 方法。</li><li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含destroy-method 属性，执行指定的方法。</li></ul><figure><img src="java面试整理/24bc2bad3ce28144d60d9e0a2edf6c7f.jpg"alt="Spring Bean 生命周期" /><figcaption aria-hidden="true">Spring Bean 生命周期</figcaption></figure><figure><img src="java面试整理/b5d264565657a5395c2781081a7483e1.jpg"alt="Spring Bean 生命周期" /><figcaption aria-hidden="true">Spring Bean 生命周期</figcaption></figure><h3 id="aop-1">Aop</h3><p>AOP(Aspect-OrientedProgramming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p><p>基于动态代理实现：</p><ul><li>如果目标对象实现了某个接口，会用jdk动态代理</li><li>目标对象没有实现接口，会使用 <strong>Cglib</strong>生成一个被代理对象的<strong>子类</strong>来作为代理</li></ul><figure><img src="java面试整理/230ae587a322d6e4d09510161987d346.jpeg"alt="SpringAOPProcess" /><figcaption aria-hidden="true">SpringAOPProcess</figcaption></figure><p>AOP 切面编程设计到的一些专业术语：</p><table><colgroup><col style="width: 22%" /><col style="width: 77%" /></colgroup><thead><tr class="header"><th style="text-align: left;">术语</th><th style="text-align: center;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">目标(Target)</td><td style="text-align: center;">被通知的对象</td></tr><tr class="even"><td style="text-align: left;">代理(Proxy)</td><tdstyle="text-align: center;">向目标对象应用通知之后创建的代理对象</td></tr><tr class="odd"><td style="text-align: left;">连接点(JoinPoint)</td><tdstyle="text-align: center;">目标对象的所属类中，定义的所有方法均为连接点</td></tr><tr class="even"><td style="text-align: left;">切入点(Pointcut)</td><td style="text-align: center;">被切面拦截 /增强的连接点（切入点一定是连接点，连接点不一定是切入点）</td></tr><tr class="odd"><td style="text-align: left;">通知(Advice)</td><td style="text-align: center;">增强的逻辑 /代码，也即拦截到目标对象的连接点之后要做的事情</td></tr><tr class="even"><td style="text-align: left;">切面(Aspect)</td><td style="text-align: center;">切入点(Pointcut)+通知(Advice)</td></tr><tr class="odd"><td style="text-align: left;">Weaving(织入)</td><tdstyle="text-align: center;">将通知应用到目标对象，进而生成代理对象的过程动作</td></tr></tbody></table><h4 id="aspectj-aop">AspectJ AOP</h4><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong>Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(BytecodeManipulation)。</p><h5 id="通知类型">通知类型</h5><p><strong>Before</strong>（前置通知）：目标对象的方法调用之前触发</p><p><strong>After</strong> （后置通知）：目标对象的方法调用之后触发</p><p><strong>AfterReturning</strong>（返回通知）：目标对象的方法调用完成，在返回结果值之后触发</p><p><strong>AfterThrowing</strong>（异常通知）：目标对象的方法运行中抛出/ 触发异常后触发。AfterReturning 和 AfterThrowing两者互斥。如果方法调用成功无异常，则会有返回值；如果方法抛出了异常，则不会有返回值。</p><p><strong>Around</strong>（环绕通知）：编程式控制目标对象的方法调用。环绕通知是所有通知类型中可操作范围最大的一种，因为它可以直接拿到目标对象，以及要执行的方法，所以环绕通知可以任意的在目标对象的方法调用前后搞事，甚至不调用目标对象的方法</p><h3 id="springmvc">SpringMVC</h3><ul><li>模型Model：</li><li>视图View：</li><li>控制器controller：</li></ul><p>业务逻辑、数据、显示分离来组织代码。</p><p>Spring MVC 下我们一般把后端项目分为 Service 层（处理业务）、Dao层（数据库操作）、Entity 层（实体类）、Controller层(控制层，返回数据给前台页面)。</p><h4 id="核心组件">核心组件</h4><ul><li><strong><code>DispatcherServlet</code></strong>：<strong>核心的中央处理器</strong>，负责接收请求、分发，并给予客户端响应。</li><li><strong><code>HandlerMapping</code></strong>：<strong>处理器映射器</strong>，根据uri 去匹配查找能处理的 <code>Handler</code> ，并会将请求涉及到的拦截器和<code>Handler</code> 一起封装。</li><li><strong><code>HandlerAdapter</code></strong>：<strong>处理器适配器</strong>，根据<code>HandlerMapping</code> 找到的 <code>Handler</code> ，适配执行对应的<code>Handler</code>；</li><li><strong><code>Handler</code></strong>：<strong>请求处理器</strong>，处理实际请求的处理器。</li><li><strong><code>ViewResolver</code></strong>：<strong>视图解析器</strong>，根据<code>Handler</code> 返回的逻辑视图 /视图，解析并渲染真正的视图，并传递给 <code>DispatcherServlet</code>响应客户端</li></ul><h1 id="jvm">JVM</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;基础语法&quot;&gt;基础语法&lt;/h1&gt;
&lt;h2 id=&quot;基本数据类型&quot;&gt;基本数据类型&lt;/h2&gt;
&lt;h3 id=&quot;几种基本数据类型&quot;&gt;几种基本数据类型&lt;/h3&gt;
&lt;p&gt;8种数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6 种数字类型：
&lt;ul&gt;
&lt;li&gt;4
种整数型</summary>
      
    
    
    
    <category term="Java" scheme="https://vlsmhd.github.io/categories/Java/"/>
    
    <category term="面试" scheme="https://vlsmhd.github.io/categories/Java/%E9%9D%A2%E8%AF%95/"/>
    
    
  </entry>
  
  <entry>
    <title>2023年7至8月第六届字节青训营学习记录</title>
    <link href="https://vlsmhd.github.io/2023/07/24/2023%E5%B9%B47%E8%87%B38%E6%9C%88%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://vlsmhd.github.io/2023/07/24/2023%E5%B9%B47%E8%87%B38%E6%9C%88%E7%AC%AC%E5%85%AD%E5%B1%8A%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-07-24T14:06:32.157Z</published>
    <updated>2023-09-01T13:20:17.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程前置信息">课程前置信息</h1><p>文档：</p><p><ahref="https://bytedance.feishu.cn/docx/KwNudUZqQoGL6sxDzFscelaHnGg?contentTheme=DARK&amp;theme=LIGHT">‌⁡‌⁢⁢‌⁤‍‬﻿⁡⁣‍⁢‌⁤﻿‍﻿‍⁤‌‬﻿⁤﻿⁤⁡﻿‌‍⁡⁣⁡‬⁡‍‌‌‬﻿【开营班会】第六届字节跳动青训营-后端方向- 飞书云文档 (feishu.cn)</a></p><h1 id="go课程学习">Go课程学习</h1><h2 id="安装配置">安装配置</h2><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230726093804215.png"alt="image-20230726093804215" /><figcaption aria-hidden="true">image-20230726093804215</figcaption></figure><p>免安装版，安装完自动配置。</p><h2 id="基础语法入门">基础语法入门</h2><h3 id="helloworld程序">helloworld程序</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;helloworld&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run helloworld.go</span><br></pre></td></tr></table></figure><p>编译程序：生成可执行文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go build helloworld.go</span><br></pre></td></tr></table></figure><h3 id="基础语法">基础语法</h3><h4 id="基础数据类型">基础数据类型</h4><h5 id="字符串">字符串</h5><p>常用的解析外部传来的字符串：</p><ul><li>``` strconv <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 复合数据类型</span><br><span class="line"></span><br><span class="line">##### 数组</span><br><span class="line"></span><br><span class="line">定义格式：</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">var a [5]int</span><br><span class="line"></span><br><span class="line">b := [5]int&#123;1,2,3,4,5&#125; </span><br><span class="line"></span><br><span class="line">//二维数组</span><br><span class="line">var twoD[2][3]</span><br></pre></td></tr></table></figure></li></ul><h5 id="切片">切片</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>([]String, <span class="number">3</span>)</span><br><span class="line">s[<span class="number">0</span>] = <span class="string">&quot;a&quot;</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="string">&quot;b&quot;</span></span><br><span class="line">s[<span class="number">2</span>] = <span class="string">&quot;c&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>切片不同于数组<strong>可以任意更改长度</strong>。比如说我们可以用make来创建一个切片，可以像数组一样去取值，使用append来追加元素。</p><p>注意append的用法的话，你必须把append 的结果赋值为原数组。</p><p>因为slice的原理实际上是它有一个它存储了一个长度和一个容量，加一个指向一个数组的指升，在你执行append操作的时候，如果容量不够的话，会扩容并且返回新的 slice,slice此初始化的时候也可以指定长度。</p><p>slice拥有像python一样的切片操作，可以取出任意区间位置的元素，不包括第五个元素。不同于python，这里不支持负数索引</p><h5 id="map">map</h5><p>哈希表是一种巧妙并且实用的数据结构。它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//格式</span></span><br><span class="line"><span class="keyword">map</span>[K]V</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建map</span></span><br><span class="line">ages := <span class="built_in">make</span>(ages[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">ages[<span class="string">&quot;alice&quot;</span>] = <span class="number">31</span></span><br><span class="line">ages[<span class="string">&quot;charlie&quot;</span>] = <span class="number">34</span></span><br><span class="line"><span class="comment">//或者是</span></span><br><span class="line">ages := <span class="built_in">make</span>(ages[<span class="type">string</span>]<span class="type">int</span>)&#123;</span><br><span class="line">    <span class="string">&quot;alice&quot;</span> : <span class="number">31</span>,</span><br><span class="line">    <span class="string">&quot;charlie&quot;</span>: <span class="number">34</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问map</span></span><br><span class="line">fmt.<span class="built_in">print</span>(ages[<span class="string">&quot;alice&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="built_in">delete</span>(ages, <span class="string">&quot;alice&quot;</span>) <span class="comment">// remove element ages[&quot;alice&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//操作value</span></span><br><span class="line">ages[<span class="string">&quot;bob&quot;</span>]++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历map</span></span><br><span class="line"><span class="keyword">for</span> name,age := <span class="keyword">range</span> ages&#123;</span><br><span class="line">    fmt.<span class="built_in">print</span>(<span class="string">&quot;%s\t%d&quot;</span>,name,age)</span><br><span class="line">&#125;<span class="comment">//map的迭代顺序随机。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>K的要求：满足可以==比较的条件</li><li>无法取址：元素不是变量，不能取址</li></ul><h4 id="变量">变量</h4><p>go语言是强类型语言。</p><p><strong>正常声明变量的方法：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名字 类型 = 表达式</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i, j, k <span class="type">int</span>                 <span class="comment">// int, int, int</span></span><br><span class="line"><span class="keyword">var</span> b, f, s = <span class="literal">true</span>, <span class="number">2.3</span>, <span class="string">&quot;four&quot;</span> <span class="comment">// bool, float64, string</span></span><br></pre></td></tr></table></figure><p>其中“<em>类型</em>”或“<em>=表达式</em>”两个部分可以省略其中的一个。</p><ul><li>省略类型：根据初始化表达式来推导变量的类型信息。</li><li>省略表达式：用零值初始化该变量。</li></ul><p><strong>简短声明：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">名字 := 表达式</span><br></pre></td></tr></table></figure><p>单个：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">100</span>   </span><br></pre></td></tr></table></figure><p>一组：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i, j := <span class="number">0</span>, <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>“:=”是一个变量声明语句，而“=”是一个变量赋值操作。</p><h5 id="常量">常量</h5><p>由const定义。</p><h4 id="指针">指针</h4><p>go的指针操作有限。</p><p>对传参进行修改</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对变量进行 +1操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add1</span><span class="params">(n <span class="type">int</span> )</span></span> &#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">&#125;<span class="comment">//不起作用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add1ptr</span><span class="params">(n *<span class="type">int</span>)</span></span> &#123;<span class="comment">//指向一个int类型的指针</span></span><br><span class="line">    *n += <span class="number">1</span></span><br><span class="line">&#125;<span class="comment">//操作实际地址的变量，行得通</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    n := <span class="number">1</span></span><br><span class="line">    add1(n)</span><br><span class="line">    fmt.<span class="built_in">print</span>(n)<span class="comment">//1</span></span><br><span class="line">   add1ptr(n)</span><br><span class="line">    fmt.<span class="built_in">print</span>(n)<span class="comment">//2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数">函数</h4><p>类型后置是go语法的一个特征：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a,b <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go的原生函数支持函数返回2个值，第一个值是真正的结果，第二个值一般是业务逻辑的错误信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exist</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>, k <span class="type">string</span>)</span></span> v <span class="type">string</span>, ok <span class="type">bool</span>&#123;</span><br><span class="line">    v, ok = m[k]</span><br><span class="line">    <span class="keyword">return</span> v, ok</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结构体">结构体</h4><p>语法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">    name<span class="type">string</span></span><br><span class="line">    password<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对结构体的使用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    a := user&#123;name : <span class="string">&quot;wang&quot;</span> , password : <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">    b := &#123; <span class="string">&quot;wang&quot;</span>, <span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">    c := &#123;name : <span class="string">&quot;wang&quot;</span>&#125;</span><br><span class="line">    c.password = <span class="string">&quot;1234&quot;</span></span><br><span class="line">    <span class="keyword">var</span> d user</span><br><span class="line">    d.name = <span class="string">&quot;vls&quot;</span></span><br><span class="line">    d.password = <span class="string">&quot;1024&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="程序控制语句">程序控制语句</h4><h5 id="条件分支">条件分支</h5><p>if else：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件 &#123;</span><br><span class="line">执行逻辑</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> 条件&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面括号可省略、但是后面必须跟同行大括号。</p><p>switch：</p><p>go的switch语句case后面可以跟任何条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> [变量or常量]&#123;</span><br><span class="line">    <span class="keyword">case</span> t.hour() &lt; <span class="number">12</span>:</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里不需要写break，不同于c/c++，go的switch是指哪打哪，不会继续往下走。</p><h5 id="循环控制">循环控制</h5><p>go语言里仅有for循环，条件不用再加括号，同行 大括号必备。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">i := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> j := <span class="number">7</span> ; j &lt; <span class="number">9</span>; j++ &#123;</span><br><span class="line">    fmt.<span class="built_in">print</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例">案例</h3><h4 id="随机数猜数字案例">随机数——猜数字案例</h4><p>之前的代码实现：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math/rand&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">maxNUm := <span class="number">100</span></span><br><span class="line">secretNum := rand.Intn(maxNUm)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line">reader := bufio.NewReader(os.Stdin)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">input, err := reader.ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err!!!&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">input = strings.TrimSuffix(input, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">guess, err1 := strconv.Atoi(input)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;input err!&quot;</span>, err1)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;your guess is &quot;</span>, guess)</span><br><span class="line"><span class="keyword">if</span> guess &gt; secretNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;big!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;little!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺陷：从系统os里获取reader输入读取对象，然后进行一系列字符串的操作，变量接收等等，能不能简化这一过程呢？</p><h5 id="优化">优化：</h5><p>fmt.Scanf的用法：</p><p>使用<code>fmt.Scanf</code>直接读取用户输入，并且解析为整数。这样就避免了使用<code>bufio.NewReader</code>和字符串处理的过程，代码变得更加简洁。同时，也可以处理输入错误并向用户提供相应的提示。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line">maxNUm := <span class="number">100</span></span><br><span class="line">secretNum := rand.Intn(maxNUm)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;Please input your guess&quot;</span>)</span><br><span class="line"><span class="comment">// reader := bufio.NewReader(os.Stdin)</span></span><br><span class="line"><span class="keyword">var</span> guess <span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// input, err := reader.ReadString(&#x27;\n&#x27;)</span></span><br><span class="line"></span><br><span class="line">_, err := fmt.Scanf(<span class="string">&quot;%d&quot;</span>, &amp;guess)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;err!!!&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// input = strings.TrimSuffix(input, &quot;\r\n&quot;)</span></span><br><span class="line"><span class="comment">// guess, err := strconv.Atoi(input)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;input err!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> guess &gt; secretNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;big!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> guess &lt; secretNum &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;little!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里运行时会出现一个bug：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unexpected newline</span><br></pre></td></tr></table></figure><p>原因：</p><p>scanf换行的时候停止扫描，我们每猜一个数字，都会打一个回车键，然后windows的回车键对应的字符其实是：""，而scanf只是会遇到单纯的""停止，那么前面的"就会出错。直接忽略即可。</p><h2 id="进阶语法">进阶语法</h2><h2 id="依赖管理">依赖管理</h2><h2 id="测试">测试</h2><h2 id="高质量编程">高质量编程</h2><p>编程原则：</p><ul><li>简单</li><li>可读</li><li>高效产出</li></ul><h3 id="编码规范">编码规范</h3><h4 id="代码格式">代码格式</h4><p>可以使用gofmt自动格式化代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">gofmt  hello.go　　仅打印代码格式化后的结果</span><br><span class="line">gofmt   project　　格式化并重写project目录下所有 Go 源文件</span><br><span class="line"></span><br><span class="line">-w 参数可以将执行的修改应用的源文件中。</span><br><span class="line">gofmt  -w   filename</span><br><span class="line">    gofmt  -w  hello.go　　会格式化该源文件的代码然后将格式化后的代码覆盖原始内容</span><br><span class="line">    gofmt  -w  *.go格式化并重写所有 Go 源文件</span><br><span class="line"></span><br><span class="line">-r  参数可以对文件内容进行一些简单的替换</span><br><span class="line">    go  -r  &lt;原始内容&gt;  -&gt;  &lt;替换内容&gt;</span><br><span class="line">    gofmt   -r   &#x27;(a) -&gt; a&#x27;   –w   *.go会将源文件中没有意义的括号去掉</span><br><span class="line">    gofmt –r &#x27;A.Func1(a,b) -&gt; A.Func2(b,a)&#x27; –w *.go会将源文件中符合条件的函数的参数调换位置</span><br></pre></td></tr></table></figure><p>gofmt是一个独立的cli程序，而go中还有一个go fmt命令，gofmt命令是gofmt的简单封装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">usage: go fmt [-n] [-x] [packages]</span><br><span class="line"></span><br><span class="line">Fmt runs the command &#x27;gofmt -l -w&#x27; on the packages named</span><br><span class="line">by the import paths. It prints the names of the files that are modified.</span><br><span class="line">For more about gofmt, see &#x27;go doc cmd/gofmt&#x27;.</span><br><span class="line">For more about specifying packages, see &#x27;go help packages&#x27;.</span><br><span class="line">The -n flag prints commands that would be executed.</span><br><span class="line">The -x flag prints commands as they are executed.</span><br><span class="line">To run gofmt with specific options, run gofmt itself.</span><br><span class="line"></span><br><span class="line">See also: go fix, go vet.</span><br></pre></td></tr></table></figure><p>go fmt命令本身只有两个可选参数-n和-x，-n仅打印出内部要执行的gofmt的命令，-x命令既打印出gofmt命令又执行它，如果需要更细化的配置，需要直接执行gofmt命令。</p><h4 id="注释">注释</h4><p>注释应该做什么：</p><ul><li>解释代码作用</li><li>解释代码怎么做</li><li>解释代码为什么这样做</li><li>解释代码在什么情况下会出错</li></ul><p><strong>公共符号的注释必加：</strong></p><ul><li>包中声明的每个公共的符号：<strong>变量、常量、函数以及结构</strong>都需要添加注释</li><li>任何既不明显也不简短的公共功能必须予以注释</li><li>无论长度或复杂程度如何,对库中的任何函数都必须进行注释</li></ul><p>其实本质上我们还是要把代码写好，逻辑写通，命名规范，代码是最好的注释。</p><h4 id="命名规范">命名规范</h4><h5 id="变量-1">变量</h5><p>规范要素：</p><ul><li>尽可能简洁</li><li>缩略词全大写，但当其位于变量开头且不需要导出时，使用全小写，例如：<ul><li>例如使用ServeHTTP而不是ServeHttp</li><li>使用XMLHTTPRequest 或者xmlHTTPRequest</li></ul></li><li>变量距离其被使用的地方越<strong>远</strong>，则需要携带越多的上下文信息，因为全局变量在其名字中需要更多的上下文信息，使得在不同地方可以轻易辨认出其含义</li></ul><p>案例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index := <span class="number">0</span>...</span><br><span class="line"><span class="comment">//优化后</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span> ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>循环只有个循环体的情况下，index比i冗余，不易理解。</span><br></pre></td></tr></table></figure><h5 id="函数-1">函数</h5><ul><li>函数名不携带包名的上下文信息，因为包名和函数名总是成对出现的函数名尽量简短</li><li>当名为foo的包某个函数返回类型Foo时，可以省略类型信息而不导致歧义</li><li>当名为foo的包某个函数返回类型T时(T并不是Foo)，可以在函数名中加入类型</li></ul><h5 id="包">包</h5><ul><li><p>只由小写字母组成。不包含大写字母和下划线等字符</p></li><li><p>简短并包含一定的上下文信息。例如schema、task 等</p></li><li><p>不要与标准库同名。例如不要使用sync 或者strings</p></li><li><p>不使用常用变量名作为包名。例如使用bufio 而不是 buf</p></li><li><p>使用单数而不是复数。例如使用encoding而不是encodings</p></li><li><p>谨慎地使用缩写。例如使用fmt在不破坏上下文的情况下比 format更加简短</p></li></ul><h4 id="控制流程">控制流程</h4><p>避免嵌套：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ...&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">直接优化为：</span><br><span class="line"><span class="keyword">if</span> ...&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>保持代码路径最小缩进：</p><p>优先处理错误情况/特殊情况，尽早返回或继续循环来减少嵌套</p><p>原则：</p><ul><li>线性原理，处理逻辑尽量走直线，避免复杂的嵌套分支</li><li>正常流程代码沿着屏幕向下移动</li><li>提升代码可维护性和可读性</li><li>故障问题大多出现在复杂的条件语句和循环语句中</li></ul><h4 id="错误以及异常处理">错误以及异常处理</h4><h5 id="简单错误">简单错误</h5><ul><li>简单的错误指的是仅出现一次的错误，且在其他地方不需要捕获该错误</li><li>优先使用errors.New来创建匿名变量来直接表示简单错误</li><li>如果有格式化的需求，使用fmt.Errorf</li></ul><h5 id="错误的wrapunwrap">错误的wrap、unwrap</h5><ul><li>错误的Wrap 实际上是提供了一个error嵌套另一个error的能力，从而生成一个error的跟踪链</li><li>在fmt.Errorf中使用:%w关键字来将一个错误关联至错误链中</li></ul><h5 id="错误判定">错误判定</h5><ul><li>判定一个错误是否为特定错误，使用errors.Is<ul><li>不同于使用==，使用该方法可以判定错误链上的所有错误是否含有特定的错误</li></ul></li><li>在错误链上获取特定种类的错误，使用errors.As</li></ul><h5 id="defer语句">defer语句</h5><p>多个defer语句执行顺序：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">( )</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf( <span class="string">&quot;1&quot;</span>)<span class="comment">//1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Printf( <span class="string">&quot;2&quot;</span>)<span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">defer</span> fmt .Printf( <span class="string">&quot;3&quot;</span>)<span class="comment">//3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span>先进入栈，随后<span class="number">3</span>进入栈，然后按照后进先出的顺序执行：</span><br><span class="line">结果是<span class="number">31</span></span><br></pre></td></tr></table></figure><h3 id="性能优化">性能优化</h3><h4 id="benchmark工具">BenchMark工具</h4><p><strong>写一个benchmark的基准测试</strong></p><ol type="1"><li>基准测试代码文件必须是_test.go结尾，和单元测试一样；</li><li>基准测试的函数以Benchmark开头；</li><li>参数须为 *testing.B；</li><li>基准测试函数不能有返回值；</li><li>b.ResetTimer是重置计时器，这样可以避免<strong>关键代码</strong>之前的初始化代码的干扰；</li><li>b.N是基准测试框架提供的，Go会根据系统情况生成，不用用户设定，<strong>表示循环的次数</strong>，因为需要反复调用测试的代码，才可以评估性能；</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;testing&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkSprint</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">  b.ResetTimer()</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">    fmt.Sprint(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行：go test -bench=. -run=none</p><p>结果分析：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230729220455280.png"alt="image-20230729220455280" /><figcaption aria-hidden="true">image-20230729220455280</figcaption></figure><h4 id="合理使用slice">合理使用slice</h4><h5 id="slice预分配内存">slice预分配内存</h5><p>尽可能在使用make（）的时候，提供容量信息。</p><p>原因：数组容量虽然会自行扩容，但是扩容会增加资源开销。</p><p>扩容过程：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230731111325839.png"alt="image-20230731111325839" /><figcaption aria-hidden="true">image-20230731111325839</figcaption></figure><h5 id="大内存未释放">大内存未释放</h5><ul><li>在已有切片基础上创建切片，不会创建新的底层数组</li><li>场景<ul><li>原切片较大，代码在原切片基础上新建小切片</li><li>原底层数组在内存中有引用，得不到释放</li></ul></li><li>可使用copy替代re-slice</li></ul><h4 id="字符串处理">字符串处理</h4><p>使用strings.Builder</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StrBuilder</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> builder strings.Builder;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++&#123;</span><br><span class="line">        builder.WriteString(str)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> builder.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用buf</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StrBuilder</span><span class="params">(n <span class="type">int</span>, str <span class="type">string</span>)</span></span> <span class="type">string</span>&#123;</span><br><span class="line">    buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++&#123;</span><br><span class="line">        buf.WriteString(str)</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> buf.String()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能对比</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230731114833532.png"alt="image-20230731114833532" /><figcaption aria-hidden="true">image-20230731114833532</figcaption></figure><p>相比传统利用+进行字符串拼接，使用以上两种方法的效率、性能都很高。</p><h4 id="空结构体使用">空结构体使用</h4><p>使用空结构体节省内存</p><ul><li>空结构体struct{}实例不占据任何的内存空间</li><li>可作为各种场景下的占位符使用<ul><li>节省资源</li><li>空结构体本身具备很强的语义，即这里不需要任何值，仅作为占位符</li></ul></li></ul><p>案例：</p><p>实现set的map的第二个数据类型就是采用struct{}占位符操作。</p><h4 id="atomic包">atomic包</h4><p>注意：</p><ul><li>锁的实现是通过操作系统来实现，属于系统调用</li><li>atomic操作是通过硬件实现，效率比锁高</li><li>sync.Mutex应该用来保护一段逻辑，不仅仅用于保护一个变量</li><li>对于非数值操作，可以使用atomic.Value，能承载一个interface{}</li></ul><h3 id="性能调优实战">性能调优实战</h3><h4 id="性能调优工具pprof">性能调优工具pprof</h4><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230731155349216.png"alt="image-20230731155349216" /><figcaption aria-hidden="true">image-20230731155349216</figcaption></figure><h2 id="httpgo网络框架">HTTP——go网络框架</h2><p>超文本传输协议：（Hypertext Transfer Protocol）。</p><h3 id="协议内容">协议内容</h3><h4 id="常见方法名">常见方法名</h4><ul><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTION</li><li>STRACE</li><li>PATCH</li></ul><h4 id="状态码">状态码</h4><p>状态码:</p><ul><li>1xx:信息类</li><li>2xx:成功</li><li>3xx: 重定向</li><li>4xx:客户端错误</li><li>5xx:服务端错误</li></ul><h4 id="请求方法内容">请求方法内容</h4><ul><li>请求行/状态行<ul><li>请求行：方法名、URL、协议版本</li><li>状态行：协议版本、状态码、状态码描述</li></ul></li><li>请求头/响应头<ul><li>业务相关内容</li></ul></li><li>请求体/响应体</li></ul><h3 id="http框架设计">HTTP框架设计</h3><p>怎么设计？</p><ol type="1"><li><p>明确需求:考虑清楚要解决什么问题、有哪些需求</p></li><li><p>业界调研:业界都有哪些解决方案可供参考</p></li><li><p>方案权衡:思考不同方案的取舍</p></li><li><p>方案评审:相关同学对不同方案做评审</p></li><li><p>确定开发:确定最合适的方案进行开发</p></li></ol><h4 id="分层设计">分层设计</h4><p>OSI参考模型</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230805110352870.png"alt="image-20230805110352870" /><figcaption aria-hidden="true">image-20230805110352870</figcaption></figure><p>分层设计架构图</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230805113053536.png"alt="image-20230805113053536" /><figcaption aria-hidden="true">image-20230805113053536</figcaption></figure><p>盖尔定律：一个切实可行的复杂系统势必是从一个切实可行的简单系统发展而来的。从头开始设计的复杂系统根本不切实可行，无法修修补补让它切实可行。你必须由一个切实可行的简单系统重新开始。</p><h5 id="应用层">应用层</h5><ul><li>提供合理API<ul><li>易理解</li><li>简单</li></ul></li></ul><h5 id="中间件">中间件</h5><ul><li>配合Handler实现一个完整的请求处理生命周期</li><li>拥有预处理逻辑与后处理逻辑<ul><li>相当于调用方法，AOP思想</li></ul></li><li>可以注册多中间件</li><li>对上层模块用户逻辑模块易用</li></ul><p>遵循洋葱模型：</p><p><img src="2023年7至8月第六届字节青训营学习记录/image-20230805113435637.png" alt="image-20230805113435637" style="zoom:67%;" /></p><p>模型适用创建：</p><ul><li>日志</li><li>性能监控</li><li>事务处理</li><li>异常处理</li></ul><h5 id="路由设计">路由设计</h5><p>URI是URL的父级。</p><p>URL：完整的链接</p><p>URI：服务资源相对路径</p><p>框架路由实际上就是为<strong>URL</strong>匹配对应的处理函数（Handlers)</p><ul><li>静态路由:/a/b/c、/a/b/d</li><li>参数路由:/a/ :id/c (/a/b/c，/a/d/c)、/*all</li><li>路由修复:/a/b &lt;-&gt; /a/b/</li><li>冲突路由以及优先级:/a/b、/ :id/c</li><li>匹配 HTTP方法</li><li>多处理函数:方便添加中间件</li></ul><h6 id="路由匹配算法">路由匹配算法</h6><p>前缀树</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230805114134292.png"alt="image-20230805114134292" /><figcaption aria-hidden="true">image-20230805114134292</figcaption></figure><h6 id="匹配http方法">匹配http方法</h6><p>路由映射表：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230805114254660.png"alt="image-20230805114254660" /><figcaption aria-hidden="true">image-20230805114254660</figcaption></figure><p>根据method进行http方法筛选。</p><h5 id="协议层设计">协议层设计</h5><p>抽象出合适的接口：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">interface</span>&#123;</span><br><span class="line">    Serve(c context.Context, conn network.Conn) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="网络层设计">网络层设计</h5><h6 id="bio">BIO</h6><p>阻塞IO：如果未接收到信息，会一直等待。</p><p>执行逻辑：接收到连接请求过后，生成一个goRoutine去等待客户端响应（忙等）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        conn,_ := listener.Accept()</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">            conn.Read(request)</span><br><span class="line">            </span><br><span class="line">            handler</span><br><span class="line">            </span><br><span class="line">            conn.Write(response)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go net</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Conn <span class="keyword">interface</span>&#123;</span><br><span class="line">    Read</span><br><span class="line">    Write</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="nio">NIO</h6><p>改进阻塞状态，注册监听器监听：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>&#123;</span><br><span class="line">        readableConns, _ := Monitor(conns)</span><br><span class="line">        <span class="keyword">for</span> conn := <span class="keyword">range</span> readableConns&#123;</span><br><span class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">                conn.Read(request)</span><br><span class="line"></span><br><span class="line">                handler</span><br><span class="line"></span><br><span class="line">                conn.Write(response)</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多路复用。</p><p>netpoll</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span>&#123;</span><br><span class="line">    Peek(n <span class="type">int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Write <span class="keyword">interface</span>&#123;</span><br><span class="line">    Malloc()</span><br><span class="line">    Flush</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="网络与部署">网络与部署</h2><h3 id="打开抖音会发生什么">打开抖音会发生什么</h3><h4 id="网络接入">网络接入</h4><h5 id="互联网模型">互联网模型</h5><p><img src="2023年7至8月第六届字节青训营学习记录/image-20230806091922545.png" alt="image-20230806091922545" style="zoom:67%;" /></p><h5 id="路由">路由</h5><p>路由的非对称性：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230806094328262.png"alt="image-20230806094328262" /><figcaption aria-hidden="true">image-20230806094328262</figcaption></figure><p>所谓对称性就是指：你沿着一条路路由到终点，但是返回的路不一定是同一条。</p><p>路由工作在网络层，通过修改源地址传输的包文件中的<strong>MAC地址</strong>来为其导航。</p><h5 id="arp协议">ARP协议</h5><p>在当前服务器或者路由结点上，发送广播到相邻的服务器端，寻找下一跳MAC地址（并不是最终地址）。</p><h5 id="ip协议">IP协议</h5><p>服务器唯一一个</p><p>客户端唯一一个。</p><h5 id="nat">NAT</h5><p>工作流程：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230806100551958.png"alt="image-20230806100551958" /><figcaption aria-hidden="true">image-20230806100551958</figcaption></figure><h4 id="网络传输">网络传输</h4><h5 id="数据包">数据包</h5><p>客户端发到服务器的包全流程</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230806100854790.png"alt="image-20230806100854790" /><figcaption aria-hidden="true">image-20230806100854790</figcaption></figure><h5 id="dns">DNS</h5><p>发送的请求先通过DNS解析：</p><ol type="1"><li>客户端发起访问www.baidu.com的请求</li><li>本地DNS先向<strong>根服务器</strong> . 询问，域名在哪</li><li>根把顶级域名服务器com. 地址告诉本地DNS，让本地DNS去访问</li><li>顶级域名服务器把权威服务器 com.baidu 告诉本地DNS让它去访问</li><li>最后权威服务器把真实的ip地址</li></ol><p><img src="2023年7至8月第六届字节青训营学习记录/image-20230806101217228.png" alt="image-20230806101217228" style="zoom:67%;" /></p><h6 id="dns传输协议udp">DNS传输协议UDP</h6><p>UDP包：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230806101625185.png"alt="image-20230806101625185" /><figcaption aria-hidden="true">image-20230806101625185</figcaption></figure><p>保证UDP协议可靠？</p><p>①超时重传（定时器）</p><p>②有序接受（添加包序号）将数据包进行编号，按照包的顺序接收并存储。</p><p>③应答确认 （Seq/Ack应答机制）</p><p>④滑动窗口流量控制等机制 （滑动窗口协议）</p><h2 id="gorm框架">gorm框架</h2><p>Gorm是一个已经迭代了10年+的功能强大的ORM框架，拥有非常丰富的开源扩展。</p><p>特征：</p><ul><li>全功能ORM</li><li>关联（包含一个，包含多个，属于，多对多）</li><li>Callbacks（创建/保存/更新/删除/查找前后回调）</li><li>预加载</li><li>事务</li><li>复合主键</li><li>SQL Builder（执行原生sql）</li><li>自动迁移</li><li>日志</li></ul><h3 id="gorm的基本使用">gorm的基本使用</h3><ol type="1"><li><p>定义gorm model</p><p>第二个为详细定义，格式固定为<code>gorm:"column : 设置/值"</code>，感觉已经赶得上建表语句了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Product <span class="keyword">struct</span>&#123;</span><br><span class="line">    Code <span class="type">string</span></span><br><span class="line">    Price <span class="type">uint</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  gorm.Model</span><br><span class="line">  Name <span class="type">string</span>  <span class="string">`gorm:&quot;size:255&quot;`</span> <span class="comment">//string默认长度255,size重设长度</span></span><br><span class="line">  Age <span class="type">int</span> <span class="string">`gorm:&quot;column:my_age&quot;`</span> <span class="comment">//设置列名为my_age</span></span><br><span class="line">  Num <span class="type">int</span>  <span class="string">`gorm:&quot;AUTO_INCREMENT&quot;`</span> <span class="comment">//自增</span></span><br><span class="line">  IgnoreMe <span class="type">int</span> <span class="string">`gorm:&quot;-&quot;`</span> <span class="comment">// 忽略字段</span></span><br><span class="line">  Email <span class="type">string</span> <span class="string">`gorm:&quot;type:varchar(100);unique_index&quot;//type设置sql类型，unique_index为该列设置唯一索引`</span></span><br><span class="line">  Address <span class="type">string</span> <span class="string">`gorm:&quot;not null;unique&quot;`</span> <span class="comment">//非空</span></span><br><span class="line">  no <span class="type">string</span> <span class="string">`gorm:&quot;index:idx_no&quot;`</span> <span class="comment">// 创建索引并命名，如果有其他同名索引，则创建组合索引</span></span><br><span class="line">  code <span class="type">string</span> <span class="string">`gorm:&quot;index:idx_no&quot;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">  Profile Profile <span class="string">`gorm:&quot;ForeignKey:ProfileID;AssociationForeignKey:Refer&quot;`</span> <span class="comment">//设置外键</span></span><br><span class="line">  ProfileID <span class="type">int</span></span><br><span class="line">  remark <span class="type">string</span> <span class="string">`gorm:&quot;default:&#x27;test&#x27;&quot;`</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给model绑定表名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Product)</span></span> TableName() <span class="type">string</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;product&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>连接数据库</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db, err := gorm.Open(</span><br><span class="line">    mysql.Open(<span class="string">&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>),</span><br><span class="line">    &amp;gorm.Config&#123;&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;failed to connect database&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>增删改查</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增加</span></span><br><span class="line">db.Create(&amp;Product&#123;</span><br><span class="line">Code : <span class="string">&quot;666&quot;</span>,</span><br><span class="line">    Price : <span class="number">20</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">db.First(&amp;Product, <span class="number">1</span>)<span class="comment">//根据整形主键查找</span></span><br><span class="line">db.First(&amp;Product, <span class="string">&quot;code = ? &quot;</span> , <span class="string">&quot;D42&quot;</span>)</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">db.Model(&amp;Product).Update(<span class="string">&quot;Price&quot;</span>, <span class="number">200</span>)</span><br><span class="line">db.Model(&amp;Product).Updates(Product&#123;Price : <span class="number">200</span>, Code : <span class="string">&quot;666&quot;</span>&#125;)</span><br><span class="line">db.Model(&amp;Product).Updates(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;Price&quot;</span>:<span class="number">200</span>, <span class="string">&quot;Code&quot;</span> : <span class="string">&quot;666&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">db.<span class="built_in">delete</span>(&amp;Product, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="增">增</h4><p>唯有create方法需要&amp;符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;Name: <span class="string">&quot;Jinzhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;</span><br><span class="line"></span><br><span class="line">db.NewRecord(user) <span class="comment">// =&gt; 主键为空返回`true`</span></span><br><span class="line"></span><br><span class="line">db.Create(&amp;user)</span><br><span class="line"></span><br><span class="line">db.NewRecord(user) <span class="comment">// =&gt; 创建`user`后返回`false`</span></span><br></pre></td></tr></table></figure><p>创建多条：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">users := []*User&#123;&#123;Name: <span class="string">&quot;Jin2zhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;,&#123;Name: <span class="string">&quot;Jin1zhu&quot;</span>, Age: <span class="number">18</span>, Birthday: time.Now()&#125;&#125;</span><br><span class="line"></span><br><span class="line">db.Create(users)</span><br></pre></td></tr></table></figure><h4 id="删">删</h4><p>删除</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除存在的记录</span></span><br><span class="line">db<span class="selector-class">.Delete</span>(&amp;email)</span><br><span class="line"><span class="comment">//// DELETE from emails where id=10;</span></span><br></pre></td></tr></table></figure><h5 id="批量删除">批量删除</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.Where</span>(<span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>)<span class="selector-class">.Delete</span>(Email&#123;&#125;)</span><br><span class="line"><span class="comment">//// DELETE from emails where email LIKE &quot;%jinhu%&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.Delete</span>(Email&#123;&#125;, <span class="string">&quot;email LIKE ?&quot;</span>, <span class="string">&quot;%jinzhu%&quot;</span>)</span><br><span class="line"><span class="comment">//// DELETE from emails where email LIKE &quot;%jinhu%&quot;;</span></span><br></pre></td></tr></table></figure><h5 id="软删除">软删除</h5><p>如果模型有DeletedAt字段，删除时是软删除</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.Delete</span>(&amp;user)</span><br><span class="line"><span class="comment">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE id = 111;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 批量删除</span></span><br><span class="line">db<span class="selector-class">.Where</span>(&quot;age = ?&quot;, <span class="number">20</span>)<span class="selector-class">.Delete</span>(&amp;User&#123;&#125;)</span><br><span class="line"><span class="comment">//// UPDATE users SET deleted_at=&quot;2013-10-29 10:23&quot; WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 软删除的记录将在查询时被忽略</span></span><br><span class="line">db<span class="selector-class">.Where</span>(&quot;age = <span class="number">20</span>&quot;)<span class="selector-class">.Find</span>(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Unscoped查找软删除的记录</span></span><br><span class="line">db<span class="selector-class">.Unscoped</span>()<span class="selector-class">.Where</span>(&quot;age = <span class="number">20</span>&quot;)<span class="selector-class">.Find</span>(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Unscoped永久删除记录</span></span><br><span class="line">db<span class="selector-class">.Unscoped</span>()<span class="selector-class">.Delete</span>(&amp;order)</span><br><span class="line"><span class="comment">//// DELETE FROM orders WHERE id=10;</span></span><br></pre></td></tr></table></figure><h4 id="改">改</h4><p>更新全部字段 Save</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.First(<span class="operator">&amp;</span><span class="keyword">user</span>)</span><br><span class="line"></span><br><span class="line">user.Name <span class="operator">=</span> &quot;jinzhu 2&quot;</span><br><span class="line">user.Age <span class="operator">=</span> <span class="number">100</span></span><br><span class="line">db.Save(<span class="operator">&amp;</span><span class="keyword">user</span>)</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">UPDATE</span> users <span class="keyword">SET</span> name<span class="operator">=</span><span class="string">&#x27;jinzhu 2&#x27;</span>, age<span class="operator">=</span><span class="number">100</span>, birthday<span class="operator">=</span><span class="string">&#x27;2016-01-01&#x27;</span>, updated_at <span class="operator">=</span> <span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">111</span>;</span><br></pre></td></tr></table></figure><p>更新更改字段 Update Updates</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 更新单个属性（如果更改）</span><br><span class="line">db.Model(&amp;user).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">//// UPDATE <span class="built_in">users</span> SET name=<span class="string">&#x27;hello&#x27;</span>, updated_at=<span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> WHERE <span class="built_in">id</span>=111;</span><br><span class="line"></span><br><span class="line">// 使用组合条件更新单个属性</span><br><span class="line">db.Model(&amp;user).Where(<span class="string">&quot;active = ?&quot;</span>, <span class="literal">true</span>).Update(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">//// UPDATE <span class="built_in">users</span> SET name=<span class="string">&#x27;hello&#x27;</span>, updated_at=<span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> WHERE <span class="built_in">id</span>=111 AND active=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">// 使用`map`更新多个属性，只会更新这些更改的字段</span><br><span class="line">db.Model(&amp;user).Updates(map[string]interface&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: 18, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">//// UPDATE <span class="built_in">users</span> SET name=<span class="string">&#x27;hello&#x27;</span>, age=18, actived=<span class="literal">false</span>, updated_at=<span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> WHERE <span class="built_in">id</span>=111;</span><br><span class="line"></span><br><span class="line">// 使用`struct`更新多个属性，只会更新这些更改的和非空白字段</span><br><span class="line">db.Model(&amp;user).Updates(User&#123;Name: <span class="string">&quot;hello&quot;</span>, Age: 18&#125;)</span><br><span class="line">//// UPDATE <span class="built_in">users</span> SET name=<span class="string">&#x27;hello&#x27;</span>, age=18, updated_at = <span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> WHERE <span class="built_in">id</span> = 111;</span><br><span class="line"></span><br><span class="line">// 警告:当使用struct更新时，FORM将仅更新具有非空值的字段</span><br><span class="line">// 对于下面的更新，什么都不会更新为<span class="string">&quot;&quot;</span>，0，<span class="literal">false</span>是其类型的空白值</span><br><span class="line">db.Model(&amp;user).Updates(User&#123;Name: <span class="string">&quot;&quot;</span>, Age: 0, Actived: <span class="literal">false</span>&#125;)</span><br></pre></td></tr></table></figure><p>更新选择字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.Model(&amp;user).Select(<span class="string">&quot;name&quot;</span>).Updates(map[string]interface&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: 18, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">//// UPDATE <span class="built_in">users</span> SET name=<span class="string">&#x27;hello&#x27;</span>, updated_at=<span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> WHERE <span class="built_in">id</span>=111;</span><br><span class="line"></span><br><span class="line">db.Model(&amp;user).Omit(<span class="string">&quot;name&quot;</span>).Updates(map[string]interface&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;age&quot;</span>: 18, <span class="string">&quot;actived&quot;</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">//// UPDATE <span class="built_in">users</span> SET age=18, actived=<span class="literal">false</span>, updated_at=<span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> WHERE <span class="built_in">id</span>=111;</span><br></pre></td></tr></table></figure><h5 id="使用sql表达式更新">使用sql表达式更新</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DB.Model(&amp;product).Update(<span class="string">&quot;price&quot;</span>, gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>))</span><br><span class="line">//// UPDATE <span class="string">&quot;products&quot;</span> <span class="built_in">SET</span> <span class="string">&quot;price&quot;</span> = price * <span class="string">&#x27;2&#x27;</span> + <span class="string">&#x27;100&#x27;</span>, <span class="string">&quot;updated_at&quot;</span> = <span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> <span class="built_in">WHERE</span> <span class="string">&quot;id&quot;</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).Updates(map[<span class="built_in">string</span>]interface&#123;&#125;&#123;<span class="string">&quot;price&quot;</span>: gorm.Expr(<span class="string">&quot;price * ? + ?&quot;</span>, <span class="number">2</span>, <span class="number">100</span>)&#125;)</span><br><span class="line">//// UPDATE <span class="string">&quot;products&quot;</span> <span class="built_in">SET</span> <span class="string">&quot;price&quot;</span> = price * <span class="string">&#x27;2&#x27;</span> + <span class="string">&#x27;100&#x27;</span>, <span class="string">&quot;updated_at&quot;</span> = <span class="string">&#x27;2013-11-17 21:34:10&#x27;</span> <span class="built_in">WHERE</span> <span class="string">&quot;id&quot;</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line">//// UPDATE <span class="string">&quot;products&quot;</span> <span class="built_in">SET</span> <span class="string">&quot;quantity&quot;</span> = quantity - <span class="number">1</span> <span class="built_in">WHERE</span> <span class="string">&quot;id&quot;</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line">DB.Model(&amp;product).Where(<span class="string">&quot;quantity &gt; 1&quot;</span>).UpdateColumn(<span class="string">&quot;quantity&quot;</span>, gorm.Expr(<span class="string">&quot;quantity - ?&quot;</span>, <span class="number">1</span>))</span><br><span class="line">//// UPDATE <span class="string">&quot;products&quot;</span> <span class="built_in">SET</span> <span class="string">&quot;quantity&quot;</span> = quantity - <span class="number">1</span> <span class="built_in">WHERE</span> <span class="string">&quot;id&quot;</span> = <span class="string">&#x27;2&#x27;</span> AND quantity &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="查">查</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一条记录，按主键排序</span></span><br><span class="line">db.First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY id LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后一条记录，按主键排序</span></span><br><span class="line">db.Last(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users ORDER BY id DESC LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有记录</span></span><br><span class="line">db.Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用主键获取记录</span></span><br><span class="line">db.First(&amp;user, <span class="number">10</span>)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id = 10;</span></span><br></pre></td></tr></table></figure><p>First踩坑注意：</p><ul><li>使用 First时，需要注意查询不到数据会返回ErrRecordNotFound。</li><li>使用Find查询多条数据，查询不到数据不会返回错误。</li></ul><h5 id="where条件查询">where条件查询</h5><p>where简单sql</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个匹配记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; limit 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有匹配记录</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27;;</span></span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;name &lt;&gt; ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// IN</span></span><br><span class="line">db.Where(<span class="string">&quot;name in (?)&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// LIKE</span></span><br><span class="line">db.Where(<span class="string">&quot;name LIKE ?&quot;</span>, <span class="string">&quot;%jin%&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AND</span></span><br><span class="line">db.Where(<span class="string">&quot;name = ? AND age &gt;= ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;22&quot;</span>).Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Time</span></span><br><span class="line">db.Where(<span class="string">&quot;updated_at &gt; ?&quot;</span>, lastWeek).Find(&amp;users)</span><br><span class="line"></span><br><span class="line">db.Where(<span class="string">&quot;created_at BETWEEN ? AND ?&quot;</span>, lastWeek, today).Find(&amp;users)</span><br></pre></td></tr></table></figure><p>where(struct &amp; Map)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Where(&amp;User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>, Age: <span class="number">20</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20 LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line">db.Where(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">20</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name = &quot;jinzhu&quot; AND age = 20;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 主键的Slice</span></span><br><span class="line">db.Where([]<span class="type">int64</span>&#123;<span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id IN (20, 21, 22);</span></span><br></pre></td></tr></table></figure><h5 id="not条件查询">not条件查询</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">db.Not(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot; LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Not In</span></span><br><span class="line">db.Not(<span class="string">&quot;name&quot;</span>, []<span class="type">string</span>&#123;<span class="string">&quot;jinzhu&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>&#125;).Find(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name NOT IN (&quot;jinzhu&quot;, &quot;jinzhu 2&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Not In slice of primary keys</span></span><br><span class="line">db.Not([]<span class="type">int64</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE id NOT IN (1,2,3);</span></span><br><span class="line"></span><br><span class="line">db.Not([]<span class="type">int64</span>&#123;&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Plain SQL</span></span><br><span class="line">db.Not(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE NOT(name = &quot;jinzhu&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Struct</span></span><br><span class="line">db.Not(User&#123;Name: <span class="string">&quot;jinzhu&quot;</span>&#125;).First(&amp;user)</span><br><span class="line"><span class="comment">//// SELECT * FROM users WHERE name &lt;&gt; &quot;jinzhu&quot;;</span></span><br></pre></td></tr></table></figure><h5 id="select">select</h5><p>从数据库检索字段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.Select(<span class="string">&quot;name, age&quot;</span>).Find(&amp;<span class="built_in">users</span>)</span><br><span class="line">//// SELECT name, age FROM <span class="built_in">users</span>;</span><br><span class="line"></span><br><span class="line">db.Select([]string&#123;<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>&#125;).Find(&amp;<span class="built_in">users</span>)</span><br><span class="line">//// SELECT name, age FROM <span class="built_in">users</span>;</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;COALESCE(age,?)&quot;</span>, 42).Rows()</span><br><span class="line">//// SELECT COALESCE(age,<span class="string">&#x27;42&#x27;</span>) FROM <span class="built_in">users</span>;</span><br></pre></td></tr></table></figure><h5 id="order">Order</h5><p>从数据库检索记录时指定顺序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.Order(&quot;age desc, name&quot;).Find(<span class="operator">&amp;</span>users)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">desc</span>, name;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> Multiple orders</span><br><span class="line">db.Order(&quot;age desc&quot;).<span class="keyword">Order</span>(&quot;name&quot;).Find(<span class="operator">&amp;</span>users)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">desc</span>, name;</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ReOrder</span><br><span class="line">db.Order(&quot;age desc&quot;).Find(<span class="operator">&amp;</span>users1).<span class="keyword">Order</span>(&quot;age&quot;, <span class="literal">true</span>).Find(<span class="operator">&amp;</span>users2)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age <span class="keyword">desc</span>; (users1)</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span><span class="operator">/</span> <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">ORDER</span> <span class="keyword">BY</span> age; (users2)</span><br></pre></td></tr></table></figure><h5 id="limit">Limit</h5><p>指定要检索的记录数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.Limit</span>(<span class="number">3</span>)<span class="selector-class">.Find</span>(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users LIMIT 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel limit condition with -1</span></span><br><span class="line">db<span class="selector-class">.Limit</span>(<span class="number">10</span>)<span class="selector-class">.Find</span>(&amp;users1)<span class="selector-class">.Limit</span>(-<span class="number">1</span>)<span class="selector-class">.Find</span>(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users LIMIT 10; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure><h5 id="offset">Offset</h5><p>指定在开始返回记录之前要跳过的记录数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db<span class="selector-class">.Offset</span>(<span class="number">3</span>)<span class="selector-class">.Find</span>(&amp;users)</span><br><span class="line"><span class="comment">//// SELECT * FROM users OFFSET 3;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Cancel offset condition with -1</span></span><br><span class="line">db<span class="selector-class">.Offset</span>(<span class="number">10</span>)<span class="selector-class">.Find</span>(&amp;users1)<span class="selector-class">.Offset</span>(-<span class="number">1</span>)<span class="selector-class">.Find</span>(&amp;users2)</span><br><span class="line"><span class="comment">//// SELECT * FROM users OFFSET 10; (users1)</span></span><br><span class="line"><span class="comment">//// SELECT * FROM users; (users2)</span></span><br></pre></td></tr></table></figure><h5 id="count">Count</h5><p>获取模型的记录数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Or(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu 2&quot;</span>).Find(&amp;users).Count(&amp;count)</span><br><span class="line"><span class="comment">//// SELECT * from USERS WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (users)</span></span><br><span class="line"><span class="comment">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27; OR name = &#x27;jinzhu 2&#x27;; (count)</span></span><br><span class="line"></span><br><span class="line">db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">//// SELECT count(*) FROM users WHERE name = &#x27;jinzhu&#x27;; (count)</span></span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;deleted_users&quot;</span>).Count(&amp;count)</span><br><span class="line"><span class="comment">//// SELECT count(*) FROM deleted_users;</span></span><br></pre></td></tr></table></figure><h5 id="group-having">Group &amp; Having</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rows, err := db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Date  time.Time</span><br><span class="line">    Total <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line">db.Table(<span class="string">&quot;orders&quot;</span>).Select(<span class="string">&quot;date(created_at) as date, sum(amount) as total&quot;</span>).Group(<span class="string">&quot;date(created_at)&quot;</span>).Having(<span class="string">&quot;sum(amount) &gt; ?&quot;</span>, <span class="number">100</span>).Scan(&amp;results)</span><br></pre></td></tr></table></figure><h5 id="join">Join</h5><p>指定连接条件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Rows()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.Table(<span class="string">&quot;users&quot;</span>).Select(<span class="string">&quot;users.name, emails.email&quot;</span>).Joins(<span class="string">&quot;left join emails on emails.user_id = users.id&quot;</span>).Scan(&amp;results)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个连接与参数</span></span><br><span class="line">db.Joins(<span class="string">&quot;JOIN emails ON emails.user_id = users.id AND emails.email = ?&quot;</span>, <span class="string">&quot;jinzhu@example.org&quot;</span>).Joins(<span class="string">&quot;JOIN credit_cards ON credit_cards.user_id = users.id&quot;</span>).Where(<span class="string">&quot;credit_cards.number = ?&quot;</span>, <span class="string">&quot;411111111111&quot;</span>).Find(&amp;user)</span><br></pre></td></tr></table></figure><h4 id="原生sql构建">原生sql构建</h4><p>执行原生sql</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.Exec(<span class="string">&quot;DROP TABLE users;&quot;</span>)</span><br><span class="line">db.Exec(<span class="string">&quot;UPDATE orders SET shipped_at=? WHERE id IN (?)&quot;</span>, time.Now, []<span class="type">int64</span>&#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scan</span></span><br><span class="line"><span class="keyword">type</span> Result <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result Result</span><br><span class="line">db.Raw(<span class="string">&quot;SELECT name, age FROM users WHERE name = ?&quot;</span>, <span class="number">3</span>).Scan(&amp;result)</span><br></pre></td></tr></table></figure><p>sql.Row &amp; sql.Rows</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">row := db.Table(<span class="string">&quot;users&quot;</span>).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age&quot;</span>).Row() <span class="comment">// (*sql.Row)</span></span><br><span class="line">row.Scan(&amp;name, &amp;age)</span><br><span class="line"></span><br><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">    rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Raw SQL</span></span><br><span class="line">rows, err := db.Raw(<span class="string">&quot;select name, age, email from users where name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">    ...</span><br><span class="line">    rows.Scan(&amp;name, &amp;age, &amp;email)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3)迭代中使用sql.Rows的Scan</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rows, err := db.Model(&amp;User&#123;&#125;).Where(<span class="string">&quot;name = ?&quot;</span>, <span class="string">&quot;jinzhu&quot;</span>).Select(<span class="string">&quot;name, age, email&quot;</span>).Rows() <span class="comment">// (*sql.Rows, error)</span></span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line">  <span class="keyword">var</span> user User</span><br><span class="line">  db.ScanRows(rows, &amp;user)</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="事务">事务</h4><p>Gorm提供了Begin、Commit、Rollback方法用于使用事务</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateAnimals</span><span class="params">(db *gorm.DB)</span></span> err &#123;</span><br><span class="line">  tx := db.Begin()</span><br><span class="line">  <span class="comment">// 注意，一旦你在一个事务中，使用tx作为数据库句柄</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Giraffe&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> err := tx.Create(&amp;Animal&#123;Name: <span class="string">&quot;Lion&quot;</span>&#125;).Error; err != <span class="literal">nil</span> &#123;</span><br><span class="line">     tx.Rollback()</span><br><span class="line">     <span class="keyword">return</span> err</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  tx.Commit()</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意，在一个事务中，使用tx作为数据库句柄</li></ul><h4 id="hook">Hook</h4><p>GORM在提供了CURD的Hook 能力。</p><p>Hook是在创建、查询、更新、删除等操作之前、之后自动调用的函数。</p><p>如果任何Hook返回错误，GORM将停止后续的操作并回滚事务。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID<span class="type">int64</span></span><br><span class="line">Name<span class="type">string</span> <span class="string">&#x27;gorm : &quot;default: galeone&quot;`</span></span><br><span class="line"><span class="string">Ageint64 `gorm : &quot;default:18&quot;`</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">type Email struct &#123;</span></span><br><span class="line"><span class="string">IDint64</span></span><br><span class="line"><span class="string">Name string</span></span><br><span class="line"><span class="string">    Email string</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (u *User) BeforeCreate(tx *gorm.DB) (err error)&#123;</span></span><br><span class="line"><span class="string">    if u.Age &lt; 0&#123;</span></span><br><span class="line"><span class="string">        return errors.New(&quot;con&#x27;</span>t save invalid data<span class="string">&quot;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func (u *User) AfterCreate(tx *gorm.DB) (err error)&#123;</span></span><br><span class="line"><span class="string">    return tx.Create(&amp;Email&#123;ID : u.ID, Email : u.Name + &quot;</span>@***.com<span class="string">&quot;&#125;).Error</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="项目连接案例">项目连接案例</h3><p>gorm核心：用于初始化数据库连接。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> core</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">GormLogger 包裹zap的SugaredLogger作为Gorm的Logger</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">type</span> GormLogger <span class="keyword">struct</span> &#123;</span><br><span class="line">Logger *zap.SugaredLogger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(gl GormLogger)</span></span> Printf(s <span class="type">string</span>, i ...<span class="keyword">interface</span>&#123;&#125;) &#123;</span><br><span class="line">gl.Logger.Infof(strings.ReplaceAll(s, <span class="string">&quot;\u001b&quot;</span>, <span class="string">&quot; &quot;</span>), i...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">initGormMysql 初始化mysql连接</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initGormMysql</span><span class="params">()</span></span> &#123;</span><br><span class="line">mysqlConfig := config.DefaultConfiguration.Datasource.Mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">//将zap的WriteSyncer作为Gorm的日志输出位置</span></span><br><span class="line">gormLogger := logger.New(GormLogger&#123;Logger: global.Logger&#125;, logger.Config&#123;</span><br><span class="line">SlowThreshold:             <span class="number">200</span> * time.Millisecond,</span><br><span class="line">LogLevel:                  logger.Info,</span><br><span class="line">IgnoreRecordNotFoundError: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">//必须关闭，否则日志输出会乱码</span></span><br><span class="line">Colorful: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">datasource, err := gorm.Open(mysql.Open(mysqlConfig.DSN), &amp;gorm.Config&#123;</span><br><span class="line">Logger: gormLogger,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">mysqlDb, err := datasource.DB()</span><br><span class="line">mysqlDb.SetMaxIdleConns(mysqlConfig.MaxIdleConnections)</span><br><span class="line">mysqlDb.SetMaxOpenConns(mysqlConfig.MaxOpenConnections)</span><br><span class="line">mysqlDb.SetConnMaxLifetime(time.Duration(mysqlConfig.ConnectionMaxLifetime) * time.Second)</span><br><span class="line"><span class="keyword">if</span> err = mysqlDb.Ping(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">global.Datasource = datasource</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接相关属性配置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Datasource <span class="keyword">struct</span> &#123;</span><br><span class="line">Mysql *Mysql</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Mysql <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">//DSN 为datasource name 格式为&quot;user:pass@tcp(127.0.0.1:3306)/dbname?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span></span><br><span class="line">DSN <span class="type">string</span></span><br><span class="line"><span class="comment">//最大空闲连接数</span></span><br><span class="line">MaxIdleConnections <span class="type">int</span></span><br><span class="line"><span class="comment">//最大开启连接数</span></span><br><span class="line">MaxOpenConnections <span class="type">int</span></span><br><span class="line"><span class="comment">//连接最大存活时间 秒</span></span><br><span class="line">ConnectionMaxLifetime <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DefaultDataSource = &amp;Datasource&#123;</span><br><span class="line">Mysql: &amp;Mysql&#123;</span><br><span class="line">DSN:                   <span class="string">&quot;root:********@tcp(192.168.200.129:3306)/tiktok?charset=utf8mb4&amp;parseTime=True&amp;loc=Local&quot;</span>,</span><br><span class="line">MaxIdleConnections:    <span class="number">10</span>,</span><br><span class="line">MaxOpenConnections:    <span class="number">20</span>,</span><br><span class="line">ConnectionMaxLifetime: <span class="number">300</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DAO层的使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SaveVideoInfo</span><span class="params">(video *entity.Video)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line"></span><br><span class="line">res := global.Datasource.Table(<span class="string">&quot;video&quot;</span>).Create(&amp;video)</span><br><span class="line"><span class="keyword">if</span> res.Error != <span class="literal">nil</span> &#123;</span><br><span class="line">global.Logger.Error(res.Error)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库相关概念">数据库相关概念</h3><p>支持的数据库：MySQL、SQLServer、PostgreSQL、SQLite。</p><p><strong>数据库的DSN：</strong></p><p>是一种名称（数据来源名称），应用程序用来请求与 ODBC数据源连接的名称，它会存储连接详细信息，例如数据库名称、目录、数据库驱动程序、UserID、密码等。</p><p>数据库建立好之后，要设定系统的DSN（数据来源名称），才能让网页可以知道数据库所在的位置以及数据库相关的属性。</p><h2 id="对象存储">对象存储</h2><p>特性：</p><ul><li>易用</li><li>廉价</li><li>海量存储</li></ul><p>易用性：</p><p><img src="2023年7至8月第六届字节青训营学习记录/image-20230816231308836.png" alt="image-20230816231308836" style="zoom:80%;" /></p><p>对象存储服务提供的接口：</p><ul><li>GET：下载</li><li>HEAD：查看对象元信息</li><li>PUT：上传对象</li><li>DELETE：删除对象</li></ul><p>Bucket/Object语义</p><ul><li>Bucket:存储对象的桶，可类比一个云上的Map</li><li>Object:对象，包含如下三个部分<ul><li>Key:对象的名字，可类比Map的Key</li><li>Data:对象的内容，例如视频/图片内容</li><li>MetaData:对象的一些元信息，如对象大小，对</li><li>象Content-Type，也可以存储自定义元信息</li></ul></li></ul><h3 id="对象存储tos的使用">对象存储TOS的使用</h3><p>restful风格：</p><p><img src="2023年7至8月第六届字节青训营学习记录/image-20230816232005545.png" alt="image-20230816232005545" style="zoom:67%;" /></p><h4 id="multiupload接口">MultiUpload接口</h4><p>执行流程：</p><p><img src="2023年7至8月第六届字节青训营学习记录/image-20230816232107761.png" alt="image-20230816232107761" style="zoom:67%;" /></p><p>lnitUpload:</p><ul><li>参数: Bucket, Key</li><li>返回: Uploadld</li></ul><p>UploadPart</p><ul><li>参数: Uploadld,Partld ,Part</li><li>内容返回:成功/失败</li></ul><p>CompleteUpload :</p><ul><li>参数:Uploadld,Partld Array</li><li>返回:成功/失败</li></ul><h4 id="listprefix接口">Listprefix接口</h4><p>ListPrefix参数:</p><p>prefix: key前缀</p><p>delimiter:分隔符，默认为/</p><p>max-keys:本次分页数量</p><p>start-after:分页起始对象Key</p><p>ListPrefix返回: common-prefix:共同前缀</p><p>objects:对象key列表</p><p>isTruncated:是否已经列举完</p><h2 id="网络安全概述">网络安全概述</h2><p>常见的安全事件</p><p><strong>数据泄漏</strong>国公共卫生系统公布了一起大规模数据泄露事件，超130万人受到该事件影响。入侵网站的黑客可获取到病人的个人信息，其中包括病人的出生日期、家庭住址等。</p><p><strong>服务瘫痪</strong>某老牌航空公司因遭黑客攻击，官网出现技术性故障，整个系统突然崩溃中断。当天几乎所有航班均被延误,后续超188个航班受到影响。</p><p><strong>成果失窃</strong>某芯片制造巨头被爆逋到勒索软件攻击，入侵者成功访问并在线泄露了员工私密信息及登录数据,黑客宣称可以访问1TB的企业数据。</p><p><strong>系统劫持</strong>某国导弹袭击警报响彻云霄，持续了几乎一个小时，疑为网络攻击引发的误报。</p><p><strong>蓝军</strong></p><p>反向验证企业内部安全现状,以攻促防</p><p><strong>红军</strong></p><p>系统建设时候帮助企业提前规避漏洞</p><h3 id="服务端漏洞">服务端漏洞</h3><h4 id="第三方组件漏洞">第三方组件漏洞</h4><p>导入的第三方组件可能存在bug或者系统漏洞，会破坏我们系统的安全。</p><p>解决：</p><p>java中可以选择使用dependency-check-maven检查项目以来的组件是否存在安全漏洞</p><h4 id="sql注入">SQL注入</h4><ol type="1"><li><p>错误使用语言框架，或者框架本身存在安全问题</p><p>使用Mybatis-plus的危险函数，比如inSql，支持直接SQL拼接，存在SQL注入风险。</p></li><li><p>mybatis使用$构建SQL模板</p><p>使用「$」，实际的SQL语句:<code>SELECT id,name,pwd,age FROM t_user_info WHERE id = 'xx'</code>会存在sql注入风险。</p><p>而使用#就不会出现，因为用了？作为参数占位符：</p><p>使用「#」，实际的SQL语句:<code>SELECT id,name,pwd,age FROM t_user_info WHERE id = ?</code></p></li><li><p>go中常见错误写法。</p><p>业务场景经常遇到根据用户定义的字段进行排序的功能，如果直接将用户输入字段作为维度带到Order则会产生sQL注入，假设GORM语句为:db.Order(param).Find(&amp;products)</p><p>正常情况用户输入维度字段即可实现自定义排序</p><p>param: codeSQL语句:<code>SELECT * FROM products WHERE products . deleted_atIS NULL ORDER BY code</code></p><p>攻击者可以输入sql语句来实现sql注入：</p><p>param: if(1, sleep(10),'code') SOL语句:<code>SELECT* FROM productsWHEREproducts deleted_at lS NULORDER BY if(1, sleep(10), 'code')</code></p></li></ol><p>防护方式：</p><ul><li>尽量不要基于DB的Raw方法拼接构造SQL语句，而应该使用预编译、ORM框架</li><li>使用ORM框架时，应该注意框架中的特性，可能存在不安全的写法导致的SQL注入问题。</li><li>在复杂场景一定要使用拼接SQL，需要对外部输入进行转义。</li></ul><h4 id="命令执行">命令执行</h4><p>代码中遇到需要调用某个命令才能完成的功能时候，会涉及到命令拼接，如果命令拼接没有做好安全过滤，那么将会导致命令注入风险，服务器权限将会被控制</p><p>防护方式：</p><ol type="1"><li>对动态的值尽可能设置白名单进行验证。</li><li>如果某些位置无法白名单，需要尝试对数据类型进行校验。</li><li>特殊字符黑名单的过滤，或者转义。</li></ol><h4 id="越权漏洞">越权漏洞</h4><p><strong>认证</strong>：你是谁</p><p><strong>授权</strong>：你能做什么？</p><p><strong>越权</strong>：越过权限去做自己不能做的事</p><p><strong>未授权：</strong></p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825150055160.png"alt="image-20230825150055160" /><figcaption aria-hidden="true">image-20230825150055160</figcaption></figure><p><strong>水平越权：</strong></p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825150108119.png"alt="image-20230825150108119" /><figcaption aria-hidden="true">image-20230825150108119</figcaption></figure><p>防护方式:涉及资源id尽量不要使用短id(遍历难度较小)，同时最重要的一定要做好<strong>资源属主校验</strong>（资源属于谁）</p><p><strong>垂直越权</strong>：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825150119178.png"alt="image-20230825150119178" /><figcaption aria-hidden="true">image-20230825150119178</figcaption></figure><p>黑灰产场景:攻击者可以通过开通另外的测试管理员账户抓包获取接口，或者通过逆向前端代码方式获取实际接口，然后绕过前端直接尝试访问后端接口，获取数据详情。</p><p>防护方式:如果是简单的场景，可以将接口在路由级别进行分组，对不同的API分组引入Middleware进行权限拦截,Middleware获取当前用户角色以确定是否可以访问此接口。</p><h4 id="ssrf">SSRF</h4><p>SSRF又称服务端请求伪造攻击，指攻击者利用后端服务器为跳板，让后端服务<strong>向非预期网络地址（主要指内网地址)发出恶意请求，获取敏感信息</strong>或执行恶意操作。</p><p>SSRF的形成大多是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。例如，黑客操作服务端从指定URL地址获取网页文本内容，加载指定地址的图片等，利用的是服务端的请求伪造。SSRF利用存在缺陷的Web应用作为代理攻击远程和本地的服务器。主要攻击方式如下所示。</p><ul><li>对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息。</li><li>攻击运行在内网或本地的应用程序。</li><li>对内网Web应用进行指纹识别，识别企业内部的资产信息。</li><li>攻击内外网的Web应用，主要是使用HTTPGET请求就可以实现的攻击(比如struts2、SQli等)。</li><li>利用file协议读取本地文件等。</li></ul><p>参考文章：<ahref="https://www.cnblogs.com/miruier/p/13907150.html">SSRF漏洞（原理、挖掘点、漏洞利用、修复建议）- Saint_Michael - 博客园 (cnblogs.com)</a></p><h4 id="文件上传漏洞">文件上传漏洞</h4><p>找到公开的上传点(如视频创作/文章创作/客服反馈等)，上传恶意文件（恶意视频、图片)，获取图片url，然后直接分享url至外部恶意网站或QQ/微信群。</p><p>防护方案:</p><ol type="1"><li><p>限制文件类型:如果系统只需要图片类型，可以从服务端解析文件格式，限制只能传入特定的文件格式。</p></li><li><p>站库分离:应用部署的位置和上传的文件分离，一般可以使用TOS、OSs等进行文件存储。</p></li><li><p>防止图床:对图片访问链接进行限制，包括时间限制，访问身份限制等。</p></li></ol><p>​</p><h3 id="客户端漏洞">客户端漏洞</h3><h4 id="开放重定向">开放重定向</h4><p>开放重定向:某些需要重定向到其他站点的功能，往往在参数中携带需要重定向的URL，但实际程序逻辑没有控制好重定向的范围，导致攻击者可以构造恶意链接，诱导用户重定向到恶意站点。</p><p>危害:钓鱼攻击。</p><p>修复方案:对重定向严格进行白名单控制并正确校验匹配白名单。</p><h4 id="xss">XSS</h4><p>跨站脚本(XSS)攻击:本质是一种Script代码注入,攻击者往目标Web页面里插入恶意Script代码,当用户访问页面(有客户端时需要交互)时，嵌入其中Web 里面的Script 代码会被执行，从而达到恶意攻击用户的目的。</p><p>场景:反射型,存储型,Dom型</p><p>危害:通常的危害包括窃取用户敏感信息，以用户身份执行敏感操作。</p><p>案例：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825155529331.png"alt="image-20230825155529331" /><figcaption aria-hidden="true">image-20230825155529331</figcaption></figure><ol type="1"><li>构造恶意链接，将username设置为恶意payload</li><li>攻击者通过网站反馈入口，向管理员/运营人员发送恶意链接。</li><li>攻击者的服务器成功收到管理员/运营人员的Session Cookie。</li><li>浏览器替换cookie为管理员的,获取管理员权限。</li></ol><p>防护方法:</p><ol type="1"><li>输入过滤:对输入的特殊字符进行拦截，禁止前端提交特殊字符</li><li>输出过滤:<ol type="a"><li>当字符输出到Dom时候，对危险字符进行html encode，避免XSS。</li><li>使用vue/react等框架时候，避免使用危险指令，而应该使用安全指令。v-htmI/v-text</li></ol></li><li>富文本场景:比如文章发布场景，本身是需要提供富文本功能，这时候需要严格限制tag和attribute，可以在代码层面做白名单或者黑名单。<tag attribute1='valuel' attribute2='value2'/></li><li>CSP:用于缓解XSS，理念是对当前站点允许加载什么源的资源、发送什么请求能进行限制。<code>Content-Security-Policy: default-src 'self; img-src *; media-src example.org example.net;script-src userscripts.example.com</code></li></ol><h4 id="csrf">CSRF</h4><p>跨站请求伪造(CSRF):允许攻击者<strong>诱导</strong>用户访问恶意链接，执行用户非预期执行的操作。</p><p>危害:用户执行敏感操作，如关注其他用户，或者更改账号的安全邮箱等。</p><p>更改邮箱案例：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825155945492.png"alt="image-20230825155945492" /><figcaption aria-hidden="true">image-20230825155945492</figcaption></figure><ol type="1"><li>将更改Email的请求生成CSRF表单，并构造钓鱼链接。</li><li>发送链接给其他用户。</li><li>用户点击链接后成功执行email更改操作。</li></ol><p>防护方式:防护的核心是判断请求的来源</p><ol type="1"><li><p>CSRFtokens:首次访问时候给客户端传递一个token，客户端每次访问时候都必须带上此token才能访问。</p></li><li><p>SameSite cookies: Strick -&gt; Lax(Default) -&gt;None.核心是禁止某些场景发送第三方cookie。</p></li><li><p>Referer-based validation:校验Referer来源是否是合法站点。</p></li></ol><h4 id="点击劫持">点击劫持</h4><p>点击劫持(clickjacking)是一种在网页中将恶意代码等隐藏在看似无害或者存在诱导的内容(如按钮之下，并诱使用户点击的手段，用户点击后往往会执行一些非预期的操作。</p><ol type="1"><li>参考如下代码构造钓鱼页面链接。</li></ol><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825161037366.png"alt="image-20230825161037366" /><figcaption aria-hidden="true">image-20230825161037366</figcaption></figure><p>代码效果：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230825161841378.png"alt="image-20230825161841378" /><figcaption aria-hidden="true">image-20230825161841378</figcaption></figure><ol start="2" type="1"><li><p>发送链接给其他用户。</p></li><li><p>用户访问链接，点击「Win 300$」时候，实际是点击「DeleteAccount]</p></li></ol><p>防护方式:</p><p>防护的核心是不让非预期的网站 iframe 我的站点</p><ol type="1"><li><p>X-Frame-Options: DENY/SAMEORIGIN</p></li><li><p>CSP: frame-ancestors指令，用于设置允许frame的source列表。Content-Security-Policy: frame-ancestors<space separated list of sources>; Content-Security-Policy:frame-ancestors 'self' https://example.orghttps://example.comhttps://store.example.com;</p></li></ol><h4 id="cors跨域配置错误">cors跨域配置错误</h4><p>CORS错误配置:CORS本身不存在漏洞，而是由于开发者在配置CORS过程中，错误配置跨域访问AllowList，导致非预期的站点可以进行跨域访问，最终可能导致信息泄漏。</p><p>常见几种错误配置: 以需要跨域访问example.com所有子域名为例</p><ol type="1"><li>前缀/后缀/包含/正则匹配:可用example.com.attack.com.attackexample.com、attackaexample.com域名绕过。</li><li>在Access-Control-Allow-Origin中反射请求的Origin值。理论上可以用任意域名绕过。</li><li>信任null:攻击者还可以从任意域下通过iframesandbox构造Origin为null的跨域请求</li><li>https信任http:http传输存在被劫持篡改可能，攻击者可能通过劫持通信流量注入恶意脚本方式窃取敏感信息。</li></ol><h2 id="git-的正确使用姿势与最佳实践">Git 的正确使用姿势与最佳实践</h2><h3 id="svn与git的区别">SVN与git的区别</h3><p>SVN是<strong>集中式</strong>版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p><p>Git是<strong>分布式</strong>版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><h3 id="安装与配置">安装与配置</h3><p>安装省略...</p><p><strong>配置：</strong></p><p>登录信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;&lt;用户名&gt;&quot;</span><br><span class="line">$ git config --global user.email &quot;&lt;电子邮件&gt;&quot;</span><br></pre></td></tr></table></figure><p>启用Git的彩色显示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui auto</span><br></pre></td></tr></table></figure><p>命令别名设置：还可以为Git命令设置别名。例如，将"checkout"命令缩写为"co"，然后只需使用"co"来执行相应的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br></pre></td></tr></table></figure><h3 id="初始化本地仓库版本库">初始化本地仓库（版本库）</h3><p>版本库：版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以<strong>被Git管理</strong>起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。</p><p>找到一个文件目录（或者自行创建），然后使用<code>git init</code>，表名当前文件夹就是创建的本地仓库，并且已经初始化。</p><p>.git文件：</p><p>当前目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。</p><h3 id="添加文件到仓库">添加文件到仓库</h3><p>在工作目录下，编写了新的文件，名为readme.txt：</p><ol type="1"><li>使用命令<code>git add readme.txt</code>添加到<strong>暂存区</strong>里面去</li><li>用命令 git commit告诉Git，把文件提交到仓库。</li></ol><p>现在我们已经提交了一个readme.txt文件了，我们下面可以通过命令<code>git status</code>来查看是否还有文件未提交</p><p>现在修改readme文件，但是没执行上面两条保存命令，可以使用<code>git diff readme.txt</code>查看修改的内容。</p><h1 id="vs-code学习">VS code学习</h1><h2 id="vscode配置go开发环境">vsCode配置go开发环境</h2><ol type="1"><li>安装go</li><li>vscode安装go插件</li><li>打开任何包含 Go 代码的目录或工作区以自动激活 扩展名。<ahref="https://github.com/golang/vscode-go/wiki/ui">Go 状态栏</a>显示在窗口的左下角，并显示您的 Go 版本。</li><li>扩展依赖于 、 和其他可选工具。如果缺少任何依赖项，<code>go``gopls``dlv</code>⚠️<code>Analysis Tools Missing</code>警告将显示。单击警告以下载依赖项。</li></ol><h3 id="运行第一个go项目">运行第一个go项目</h3><ol type="1"><li><p>创建一个文件夹目录，vscode打开改目录</p></li><li><p>输入指令:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod init vls.com/learn</span><br></pre></td></tr></table></figure></li></ol><h2 id="vscode安装go插件失败问题">vscode安装go插件失败问题</h2><p>原因：没走代理，访问不到资源</p><p>解决：</p><ol type="1"><li><p>在teminal里输入以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 新版改成如下链接</span><br><span class="line">go env -w GO111MODULE=on</span><br><span class="line">go env -w GOPROXY=https://proxy.golang.com.cn,direct</span><br></pre></td></tr></table></figure></li><li><p>重启vsCode重新安装即可。</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230726101703271.png"alt="image-20230726101703271" /><figcaption aria-hidden="true">image-20230726101703271</figcaption></figure></li></ol><h1 id="项目">项目</h1><h2 id="项目简介">项目简介</h2><p>实现极简版抖音</p><h2 id="项目功能实现">项目功能实现</h2><h3 id="发布视频">发布视频</h3><h4 id="阿里云oss使用权限">阿里云oss使用权限</h4><ol type="1"><li><p>创建完阿里oss存储，一定要去创建用户，然后创建用户的可用AccessKey</p></li><li><p>创建完用户，在oss某个存储桶去设置权限</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230820172426055.png"alt="image-20230820172426055" /><figcaption aria-hidden="true">image-20230820172426055</figcaption></figure></li><li><p>给创建的用户设置权限即可：</p><figure><imgsrc="2023年7至8月第六届字节青训营学习记录/image-20230820172453299.png"alt="image-20230820172453299" /><figcaption aria-hidden="true">image-20230820172453299</figcaption></figure></li></ol><h4 id="总体代码">总体代码</h4><p>controller</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课程前置信息&quot;&gt;课程前置信息&lt;/h1&gt;
&lt;p&gt;文档：&lt;/p&gt;
&lt;p&gt;&lt;a
href=&quot;https://bytedance.feishu.cn/docx/KwNudUZqQoGL6sxDzFscelaHnGg?contentTheme=DARK&amp;amp;the</summary>
      
    
    
    
    <category term="字节青训营" scheme="https://vlsmhd.github.io/categories/%E5%AD%97%E8%8A%82%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode哈希表题目专项训练</title>
    <link href="https://vlsmhd.github.io/2023/07/06/leetcode%E5%93%88%E5%B8%8C%E8%A1%A8%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/"/>
    <id>https://vlsmhd.github.io/2023/07/06/leetcode%E5%93%88%E5%B8%8C%E8%A1%A8%E9%A2%98%E7%9B%AE%E4%B8%93%E9%A1%B9%E8%AE%AD%E7%BB%83/</id>
    <published>2023-07-06T02:37:18.266Z</published>
    <updated>2023-09-11T03:50:55.635Z</updated>
    
    <content type="html"><![CDATA[<h2 id="哈希表使用技巧">哈希表使用技巧</h2><h3 id="数组">数组</h3><p>下标作为hash值，值自定义。</p><p>一般对于英文字母都是：<code>new int[26]</code>，<code>'字符' - 'a'</code>作为下标</p><h3 id="hashmap">HashMap</h3><h3 id="hashset">HashSet</h3><h1 id="题目">题目</h1><h2 id="简单">简单</h2><h3 id="有效的字母异位词"><ahref="https://leetcode.cn/problems/valid-anagram/">242.有效的字母异位词</a></h3><p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code>，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code>的字母异位词。</p><p><strong>注意：</strong>若 <code>*s*</code> 和 <code>*t*</code>中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code>互为字母异位词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h4 id="数组哈希表">数组哈希表</h4><p>首先两个字符串的长度必须相等。</p><p>随后统计每个字符出现的次数，s出现就++，t出现就--，最后哈希表中应该全部值都为0.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            hash[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            c = t.charAt(i);</span><br><span class="line">            hash[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赎金信"><a href="https://leetcode.cn/problems/ransom-note/">383.赎金信</a></h3><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code>，判断 <code>ransomNote</code> 能不能由 <code>magazine</code>里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code>中使用一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：ransomNote = <span class="string">&quot;a&quot;</span>, magazine = <span class="string">&quot;b&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：ransomNote = <span class="string">&quot;aa&quot;</span>, magazine = <span class="string">&quot;ab&quot;</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：ransomNote = <span class="string">&quot;aa&quot;</span>, magazine = <span class="string">&quot;aab&quot;</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="数组哈希表-1">数组哈希表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"><span class="comment">//因为magazine范围更大一点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : magazine.toCharArray())&#123;</span><br><span class="line">            map[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : ransomNote.toCharArray()) &#123;</span><br><span class="line">            map[c - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(map[c - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="同构字符串"><ahref="https://leetcode.cn/problems/isomorphic-strings/">205.同构字符串</a></h3><p>给定两个字符串 <code>s</code> 和 <code>t</code>，判断它们是否是同构的。</p><p>如果 <code>s</code> 中的字符可以按某种映射关系替换得到 <code>t</code>，那么这两个字符串是同构的。</p><p>每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;egg&quot;, t = &quot;add&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;foo&quot;, t = &quot;bar&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;paper&quot;, t = &quot;title&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h4 id="双映射哈希表">双映射哈希表</h4><p>每个字符串维护一个哈希表，存储自己的字符对应的映射情况。</p><p>如果遇到相同的字符，发现对应的映射字符与之前不匹配，则返回false；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsomorphic</span><span class="params">(String s, String t)</span> &#123;</span><br><span class="line">        Map&lt;Character, Character&gt; s2t = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;();</span><br><span class="line">        Map&lt;Character, Character&gt; t2s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Character, Character&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> s.charAt(i), y = t.charAt(i); </span><br><span class="line">            <span class="keyword">if</span>((s2t.containsKey(x) &amp;&amp; s2t.get(x) != y) || (t2s.containsKey(y) &amp;&amp; t2s.get(y) != x))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            s2t.put(x, y);</span><br><span class="line">            t2s.put(y, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单词规律"><ahref="https://leetcode.cn/problems/word-pattern/">290. 单词规律</a></h3><p>给定一种规律 <code>pattern</code> 和一个字符串 <code>s</code> ，判断<code>s</code> 是否遵循相同的规律。</p><p>这里的 <strong>遵循</strong> 指完全匹配，例如， <code>pattern</code>里的每个字母和字符串 <code>s</code>中的每个非空单词之间存在着双向连接的对应规律。</p><p><strong>示例1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: pattern = &quot;abba&quot;, s = &quot;dog cat cat dog&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:pattern = &quot;abba&quot;, s = &quot;dog cat cat fish&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: pattern = &quot;aaaa&quot;, s = &quot;dog cat cat dog&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h4 id="双哈希表双指针">双哈希表+双指针</h4><p>双指针为了截取s中的字符串，提升效率用的。</p><p>双哈希表则表示字符和单词的映射关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordPattern</span><span class="params">(String pattern, String s)</span> &#123;</span><br><span class="line">        Map&lt;Character, String&gt; ch2str  = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, Character&gt; str2ch  = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//剪枝</span></span><br><span class="line">        <span class="keyword">if</span>(pattern.length() != s.split(<span class="string">&quot; &quot;</span>).length)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> pattern.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="comment">//双指针找s中单词</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> <span class="number">0</span>; p &lt; n; p++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> pattern.charAt(p);</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= m)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; m &amp;&amp; s.charAt(j) != <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">word</span> <span class="operator">=</span> s.substring(i, j);</span><br><span class="line">            <span class="keyword">if</span>(ch2str.containsKey(ch) &amp;&amp;  !word.equals(ch2str.get(ch)))&#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(str2ch.containsKey(word) &amp;&amp; str2ch.get(word) != ch)&#123;</span><br><span class="line">                <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            ch2str.put(ch, word);</span><br><span class="line">            str2ch.put(word, ch);</span><br><span class="line">            <span class="comment">//双指针更新</span></span><br><span class="line">            i = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="两数之和"><a href="https://leetcode.cn/problems/two-sum/">1.两数之和</a></h3><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">2</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">解释：因为 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] == <span class="number">9</span> ，返回 [<span class="number">0</span>, <span class="number">1</span>] 。</span><br></pre></td></tr></table></figure><h4 id="算法分析">算法分析</h4><h5 id="哈希表">哈希表</h5><p>借助哈希表，我们遍历数组的每一个元素x，要判断target -x是否也在数组里。</p><p>那我们就可以把nums中的元素都加到hash表中当成key，value为在数组中的下标，然后遍历数组，去判断每个元素x对应的target-x是否在哈希表中，如果在哈希表，就说明存在，返回即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(k))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i, map.get(k)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串中的第一个唯一字符"><ahref="https://leetcode.cn/problems/first-unique-character-in-a-string/">387.字符串中的第一个唯一字符</a></h3><p>给定一个字符串 <code>s</code> ，找到<em>它的第一个不重复的字符，并返回它的索引</em> 。如果不存在，则返回<code>-1</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;leetcode&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;loveleetcode&quot;</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><h4 id="算法分析-1">算法分析</h4><h5 id="哈希表-1">哈希表</h5><p>哈希表记录每个字符出现的次数，然后第二趟遍历，从已给的字符串开始遍历，去哈希表查出现的次数，为1就返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : chars)&#123;</span><br><span class="line">            hash[c - <span class="number">97</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(hash[ch - <span class="number">97</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最常见的单词"><ahref="https://leetcode.cn/problems/most-common-word/">819.最常见的单词</a></h3><p>给定一个段落 (paragraph) 和一个禁用单词列表(banned)。返回出现次数最多，同时不在禁用列表中的单词。</p><p>题目保证至少有一个词不在禁用列表中，而且答案唯一。</p><p>禁用列表中的单词用小写字母表示，不含标点符号。段落中的单词不区分大小写。答案都是小写字母。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">paragraph = &quot;Bob hit a ball, the hit BALL flew far after it was hit.&quot;</span><br><span class="line">banned = [&quot;hit&quot;]</span><br><span class="line">输出: &quot;ball&quot;</span><br><span class="line">解释: </span><br><span class="line">&quot;hit&quot; 出现了3次，但它是一个禁用的单词。</span><br><span class="line">&quot;ball&quot; 出现了2次 (同时没有其他单词出现2次)，所以它是段落里出现次数最多的，且不在禁用列表中的单词。 </span><br><span class="line">注意，所有这些单词在段落里不区分大小写，标点符号需要忽略（即使是紧挨着单词也忽略， 比如 &quot;ball,&quot;）， </span><br><span class="line">&quot;hit&quot;不是最终的答案，虽然它出现次数更多，但它在禁用单词列表中。</span><br></pre></td></tr></table></figure><h4 id="算法分析-2">算法分析</h4><h5 id="哈希表-2">哈希表</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">mostCommonWord</span><span class="params">(String paragraph, String[] banned)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set = Set.of(banned);</span><br><span class="line">        Map&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        String[] strs = paragraph.toLowerCase().split(<span class="string">&quot;[^A-Za-z]+&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(String key : strs)&#123;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(key))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            map.compute(key, (k,v) -&gt; v == <span class="literal">null</span>? <span class="number">1</span>:v+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">maxKey</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; e : map.entrySet()) &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">                max = value;</span><br><span class="line">                maxKey = e.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="找出两数组的不同"><ahref="https://leetcode.cn/problems/find-the-difference-of-two-arrays/">2215.找出两数组的不同</a></h3><p>给你两个下标从 <code>0</code> 开始的整数数组 <code>nums1</code> 和<code>nums2</code> ，请你返回一个长度为 <code>2</code> 的列表<code>answer</code> ，其中：</p><ul><li><p>answer[0] 是 nums1 中所有 不 存在于 nums2 中的 不同整数组成的列表。</p></li><li><p>answer[1] 是 nums2 中所有 不 存在于 nums1 中的 不同整数组成的列表。</p></li></ul><p><strong>注意：</strong>列表中的整数可以按 <strong>任意</strong>顺序返回。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums1 = [1,2,3], nums2 = [2,4,6]</span><br><span class="line">输出：[[1,3],[4,6]]</span><br><span class="line">解释：</span><br><span class="line">对于 nums1 ，nums1[1] = 2 出现在 nums2 中下标 0 处，然而 nums1[0] = 1 和 nums1[2] = 3 没有出现在 nums2 中。因此，answer[0] = [1,3]。</span><br><span class="line">对于 nums2 ，nums2[0] = 2 出现在 nums1 中下标 1 处，然而 nums2[1] = 4 和 nums2[2] = 6 没有出现在 nums2 中。因此，answer[1] = [4,6]。</span><br></pre></td></tr></table></figure><h4 id="算法分析-3">算法分析</h4><h5 id="双哈希集">双哈希集</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findDifference</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        HashSet&lt;Integer&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; set2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums1)&#123;</span><br><span class="line">            set1.add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums2)&#123;</span><br><span class="line">            set2.add(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; a1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums1)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set2.contains(num))&#123;</span><br><span class="line">                a1.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; a2 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : nums2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set1.contains(num))&#123;</span><br><span class="line">                a2.add(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(a1));</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>(a2));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>set转ArrayList</p><p><code>new ArrayList(Set set);</code></p></li></ul><h3 id="独一无二的出现次数"><ahref="https://leetcode.cn/problems/unique-number-of-occurrences/">1207.独一无二的出现次数</a></h3><p>给你一个整数数组<code>arr</code>，请你帮忙统计数组中每个数的出现次数。</p><p>如果每个数的出现次数都是独一无二的，就返回<code>true</code>；否则返回 <code>false</code>。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [1,2,2,1,1,3]</span><br><span class="line">输出：true</span><br><span class="line">解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 1000</code></li><li><code>-1000 &lt;= arr[i] &lt;= 1000</code></li></ul><h4 id="算法分析-4">算法分析</h4><h5 id="哈希表数组-哈希集">哈希表数组 + 哈希集</h5><p>思路：</p><p>根据提示，哈希表最大长度为2001。利用这个哈希表记录每一个数字出现的次数</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uniqueOccurrences</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2001</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">            hash[num + <span class="number">1000</span>] ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">2001</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash[i] != <span class="number">0</span> &amp;&amp; hashSet.contains(hash[i]))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hashSet.add(hash[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>性能分析：</p><figure><img src="leetcode哈希表题目专项训练/image-20230720105913060.png"alt="image-20230720105913060" /><figcaption aria-hidden="true">image-20230720105913060</figcaption></figure><h5 id="哈希表优化">哈希表优化</h5><p>比较哈希集与哈希表的长度</p><ul><li>后一个循环优化到只遍历hashmap即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">uniqueOccurrences</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> num : arr)&#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; hashSet = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; cnt : map.entrySet()) &#123;</span><br><span class="line">            hashSet.add(cnt.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.size() == hashSet.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快乐数"><ahref="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></h3><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p><p><strong>「快乐数」</strong> 定义为：</p><ul><li>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。</li><li>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong>但始终变不到 1。</li><li>如果这个过程 <strong>结果为</strong> 1，那么这个数就是快乐数。</li></ul><p>如果 <code>n</code> 是 <em>快乐数</em> 就返回 <code>true</code>；不是，则返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 19</span><br><span class="line">输出：true</span><br><span class="line">解释：</span><br><span class="line">1^2 + 9^2 = 82</span><br><span class="line">8^2 + 2^2 = 68</span><br><span class="line">6^2 + 8^2 = 100</span><br><span class="line">1^2 + 0^2 + 0^2 = 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h4 id="哈希集">哈希集</h4><p>本题的关键就是防止无限循环，导致得不出结果，我们选择哈希集去记录每一次计算得到的数值，如果在后来的计算中得到了相同的数值，那么我们就返回false，这是个死循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//防止无限循环</span></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> n;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(c &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                sum += Math.pow(c % <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">                c = c/<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(set.contains(sum))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.add(sum);</span><br><span class="line">            n = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存在重复元素-ii"><ahref="https://leetcode.cn/problems/contains-duplicate-ii/">219.存在重复元素 II</a></h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>，判断数组中是否存在两个 <strong>不同的索引</strong> <code>i</code> 和<code>j</code> ，满足 <code>nums[i] == nums[j]</code> 且<code>abs(i - j) &lt;= k</code> 。如果存在，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1], k = 3</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,0,1,1], k = 1</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,3,1,2,3], k = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h4 id="哈希表-3">哈希表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNearbyDuplicate</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">if</span>(Math.abs(i - map.get(nums[i])) &lt;= k)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中等">中等</h2><h3 id="无重复字符的最长子串"><ahref="https://leetcode.cn/problems/longest-substring-without-repeating-characters/">3.无重复字符的最长子串</a></h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的<strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><h4 id="算法分析-5">算法分析</h4><h5 id="哈希表滑动窗口">哈希表+滑动窗口</h5><p>哈希表去存上一次字符出现的位置。用来更新每一轮的begin。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;<span class="comment">//要利用前一个字符的下标</span></span><br><span class="line">        <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">128</span>];</span><br><span class="line">        Arrays.fill(hash, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(hash[c] != -<span class="number">1</span>)&#123; </span><br><span class="line">                begin = Math.max(hash[c] + <span class="number">1</span>, begin);<span class="comment">//注意begin不能低于现在的begin</span></span><br><span class="line">            &#125;</span><br><span class="line">            hash[c] = i;</span><br><span class="line">            max = Math.max(max, i - begin+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="注意">注意</h6><ul><li><p><strong>begin倒退</strong>：</p><p>像“abba”这样的字符串，中间俩b相同的时候，begin从第二个b开始，然后遇到a，begin会回退到第一个b，这样结果就是3了是错误的。</p><p>所以begin要加限制begin = Math.max(hash[c] + 1, begin);</p></li></ul><h3 id="确定两个字符串是否接近"><ahref="https://leetcode.cn/problems/determine-if-two-strings-are-close/">1657.确定两个字符串是否接近</a></h3><p>如果可以使用以下操作从一个字符串得到另一个字符串，则认为两个字符串<strong>接近</strong> ：</p><ul><li><p>操作 1：交换任意两个 现有 字符。</p><ul><li>例如，abcde -&gt; aecdb</li></ul></li><li><p>操作 2：将一个 <strong>现有</strong> 字符的每次出现转换为另一个<strong>现有</strong> 字符，并对另一个字符执行相同的操作。</p><ul><li>例如，aacabb -&gt; bbcbaa（所有 a 转化为 b ，而所有的 b 转换为 a）</li></ul></li></ul><p>你可以根据需要对任意一个字符串多次使用这两种操作。</p><p>给你两个字符串，<code>word1</code> 和 <code>word2</code> 。如果<code>word1</code> 和 <code>word2</code> <strong>接近</strong> ，就返回<code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;abc&quot;, word2 = &quot;bca&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：2 次操作从 word1 获得 word2 。</span><br><span class="line">执行操作 1：&quot;abc&quot; -&gt; &quot;acb&quot;</span><br><span class="line">执行操作 1：&quot;acb&quot; -&gt; &quot;bca&quot;</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;a&quot;, word2 = &quot;aa&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：不管执行多少次操作，都无法从 word1 得到 word2 ，反之亦然。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：word1 = &quot;cabbba&quot;, word2 = &quot;abbccc&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：3 次操作从 word1 获得 word2 。</span><br><span class="line">执行操作 1：&quot;cabbba&quot; -&gt; &quot;caabbb&quot;</span><br><span class="line">执行操作 2：&quot;caabbb&quot; -&gt; &quot;baaccc&quot;</span><br><span class="line">执行操作 2：&quot;baaccc&quot; -&gt; &quot;abbccc&quot;</span><br></pre></td></tr></table></figure><h4 id="算法分析-6">算法分析</h4><h5 id="哈希集数组哈希表">哈希集+数组哈希表</h5><ol type="1"><li><p>判断有无其它字符出现</p><p>根据操作2的提示，字符的转换不是乱转的，只能转现有的字符，那我们先利用哈希集判断两个字符串中出现的字母是否有不重复的，如果有直接返回false，这是不能转换的。</p></li><li><p>排序哈希表，一一对比</p><p>然后再通过数组的哈希表记录字符出现的次数，然后排序一一对比。</p><ul><li>为什么要一一对比：因为操作2的转换，是针对某一个字符，这个字符出现x次，转换的时候这x个字母都要转换过去。</li></ul></li></ol><p>那这样每个字符串的<strong>每个字符的出现次数的可能情况</strong>也必须记录一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">closeStrings</span><span class="params">(String word1, String word2)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] hash1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="type">int</span>[] hash2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        Set&lt;Character&gt; set1 = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word1.length(); i++)&#123;</span><br><span class="line">            set1.add(word1.charAt(i));</span><br><span class="line">            hash1[word1.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; word2.length(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set1.contains(word2.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            hash2[word2.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(hash1);</span><br><span class="line">        Arrays.sort(hash2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(hash1[i] != hash2[i])&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相等行列对"><ahref="https://leetcode.cn/problems/equal-row-and-column-pairs/">2352.相等行列对</a></h3><p>给你一个下标从 <strong>0</strong> 开始、大小为 <code>n x n</code>的整数矩阵 <code>grid</code> ，返回满足 <code>Ri</code> 行和<code>Cj</code> 列相等的行列对 <code>(Ri, Cj)</code>的数目<em>。</em></p><p>如果行和列以相同的顺序包含相同的元素（即相等的数组），则认为二者是相等的。</p><p><strong>示例 1：</strong></p><figure><img src="leetcode哈希表题目专项训练/ex1.jpg" alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = [[3,2,1],[1,7,6],[2,7,7]]</span><br><span class="line">输出：1</span><br><span class="line">解释：存在一对相等行列对：</span><br><span class="line">- (第 2 行，第 1 列)：[2,7,7]</span><br></pre></td></tr></table></figure><h4 id="算法分析-7">算法分析</h4><h5 id="隐式哈希表">隐式哈希表</h5><p>我们把grid当成哈希表，然后循环遍历每一列，将每一列和每一行对比，完全相同就记录下来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">equalPairs</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        <span class="comment">//当前遍历的列</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//当前比对的哈希表(grid)的行</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(col &lt; grid[<span class="number">0</span>].length)&#123;</span><br><span class="line">            <span class="comment">//当前遍历的列的行</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">row</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(row &lt; grid.length &amp;&amp; grid[row][col] == grid[i][row])&#123;</span><br><span class="line">                row++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果说成功遍历到这一列的结尾（最后一个元素也相同）则说明这一列和其中某一行相同。</span></span><br><span class="line">            <span class="keyword">if</span>(row == grid.length)&#123;</span><br><span class="line">                ans++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="comment">//因为一列要和三行比，所以i到3的时候就是比完这一轮了，那就进行下一列的比较</span></span><br><span class="line">            <span class="keyword">if</span>(i == grid.length)&#123;</span><br><span class="line">                i = <span class="number">0</span>;</span><br><span class="line">                col++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字母异位词分组"><ahref="https://leetcode.cn/problems/group-anagrams/">49.字母异位词分组</a></h3><p>给你一个字符串数组，请你将 <strong>字母异位词</strong>组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong>是由重新排列源单词的所有字母得到的一个新单词。</p><p><strong>示例 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><h4 id="哈希表-字典-自定义构建hashkey">哈希表 + 字典 +自定义构建hashKey</h4><p>字典存每个字符串的字符出现个数，一个字符串配对一个字典，由于这个字典的顺序是固定的，因此，我们构建key的时候就是按字母表顺序构建。key格式： a3b2d5</p><p>然后我们的总哈希表，每个key对应一个集合，表示这个集合中的元素的每个字符出现的次数所构建的key。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">        Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">            <span class="type">int</span>[] hash = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">                hash[c - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(hash[i] != <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="comment">//本来就是字母表顺序，所以添加的时候不必排序</span></span><br><span class="line">                    sb.append((<span class="type">char</span>) (<span class="string">&#x27;a&#x27;</span> + i));</span><br><span class="line">                    sb.append(hash[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">            List&lt;String&gt; list = map.getOrDefault(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">            list.add(str);</span><br><span class="line">            map.put(key, list);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最长连续序列"><ahref="https://leetcode.cn/problems/longest-consecutive-sequence/">128.最长连续序列</a></h3><p>给定一个未排序的整数数组 <code>nums</code>，找出数字连续的最长序列（不要求序列元素在原数组中连续）的长度。</p><p>请你设计并实现时间复杂度为 <code>O(n)</code> 的算法解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [100,4,200,1,3,2]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长数字连续序列是 [1, 2, 3, 4]。它的长度为 4。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [0,3,7,2,5,8,4,6,0,1]</span><br><span class="line">输出：9</span><br></pre></td></tr></table></figure><h4 id="哈希集-1">哈希集</h4><p>有点类似并查集的搜索了，把全部num放到哈希集里，然后循环遍历每一个元素，去对这个元素不断++然后判断是否在哈希集里来得到结果。</p><p>本题的亮点在于如何去重：</p><p>假如遍历的元素cur，cur-1存在于这个哈希集中，那说明，这个值只是一段连续序列的中间值，它不是开头的值，可以不必计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestConsecutive</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            set.add(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : set) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!set.contains(integer - <span class="number">1</span>))&#123;<span class="comment">//剪枝操作</span></span><br><span class="line">                <span class="keyword">while</span>(set.contains(++integer)) count++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(count, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;哈希表使用技巧&quot;&gt;哈希表使用技巧&lt;/h2&gt;
&lt;h3 id=&quot;数组&quot;&gt;数组&lt;/h3&gt;
&lt;p&gt;下标作为hash值，值自定义。&lt;/p&gt;
&lt;p&gt;一般对于英文字母都是：&lt;code&gt;new int[26]&lt;/code&gt;，&lt;code&gt;&#39;字符&#39; - &#39;a&#39;&lt;/code&gt;作为</summary>
      
    
    
    
    <category term="leetcode" scheme="https://vlsmhd.github.io/categories/leetcode/"/>
    
    <category term="哈希表" scheme="https://vlsmhd.github.io/categories/leetcode/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="https://vlsmhd.github.io/2023/07/05/Nginx/"/>
    <id>https://vlsmhd.github.io/2023/07/05/Nginx/</id>
    <published>2023-07-05T06:54:12.757Z</published>
    <updated>2023-07-05T09:16:55.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见使用问题">常见使用问题</h1><h2 id="openevent">OpenEvent</h2><p>OpenEvent("Global_reload_13956") failed (2: The system cannot findthe file specified)</p><ul><li>原因：nginx没启动就使用nginx -s reload</li></ul><h2 id="nginx进程过多">nginx进程过多</h2><h4 id="section"></h4><p>写工大头条项目的时候，自媒体端怎么都登不进去，后端测试也正常，怀疑是nginx出的问题，果不其然。</p><p><strong>原因：</strong>进程运行太久，太多，缓存过多。</p><p><strong>解决：</strong></p><p>打开windows资源管理器，把所有nginx的进程关了 重开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见使用问题&quot;&gt;常见使用问题&lt;/h1&gt;
&lt;h2 id=&quot;openevent&quot;&gt;OpenEvent&lt;/h2&gt;
&lt;p&gt;OpenEvent(&quot;Global_reload_13956&quot;) failed (2: The system cannot find
the f</summary>
      
    
    
    
    <category term="服务器技术" scheme="https://vlsmhd.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Nginx" scheme="https://vlsmhd.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%80%E6%9C%AF/Nginx/"/>
    
    
  </entry>
  
  <entry>
    <title>对象存储服务MinIO</title>
    <link href="https://vlsmhd.github.io/2023/07/03/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1MinIO/"/>
    <id>https://vlsmhd.github.io/2023/07/03/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1MinIO/</id>
    <published>2023-07-03T08:23:53.203Z</published>
    <updated>2023-08-08T14:32:51.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="minio简介">MinIO简介</h1><p>MinIO基于Apache Licensev2.0开源协议的对象存储服务，可以做为云存储的解决方案用来保存海量的图片，视频，文档。由于采用Golang实现，服务端可以工作在Windows,Linux,OSX和FreeBSD上。配置简单，基本是复制可执行程序，单行命令可以运行起来。</p><p>MinIO兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p><p><strong>S3 （ Simple Storage Service简单存储服务）</strong></p><p>基本概念</p><ul><li>bucket – 类比于文件系统的目录</li><li>Object – 类比文件系统的文件</li><li>Keys – 类比文件名</li></ul><p>官网文档：http://docs.minio.org.cn/docs/</p><h2 id="minio特点">MinIO特点</h2><ul><li><p>数据保护</p><p>Minio使用Minio ErasureCode（纠删码）来防止硬件故障。即便损坏一半以上的driver，但是仍然可以从中恢复。</p></li><li><p>高性能</p><p>作为高性能对象存储，在标准硬件条件下它能达到55GB/s的读、35GB/s的写速率</p></li><li><p>可扩容</p><p>不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并跨越多个数据中心</p></li><li><p>SDK支持</p><p>基于Minio轻量的特点，它得到类似Java、Python或Go等语言的sdk支持</p></li><li><p>有操作页面</p><p>面向用户友好的简单操作界面，非常方便的管理Bucket及里面的文件资源</p></li><li><p>功能简单</p><p>这一设计原则让MinIO不容易出错、更快启动</p></li><li><p>丰富的API</p><p>支持文件资源的分享连接及分享链接的过期策略、存储桶操作、文件列表访问及文件上传下载的基本功能等。</p></li><li><p>文件变化主动通知</p><p>存储桶（Bucket）如果发生改变,比如上传对象和删除对象，可以使用存储桶事件通知机制进行监控，并通过以下方式发布出去:AMQP、MQTT、Elasticsearch、Redis、NATS、MySQL、Kafka、Webhooks等。</p></li></ul><h2 id="开箱使用">开箱使用</h2><h3 id="docker安装与启动">docker安装与启动</h3><p>安装稳定版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio:RELEASE.2021-06-17T00-10-46Z-28-gac7697426</span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9000:9000 --name minio\</span><br><span class="line">  -e &quot;MINIO_ACCESS_KEY=admin&quot; \</span><br><span class="line">  -e &quot;MINIO_SECRET_KEY=admin321&quot; \</span><br><span class="line">  -v /usr/local/minio/data:/data \</span><br><span class="line">  -v /usr/local/minio/config:/root/.minio \</span><br><span class="line">  minio/minio:RELEASE.2021-06-17T00-10-46Z server /data</span><br></pre></td></tr></table></figure><p>指定的文件存放路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/minio/data // 数据卷存放路径（自行添加）</span><br><span class="line">/usr/local/minio/config //服务配置文件（自行添加）</span><br></pre></td></tr></table></figure><p>后台运行：</p><p>run后面加上-d</p><p>个人地址：</p><p><a href="http://192.168.200.129:9000/minio/tiktok/">MinIOBrowser</a></p><p>黑马地址：</p><p>我们提供的镜像中已经有minio的环境</p><p>我们可以使用docker进行环境部署和启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-p</span> <span class="number">9000</span><span class="string">:9000</span> <span class="string">--name</span> <span class="string">minio</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">-e</span> <span class="string">&quot;MINIO_ACCESS_KEY=minio&quot;</span> <span class="string">-e</span> <span class="string">&quot;MINIO_SECRET_KEY=minio123&quot;</span> <span class="string">-v</span> <span class="string">/home/data:/data</span> <span class="string">-v</span> <span class="string">/home/config:/root/.minio</span> <span class="string">minio/minio</span> <span class="string">server</span> <span class="string">/data</span></span><br></pre></td></tr></table></figure><h4 id="管理控制台">管理控制台</h4><p>假设服务器地址为http://192.168.200.130:9000，在地址栏输入：http://192.168.200.130:9000/即可进入登录界面。</p><figure><img src="对象存储服务MinIO/image-20210417102204739.png"alt="image-20210417102204739" /><figcaption aria-hidden="true">image-20210417102204739</figcaption></figure><p>Access Key为 minio Secret_key 为 minio123进入系统后可以看到主界面</p><figure><img src="对象存储服务MinIO/image-20210417102356582.png"alt="image-20210417102356582" /><figcaption aria-hidden="true">image-20210417102356582</figcaption></figure><p>点击右下角的“+”号 ，点击下面的图标，创建一个桶</p><figure><img src="对象存储服务MinIO/image-20210417102435088.png"alt="image-20210417102435088" /><figcaption aria-hidden="true">image-20210417102435088</figcaption></figure><ol type="1"><li></li></ol><h3 id="java使用minio快速入门">java使用minIO快速入门</h3><h4 id="创建工程导入pom依赖">3.4.1 创建工程，导入pom依赖</h4><p>创建minio-demo,对应pom如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>heima-leadnews-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.heima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio-demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引导类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.minio;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MinIOApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类，上传html文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.minio.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOTest</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            fileInputStream =  <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\list.html&quot;</span>);;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.创建minio链接客户端</span></span><br><span class="line">            <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder().credentials(<span class="string">&quot;minio&quot;</span>, <span class="string">&quot;minio123&quot;</span>).endpoint(<span class="string">&quot;http://192.168.200.130:9000&quot;</span>).build();</span><br><span class="line">            <span class="comment">//2.上传</span></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(<span class="string">&quot;list.html&quot;</span>)<span class="comment">//文件名</span></span><br><span class="line">                    .contentType(<span class="string">&quot;text/html&quot;</span>)<span class="comment">//文件类型</span></span><br><span class="line">                    .bucket(<span class="string">&quot;leadnews&quot;</span>)<span class="comment">//桶名词  与minio创建的名词一致</span></span><br><span class="line">                    .stream(fileInputStream, fileInputStream.available(), -<span class="number">1</span>) <span class="comment">//文件流</span></span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;http://192.168.200.130:9000/leadnews/ak47.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装minio为starter">3.5 封装MinIO为starter</h3><h4 id="创建模块heima-file-starter">3.5.1创建模块heima-file-starter</h4><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置类">3.5.2 配置类</h4><p>MinIOConfigProperties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span>  <span class="comment">// 文件上传 配置前缀file.oss</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOConfigProperties</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="keyword">private</span> String readPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MinIOConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.file.service.FileStorageService;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.condition.ConditionalOnClass;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;MinIOConfigProperties.class&#125;)</span></span><br><span class="line"><span class="comment">//当引入FileStorageService接口时</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(FileStorageService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MinIOConfigProperties minIOConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">buildMinioClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient</span><br><span class="line">                .builder()</span><br><span class="line">                .credentials(minIOConfigProperties.getAccessKey(), minIOConfigProperties.getSecretKey())</span><br><span class="line">                .endpoint(minIOConfigProperties.getEndpoint())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装操作minio类">3.5.3 封装操作minIO类</h4><p>FileStorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> itheima</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">FileStorageService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传图片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImgFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传html文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename   文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream  文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadHtmlFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String pathUrl)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[]  downLoadFile(String pathUrl);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MinIOFileStorageService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.file.service.impl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.file.config.MinIOConfig;</span><br><span class="line"><span class="keyword">import</span> com.heima.file.config.MinIOConfigProperties;</span><br><span class="line"><span class="keyword">import</span> com.heima.file.service.FileStorageService;</span><br><span class="line"><span class="keyword">import</span> io.minio.GetObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.RemoveObjectArgs;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MinIOConfigProperties.class)</span></span><br><span class="line"><span class="meta">@Import(MinIOConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOFileStorageService</span> <span class="keyword">implements</span> <span class="title class_">FileStorageService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinIOConfigProperties minIOConfigProperties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">separator</span> <span class="operator">=</span> <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dirPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  yyyy/mm/dd/file.jpg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">builderFilePath</span><span class="params">(String dirPath,String filename)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">50</span>);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(dirPath))&#123;</span><br><span class="line">            stringBuilder.append(dirPath).append(separator);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy/MM/dd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">todayStr</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        stringBuilder.append(todayStr).append(separator);</span><br><span class="line">        stringBuilder.append(filename);</span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传图片文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename  文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadImgFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> builderFilePath(prefix, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(filePath)</span><br><span class="line">                    .contentType(<span class="string">&quot;image/jpg&quot;</span>)</span><br><span class="line">                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="number">1</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">urlPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());</span><br><span class="line">            urlPath.append(separator+minIOConfigProperties.getBucket());</span><br><span class="line">            urlPath.append(separator);</span><br><span class="line">            urlPath.append(filePath);</span><br><span class="line">            <span class="keyword">return</span> urlPath.toString();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio put file error.&quot;</span>,ex);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  上传html文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix  文件前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename   文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream  文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadHtmlFile</span><span class="params">(String prefix, String filename,InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> builderFilePath(prefix, filename);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .object(filePath)</span><br><span class="line">                    .contentType(<span class="string">&quot;text/html&quot;</span>)</span><br><span class="line">                    .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-<span class="number">1</span>)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">urlPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(minIOConfigProperties.getReadPath());</span><br><span class="line">            urlPath.append(separator+minIOConfigProperties.getBucket());</span><br><span class="line">            urlPath.append(separator);</span><br><span class="line">            urlPath.append(filePath);</span><br><span class="line">            <span class="keyword">return</span> urlPath.toString();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio put file error.&quot;</span>,ex);</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传文件失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String pathUrl)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.indexOf(separator);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> key.substring(<span class="number">0</span>,index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> key.substring(index+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 删除Objects</span></span><br><span class="line">        <span class="type">RemoveObjectArgs</span> <span class="variable">removeObjectArgs</span> <span class="operator">=</span> RemoveObjectArgs.builder().bucket(bucket).object(filePath).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeObject(removeObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio remove file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pathUrl  文件全路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  文件流</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] downLoadFile(String pathUrl)  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pathUrl.replace(minIOConfigProperties.getEndpoint()+<span class="string">&quot;/&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> key.indexOf(separator);</span><br><span class="line">        <span class="type">String</span> <span class="variable">bucket</span> <span class="operator">=</span> key.substring(<span class="number">0</span>,index);</span><br><span class="line">        <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> key.substring(index+<span class="number">1</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;minio down file error.  pathUrl:&#123;&#125;&quot;</span>,pathUrl);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">rc</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((rc = inputStream.read(buff, <span class="number">0</span>, <span class="number">100</span>)) &gt; <span class="number">0</span>)) <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            byteArrayOutputStream.write(buff, <span class="number">0</span>, rc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对外加入自动配置">3.5.4 对外加入自动配置</h4><p>在resources中新建<code>META-INF/spring.factories</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.heima.file.service.impl.MinIOFileStorageService</span><br></pre></td></tr></table></figure><h4 id="其他微服务使用">3.5.5 其他微服务使用</h4><p>第一，导入heima-file-starter的依赖</p><p>第二，在微服务中添加minio所需要的配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minio</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">minio123</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">leadnews</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://192.168.200.130:9000</span></span><br><span class="line">  <span class="attr">readPath:</span> <span class="string">http://192.168.200.130:9000</span></span><br></pre></td></tr></table></figure><p>第三，在对应使用的业务类中注入FileStorageService，样例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.minio.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.heima.file.service.FileStorageService;</span><br><span class="line"><span class="keyword">import</span> com.heima.minio.MinioApplication;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = MinioApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileStorageService fileStorageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateImgFile</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;E:\\tmp\\ak47.jpg&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> fileStorageService.uploadImgFile(<span class="string">&quot;&quot;</span>, <span class="string">&quot;ak47.jpg&quot;</span>, fileInputStream);</span><br><span class="line">            System.out.println(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="min进阶">Min进阶</h1><h2 id="关于ssl">关于SSL</h2><p>关闭SSL连接，这样就不会走<strong>证书认证</strong>。从客户端（go，java）发出向自己本地的minIO服务，不能开SSL，不然回环测试都通过不了。</p><ul><li>开了SSL：协议走https，加密安全协议</li><li>不开SSL：走普通http协议</li></ul><h3 id="启动https访问">启动https访问</h3><ol type="1"><li><p>配置SSL证书</p><ol type="1"><li>可以使用命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout minio.key -out minio.crt</span><br></pre></td></tr></table></figure><p>在当前目录下生成文件</p><ol start="2" type="1"><li>利用阿里云</li></ol></li><li><p>私钥重命名为<strong>private.key</strong>证书重命名为<strong>public.crt</strong></p></li><li><p>证书放入<strong>root/.minio/certs文件</strong>夹中</p><p>如果是docker里的，看数据卷的位置，文件夹里也会有certs文件夹</p></li></ol><p>目录层级这样放：</p><figure><img src="对象存储服务MinIO/image-20230808223103596.png"alt="image-20230808223103596" /><figcaption aria-hidden="true">image-20230808223103596</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;minio简介&quot;&gt;MinIO简介&lt;/h1&gt;
&lt;p&gt;MinIO基于Apache License
v2.0开源协议的对象存储服务，可以做为云存储的解决方案用来保存海量的图片，视频，文档。由于采用Golang实现，服务端可以工作在Windows,Linux,
OS</summary>
      
    
    
    
    <category term="对象存储服务" scheme="https://vlsmhd.github.io/categories/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/"/>
    
    
  </entry>
  
</feed>
